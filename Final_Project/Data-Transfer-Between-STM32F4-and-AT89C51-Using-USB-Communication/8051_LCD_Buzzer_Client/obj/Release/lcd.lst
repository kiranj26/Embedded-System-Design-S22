                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcd
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _print_author
                                     12 	.globl _handle_newuser_custom_char
                                     13 	.globl _handle_unlock_custom_char
                                     14 	.globl _handle_lock_custom_char
                                     15 	.globl _handle_sadsmiley_custom_char
                                     16 	.globl _handle_cu_custom_char
                                     17 	.globl _handler_custom_char
                                     18 	.globl _create_custom_char
                                     19 	.globl _get_hex_value
                                     20 	.globl _handler_lcd_hexdump
                                     21 	.globl _read_lcd_address
                                     22 	.globl _handler_reset_time
                                     23 	.globl _handler_resume_time
                                     24 	.globl _handler_stop_time
                                     25 	.globl _handler_lcdgotoaddress
                                     26 	.globl _handler_lcdgotoxy
                                     27 	.globl _handler_wr_str_lcd
                                     28 	.globl _handler_wr_c_lcd
                                     29 	.globl _handler_lcdclear
                                     30 	.globl _lcdputstr
                                     31 	.globl _lcdputch
                                     32 	.globl _lcdgotoxy
                                     33 	.globl _lcdgotoaddr
                                     34 	.globl _get_cursor_address
                                     35 	.globl _init_lcd
                                     36 	.globl _set_time_variables
                                     37 	.globl _lcdbusywait
                                     38 	.globl _delay
                                     39 	.globl _putchar
                                     40 	.globl _getchar
                                     41 	.globl _strtol
                                     42 	.globl _printf_tiny
                                     43 	.globl _printf
                                     44 	.globl _toupper
                                     45 	.globl _P5_7
                                     46 	.globl _P5_6
                                     47 	.globl _P5_5
                                     48 	.globl _P5_4
                                     49 	.globl _P5_3
                                     50 	.globl _P5_2
                                     51 	.globl _P5_1
                                     52 	.globl _P5_0
                                     53 	.globl _P4_7
                                     54 	.globl _P4_6
                                     55 	.globl _P4_5
                                     56 	.globl _P4_4
                                     57 	.globl _P4_3
                                     58 	.globl _P4_2
                                     59 	.globl _P4_1
                                     60 	.globl _P4_0
                                     61 	.globl _PX0L
                                     62 	.globl _PT0L
                                     63 	.globl _PX1L
                                     64 	.globl _PT1L
                                     65 	.globl _PSL
                                     66 	.globl _PT2L
                                     67 	.globl _PPCL
                                     68 	.globl _EC
                                     69 	.globl _CCF0
                                     70 	.globl _CCF1
                                     71 	.globl _CCF2
                                     72 	.globl _CCF3
                                     73 	.globl _CCF4
                                     74 	.globl _CR
                                     75 	.globl _CF
                                     76 	.globl _TF2
                                     77 	.globl _EXF2
                                     78 	.globl _RCLK
                                     79 	.globl _TCLK
                                     80 	.globl _EXEN2
                                     81 	.globl _TR2
                                     82 	.globl _C_T2
                                     83 	.globl _CP_RL2
                                     84 	.globl _T2CON_7
                                     85 	.globl _T2CON_6
                                     86 	.globl _T2CON_5
                                     87 	.globl _T2CON_4
                                     88 	.globl _T2CON_3
                                     89 	.globl _T2CON_2
                                     90 	.globl _T2CON_1
                                     91 	.globl _T2CON_0
                                     92 	.globl _PT2
                                     93 	.globl _ET2
                                     94 	.globl _CY
                                     95 	.globl _AC
                                     96 	.globl _F0
                                     97 	.globl _RS1
                                     98 	.globl _RS0
                                     99 	.globl _OV
                                    100 	.globl _F1
                                    101 	.globl _P
                                    102 	.globl _PS
                                    103 	.globl _PT1
                                    104 	.globl _PX1
                                    105 	.globl _PT0
                                    106 	.globl _PX0
                                    107 	.globl _RD
                                    108 	.globl _WR
                                    109 	.globl _T1
                                    110 	.globl _T0
                                    111 	.globl _INT1
                                    112 	.globl _INT0
                                    113 	.globl _TXD
                                    114 	.globl _RXD
                                    115 	.globl _P3_7
                                    116 	.globl _P3_6
                                    117 	.globl _P3_5
                                    118 	.globl _P3_4
                                    119 	.globl _P3_3
                                    120 	.globl _P3_2
                                    121 	.globl _P3_1
                                    122 	.globl _P3_0
                                    123 	.globl _EA
                                    124 	.globl _ES
                                    125 	.globl _ET1
                                    126 	.globl _EX1
                                    127 	.globl _ET0
                                    128 	.globl _EX0
                                    129 	.globl _P2_7
                                    130 	.globl _P2_6
                                    131 	.globl _P2_5
                                    132 	.globl _P2_4
                                    133 	.globl _P2_3
                                    134 	.globl _P2_2
                                    135 	.globl _P2_1
                                    136 	.globl _P2_0
                                    137 	.globl _SM0
                                    138 	.globl _SM1
                                    139 	.globl _SM2
                                    140 	.globl _REN
                                    141 	.globl _TB8
                                    142 	.globl _RB8
                                    143 	.globl _TI
                                    144 	.globl _RI
                                    145 	.globl _P1_7
                                    146 	.globl _P1_6
                                    147 	.globl _P1_5
                                    148 	.globl _P1_4
                                    149 	.globl _P1_3
                                    150 	.globl _P1_2
                                    151 	.globl _P1_1
                                    152 	.globl _P1_0
                                    153 	.globl _TF1
                                    154 	.globl _TR1
                                    155 	.globl _TF0
                                    156 	.globl _TR0
                                    157 	.globl _IE1
                                    158 	.globl _IT1
                                    159 	.globl _IE0
                                    160 	.globl _IT0
                                    161 	.globl _P0_7
                                    162 	.globl _P0_6
                                    163 	.globl _P0_5
                                    164 	.globl _P0_4
                                    165 	.globl _P0_3
                                    166 	.globl _P0_2
                                    167 	.globl _P0_1
                                    168 	.globl _P0_0
                                    169 	.globl _EECON
                                    170 	.globl _KBF
                                    171 	.globl _KBE
                                    172 	.globl _KBLS
                                    173 	.globl _BRL
                                    174 	.globl _BDRCON
                                    175 	.globl _T2MOD
                                    176 	.globl _SPDAT
                                    177 	.globl _SPSTA
                                    178 	.globl _SPCON
                                    179 	.globl _SADEN
                                    180 	.globl _SADDR
                                    181 	.globl _WDTPRG
                                    182 	.globl _WDTRST
                                    183 	.globl _P5
                                    184 	.globl _P4
                                    185 	.globl _IPH1
                                    186 	.globl _IPL1
                                    187 	.globl _IPH0
                                    188 	.globl _IPL0
                                    189 	.globl _IEN1
                                    190 	.globl _IEN0
                                    191 	.globl _CMOD
                                    192 	.globl _CL
                                    193 	.globl _CH
                                    194 	.globl _CCON
                                    195 	.globl _CCAPM4
                                    196 	.globl _CCAPM3
                                    197 	.globl _CCAPM2
                                    198 	.globl _CCAPM1
                                    199 	.globl _CCAPM0
                                    200 	.globl _CCAP4L
                                    201 	.globl _CCAP3L
                                    202 	.globl _CCAP2L
                                    203 	.globl _CCAP1L
                                    204 	.globl _CCAP0L
                                    205 	.globl _CCAP4H
                                    206 	.globl _CCAP3H
                                    207 	.globl _CCAP2H
                                    208 	.globl _CCAP1H
                                    209 	.globl _CCAP0H
                                    210 	.globl _CKCON1
                                    211 	.globl _CKCON0
                                    212 	.globl _CKRL
                                    213 	.globl _AUXR1
                                    214 	.globl _AUXR
                                    215 	.globl _TH2
                                    216 	.globl _TL2
                                    217 	.globl _RCAP2H
                                    218 	.globl _RCAP2L
                                    219 	.globl _T2CON
                                    220 	.globl _B
                                    221 	.globl _ACC
                                    222 	.globl _PSW
                                    223 	.globl _IP
                                    224 	.globl _P3
                                    225 	.globl _IE
                                    226 	.globl _P2
                                    227 	.globl _SBUF
                                    228 	.globl _SCON
                                    229 	.globl _P1
                                    230 	.globl _TH1
                                    231 	.globl _TH0
                                    232 	.globl _TL1
                                    233 	.globl _TL0
                                    234 	.globl _TMOD
                                    235 	.globl _TCON
                                    236 	.globl _PCON
                                    237 	.globl _DPH
                                    238 	.globl _DPL
                                    239 	.globl _SP
                                    240 	.globl _P0
                                    241 	.globl _save_cursor_address
                                    242 	.globl _create_custom_char_PARM_2
                                    243 	.globl _read_lcd_address_PARM_2
                                    244 	.globl _lcdgotoxy_PARM_2
                                    245 	.globl _string
                                    246 	.globl _lcd_ptr
                                    247 ;--------------------------------------------------------
                                    248 ; special function registers
                                    249 ;--------------------------------------------------------
                                    250 	.area RSEG    (ABS,DATA)
      000000                        251 	.org 0x0000
                           000080   252 _P0	=	0x0080
                           000081   253 _SP	=	0x0081
                           000082   254 _DPL	=	0x0082
                           000083   255 _DPH	=	0x0083
                           000087   256 _PCON	=	0x0087
                           000088   257 _TCON	=	0x0088
                           000089   258 _TMOD	=	0x0089
                           00008A   259 _TL0	=	0x008a
                           00008B   260 _TL1	=	0x008b
                           00008C   261 _TH0	=	0x008c
                           00008D   262 _TH1	=	0x008d
                           000090   263 _P1	=	0x0090
                           000098   264 _SCON	=	0x0098
                           000099   265 _SBUF	=	0x0099
                           0000A0   266 _P2	=	0x00a0
                           0000A8   267 _IE	=	0x00a8
                           0000B0   268 _P3	=	0x00b0
                           0000B8   269 _IP	=	0x00b8
                           0000D0   270 _PSW	=	0x00d0
                           0000E0   271 _ACC	=	0x00e0
                           0000F0   272 _B	=	0x00f0
                           0000C8   273 _T2CON	=	0x00c8
                           0000CA   274 _RCAP2L	=	0x00ca
                           0000CB   275 _RCAP2H	=	0x00cb
                           0000CC   276 _TL2	=	0x00cc
                           0000CD   277 _TH2	=	0x00cd
                           00008E   278 _AUXR	=	0x008e
                           0000A2   279 _AUXR1	=	0x00a2
                           000097   280 _CKRL	=	0x0097
                           00008F   281 _CKCON0	=	0x008f
                           0000AF   282 _CKCON1	=	0x00af
                           0000FA   283 _CCAP0H	=	0x00fa
                           0000FB   284 _CCAP1H	=	0x00fb
                           0000FC   285 _CCAP2H	=	0x00fc
                           0000FD   286 _CCAP3H	=	0x00fd
                           0000FE   287 _CCAP4H	=	0x00fe
                           0000EA   288 _CCAP0L	=	0x00ea
                           0000EB   289 _CCAP1L	=	0x00eb
                           0000EC   290 _CCAP2L	=	0x00ec
                           0000ED   291 _CCAP3L	=	0x00ed
                           0000EE   292 _CCAP4L	=	0x00ee
                           0000DA   293 _CCAPM0	=	0x00da
                           0000DB   294 _CCAPM1	=	0x00db
                           0000DC   295 _CCAPM2	=	0x00dc
                           0000DD   296 _CCAPM3	=	0x00dd
                           0000DE   297 _CCAPM4	=	0x00de
                           0000D8   298 _CCON	=	0x00d8
                           0000F9   299 _CH	=	0x00f9
                           0000E9   300 _CL	=	0x00e9
                           0000D9   301 _CMOD	=	0x00d9
                           0000A8   302 _IEN0	=	0x00a8
                           0000B1   303 _IEN1	=	0x00b1
                           0000B8   304 _IPL0	=	0x00b8
                           0000B7   305 _IPH0	=	0x00b7
                           0000B2   306 _IPL1	=	0x00b2
                           0000B3   307 _IPH1	=	0x00b3
                           0000C0   308 _P4	=	0x00c0
                           0000E8   309 _P5	=	0x00e8
                           0000A6   310 _WDTRST	=	0x00a6
                           0000A7   311 _WDTPRG	=	0x00a7
                           0000A9   312 _SADDR	=	0x00a9
                           0000B9   313 _SADEN	=	0x00b9
                           0000C3   314 _SPCON	=	0x00c3
                           0000C4   315 _SPSTA	=	0x00c4
                           0000C5   316 _SPDAT	=	0x00c5
                           0000C9   317 _T2MOD	=	0x00c9
                           00009B   318 _BDRCON	=	0x009b
                           00009A   319 _BRL	=	0x009a
                           00009C   320 _KBLS	=	0x009c
                           00009D   321 _KBE	=	0x009d
                           00009E   322 _KBF	=	0x009e
                           0000D2   323 _EECON	=	0x00d2
                                    324 ;--------------------------------------------------------
                                    325 ; special function bits
                                    326 ;--------------------------------------------------------
                                    327 	.area RSEG    (ABS,DATA)
      000000                        328 	.org 0x0000
                           000080   329 _P0_0	=	0x0080
                           000081   330 _P0_1	=	0x0081
                           000082   331 _P0_2	=	0x0082
                           000083   332 _P0_3	=	0x0083
                           000084   333 _P0_4	=	0x0084
                           000085   334 _P0_5	=	0x0085
                           000086   335 _P0_6	=	0x0086
                           000087   336 _P0_7	=	0x0087
                           000088   337 _IT0	=	0x0088
                           000089   338 _IE0	=	0x0089
                           00008A   339 _IT1	=	0x008a
                           00008B   340 _IE1	=	0x008b
                           00008C   341 _TR0	=	0x008c
                           00008D   342 _TF0	=	0x008d
                           00008E   343 _TR1	=	0x008e
                           00008F   344 _TF1	=	0x008f
                           000090   345 _P1_0	=	0x0090
                           000091   346 _P1_1	=	0x0091
                           000092   347 _P1_2	=	0x0092
                           000093   348 _P1_3	=	0x0093
                           000094   349 _P1_4	=	0x0094
                           000095   350 _P1_5	=	0x0095
                           000096   351 _P1_6	=	0x0096
                           000097   352 _P1_7	=	0x0097
                           000098   353 _RI	=	0x0098
                           000099   354 _TI	=	0x0099
                           00009A   355 _RB8	=	0x009a
                           00009B   356 _TB8	=	0x009b
                           00009C   357 _REN	=	0x009c
                           00009D   358 _SM2	=	0x009d
                           00009E   359 _SM1	=	0x009e
                           00009F   360 _SM0	=	0x009f
                           0000A0   361 _P2_0	=	0x00a0
                           0000A1   362 _P2_1	=	0x00a1
                           0000A2   363 _P2_2	=	0x00a2
                           0000A3   364 _P2_3	=	0x00a3
                           0000A4   365 _P2_4	=	0x00a4
                           0000A5   366 _P2_5	=	0x00a5
                           0000A6   367 _P2_6	=	0x00a6
                           0000A7   368 _P2_7	=	0x00a7
                           0000A8   369 _EX0	=	0x00a8
                           0000A9   370 _ET0	=	0x00a9
                           0000AA   371 _EX1	=	0x00aa
                           0000AB   372 _ET1	=	0x00ab
                           0000AC   373 _ES	=	0x00ac
                           0000AF   374 _EA	=	0x00af
                           0000B0   375 _P3_0	=	0x00b0
                           0000B1   376 _P3_1	=	0x00b1
                           0000B2   377 _P3_2	=	0x00b2
                           0000B3   378 _P3_3	=	0x00b3
                           0000B4   379 _P3_4	=	0x00b4
                           0000B5   380 _P3_5	=	0x00b5
                           0000B6   381 _P3_6	=	0x00b6
                           0000B7   382 _P3_7	=	0x00b7
                           0000B0   383 _RXD	=	0x00b0
                           0000B1   384 _TXD	=	0x00b1
                           0000B2   385 _INT0	=	0x00b2
                           0000B3   386 _INT1	=	0x00b3
                           0000B4   387 _T0	=	0x00b4
                           0000B5   388 _T1	=	0x00b5
                           0000B6   389 _WR	=	0x00b6
                           0000B7   390 _RD	=	0x00b7
                           0000B8   391 _PX0	=	0x00b8
                           0000B9   392 _PT0	=	0x00b9
                           0000BA   393 _PX1	=	0x00ba
                           0000BB   394 _PT1	=	0x00bb
                           0000BC   395 _PS	=	0x00bc
                           0000D0   396 _P	=	0x00d0
                           0000D1   397 _F1	=	0x00d1
                           0000D2   398 _OV	=	0x00d2
                           0000D3   399 _RS0	=	0x00d3
                           0000D4   400 _RS1	=	0x00d4
                           0000D5   401 _F0	=	0x00d5
                           0000D6   402 _AC	=	0x00d6
                           0000D7   403 _CY	=	0x00d7
                           0000AD   404 _ET2	=	0x00ad
                           0000BD   405 _PT2	=	0x00bd
                           0000C8   406 _T2CON_0	=	0x00c8
                           0000C9   407 _T2CON_1	=	0x00c9
                           0000CA   408 _T2CON_2	=	0x00ca
                           0000CB   409 _T2CON_3	=	0x00cb
                           0000CC   410 _T2CON_4	=	0x00cc
                           0000CD   411 _T2CON_5	=	0x00cd
                           0000CE   412 _T2CON_6	=	0x00ce
                           0000CF   413 _T2CON_7	=	0x00cf
                           0000C8   414 _CP_RL2	=	0x00c8
                           0000C9   415 _C_T2	=	0x00c9
                           0000CA   416 _TR2	=	0x00ca
                           0000CB   417 _EXEN2	=	0x00cb
                           0000CC   418 _TCLK	=	0x00cc
                           0000CD   419 _RCLK	=	0x00cd
                           0000CE   420 _EXF2	=	0x00ce
                           0000CF   421 _TF2	=	0x00cf
                           0000DF   422 _CF	=	0x00df
                           0000DE   423 _CR	=	0x00de
                           0000DC   424 _CCF4	=	0x00dc
                           0000DB   425 _CCF3	=	0x00db
                           0000DA   426 _CCF2	=	0x00da
                           0000D9   427 _CCF1	=	0x00d9
                           0000D8   428 _CCF0	=	0x00d8
                           0000AE   429 _EC	=	0x00ae
                           0000BE   430 _PPCL	=	0x00be
                           0000BD   431 _PT2L	=	0x00bd
                           0000BC   432 _PSL	=	0x00bc
                           0000BB   433 _PT1L	=	0x00bb
                           0000BA   434 _PX1L	=	0x00ba
                           0000B9   435 _PT0L	=	0x00b9
                           0000B8   436 _PX0L	=	0x00b8
                           0000C0   437 _P4_0	=	0x00c0
                           0000C1   438 _P4_1	=	0x00c1
                           0000C2   439 _P4_2	=	0x00c2
                           0000C3   440 _P4_3	=	0x00c3
                           0000C4   441 _P4_4	=	0x00c4
                           0000C5   442 _P4_5	=	0x00c5
                           0000C6   443 _P4_6	=	0x00c6
                           0000C7   444 _P4_7	=	0x00c7
                           0000E8   445 _P5_0	=	0x00e8
                           0000E9   446 _P5_1	=	0x00e9
                           0000EA   447 _P5_2	=	0x00ea
                           0000EB   448 _P5_3	=	0x00eb
                           0000EC   449 _P5_4	=	0x00ec
                           0000ED   450 _P5_5	=	0x00ed
                           0000EE   451 _P5_6	=	0x00ee
                           0000EF   452 _P5_7	=	0x00ef
                                    453 ;--------------------------------------------------------
                                    454 ; overlayable register banks
                                    455 ;--------------------------------------------------------
                                    456 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        457 	.ds 8
                                    458 ;--------------------------------------------------------
                                    459 ; internal ram data
                                    460 ;--------------------------------------------------------
                                    461 	.area DSEG    (DATA)
      000000                        462 _create_custom_char_sloc0_1_0:
      000000                        463 	.ds 3
                                    464 ;--------------------------------------------------------
                                    465 ; overlayable items in internal ram
                                    466 ;--------------------------------------------------------
                                    467 ;--------------------------------------------------------
                                    468 ; indirectly addressable internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area ISEG    (DATA)
                                    471 ;--------------------------------------------------------
                                    472 ; absolute internal ram data
                                    473 ;--------------------------------------------------------
                                    474 	.area IABS    (ABS,DATA)
                                    475 	.area IABS    (ABS,DATA)
                                    476 ;--------------------------------------------------------
                                    477 ; bit data
                                    478 ;--------------------------------------------------------
                                    479 	.area BSEG    (BIT)
      000000                        480 _handler_wr_c_lcd_sloc0_1_0:
      000000                        481 	.ds 1
      000001                        482 _handler_wr_str_lcd_sloc0_1_0:
      000001                        483 	.ds 1
      000002                        484 _handler_lcdgotoxy_sloc0_1_0:
      000002                        485 	.ds 1
      000003                        486 _handler_lcdgotoaddress_sloc0_1_0:
      000003                        487 	.ds 1
      000004                        488 _handler_lcd_hexdump_sloc0_1_0:
      000004                        489 	.ds 1
      000005                        490 _handler_custom_char_sloc0_1_0:
      000005                        491 	.ds 1
      000006                        492 _handle_cu_custom_char_sloc0_1_0:
      000006                        493 	.ds 1
      000007                        494 _handle_sadsmiley_custom_char_sloc0_1_0:
      000007                        495 	.ds 1
      000008                        496 _handle_lock_custom_char_sloc0_1_0:
      000008                        497 	.ds 1
      000009                        498 _handle_unlock_custom_char_sloc0_1_0:
      000009                        499 	.ds 1
      00000A                        500 _handle_newuser_custom_char_sloc0_1_0:
      00000A                        501 	.ds 1
      00000B                        502 _print_author_sloc0_1_0:
      00000B                        503 	.ds 1
                                    504 ;--------------------------------------------------------
                                    505 ; paged external ram data
                                    506 ;--------------------------------------------------------
                                    507 	.area PSEG    (PAG,XDATA)
                                    508 ;--------------------------------------------------------
                                    509 ; external ram data
                                    510 ;--------------------------------------------------------
                                    511 	.area XSEG    (XDATA)
                           00F000   512 _lcd_ptr	=	0xf000
      000000                        513 _string::
      000000                        514 	.ds 3
      000003                        515 _delay_milliseconds_65536_92:
      000003                        516 	.ds 2
      000005                        517 _lcdgotoaddr_address_65536_104:
      000005                        518 	.ds 1
      000006                        519 _lcdgotoxy_PARM_2:
      000006                        520 	.ds 1
      000007                        521 _lcdgotoxy_row_65536_106:
      000007                        522 	.ds 1
      000008                        523 _lcdgotoxy_address_65536_107:
      000008                        524 	.ds 1
      000009                        525 _lcdputch_cc_65536_114:
      000009                        526 	.ds 1
      00000A                        527 _lcdputstr_ss_65536_117:
      00000A                        528 	.ds 3
      00000D                        529 _handler_wr_str_lcd_k_65537_127:
      00000D                        530 	.ds 2
      00000F                        531 _handler_lcdgotoaddress_str_65536_140:
      00000F                        532 	.ds 50
      000041                        533 _handler_lcdgotoaddress_c_65537_141:
      000041                        534 	.ds 1
      000042                        535 _read_lcd_address_PARM_2:
      000042                        536 	.ds 1
      000043                        537 _read_lcd_address_is_ddram_65536_151:
      000043                        538 	.ds 1
      000044                        539 _get_hex_value_hex_value_65536_165:
      000044                        540 	.ds 1
      000045                        541 _create_custom_char_PARM_2:
      000045                        542 	.ds 3
      000048                        543 _create_custom_char_char_code_65536_170:
      000048                        544 	.ds 1
      000049                        545 _handler_custom_char_row_values_65539_178:
      000049                        546 	.ds 8
      000051                        547 _handle_cu_custom_char_row_vals1_65537_183:
      000051                        548 	.ds 8
      000059                        549 _handle_cu_custom_char_row_vals2_65538_185:
      000059                        550 	.ds 8
      000061                        551 _handle_cu_custom_char_row_vals3_65539_187:
      000061                        552 	.ds 8
      000069                        553 _handle_cu_custom_char_row_vals4_65540_189:
      000069                        554 	.ds 8
      000071                        555 _handle_sadsmiley_custom_char_row_vals1_65537_193:
      000071                        556 	.ds 8
      000079                        557 _handle_sadsmiley_custom_char_row_vals2_65538_195:
      000079                        558 	.ds 8
      000081                        559 _handle_sadsmiley_custom_char_row_vals3_65539_197:
      000081                        560 	.ds 8
      000089                        561 _handle_sadsmiley_custom_char_row_vals4_65540_199:
      000089                        562 	.ds 8
      000091                        563 _handle_lock_custom_char_row_vals1_65536_202:
      000091                        564 	.ds 8
      000099                        565 _handle_lock_custom_char_row_vals2_65537_204:
      000099                        566 	.ds 8
      0000A1                        567 _handle_lock_custom_char_row_vals3_65538_206:
      0000A1                        568 	.ds 8
      0000A9                        569 _handle_lock_custom_char_row_vals4_65539_208:
      0000A9                        570 	.ds 8
      0000B1                        571 _handle_unlock_custom_char_row_vals1_65536_211:
      0000B1                        572 	.ds 8
      0000B9                        573 _handle_unlock_custom_char_row_vals2_65537_213:
      0000B9                        574 	.ds 8
      0000C1                        575 _handle_unlock_custom_char_row_vals3_65538_215:
      0000C1                        576 	.ds 8
      0000C9                        577 _handle_unlock_custom_char_row_vals4_65539_217:
      0000C9                        578 	.ds 8
      0000D1                        579 _handle_newuser_custom_char_row_vals1_65536_220:
      0000D1                        580 	.ds 8
      0000D9                        581 _handle_newuser_custom_char_row_vals2_65537_222:
      0000D9                        582 	.ds 8
      0000E1                        583 _handle_newuser_custom_char_row_vals3_65538_224:
      0000E1                        584 	.ds 8
      0000E9                        585 _handle_newuser_custom_char_row_vals4_65539_226:
      0000E9                        586 	.ds 8
                                    587 ;--------------------------------------------------------
                                    588 ; absolute external ram data
                                    589 ;--------------------------------------------------------
                                    590 	.area XABS    (ABS,XDATA)
                                    591 ;--------------------------------------------------------
                                    592 ; external initialized ram data
                                    593 ;--------------------------------------------------------
                                    594 	.area XISEG   (XDATA)
      000000                        595 _save_cursor_address::
      000000                        596 	.ds 1
                                    597 	.area HOME    (CODE)
                                    598 	.area GSINIT0 (CODE)
                                    599 	.area GSINIT1 (CODE)
                                    600 	.area GSINIT2 (CODE)
                                    601 	.area GSINIT3 (CODE)
                                    602 	.area GSINIT4 (CODE)
                                    603 	.area GSINIT5 (CODE)
                                    604 	.area GSINIT  (CODE)
                                    605 	.area GSFINAL (CODE)
                                    606 	.area CSEG    (CODE)
                                    607 ;--------------------------------------------------------
                                    608 ; global & static initialisations
                                    609 ;--------------------------------------------------------
                                    610 	.area HOME    (CODE)
                                    611 	.area GSINIT  (CODE)
                                    612 	.area GSFINAL (CODE)
                                    613 	.area GSINIT  (CODE)
                                    614 ;--------------------------------------------------------
                                    615 ; Home
                                    616 ;--------------------------------------------------------
                                    617 	.area HOME    (CODE)
                                    618 	.area HOME    (CODE)
                                    619 ;--------------------------------------------------------
                                    620 ; code
                                    621 ;--------------------------------------------------------
                                    622 	.area CSEG    (CODE)
                                    623 ;------------------------------------------------------------
                                    624 ;Allocation info for local variables in function 'delay'
                                    625 ;------------------------------------------------------------
                                    626 ;milliseconds              Allocated with name '_delay_milliseconds_65536_92'
                                    627 ;i                         Allocated with name '_delay_i_131072_94'
                                    628 ;------------------------------------------------------------
                                    629 ;	lcd.c:77: void delay(int milliseconds)
                                    630 ;	-----------------------------------------
                                    631 ;	 function delay
                                    632 ;	-----------------------------------------
      000000                        633 _delay:
                           000007   634 	ar7 = 0x07
                           000006   635 	ar6 = 0x06
                           000005   636 	ar5 = 0x05
                           000004   637 	ar4 = 0x04
                           000003   638 	ar3 = 0x03
                           000002   639 	ar2 = 0x02
                           000001   640 	ar1 = 0x01
                           000000   641 	ar0 = 0x00
      000000 AF 83            [24]  642 	mov	r7,dph
      000002 E5 82            [12]  643 	mov	a,dpl
      000004 90r00r03         [24]  644 	mov	dptr,#_delay_milliseconds_65536_92
      000007 F0               [24]  645 	movx	@dptr,a
      000008 EF               [12]  646 	mov	a,r7
      000009 A3               [24]  647 	inc	dptr
      00000A F0               [24]  648 	movx	@dptr,a
                                    649 ;	lcd.c:80: for(int i = 0; i < milliseconds * COUNT_ONE_MILLISECOND; i++);
      00000B 90r00r03         [24]  650 	mov	dptr,#_delay_milliseconds_65536_92
      00000E E0               [24]  651 	movx	a,@dptr
      00000F FE               [12]  652 	mov	r6,a
      000010 A3               [24]  653 	inc	dptr
      000011 E0               [24]  654 	movx	a,@dptr
      000012 FF               [12]  655 	mov	r7,a
      000013 90r00r00         [24]  656 	mov	dptr,#__mulint_PARM_2
      000016 EE               [12]  657 	mov	a,r6
      000017 F0               [24]  658 	movx	@dptr,a
      000018 EF               [12]  659 	mov	a,r7
      000019 A3               [24]  660 	inc	dptr
      00001A F0               [24]  661 	movx	@dptr,a
      00001B 90 00 52         [24]  662 	mov	dptr,#0x0052
      00001E 12r00r00         [24]  663 	lcall	__mulint
      000021 AE 82            [24]  664 	mov	r6,dpl
      000023 AF 83            [24]  665 	mov	r7,dph
      000025 7C 00            [12]  666 	mov	r4,#0x00
      000027 7D 00            [12]  667 	mov	r5,#0x00
      000029                        668 00103$:
      000029 C3               [12]  669 	clr	c
      00002A EC               [12]  670 	mov	a,r4
      00002B 9E               [12]  671 	subb	a,r6
      00002C ED               [12]  672 	mov	a,r5
      00002D 64 80            [12]  673 	xrl	a,#0x80
      00002F 8F F0            [24]  674 	mov	b,r7
      000031 63 F0 80         [24]  675 	xrl	b,#0x80
      000034 95 F0            [12]  676 	subb	a,b
      000036 50 07            [24]  677 	jnc	00105$
      000038 0C               [12]  678 	inc	r4
      000039 BC 00 ED         [24]  679 	cjne	r4,#0x00,00103$
      00003C 0D               [12]  680 	inc	r5
      00003D 80 EA            [24]  681 	sjmp	00103$
      00003F                        682 00105$:
                                    683 ;	lcd.c:81: }
      00003F 22               [24]  684 	ret
                                    685 ;------------------------------------------------------------
                                    686 ;Allocation info for local variables in function 'lcdbusywait'
                                    687 ;------------------------------------------------------------
                                    688 ;BUSY_FLAG_MASK            Allocated with name '_lcdbusywait_BUSY_FLAG_MASK_65536_96'
                                    689 ;COMMAND_ADDRESS           Allocated with name '_lcdbusywait_COMMAND_ADDRESS_65536_96'
                                    690 ;------------------------------------------------------------
                                    691 ;	lcd.c:85: void lcdbusywait(void)
                                    692 ;	-----------------------------------------
                                    693 ;	 function lcdbusywait
                                    694 ;	-----------------------------------------
      000040                        695 _lcdbusywait:
                                    696 ;	lcd.c:94: LCD_RS = 0;
                                    697 ;	assignBit
      000040 C2 92            [12]  698 	clr	_P1_2
                                    699 ;	lcd.c:95: LCD_RW = 1;
                                    700 ;	assignBit
      000042 D2 93            [12]  701 	setb	_P1_3
                                    702 ;	lcd.c:98: while ((* (volatile uint8_t *) COMMAND_ADDRESS) & BUSY_FLAG_MASK)
      000044                        703 00101$:
      000044 90 F0 00         [24]  704 	mov	dptr,#0xf000
      000047 75 F0 00         [24]  705 	mov	b,#0x00
      00004A 12r00r00         [24]  706 	lcall	__gptrget
      00004D 30 E7 08         [24]  707 	jnb	acc.7,00104$
                                    708 ;	lcd.c:101: delay(10);
      000050 90 00 0A         [24]  709 	mov	dptr,#0x000a
      000053 12r00r00         [24]  710 	lcall	_delay
      000056 80 EC            [24]  711 	sjmp	00101$
      000058                        712 00104$:
                                    713 ;	lcd.c:103: }
      000058 22               [24]  714 	ret
                                    715 ;------------------------------------------------------------
                                    716 ;Allocation info for local variables in function 'set_time_variables'
                                    717 ;------------------------------------------------------------
                                    718 ;	lcd.c:106: void set_time_variables(void)
                                    719 ;	-----------------------------------------
                                    720 ;	 function set_time_variables
                                    721 ;	-----------------------------------------
      000059                        722 _set_time_variables:
                                    723 ;	lcd.c:109: tenth_of_second     = '0';
      000059 90r00r00         [24]  724 	mov	dptr,#_tenth_of_second
      00005C 74 30            [12]  725 	mov	a,#0x30
      00005E F0               [24]  726 	movx	@dptr,a
                                    727 ;	lcd.c:110: seconds_ones_digit  = '0';
      00005F 90r00r00         [24]  728 	mov	dptr,#_seconds_ones_digit
      000062 F0               [24]  729 	movx	@dptr,a
                                    730 ;	lcd.c:111: seconds_tens_digit  = '0';
      000063 90r00r00         [24]  731 	mov	dptr,#_seconds_tens_digit
      000066 F0               [24]  732 	movx	@dptr,a
                                    733 ;	lcd.c:112: minutes_ones_digit  = '0';
      000067 90r00r00         [24]  734 	mov	dptr,#_minutes_ones_digit
      00006A F0               [24]  735 	movx	@dptr,a
                                    736 ;	lcd.c:113: minutes_tens_digit  = '0';
      00006B 90r00r00         [24]  737 	mov	dptr,#_minutes_tens_digit
      00006E F0               [24]  738 	movx	@dptr,a
                                    739 ;	lcd.c:114: }
      00006F 22               [24]  740 	ret
                                    741 ;------------------------------------------------------------
                                    742 ;Allocation info for local variables in function 'init_lcd'
                                    743 ;------------------------------------------------------------
                                    744 ;	lcd.c:116: void init_lcd(void){
                                    745 ;	-----------------------------------------
                                    746 ;	 function init_lcd
                                    747 ;	-----------------------------------------
      000070                        748 _init_lcd:
                                    749 ;	lcd.c:118: LCD_RS = 0;
                                    750 ;	assignBit
      000070 C2 92            [12]  751 	clr	_P1_2
                                    752 ;	lcd.c:119: LCD_RW = 0;
                                    753 ;	assignBit
      000072 C2 93            [12]  754 	clr	_P1_3
                                    755 ;	lcd.c:121: delay(160);
      000074 90 00 A0         [24]  756 	mov	dptr,#0x00a0
      000077 12r00r00         [24]  757 	lcall	_delay
                                    758 ;	lcd.c:124: lcd_ptr = 0x30;
      00007A 90 F0 00         [24]  759 	mov	dptr,#_lcd_ptr
      00007D 74 30            [12]  760 	mov	a,#0x30
      00007F F0               [24]  761 	movx	@dptr,a
                                    762 ;	lcd.c:126: delay(170);
      000080 90 00 AA         [24]  763 	mov	dptr,#0x00aa
      000083 12r00r00         [24]  764 	lcall	_delay
                                    765 ;	lcd.c:128: lcd_ptr = 0x30;
      000086 90 F0 00         [24]  766 	mov	dptr,#_lcd_ptr
      000089 74 30            [12]  767 	mov	a,#0x30
      00008B F0               [24]  768 	movx	@dptr,a
                                    769 ;	lcd.c:130: delay(150);
      00008C 90 00 96         [24]  770 	mov	dptr,#0x0096
      00008F 12r00r00         [24]  771 	lcall	_delay
                                    772 ;	lcd.c:133: lcd_ptr = 0x30;
      000092 90 F0 00         [24]  773 	mov	dptr,#_lcd_ptr
      000095 74 30            [12]  774 	mov	a,#0x30
      000097 F0               [24]  775 	movx	@dptr,a
                                    776 ;	lcd.c:135: lcdbusywait();
      000098 12r00r40         [24]  777 	lcall	_lcdbusywait
                                    778 ;	lcd.c:137: LCD_RS = 0;
                                    779 ;	assignBit
      00009B C2 92            [12]  780 	clr	_P1_2
                                    781 ;	lcd.c:138: LCD_RW = 0;
                                    782 ;	assignBit
      00009D C2 93            [12]  783 	clr	_P1_3
                                    784 ;	lcd.c:140: lcd_ptr = 0x38;
      00009F 90 F0 00         [24]  785 	mov	dptr,#_lcd_ptr
      0000A2 74 38            [12]  786 	mov	a,#0x38
      0000A4 F0               [24]  787 	movx	@dptr,a
                                    788 ;	lcd.c:142: lcdbusywait();
      0000A5 12r00r40         [24]  789 	lcall	_lcdbusywait
                                    790 ;	lcd.c:145: LCD_RS = 0;
                                    791 ;	assignBit
      0000A8 C2 92            [12]  792 	clr	_P1_2
                                    793 ;	lcd.c:146: LCD_RW = 0;
                                    794 ;	assignBit
      0000AA C2 93            [12]  795 	clr	_P1_3
                                    796 ;	lcd.c:148: lcd_ptr = 0x0F;
      0000AC 90 F0 00         [24]  797 	mov	dptr,#_lcd_ptr
      0000AF 74 0F            [12]  798 	mov	a,#0x0f
      0000B1 F0               [24]  799 	movx	@dptr,a
                                    800 ;	lcd.c:150: lcdbusywait();
      0000B2 12r00r40         [24]  801 	lcall	_lcdbusywait
                                    802 ;	lcd.c:153: LCD_RS = 0;
                                    803 ;	assignBit
      0000B5 C2 92            [12]  804 	clr	_P1_2
                                    805 ;	lcd.c:154: LCD_RW = 0;
                                    806 ;	assignBit
      0000B7 C2 93            [12]  807 	clr	_P1_3
                                    808 ;	lcd.c:156: lcd_ptr = 0x01;
      0000B9 90 F0 00         [24]  809 	mov	dptr,#_lcd_ptr
      0000BC 74 01            [12]  810 	mov	a,#0x01
      0000BE F0               [24]  811 	movx	@dptr,a
                                    812 ;	lcd.c:158: lcdbusywait();
      0000BF 12r00r40         [24]  813 	lcall	_lcdbusywait
                                    814 ;	lcd.c:161: LCD_RS = 0;
                                    815 ;	assignBit
      0000C2 C2 92            [12]  816 	clr	_P1_2
                                    817 ;	lcd.c:162: LCD_RW = 0;
                                    818 ;	assignBit
      0000C4 C2 93            [12]  819 	clr	_P1_3
                                    820 ;	lcd.c:164: lcd_ptr = 0x06;
      0000C6 90 F0 00         [24]  821 	mov	dptr,#_lcd_ptr
      0000C9 74 06            [12]  822 	mov	a,#0x06
      0000CB F0               [24]  823 	movx	@dptr,a
                                    824 ;	lcd.c:166: lcdbusywait();
      0000CC 12r00r40         [24]  825 	lcall	_lcdbusywait
                                    826 ;	lcd.c:169: set_time_variables();
                                    827 ;	lcd.c:170: }
      0000CF 02r00r59         [24]  828 	ljmp	_set_time_variables
                                    829 ;------------------------------------------------------------
                                    830 ;Allocation info for local variables in function 'get_cursor_address'
                                    831 ;------------------------------------------------------------
                                    832 ;address                   Allocated with name '_get_cursor_address_address_65537_103'
                                    833 ;------------------------------------------------------------
                                    834 ;	lcd.c:173: uint8_t get_cursor_address(){
                                    835 ;	-----------------------------------------
                                    836 ;	 function get_cursor_address
                                    837 ;	-----------------------------------------
      0000D2                        838 _get_cursor_address:
                                    839 ;	lcd.c:174: LCD_RS = 0; // Set RS pin low
                                    840 ;	assignBit
      0000D2 C2 92            [12]  841 	clr	_P1_2
                                    842 ;	lcd.c:175: LCD_RW = 1; // Set RW pin high
                                    843 ;	assignBit
      0000D4 D2 93            [12]  844 	setb	_P1_3
                                    845 ;	lcd.c:177: uint8_t address = lcd_ptr & (~0x80); // Mask out the MSB of lcd_ptr and assign it to address
      0000D6 90 F0 00         [24]  846 	mov	dptr,#_lcd_ptr
      0000D9 E0               [24]  847 	movx	a,@dptr
      0000DA 54 7F            [12]  848 	anl	a,#0x7f
                                    849 ;	lcd.c:178: return address; // Return the address
                                    850 ;	lcd.c:179: }
      0000DC F5 82            [12]  851 	mov	dpl,a
      0000DE 22               [24]  852 	ret
                                    853 ;------------------------------------------------------------
                                    854 ;Allocation info for local variables in function 'lcdgotoaddr'
                                    855 ;------------------------------------------------------------
                                    856 ;address                   Allocated with name '_lcdgotoaddr_address_65536_104'
                                    857 ;------------------------------------------------------------
                                    858 ;	lcd.c:182: void lcdgotoaddr(unsigned char address){
                                    859 ;	-----------------------------------------
                                    860 ;	 function lcdgotoaddr
                                    861 ;	-----------------------------------------
      0000DF                        862 _lcdgotoaddr:
      0000DF E5 82            [12]  863 	mov	a,dpl
      0000E1 90r00r05         [24]  864 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000E4 F0               [24]  865 	movx	@dptr,a
                                    866 ;	lcd.c:183: LCD_RS = 0; // Set RS pin low
                                    867 ;	assignBit
      0000E5 C2 92            [12]  868 	clr	_P1_2
                                    869 ;	lcd.c:184: LCD_RW = 0; // Set RW pin low
                                    870 ;	assignBit
      0000E7 C2 93            [12]  871 	clr	_P1_3
                                    872 ;	lcd.c:186: address = address | 0x80; // Set the MSB of address to 1
      0000E9 90r00r05         [24]  873 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000EC E0               [24]  874 	movx	a,@dptr
      0000ED 43 E0 80         [24]  875 	orl	acc,#0x80
      0000F0 F0               [24]  876 	movx	@dptr,a
                                    877 ;	lcd.c:187: lcd_ptr = address; // Assign the address to lcd_ptr
      0000F1 90r00r05         [24]  878 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000F4 E0               [24]  879 	movx	a,@dptr
      0000F5 90 F0 00         [24]  880 	mov	dptr,#_lcd_ptr
      0000F8 F0               [24]  881 	movx	@dptr,a
                                    882 ;	lcd.c:188: lcdbusywait(); // Wait for the LCD to be not busy
                                    883 ;	lcd.c:189: }
      0000F9 02r00r40         [24]  884 	ljmp	_lcdbusywait
                                    885 ;------------------------------------------------------------
                                    886 ;Allocation info for local variables in function 'lcdgotoxy'
                                    887 ;------------------------------------------------------------
                                    888 ;column                    Allocated with name '_lcdgotoxy_PARM_2'
                                    889 ;row                       Allocated with name '_lcdgotoxy_row_65536_106'
                                    890 ;address                   Allocated with name '_lcdgotoxy_address_65536_107'
                                    891 ;------------------------------------------------------------
                                    892 ;	lcd.c:192: void lcdgotoxy(unsigned char row, unsigned char column) {
                                    893 ;	-----------------------------------------
                                    894 ;	 function lcdgotoxy
                                    895 ;	-----------------------------------------
      0000FC                        896 _lcdgotoxy:
      0000FC E5 82            [12]  897 	mov	a,dpl
      0000FE 90r00r07         [24]  898 	mov	dptr,#_lcdgotoxy_row_65536_106
      000101 F0               [24]  899 	movx	@dptr,a
                                    900 ;	lcd.c:194: switch (row) {          // Select address based on the row number
      000102 E0               [24]  901 	movx	a,@dptr
      000103 FF               [12]  902 	mov	r7,a
      000104 E4               [12]  903 	clr	a
      000105 BF 30 01         [24]  904 	cjne	r7,#0x30,00173$
      000108 04               [12]  905 	inc	a
      000109                        906 00173$:
      000109 FE               [12]  907 	mov	r6,a
      00010A 70 0F            [24]  908 	jnz	00101$
      00010C BF 31 02         [24]  909 	cjne	r7,#0x31,00176$
      00010F 80 11            [24]  910 	sjmp	00102$
      000111                        911 00176$:
      000111 BF 32 02         [24]  912 	cjne	r7,#0x32,00177$
      000114 80 14            [24]  913 	sjmp	00103$
      000116                        914 00177$:
                                    915 ;	lcd.c:195: case '0':
      000116 BF 33 21         [24]  916 	cjne	r7,#0x33,00105$
      000119 80 17            [24]  917 	sjmp	00104$
      00011B                        918 00101$:
                                    919 ;	lcd.c:196: address = (0x00);
      00011B 90r00r08         [24]  920 	mov	dptr,#_lcdgotoxy_address_65536_107
      00011E E4               [12]  921 	clr	a
      00011F F0               [24]  922 	movx	@dptr,a
                                    923 ;	lcd.c:197: break;
                                    924 ;	lcd.c:198: case '1':
      000120 80 1D            [24]  925 	sjmp	00106$
      000122                        926 00102$:
                                    927 ;	lcd.c:199: address = (0x40);
      000122 90r00r08         [24]  928 	mov	dptr,#_lcdgotoxy_address_65536_107
      000125 74 40            [12]  929 	mov	a,#0x40
      000127 F0               [24]  930 	movx	@dptr,a
                                    931 ;	lcd.c:200: break;
                                    932 ;	lcd.c:201: case '2':
      000128 80 15            [24]  933 	sjmp	00106$
      00012A                        934 00103$:
                                    935 ;	lcd.c:202: address = (0x10);
      00012A 90r00r08         [24]  936 	mov	dptr,#_lcdgotoxy_address_65536_107
      00012D 74 10            [12]  937 	mov	a,#0x10
      00012F F0               [24]  938 	movx	@dptr,a
                                    939 ;	lcd.c:203: break;
                                    940 ;	lcd.c:204: case '3':
      000130 80 0D            [24]  941 	sjmp	00106$
      000132                        942 00104$:
                                    943 ;	lcd.c:205: address = (0x50);
      000132 90r00r08         [24]  944 	mov	dptr,#_lcdgotoxy_address_65536_107
      000135 74 50            [12]  945 	mov	a,#0x50
      000137 F0               [24]  946 	movx	@dptr,a
                                    947 ;	lcd.c:206: break;
                                    948 ;	lcd.c:207: default:
      000138 80 05            [24]  949 	sjmp	00106$
      00013A                        950 00105$:
                                    951 ;	lcd.c:208: address = (0x00);
      00013A 90r00r08         [24]  952 	mov	dptr,#_lcdgotoxy_address_65536_107
      00013D E4               [12]  953 	clr	a
      00013E F0               [24]  954 	movx	@dptr,a
                                    955 ;	lcd.c:210: }
      00013F                        956 00106$:
                                    957 ;	lcd.c:212: if (row == '0' && column == '4') {
      00013F EE               [12]  958 	mov	a,r6
      000140 60 12            [24]  959 	jz	00120$
      000142 90r00r06         [24]  960 	mov	dptr,#_lcdgotoxy_PARM_2
      000145 E0               [24]  961 	movx	a,@dptr
      000146 FF               [12]  962 	mov	r7,a
      000147 BF 34 0A         [24]  963 	cjne	r7,#0x34,00120$
                                    964 ;	lcd.c:213: address |= 0x04;
      00014A 90r00r08         [24]  965 	mov	dptr,#_lcdgotoxy_address_65536_107
      00014D E0               [24]  966 	movx	a,@dptr
      00014E 43 E0 04         [24]  967 	orl	acc,#0x04
      000151 F0               [24]  968 	movx	@dptr,a
      000152 80 55            [24]  969 	sjmp	00121$
      000154                        970 00120$:
                                    971 ;	lcd.c:215: else if (row == '4' && column == '0') {
      000154 90r00r07         [24]  972 	mov	dptr,#_lcdgotoxy_row_65536_106
      000157 E0               [24]  973 	movx	a,@dptr
      000158 FF               [12]  974 	mov	r7,a
      000159 BF 34 12         [24]  975 	cjne	r7,#0x34,00116$
      00015C 90r00r06         [24]  976 	mov	dptr,#_lcdgotoxy_PARM_2
      00015F E0               [24]  977 	movx	a,@dptr
      000160 FF               [12]  978 	mov	r7,a
      000161 BF 30 0A         [24]  979 	cjne	r7,#0x30,00116$
                                    980 ;	lcd.c:216: address |= 0x40;
      000164 90r00r08         [24]  981 	mov	dptr,#_lcdgotoxy_address_65536_107
      000167 E0               [24]  982 	movx	a,@dptr
      000168 43 E0 40         [24]  983 	orl	acc,#0x40
      00016B F0               [24]  984 	movx	@dptr,a
      00016C 80 3B            [24]  985 	sjmp	00121$
      00016E                        986 00116$:
                                    987 ;	lcd.c:218: else if (column >= 'A' && column <= 'F') {
      00016E 90r00r06         [24]  988 	mov	dptr,#_lcdgotoxy_PARM_2
      000171 E0               [24]  989 	movx	a,@dptr
      000172 FF               [12]  990 	mov	r7,a
      000173 BF 41 00         [24]  991 	cjne	r7,#0x41,00186$
      000176                        992 00186$:
      000176 40 13            [24]  993 	jc	00112$
      000178 EF               [12]  994 	mov	a,r7
      000179 24 B9            [12]  995 	add	a,#0xff - 0x46
      00017B 40 0E            [24]  996 	jc	00112$
                                    997 ;	lcd.c:219: address |= (column - '7');
      00017D 8F 06            [24]  998 	mov	ar6,r7
      00017F EE               [12]  999 	mov	a,r6
      000180 24 C9            [12] 1000 	add	a,#0xc9
      000182 FE               [12] 1001 	mov	r6,a
      000183 90r00r08         [24] 1002 	mov	dptr,#_lcdgotoxy_address_65536_107
      000186 E0               [24] 1003 	movx	a,@dptr
      000187 4E               [12] 1004 	orl	a,r6
      000188 F0               [24] 1005 	movx	@dptr,a
      000189 80 1E            [24] 1006 	sjmp	00121$
      00018B                       1007 00112$:
                                   1008 ;	lcd.c:221: else if (column >= '0' && column <= '9') {
      00018B BF 30 00         [24] 1009 	cjne	r7,#0x30,00189$
      00018E                       1010 00189$:
      00018E 40 11            [24] 1011 	jc	00108$
      000190 EF               [12] 1012 	mov	a,r7
      000191 24 C6            [12] 1013 	add	a,#0xff - 0x39
      000193 40 0C            [24] 1014 	jc	00108$
                                   1015 ;	lcd.c:222: address |= (column - '0');
      000195 EF               [12] 1016 	mov	a,r7
      000196 24 D0            [12] 1017 	add	a,#0xd0
      000198 FF               [12] 1018 	mov	r7,a
      000199 90r00r08         [24] 1019 	mov	dptr,#_lcdgotoxy_address_65536_107
      00019C E0               [24] 1020 	movx	a,@dptr
      00019D 4F               [12] 1021 	orl	a,r7
      00019E F0               [24] 1022 	movx	@dptr,a
      00019F 80 08            [24] 1023 	sjmp	00121$
      0001A1                       1024 00108$:
                                   1025 ;	lcd.c:225: address |= ('8' - 48);
      0001A1 90r00r08         [24] 1026 	mov	dptr,#_lcdgotoxy_address_65536_107
      0001A4 E0               [24] 1027 	movx	a,@dptr
      0001A5 43 E0 08         [24] 1028 	orl	acc,#0x08
      0001A8 F0               [24] 1029 	movx	@dptr,a
      0001A9                       1030 00121$:
                                   1031 ;	lcd.c:227: lcdgotoaddr(address);   // Call lcdgotoaddr function with the calculated address
      0001A9 90r00r08         [24] 1032 	mov	dptr,#_lcdgotoxy_address_65536_107
      0001AC E0               [24] 1033 	movx	a,@dptr
      0001AD F5 82            [12] 1034 	mov	dpl,a
      0001AF 12r00rDF         [24] 1035 	lcall	_lcdgotoaddr
                                   1036 ;	lcd.c:228: lcdbusywait();          // Wait for the LCD to be not busy
                                   1037 ;	lcd.c:229: }
      0001B2 02r00r40         [24] 1038 	ljmp	_lcdbusywait
                                   1039 ;------------------------------------------------------------
                                   1040 ;Allocation info for local variables in function 'lcdputch'
                                   1041 ;------------------------------------------------------------
                                   1042 ;cc                        Allocated with name '_lcdputch_cc_65536_114'
                                   1043 ;cursor_address            Allocated with name '_lcdputch_cursor_address_65536_115'
                                   1044 ;------------------------------------------------------------
                                   1045 ;	lcd.c:232: void lcdputch(char cc){
                                   1046 ;	-----------------------------------------
                                   1047 ;	 function lcdputch
                                   1048 ;	-----------------------------------------
      0001B5                       1049 _lcdputch:
      0001B5 E5 82            [12] 1050 	mov	a,dpl
      0001B7 90r00r09         [24] 1051 	mov	dptr,#_lcdputch_cc_65536_114
      0001BA F0               [24] 1052 	movx	@dptr,a
                                   1053 ;	lcd.c:233: unsigned char cursor_address = get_cursor_address(); // get the current cursor address
      0001BB 12r00rD2         [24] 1054 	lcall	_get_cursor_address
      0001BE AF 82            [24] 1055 	mov	r7,dpl
                                   1056 ;	lcd.c:234: LCD_RS=1;       // set the RS pin high to send data
                                   1057 ;	assignBit
      0001C0 D2 92            [12] 1058 	setb	_P1_2
                                   1059 ;	lcd.c:235: LCD_RW=0;       // set the RW pin low to write to the LCD
                                   1060 ;	assignBit
      0001C2 C2 93            [12] 1061 	clr	_P1_3
                                   1062 ;	lcd.c:236: lcd_ptr=cc;     // put the character to the LCD data bus
      0001C4 90r00r09         [24] 1063 	mov	dptr,#_lcdputch_cc_65536_114
      0001C7 E0               [24] 1064 	movx	a,@dptr
      0001C8 90 F0 00         [24] 1065 	mov	dptr,#_lcd_ptr
      0001CB F0               [24] 1066 	movx	@dptr,a
                                   1067 ;	lcd.c:237: lcdbusywait();  // wait until the LCD is not busy
      0001CC C0 07            [24] 1068 	push	ar7
      0001CE 12r00r40         [24] 1069 	lcall	_lcdbusywait
      0001D1 D0 07            [24] 1070 	pop	ar7
                                   1071 ;	lcd.c:240: switch(cursor_address) {
      0001D3 BF 0F 02         [24] 1072 	cjne	r7,#0x0f,00124$
      0001D6 80 0F            [24] 1073 	sjmp	00101$
      0001D8                       1074 00124$:
      0001D8 BF 1F 02         [24] 1075 	cjne	r7,#0x1f,00125$
      0001DB 80 22            [24] 1076 	sjmp	00103$
      0001DD                       1077 00125$:
      0001DD BF 4F 02         [24] 1078 	cjne	r7,#0x4f,00126$
      0001E0 80 11            [24] 1079 	sjmp	00102$
      0001E2                       1080 00126$:
                                   1081 ;	lcd.c:241: case 0x0F:
      0001E2 BF 5F 32         [24] 1082 	cjne	r7,#0x5f,00106$
      0001E5 80 24            [24] 1083 	sjmp	00104$
      0001E7                       1084 00101$:
                                   1085 ;	lcd.c:242: lcdgotoxy('1', '0');
      0001E7 90r00r06         [24] 1086 	mov	dptr,#_lcdgotoxy_PARM_2
      0001EA 74 30            [12] 1087 	mov	a,#0x30
      0001EC F0               [24] 1088 	movx	@dptr,a
      0001ED 75 82 31         [24] 1089 	mov	dpl,#0x31
                                   1090 ;	lcd.c:243: break;
                                   1091 ;	lcd.c:244: case 0x4F:
      0001F0 02r00rFC         [24] 1092 	ljmp	_lcdgotoxy
      0001F3                       1093 00102$:
                                   1094 ;	lcd.c:245: lcdgotoxy('2', '0');
      0001F3 90r00r06         [24] 1095 	mov	dptr,#_lcdgotoxy_PARM_2
      0001F6 74 30            [12] 1096 	mov	a,#0x30
      0001F8 F0               [24] 1097 	movx	@dptr,a
      0001F9 75 82 32         [24] 1098 	mov	dpl,#0x32
                                   1099 ;	lcd.c:246: break;
                                   1100 ;	lcd.c:247: case 0x1F:
      0001FC 02r00rFC         [24] 1101 	ljmp	_lcdgotoxy
      0001FF                       1102 00103$:
                                   1103 ;	lcd.c:248: lcdgotoxy('0', '0');
      0001FF 90r00r06         [24] 1104 	mov	dptr,#_lcdgotoxy_PARM_2
      000202 74 30            [12] 1105 	mov	a,#0x30
      000204 F0               [24] 1106 	movx	@dptr,a
      000205 75 82 30         [24] 1107 	mov	dpl,#0x30
                                   1108 ;	lcd.c:249: break;
                                   1109 ;	lcd.c:250: case 0x5F:
      000208 02r00rFC         [24] 1110 	ljmp	_lcdgotoxy
      00020B                       1111 00104$:
                                   1112 ;	lcd.c:251: lcdgotoxy('0', '0');
      00020B 90r00r06         [24] 1113 	mov	dptr,#_lcdgotoxy_PARM_2
      00020E 74 30            [12] 1114 	mov	a,#0x30
      000210 F0               [24] 1115 	movx	@dptr,a
      000211 75 82 30         [24] 1116 	mov	dpl,#0x30
                                   1117 ;	lcd.c:253: }
                                   1118 ;	lcd.c:254: }
      000214 02r00rFC         [24] 1119 	ljmp	_lcdgotoxy
      000217                       1120 00106$:
      000217 22               [24] 1121 	ret
                                   1122 ;------------------------------------------------------------
                                   1123 ;Allocation info for local variables in function 'lcdputstr'
                                   1124 ;------------------------------------------------------------
                                   1125 ;ss                        Allocated with name '_lcdputstr_ss_65536_117'
                                   1126 ;i                         Allocated with name '_lcdputstr_i_65536_118'
                                   1127 ;------------------------------------------------------------
                                   1128 ;	lcd.c:256: void lcdputstr(char *ss){
                                   1129 ;	-----------------------------------------
                                   1130 ;	 function lcdputstr
                                   1131 ;	-----------------------------------------
      000218                       1132 _lcdputstr:
      000218 AF F0            [24] 1133 	mov	r7,b
      00021A AE 83            [24] 1134 	mov	r6,dph
      00021C E5 82            [12] 1135 	mov	a,dpl
      00021E 90r00r0A         [24] 1136 	mov	dptr,#_lcdputstr_ss_65536_117
      000221 F0               [24] 1137 	movx	@dptr,a
      000222 EE               [12] 1138 	mov	a,r6
      000223 A3               [24] 1139 	inc	dptr
      000224 F0               [24] 1140 	movx	@dptr,a
      000225 EF               [12] 1141 	mov	a,r7
      000226 A3               [24] 1142 	inc	dptr
      000227 F0               [24] 1143 	movx	@dptr,a
                                   1144 ;	lcd.c:258: while(ss[i]!='\0'){     // loop until end of string
      000228 90r00r0A         [24] 1145 	mov	dptr,#_lcdputstr_ss_65536_117
      00022B E0               [24] 1146 	movx	a,@dptr
      00022C FD               [12] 1147 	mov	r5,a
      00022D A3               [24] 1148 	inc	dptr
      00022E E0               [24] 1149 	movx	a,@dptr
      00022F FE               [12] 1150 	mov	r6,a
      000230 A3               [24] 1151 	inc	dptr
      000231 E0               [24] 1152 	movx	a,@dptr
      000232 FF               [12] 1153 	mov	r7,a
      000233 7B 00            [12] 1154 	mov	r3,#0x00
      000235 7C 00            [12] 1155 	mov	r4,#0x00
      000237                       1156 00101$:
      000237 EB               [12] 1157 	mov	a,r3
      000238 2D               [12] 1158 	add	a,r5
      000239 F8               [12] 1159 	mov	r0,a
      00023A EC               [12] 1160 	mov	a,r4
      00023B 3E               [12] 1161 	addc	a,r6
      00023C F9               [12] 1162 	mov	r1,a
      00023D 8F 02            [24] 1163 	mov	ar2,r7
      00023F 88 82            [24] 1164 	mov	dpl,r0
      000241 89 83            [24] 1165 	mov	dph,r1
      000243 8A F0            [24] 1166 	mov	b,r2
      000245 12r00r00         [24] 1167 	lcall	__gptrget
      000248 FA               [12] 1168 	mov	r2,a
      000249 60 20            [24] 1169 	jz	00104$
                                   1170 ;	lcd.c:259: lcdputch(ss[i]);    // print each character
      00024B 8A 82            [24] 1171 	mov	dpl,r2
      00024D C0 07            [24] 1172 	push	ar7
      00024F C0 06            [24] 1173 	push	ar6
      000251 C0 05            [24] 1174 	push	ar5
      000253 C0 04            [24] 1175 	push	ar4
      000255 C0 03            [24] 1176 	push	ar3
      000257 12r01rB5         [24] 1177 	lcall	_lcdputch
      00025A D0 03            [24] 1178 	pop	ar3
      00025C D0 04            [24] 1179 	pop	ar4
      00025E D0 05            [24] 1180 	pop	ar5
      000260 D0 06            [24] 1181 	pop	ar6
      000262 D0 07            [24] 1182 	pop	ar7
                                   1183 ;	lcd.c:260: i++;
      000264 0B               [12] 1184 	inc	r3
      000265 BB 00 CF         [24] 1185 	cjne	r3,#0x00,00101$
      000268 0C               [12] 1186 	inc	r4
      000269 80 CC            [24] 1187 	sjmp	00101$
      00026B                       1188 00104$:
                                   1189 ;	lcd.c:262: }
      00026B 22               [24] 1190 	ret
                                   1191 ;------------------------------------------------------------
                                   1192 ;Allocation info for local variables in function 'handler_lcdclear'
                                   1193 ;------------------------------------------------------------
                                   1194 ;	lcd.c:263: void handler_lcdclear(void){
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function handler_lcdclear
                                   1197 ;	-----------------------------------------
      00026C                       1198 _handler_lcdclear:
                                   1199 ;	lcd.c:264: LCD_RS=0;               // set RS pin to low
                                   1200 ;	assignBit
      00026C C2 92            [12] 1201 	clr	_P1_2
                                   1202 ;	lcd.c:265: LCD_RW=0;               // set RW pin to low
                                   1203 ;	assignBit
      00026E C2 93            [12] 1204 	clr	_P1_3
                                   1205 ;	lcd.c:266: lcd_ptr=0x01;           // reset pointer to first line
      000270 90 F0 00         [24] 1206 	mov	dptr,#_lcd_ptr
      000273 74 01            [12] 1207 	mov	a,#0x01
      000275 F0               [24] 1208 	movx	@dptr,a
                                   1209 ;	lcd.c:267: lcdbusywait();          // wait until LCD is ready
      000276 12r00r40         [24] 1210 	lcall	_lcdbusywait
                                   1211 ;	lcd.c:268: lcdgotoaddr(0x00);      // move cursor to the beginning of the first line
      000279 75 82 00         [24] 1212 	mov	dpl,#0x00
      00027C 12r00rDF         [24] 1213 	lcall	_lcdgotoaddr
                                   1214 ;	lcd.c:269: lcdputstr("       ");   // write 7 spaces to clear the first line
      00027F 90r00r00         [24] 1215 	mov	dptr,#___str_0
      000282 75 F0 80         [24] 1216 	mov	b,#0x80
      000285 12r02r18         [24] 1217 	lcall	_lcdputstr
                                   1218 ;	lcd.c:270: lcdgotoaddr(0x00);      // move cursor back to the beginning of the first line
      000288 75 82 00         [24] 1219 	mov	dpl,#0x00
      00028B 12r00rDF         [24] 1220 	lcall	_lcdgotoaddr
                                   1221 ;	lcd.c:271: printf_tiny("\033[1;33m\n\rLCD Cleared!!\r\n"); // print a message to indicate LCD has been cleared
      00028E 74r08            [12] 1222 	mov	a,#___str_1
      000290 C0 E0            [24] 1223 	push	acc
      000292 74s00            [12] 1224 	mov	a,#(___str_1 >> 8)
      000294 C0 E0            [24] 1225 	push	acc
      000296 12r00r00         [24] 1226 	lcall	_printf_tiny
      000299 15 81            [12] 1227 	dec	sp
      00029B 15 81            [12] 1228 	dec	sp
                                   1229 ;	lcd.c:272: }
      00029D 22               [24] 1230 	ret
                                   1231 ;------------------------------------------------------------
                                   1232 ;Allocation info for local variables in function 'handler_wr_c_lcd'
                                   1233 ;------------------------------------------------------------
                                   1234 ;lcd_input                 Allocated with name '_handler_wr_c_lcd_lcd_input_65536_123'
                                   1235 ;------------------------------------------------------------
                                   1236 ;	lcd.c:274: void handler_wr_c_lcd(void)
                                   1237 ;	-----------------------------------------
                                   1238 ;	 function handler_wr_c_lcd
                                   1239 ;	-----------------------------------------
      00029E                       1240 _handler_wr_c_lcd:
                                   1241 ;	lcd.c:277: printf_tiny("\033[1;33m\n\rEnter Character to put on LCD !!\r\n"); // print a message to ask the user to enter a character
      00029E 74r21            [12] 1242 	mov	a,#___str_2
      0002A0 C0 E0            [24] 1243 	push	acc
      0002A2 74s00            [12] 1244 	mov	a,#(___str_2 >> 8)
      0002A4 C0 E0            [24] 1245 	push	acc
      0002A6 12r00r00         [24] 1246 	lcall	_printf_tiny
      0002A9 15 81            [12] 1247 	dec	sp
      0002AB 15 81            [12] 1248 	dec	sp
                                   1249 ;	lcd.c:278: lcd_input = getchar();  // get the input character from the user
      0002AD 12r00r00         [24] 1250 	lcall	_getchar
      0002B0 AE 82            [24] 1251 	mov	r6,dpl
                                   1252 ;	lcd.c:282: }
      0002B2 D2*00            [12] 1253 	setb	_handler_wr_c_lcd_sloc0_1_0
      0002B4 10 AF 02         [24] 1254 	jbc	ea,00103$
      0002B7 C2*00            [12] 1255 	clr	_handler_wr_c_lcd_sloc0_1_0
      0002B9                       1256 00103$:
                                   1257 ;	lcd.c:281: lcdputch(lcd_input); // write the input character to the LCD
      0002B9 8E 82            [24] 1258 	mov	dpl,r6
      0002BB C0 06            [24] 1259 	push	ar6
      0002BD 12r01rB5         [24] 1260 	lcall	_lcdputch
      0002C0 A2*00            [12] 1261 	mov	c,_handler_wr_c_lcd_sloc0_1_0
      0002C2 92 AF            [24] 1262 	mov	ea,c
                                   1263 ;	lcd.c:283: printf_tiny("\n\rEntered Char = %c\n\r",lcd_input); // print the entered character
      0002C4 7F 00            [12] 1264 	mov	r7,#0x00
      0002C6 C0 07            [24] 1265 	push	ar7
      0002C8 74r4D            [12] 1266 	mov	a,#___str_3
      0002CA C0 E0            [24] 1267 	push	acc
      0002CC 74s00            [12] 1268 	mov	a,#(___str_3 >> 8)
      0002CE C0 E0            [24] 1269 	push	acc
      0002D0 12r00r00         [24] 1270 	lcall	_printf_tiny
      0002D3 E5 81            [12] 1271 	mov	a,sp
      0002D5 24 FC            [12] 1272 	add	a,#0xfc
      0002D7 F5 81            [12] 1273 	mov	sp,a
                                   1274 ;	lcd.c:284: printf_tiny("\n\r");
      0002D9 74r63            [12] 1275 	mov	a,#___str_4
      0002DB C0 E0            [24] 1276 	push	acc
      0002DD 74s00            [12] 1277 	mov	a,#(___str_4 >> 8)
      0002DF C0 E0            [24] 1278 	push	acc
      0002E1 12r00r00         [24] 1279 	lcall	_printf_tiny
      0002E4 15 81            [12] 1280 	dec	sp
      0002E6 15 81            [12] 1281 	dec	sp
                                   1282 ;	lcd.c:285: }
      0002E8 22               [24] 1283 	ret
                                   1284 ;------------------------------------------------------------
                                   1285 ;Allocation info for local variables in function 'handler_wr_str_lcd'
                                   1286 ;------------------------------------------------------------
                                   1287 ;k                         Allocated with name '_handler_wr_str_lcd_k_65537_127'
                                   1288 ;i                         Allocated with name '_handler_wr_str_lcd_i_65537_127'
                                   1289 ;ch                        Allocated with name '_handler_wr_str_lcd_ch_65537_127'
                                   1290 ;------------------------------------------------------------
                                   1291 ;	lcd.c:287: void handler_wr_str_lcd(void)
                                   1292 ;	-----------------------------------------
                                   1293 ;	 function handler_wr_str_lcd
                                   1294 ;	-----------------------------------------
      0002E9                       1295 _handler_wr_str_lcd:
                                   1296 ;	lcd.c:289: printf_tiny("\033[1;33m\n\rEnter String to put on LCD !!\r\n"); // print a message to ask the user to enter a string
      0002E9 74r66            [12] 1297 	mov	a,#___str_5
      0002EB C0 E0            [24] 1298 	push	acc
      0002ED 74s00            [12] 1299 	mov	a,#(___str_5 >> 8)
      0002EF C0 E0            [24] 1300 	push	acc
      0002F1 12r00r00         [24] 1301 	lcall	_printf_tiny
      0002F4 15 81            [12] 1302 	dec	sp
      0002F6 15 81            [12] 1303 	dec	sp
                                   1304 ;	lcd.c:290: int k = 1;
      0002F8 90r00r0D         [24] 1305 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      0002FB 74 01            [12] 1306 	mov	a,#0x01
      0002FD F0               [24] 1307 	movx	@dptr,a
      0002FE E4               [12] 1308 	clr	a
      0002FF A3               [24] 1309 	inc	dptr
      000300 F0               [24] 1310 	movx	@dptr,a
                                   1311 ;	lcd.c:294: while(k){
      000301 7E 00            [12] 1312 	mov	r6,#0x00
      000303 7F 00            [12] 1313 	mov	r7,#0x00
      000305                       1314 00104$:
      000305 90r00r0D         [24] 1315 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      000308 E0               [24] 1316 	movx	a,@dptr
      000309 F5 F0            [12] 1317 	mov	b,a
      00030B A3               [24] 1318 	inc	dptr
      00030C E0               [24] 1319 	movx	a,@dptr
      00030D 45 F0            [12] 1320 	orl	a,b
      00030F 60 3D            [24] 1321 	jz	00106$
                                   1322 ;	lcd.c:295: ch=getchar();       // get each character from the user until the enter key is pressed
      000311 C0 07            [24] 1323 	push	ar7
      000313 C0 06            [24] 1324 	push	ar6
      000315 12r00r00         [24] 1325 	lcall	_getchar
      000318 AC 82            [24] 1326 	mov	r4,dpl
      00031A AD 83            [24] 1327 	mov	r5,dph
      00031C D0 06            [24] 1328 	pop	ar6
      00031E D0 07            [24] 1329 	pop	ar7
                                   1330 ;	lcd.c:296: if(ch=='\r'){
      000320 BC 0D 09         [24] 1331 	cjne	r4,#0x0d,00102$
                                   1332 ;	lcd.c:297: k=0;            // exit the loop when the enter key is pressed
      000323 90r00r0D         [24] 1333 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      000326 E4               [12] 1334 	clr	a
      000327 F0               [24] 1335 	movx	@dptr,a
      000328 A3               [24] 1336 	inc	dptr
      000329 F0               [24] 1337 	movx	@dptr,a
      00032A 80 D9            [24] 1338 	sjmp	00104$
      00032C                       1339 00102$:
                                   1340 ;	lcd.c:300: *(string+i)=ch; // store each character in a string array
      00032C 90r00r00         [24] 1341 	mov	dptr,#_string
      00032F E0               [24] 1342 	movx	a,@dptr
      000330 FA               [12] 1343 	mov	r2,a
      000331 A3               [24] 1344 	inc	dptr
      000332 E0               [24] 1345 	movx	a,@dptr
      000333 FB               [12] 1346 	mov	r3,a
      000334 A3               [24] 1347 	inc	dptr
      000335 E0               [24] 1348 	movx	a,@dptr
      000336 FD               [12] 1349 	mov	r5,a
      000337 EE               [12] 1350 	mov	a,r6
      000338 2A               [12] 1351 	add	a,r2
      000339 FA               [12] 1352 	mov	r2,a
      00033A EF               [12] 1353 	mov	a,r7
      00033B 3B               [12] 1354 	addc	a,r3
      00033C FB               [12] 1355 	mov	r3,a
      00033D 8A 82            [24] 1356 	mov	dpl,r2
      00033F 8B 83            [24] 1357 	mov	dph,r3
      000341 8D F0            [24] 1358 	mov	b,r5
      000343 EC               [12] 1359 	mov	a,r4
      000344 12r00r00         [24] 1360 	lcall	__gptrput
                                   1361 ;	lcd.c:301: i++;
      000347 0E               [12] 1362 	inc	r6
      000348 BE 00 BA         [24] 1363 	cjne	r6,#0x00,00104$
      00034B 0F               [12] 1364 	inc	r7
      00034C 80 B7            [24] 1365 	sjmp	00104$
      00034E                       1366 00106$:
                                   1367 ;	lcd.c:304: *(string+i)='\0';       // add null character to mark the end of the string
      00034E 90r00r00         [24] 1368 	mov	dptr,#_string
      000351 E0               [24] 1369 	movx	a,@dptr
      000352 FB               [12] 1370 	mov	r3,a
      000353 A3               [24] 1371 	inc	dptr
      000354 E0               [24] 1372 	movx	a,@dptr
      000355 FC               [12] 1373 	mov	r4,a
      000356 A3               [24] 1374 	inc	dptr
      000357 E0               [24] 1375 	movx	a,@dptr
      000358 FD               [12] 1376 	mov	r5,a
      000359 EE               [12] 1377 	mov	a,r6
      00035A 2B               [12] 1378 	add	a,r3
      00035B FE               [12] 1379 	mov	r6,a
      00035C EF               [12] 1380 	mov	a,r7
      00035D 3C               [12] 1381 	addc	a,r4
      00035E FF               [12] 1382 	mov	r7,a
      00035F 8D 02            [24] 1383 	mov	ar2,r5
      000361 8E 82            [24] 1384 	mov	dpl,r6
      000363 8F 83            [24] 1385 	mov	dph,r7
      000365 8A F0            [24] 1386 	mov	b,r2
      000367 E4               [12] 1387 	clr	a
      000368 12r00r00         [24] 1388 	lcall	__gptrput
                                   1389 ;	lcd.c:308: }
      00036B D2*01            [12] 1390 	setb	_handler_wr_str_lcd_sloc0_1_0
      00036D 10 AF 02         [24] 1391 	jbc	ea,00126$
      000370 C2*01            [12] 1392 	clr	_handler_wr_str_lcd_sloc0_1_0
      000372                       1393 00126$:
                                   1394 ;	lcd.c:307: lcdputstr(string);  // write the string to the LCD
      000372 90r00r00         [24] 1395 	mov	dptr,#_string
      000375 E0               [24] 1396 	movx	a,@dptr
      000376 FD               [12] 1397 	mov	r5,a
      000377 A3               [24] 1398 	inc	dptr
      000378 E0               [24] 1399 	movx	a,@dptr
      000379 FE               [12] 1400 	mov	r6,a
      00037A A3               [24] 1401 	inc	dptr
      00037B E0               [24] 1402 	movx	a,@dptr
      00037C FF               [12] 1403 	mov	r7,a
      00037D 8D 82            [24] 1404 	mov	dpl,r5
      00037F 8E 83            [24] 1405 	mov	dph,r6
      000381 8F F0            [24] 1406 	mov	b,r7
      000383 12r02r18         [24] 1407 	lcall	_lcdputstr
      000386 A2*01            [12] 1408 	mov	c,_handler_wr_str_lcd_sloc0_1_0
      000388 92 AF            [24] 1409 	mov	ea,c
                                   1410 ;	lcd.c:309: printf_tiny("Entered String = %s\n\r",string); // print the entered string
      00038A 90r00r00         [24] 1411 	mov	dptr,#_string
      00038D E0               [24] 1412 	movx	a,@dptr
      00038E C0 E0            [24] 1413 	push	acc
      000390 A3               [24] 1414 	inc	dptr
      000391 E0               [24] 1415 	movx	a,@dptr
      000392 C0 E0            [24] 1416 	push	acc
      000394 A3               [24] 1417 	inc	dptr
      000395 E0               [24] 1418 	movx	a,@dptr
      000396 C0 E0            [24] 1419 	push	acc
      000398 74r8F            [12] 1420 	mov	a,#___str_6
      00039A C0 E0            [24] 1421 	push	acc
      00039C 74s00            [12] 1422 	mov	a,#(___str_6 >> 8)
      00039E C0 E0            [24] 1423 	push	acc
      0003A0 12r00r00         [24] 1424 	lcall	_printf_tiny
      0003A3 E5 81            [12] 1425 	mov	a,sp
      0003A5 24 FB            [12] 1426 	add	a,#0xfb
      0003A7 F5 81            [12] 1427 	mov	sp,a
                                   1428 ;	lcd.c:310: printf_tiny("\n\r");
      0003A9 74r63            [12] 1429 	mov	a,#___str_4
      0003AB C0 E0            [24] 1430 	push	acc
      0003AD 74s00            [12] 1431 	mov	a,#(___str_4 >> 8)
      0003AF C0 E0            [24] 1432 	push	acc
      0003B1 12r00r00         [24] 1433 	lcall	_printf_tiny
      0003B4 15 81            [12] 1434 	dec	sp
      0003B6 15 81            [12] 1435 	dec	sp
                                   1436 ;	lcd.c:311: }
      0003B8 22               [24] 1437 	ret
                                   1438 ;------------------------------------------------------------
                                   1439 ;Allocation info for local variables in function 'handler_lcdgotoxy'
                                   1440 ;------------------------------------------------------------
                                   1441 ;x_coordinate_ch           Allocated with name '_handler_lcdgotoxy_x_coordinate_ch_65536_133'
                                   1442 ;y_coordinate_ch           Allocated with name '_handler_lcdgotoxy_y_coordinate_ch_65537_134'
                                   1443 ;------------------------------------------------------------
                                   1444 ;	lcd.c:314: void handler_lcdgotoxy(void)
                                   1445 ;	-----------------------------------------
                                   1446 ;	 function handler_lcdgotoxy
                                   1447 ;	-----------------------------------------
      0003B9                       1448 _handler_lcdgotoxy:
                                   1449 ;	lcd.c:318: printf_tiny("\033[1;33m\n\rEnter X-Co-ordinate to put on LCD !!\r\n");
      0003B9 74rA5            [12] 1450 	mov	a,#___str_7
      0003BB C0 E0            [24] 1451 	push	acc
      0003BD 74s00            [12] 1452 	mov	a,#(___str_7 >> 8)
      0003BF C0 E0            [24] 1453 	push	acc
      0003C1 12r00r00         [24] 1454 	lcall	_printf_tiny
      0003C4 15 81            [12] 1455 	dec	sp
      0003C6 15 81            [12] 1456 	dec	sp
                                   1457 ;	lcd.c:319: x_coordinate_ch  = toupper(getchar());
      0003C8 12r00r00         [24] 1458 	lcall	_getchar
      0003CB 12r00r00         [24] 1459 	lcall	_toupper
      0003CE AE 82            [24] 1460 	mov	r6,dpl
                                   1461 ;	lcd.c:322: printf_tiny("X-Cordinate = %c\n\r",x_coordinate_ch);
      0003D0 8E 05            [24] 1462 	mov	ar5,r6
      0003D2 7F 00            [12] 1463 	mov	r7,#0x00
      0003D4 C0 06            [24] 1464 	push	ar6
      0003D6 C0 05            [24] 1465 	push	ar5
      0003D8 C0 07            [24] 1466 	push	ar7
      0003DA 74rD5            [12] 1467 	mov	a,#___str_8
      0003DC C0 E0            [24] 1468 	push	acc
      0003DE 74s00            [12] 1469 	mov	a,#(___str_8 >> 8)
      0003E0 C0 E0            [24] 1470 	push	acc
      0003E2 12r00r00         [24] 1471 	lcall	_printf_tiny
      0003E5 E5 81            [12] 1472 	mov	a,sp
      0003E7 24 FC            [12] 1473 	add	a,#0xfc
      0003E9 F5 81            [12] 1474 	mov	sp,a
                                   1475 ;	lcd.c:325: printf_tiny("\033[1;33m\n\rEnter Y-Co-ordinate to put on LCD !!\r\n");
      0003EB 74rE8            [12] 1476 	mov	a,#___str_9
      0003ED C0 E0            [24] 1477 	push	acc
      0003EF 74s00            [12] 1478 	mov	a,#(___str_9 >> 8)
      0003F1 C0 E0            [24] 1479 	push	acc
      0003F3 12r00r00         [24] 1480 	lcall	_printf_tiny
      0003F6 15 81            [12] 1481 	dec	sp
      0003F8 15 81            [12] 1482 	dec	sp
                                   1483 ;	lcd.c:326: char y_coordinate_ch  = toupper(getchar());
      0003FA 12r00r00         [24] 1484 	lcall	_getchar
      0003FD 12r00r00         [24] 1485 	lcall	_toupper
      000400 AD 82            [24] 1486 	mov	r5,dpl
                                   1487 ;	lcd.c:329: printf_tiny("Y-Cordinate = %c\n\r",y_coordinate_ch);
      000402 8D 04            [24] 1488 	mov	ar4,r5
      000404 7F 00            [12] 1489 	mov	r7,#0x00
      000406 C0 05            [24] 1490 	push	ar5
      000408 C0 04            [24] 1491 	push	ar4
      00040A C0 07            [24] 1492 	push	ar7
      00040C 74r18            [12] 1493 	mov	a,#___str_10
      00040E C0 E0            [24] 1494 	push	acc
      000410 74s01            [12] 1495 	mov	a,#(___str_10 >> 8)
      000412 C0 E0            [24] 1496 	push	acc
      000414 12r00r00         [24] 1497 	lcall	_printf_tiny
      000417 E5 81            [12] 1498 	mov	a,sp
      000419 24 FC            [12] 1499 	add	a,#0xfc
      00041B F5 81            [12] 1500 	mov	sp,a
      00041D D0 05            [24] 1501 	pop	ar5
      00041F D0 06            [24] 1502 	pop	ar6
                                   1503 ;	lcd.c:332: if (x_coordinate_ch >= '0' && x_coordinate_ch <= '3'){
      000421 BE 30 00         [24] 1504 	cjne	r6,#0x30,00119$
      000424                       1505 00119$:
      000424 40 05            [24] 1506 	jc	00106$
      000426 EE               [12] 1507 	mov	a,r6
      000427 24 CC            [12] 1508 	add	a,#0xff - 0x33
      000429 50 1A            [24] 1509 	jnc	00107$
      00042B                       1510 00106$:
                                   1511 ;	lcd.c:334: } else if (y_coordinate_ch >= '0' && y_coordinate_ch <= 'F') {
      00042B BD 30 00         [24] 1512 	cjne	r5,#0x30,00122$
      00042E                       1513 00122$:
      00042E 40 05            [24] 1514 	jc	00102$
      000430 ED               [12] 1515 	mov	a,r5
      000431 24 B9            [12] 1516 	add	a,#0xff - 0x46
      000433 50 10            [24] 1517 	jnc	00107$
      000435                       1518 00102$:
                                   1519 ;	lcd.c:337: printf_tiny("\033[1;31mInvalid coordinate!!\n\r");
      000435 74r2B            [12] 1520 	mov	a,#___str_11
      000437 C0 E0            [24] 1521 	push	acc
      000439 74s01            [12] 1522 	mov	a,#(___str_11 >> 8)
      00043B C0 E0            [24] 1523 	push	acc
      00043D 12r00r00         [24] 1524 	lcall	_printf_tiny
      000440 15 81            [12] 1525 	dec	sp
      000442 15 81            [12] 1526 	dec	sp
                                   1527 ;	lcd.c:338: return;
      000444 22               [24] 1528 	ret
      000445                       1529 00107$:
                                   1530 ;	lcd.c:344: }
      000445 D2*02            [12] 1531 	setb	_handler_lcdgotoxy_sloc0_1_0
      000447 10 AF 02         [24] 1532 	jbc	ea,00125$
      00044A C2*02            [12] 1533 	clr	_handler_lcdgotoxy_sloc0_1_0
      00044C                       1534 00125$:
                                   1535 ;	lcd.c:343: lcdgotoxy(x_coordinate_ch, y_coordinate_ch);
      00044C 90r00r06         [24] 1536 	mov	dptr,#_lcdgotoxy_PARM_2
      00044F ED               [12] 1537 	mov	a,r5
      000450 F0               [24] 1538 	movx	@dptr,a
      000451 8E 82            [24] 1539 	mov	dpl,r6
      000453 12r00rFC         [24] 1540 	lcall	_lcdgotoxy
      000456 A2*02            [12] 1541 	mov	c,_handler_lcdgotoxy_sloc0_1_0
      000458 92 AF            [24] 1542 	mov	ea,c
                                   1543 ;	lcd.c:347: printf_tiny("\033[1;33m\n\rCursor Movement Completed!!\r\n");
      00045A 74r49            [12] 1544 	mov	a,#___str_12
      00045C C0 E0            [24] 1545 	push	acc
      00045E 74s01            [12] 1546 	mov	a,#(___str_12 >> 8)
      000460 C0 E0            [24] 1547 	push	acc
      000462 12r00r00         [24] 1548 	lcall	_printf_tiny
      000465 15 81            [12] 1549 	dec	sp
      000467 15 81            [12] 1550 	dec	sp
                                   1551 ;	lcd.c:348: }
      000469 22               [24] 1552 	ret
                                   1553 ;------------------------------------------------------------
                                   1554 ;Allocation info for local variables in function 'handler_lcdgotoaddress'
                                   1555 ;------------------------------------------------------------
                                   1556 ;str                       Allocated with name '_handler_lcdgotoaddress_str_65536_140'
                                   1557 ;i                         Allocated with name '_handler_lcdgotoaddress_i_65537_141'
                                   1558 ;c                         Allocated with name '_handler_lcdgotoaddress_c_65537_141'
                                   1559 ;num                       Allocated with name '_handler_lcdgotoaddress_num_65538_143'
                                   1560 ;------------------------------------------------------------
                                   1561 ;	lcd.c:352: void handler_lcdgotoaddress(void)
                                   1562 ;	-----------------------------------------
                                   1563 ;	 function handler_lcdgotoaddress
                                   1564 ;	-----------------------------------------
      00046A                       1565 _handler_lcdgotoaddress:
                                   1566 ;	lcd.c:355: printf_tiny("\033[1;33m\n\rEnter address to put onto the LCD !!\r\n");
      00046A 74r70            [12] 1567 	mov	a,#___str_13
      00046C C0 E0            [24] 1568 	push	acc
      00046E 74s01            [12] 1569 	mov	a,#(___str_13 >> 8)
      000470 C0 E0            [24] 1570 	push	acc
      000472 12r00r00         [24] 1571 	lcall	_printf_tiny
      000475 15 81            [12] 1572 	dec	sp
      000477 15 81            [12] 1573 	dec	sp
                                   1574 ;	lcd.c:359: char c = getchar();
      000479 12r00r00         [24] 1575 	lcall	_getchar
      00047C AE 82            [24] 1576 	mov	r6,dpl
      00047E 90r00r41         [24] 1577 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      000481 EE               [12] 1578 	mov	a,r6
      000482 F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	lcd.c:360: while (c != '\r' && i < 49) { // Read characters until enter is pressed or limit is reached
      000483 7E 00            [12] 1581 	mov	r6,#0x00
      000485 7F 00            [12] 1582 	mov	r7,#0x00
      000487                       1583 00102$:
      000487 90r00r41         [24] 1584 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      00048A E0               [24] 1585 	movx	a,@dptr
      00048B FD               [12] 1586 	mov	r5,a
      00048C BD 0D 02         [24] 1587 	cjne	r5,#0x0d,00120$
      00048F 80 32            [24] 1588 	sjmp	00104$
      000491                       1589 00120$:
      000491 C3               [12] 1590 	clr	c
      000492 EE               [12] 1591 	mov	a,r6
      000493 94 31            [12] 1592 	subb	a,#0x31
      000495 EF               [12] 1593 	mov	a,r7
      000496 64 80            [12] 1594 	xrl	a,#0x80
      000498 94 80            [12] 1595 	subb	a,#0x80
      00049A 50 27            [24] 1596 	jnc	00104$
                                   1597 ;	lcd.c:361: str[i++] = c;
      00049C EE               [12] 1598 	mov	a,r6
      00049D 24r0F            [12] 1599 	add	a,#_handler_lcdgotoaddress_str_65536_140
      00049F F5 82            [12] 1600 	mov	dpl,a
      0004A1 EF               [12] 1601 	mov	a,r7
      0004A2 34s00            [12] 1602 	addc	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004A4 F5 83            [12] 1603 	mov	dph,a
      0004A6 0E               [12] 1604 	inc	r6
      0004A7 BE 00 01         [24] 1605 	cjne	r6,#0x00,00122$
      0004AA 0F               [12] 1606 	inc	r7
      0004AB                       1607 00122$:
      0004AB ED               [12] 1608 	mov	a,r5
      0004AC F0               [24] 1609 	movx	@dptr,a
                                   1610 ;	lcd.c:362: c = getchar();
      0004AD C0 07            [24] 1611 	push	ar7
      0004AF C0 06            [24] 1612 	push	ar6
      0004B1 12r00r00         [24] 1613 	lcall	_getchar
      0004B4 AC 82            [24] 1614 	mov	r4,dpl
      0004B6 AD 83            [24] 1615 	mov	r5,dph
      0004B8 D0 06            [24] 1616 	pop	ar6
      0004BA D0 07            [24] 1617 	pop	ar7
      0004BC 90r00r41         [24] 1618 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      0004BF EC               [12] 1619 	mov	a,r4
      0004C0 F0               [24] 1620 	movx	@dptr,a
      0004C1 80 C4            [24] 1621 	sjmp	00102$
      0004C3                       1622 00104$:
                                   1623 ;	lcd.c:364: str[i] = '\0';
      0004C3 EE               [12] 1624 	mov	a,r6
      0004C4 24r0F            [12] 1625 	add	a,#_handler_lcdgotoaddress_str_65536_140
      0004C6 F5 82            [12] 1626 	mov	dpl,a
      0004C8 EF               [12] 1627 	mov	a,r7
      0004C9 34s00            [12] 1628 	addc	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004CB F5 83            [12] 1629 	mov	dph,a
      0004CD E4               [12] 1630 	clr	a
      0004CE F0               [24] 1631 	movx	@dptr,a
                                   1632 ;	lcd.c:367: printf("Address Entered = %s\n\r",str);
      0004CF 74r0F            [12] 1633 	mov	a,#_handler_lcdgotoaddress_str_65536_140
      0004D1 C0 E0            [24] 1634 	push	acc
      0004D3 74s00            [12] 1635 	mov	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004D5 C0 E0            [24] 1636 	push	acc
      0004D7 E4               [12] 1637 	clr	a
      0004D8 C0 E0            [24] 1638 	push	acc
      0004DA 74rA0            [12] 1639 	mov	a,#___str_14
      0004DC C0 E0            [24] 1640 	push	acc
      0004DE 74s01            [12] 1641 	mov	a,#(___str_14 >> 8)
      0004E0 C0 E0            [24] 1642 	push	acc
      0004E2 74 80            [12] 1643 	mov	a,#0x80
      0004E4 C0 E0            [24] 1644 	push	acc
      0004E6 12r00r00         [24] 1645 	lcall	_printf
      0004E9 E5 81            [12] 1646 	mov	a,sp
      0004EB 24 FA            [12] 1647 	add	a,#0xfa
      0004ED F5 81            [12] 1648 	mov	sp,a
                                   1649 ;	lcd.c:370: long int num = strtol(str, NULL, 16);
      0004EF 90r00r00         [24] 1650 	mov	dptr,#_strtol_PARM_2
      0004F2 E4               [12] 1651 	clr	a
      0004F3 F0               [24] 1652 	movx	@dptr,a
      0004F4 A3               [24] 1653 	inc	dptr
      0004F5 F0               [24] 1654 	movx	@dptr,a
      0004F6 A3               [24] 1655 	inc	dptr
      0004F7 F0               [24] 1656 	movx	@dptr,a
      0004F8 90r00r00         [24] 1657 	mov	dptr,#_strtol_PARM_3
      0004FB 74 10            [12] 1658 	mov	a,#0x10
      0004FD F0               [24] 1659 	movx	@dptr,a
      0004FE E4               [12] 1660 	clr	a
      0004FF A3               [24] 1661 	inc	dptr
      000500 F0               [24] 1662 	movx	@dptr,a
      000501 90r00r0F         [24] 1663 	mov	dptr,#_handler_lcdgotoaddress_str_65536_140
      000504 75 F0 00         [24] 1664 	mov	b,#0x00
      000507 12r00r00         [24] 1665 	lcall	_strtol
      00050A AC 82            [24] 1666 	mov	r4,dpl
                                   1667 ;	lcd.c:376: }
      00050C D2*03            [12] 1668 	setb	_handler_lcdgotoaddress_sloc0_1_0
      00050E 10 AF 02         [24] 1669 	jbc	ea,00123$
      000511 C2*03            [12] 1670 	clr	_handler_lcdgotoaddress_sloc0_1_0
      000513                       1671 00123$:
                                   1672 ;	lcd.c:375: lcdgotoaddr((char)num);
      000513 8C 82            [24] 1673 	mov	dpl,r4
      000515 12r00rDF         [24] 1674 	lcall	_lcdgotoaddr
      000518 A2*03            [12] 1675 	mov	c,_handler_lcdgotoaddress_sloc0_1_0
      00051A 92 AF            [24] 1676 	mov	ea,c
                                   1677 ;	lcd.c:377: return;
                                   1678 ;	lcd.c:378: }
      00051C 22               [24] 1679 	ret
                                   1680 ;------------------------------------------------------------
                                   1681 ;Allocation info for local variables in function 'handler_stop_time'
                                   1682 ;------------------------------------------------------------
                                   1683 ;	lcd.c:381: void handler_stop_time(void)
                                   1684 ;	-----------------------------------------
                                   1685 ;	 function handler_stop_time
                                   1686 ;	-----------------------------------------
      00051D                       1687 _handler_stop_time:
                                   1688 ;	lcd.c:383: printf_tiny("\033[1;33m\n\rTime Paused !!\r\n");
      00051D 74rB7            [12] 1689 	mov	a,#___str_15
      00051F C0 E0            [24] 1690 	push	acc
      000521 74s01            [12] 1691 	mov	a,#(___str_15 >> 8)
      000523 C0 E0            [24] 1692 	push	acc
      000525 12r00r00         [24] 1693 	lcall	_printf_tiny
      000528 15 81            [12] 1694 	dec	sp
      00052A 15 81            [12] 1695 	dec	sp
                                   1696 ;	lcd.c:386: TCON &=~(0x10);
      00052C 53 88 EF         [24] 1697 	anl	_TCON,#0xef
                                   1698 ;	lcd.c:387: }
      00052F 22               [24] 1699 	ret
                                   1700 ;------------------------------------------------------------
                                   1701 ;Allocation info for local variables in function 'handler_resume_time'
                                   1702 ;------------------------------------------------------------
                                   1703 ;	lcd.c:390: void handler_resume_time(void)
                                   1704 ;	-----------------------------------------
                                   1705 ;	 function handler_resume_time
                                   1706 ;	-----------------------------------------
      000530                       1707 _handler_resume_time:
                                   1708 ;	lcd.c:393: printf_tiny("\033[1;33m\n\rTime Resumed !!\r\n");
      000530 74rD1            [12] 1709 	mov	a,#___str_16
      000532 C0 E0            [24] 1710 	push	acc
      000534 74s01            [12] 1711 	mov	a,#(___str_16 >> 8)
      000536 C0 E0            [24] 1712 	push	acc
      000538 12r00r00         [24] 1713 	lcall	_printf_tiny
      00053B 15 81            [12] 1714 	dec	sp
      00053D 15 81            [12] 1715 	dec	sp
                                   1716 ;	lcd.c:396: TCON |=0x10;
      00053F 43 88 10         [24] 1717 	orl	_TCON,#0x10
                                   1718 ;	lcd.c:397: }
      000542 22               [24] 1719 	ret
                                   1720 ;------------------------------------------------------------
                                   1721 ;Allocation info for local variables in function 'handler_reset_time'
                                   1722 ;------------------------------------------------------------
                                   1723 ;	lcd.c:400: void handler_reset_time(void)
                                   1724 ;	-----------------------------------------
                                   1725 ;	 function handler_reset_time
                                   1726 ;	-----------------------------------------
      000543                       1727 _handler_reset_time:
                                   1728 ;	lcd.c:403: printf_tiny("\033[1;33m\n\rTime Reset !!\r\n");
      000543 74rEC            [12] 1729 	mov	a,#___str_17
      000545 C0 E0            [24] 1730 	push	acc
      000547 74s01            [12] 1731 	mov	a,#(___str_17 >> 8)
      000549 C0 E0            [24] 1732 	push	acc
      00054B 12r00r00         [24] 1733 	lcall	_printf_tiny
      00054E 15 81            [12] 1734 	dec	sp
      000550 15 81            [12] 1735 	dec	sp
                                   1736 ;	lcd.c:406: tenth_of_second     = '0';
      000552 90r00r00         [24] 1737 	mov	dptr,#_tenth_of_second
      000555 74 30            [12] 1738 	mov	a,#0x30
      000557 F0               [24] 1739 	movx	@dptr,a
                                   1740 ;	lcd.c:407: seconds_ones_digit  = '0';
      000558 90r00r00         [24] 1741 	mov	dptr,#_seconds_ones_digit
      00055B F0               [24] 1742 	movx	@dptr,a
                                   1743 ;	lcd.c:408: seconds_tens_digit  = '0';
      00055C 90r00r00         [24] 1744 	mov	dptr,#_seconds_tens_digit
      00055F F0               [24] 1745 	movx	@dptr,a
                                   1746 ;	lcd.c:409: minutes_ones_digit  = '0';
      000560 90r00r00         [24] 1747 	mov	dptr,#_minutes_ones_digit
      000563 F0               [24] 1748 	movx	@dptr,a
                                   1749 ;	lcd.c:410: minutes_tens_digit  = '0';
      000564 90r00r00         [24] 1750 	mov	dptr,#_minutes_tens_digit
      000567 F0               [24] 1751 	movx	@dptr,a
                                   1752 ;	lcd.c:411: }
      000568 22               [24] 1753 	ret
                                   1754 ;------------------------------------------------------------
                                   1755 ;Allocation info for local variables in function 'read_lcd_address'
                                   1756 ;------------------------------------------------------------
                                   1757 ;address                   Allocated with name '_read_lcd_address_PARM_2'
                                   1758 ;is_ddram                  Allocated with name '_read_lcd_address_is_ddram_65536_151'
                                   1759 ;------------------------------------------------------------
                                   1760 ;	lcd.c:414: uint8_t read_lcd_address(uint8_t is_ddram, uint8_t address) {
                                   1761 ;	-----------------------------------------
                                   1762 ;	 function read_lcd_address
                                   1763 ;	-----------------------------------------
      000569                       1764 _read_lcd_address:
      000569 E5 82            [12] 1765 	mov	a,dpl
      00056B 90r00r43         [24] 1766 	mov	dptr,#_read_lcd_address_is_ddram_65536_151
      00056E F0               [24] 1767 	movx	@dptr,a
                                   1768 ;	lcd.c:416: if (is_ddram == 1) {
      00056F E0               [24] 1769 	movx	a,@dptr
      000570 FF               [12] 1770 	mov	r7,a
      000571 BF 01 0B         [24] 1771 	cjne	r7,#0x01,00102$
                                   1772 ;	lcd.c:417: lcdgotoaddr(address);
      000574 90r00r42         [24] 1773 	mov	dptr,#_read_lcd_address_PARM_2
      000577 E0               [24] 1774 	movx	a,@dptr
      000578 F5 82            [12] 1775 	mov	dpl,a
      00057A 12r00rDF         [24] 1776 	lcall	_lcdgotoaddr
      00057D 80 0F            [24] 1777 	sjmp	00103$
      00057F                       1778 00102$:
                                   1779 ;	lcd.c:419: LCD_RS = 0;
                                   1780 ;	assignBit
      00057F C2 92            [12] 1781 	clr	_P1_2
                                   1782 ;	lcd.c:420: LCD_RW = 0;
                                   1783 ;	assignBit
      000581 C2 93            [12] 1784 	clr	_P1_3
                                   1785 ;	lcd.c:421: lcd_ptr = address;
      000583 90r00r42         [24] 1786 	mov	dptr,#_read_lcd_address_PARM_2
      000586 E0               [24] 1787 	movx	a,@dptr
      000587 90 F0 00         [24] 1788 	mov	dptr,#_lcd_ptr
      00058A F0               [24] 1789 	movx	@dptr,a
                                   1790 ;	lcd.c:422: lcdbusywait();
      00058B 12r00r40         [24] 1791 	lcall	_lcdbusywait
      00058E                       1792 00103$:
                                   1793 ;	lcd.c:426: LCD_RS = 1;
                                   1794 ;	assignBit
      00058E D2 92            [12] 1795 	setb	_P1_2
                                   1796 ;	lcd.c:427: LCD_RW = 1;
                                   1797 ;	assignBit
      000590 D2 93            [12] 1798 	setb	_P1_3
                                   1799 ;	lcd.c:430: return lcd_ptr;
      000592 90 F0 00         [24] 1800 	mov	dptr,#_lcd_ptr
      000595 E0               [24] 1801 	movx	a,@dptr
                                   1802 ;	lcd.c:431: }
      000596 F5 82            [12] 1803 	mov	dpl,a
      000598 22               [24] 1804 	ret
                                   1805 ;------------------------------------------------------------
                                   1806 ;Allocation info for local variables in function 'handler_lcd_hexdump'
                                   1807 ;------------------------------------------------------------
                                   1808 ;k                         Allocated with name '_handler_lcd_hexdump_k_196608_158'
                                   1809 ;k                         Allocated with name '_handler_lcd_hexdump_k_196608_161'
                                   1810 ;------------------------------------------------------------
                                   1811 ;	lcd.c:432: void handler_lcd_hexdump(void)
                                   1812 ;	-----------------------------------------
                                   1813 ;	 function handler_lcd_hexdump
                                   1814 ;	-----------------------------------------
      000599                       1815 _handler_lcd_hexdump:
                                   1816 ;	lcd.c:460: }
      000599 D2*04            [12] 1817 	setb	_handler_lcd_hexdump_sloc0_1_0
      00059B 10 AF 02         [24] 1818 	jbc	ea,00141$
      00059E C2*04            [12] 1819 	clr	_handler_lcd_hexdump_sloc0_1_0
      0005A0                       1820 00141$:
                                   1821 ;	lcd.c:435: printf("\033[1;34m");                           // Set terminal color to blue
      0005A0 74r05            [12] 1822 	mov	a,#___str_18
      0005A2 C0 E0            [24] 1823 	push	acc
      0005A4 74s02            [12] 1824 	mov	a,#(___str_18 >> 8)
      0005A6 C0 E0            [24] 1825 	push	acc
      0005A8 74 80            [12] 1826 	mov	a,#0x80
      0005AA C0 E0            [24] 1827 	push	acc
      0005AC 12r00r00         [24] 1828 	lcall	_printf
      0005AF 15 81            [12] 1829 	dec	sp
      0005B1 15 81            [12] 1830 	dec	sp
      0005B3 15 81            [12] 1831 	dec	sp
                                   1832 ;	lcd.c:436: save_cursor_address=get_cursor_address();       // Save the current cursor address
      0005B5 12r00rD2         [24] 1833 	lcall	_get_cursor_address
      0005B8 E5 82            [12] 1834 	mov	a,dpl
      0005BA 90r00r00         [24] 1835 	mov	dptr,#_save_cursor_address
      0005BD F0               [24] 1836 	movx	@dptr,a
                                   1837 ;	lcd.c:437: printf("\n\rPrinting Hexdump of DDRAM\n\r");
      0005BE 74r0D            [12] 1838 	mov	a,#___str_19
      0005C0 C0 E0            [24] 1839 	push	acc
      0005C2 74s02            [12] 1840 	mov	a,#(___str_19 >> 8)
      0005C4 C0 E0            [24] 1841 	push	acc
      0005C6 74 80            [12] 1842 	mov	a,#0x80
      0005C8 C0 E0            [24] 1843 	push	acc
      0005CA 12r00r00         [24] 1844 	lcall	_printf
      0005CD 15 81            [12] 1845 	dec	sp
      0005CF 15 81            [12] 1846 	dec	sp
      0005D1 15 81            [12] 1847 	dec	sp
                                   1848 ;	lcd.c:440: for(uint16_t k=0x00;k<=0x5F;k++){
      0005D3 7E 00            [12] 1849 	mov	r6,#0x00
      0005D5 7F 00            [12] 1850 	mov	r7,#0x00
      0005D7                       1851 00108$:
      0005D7 8E 04            [24] 1852 	mov	ar4,r6
      0005D9 8F 05            [24] 1853 	mov	ar5,r7
      0005DB C3               [12] 1854 	clr	c
      0005DC 74 5F            [12] 1855 	mov	a,#0x5f
      0005DE 9C               [12] 1856 	subb	a,r4
      0005DF E4               [12] 1857 	clr	a
      0005E0 9D               [12] 1858 	subb	a,r5
      0005E1 40 5D            [24] 1859 	jc	00103$
                                   1860 ;	lcd.c:441: if(k%16 == 0){                              // Print new line and address every 16 bytes
      0005E3 EC               [12] 1861 	mov	a,r4
      0005E4 54 0F            [12] 1862 	anl	a,#0x0f
      0005E6 70 21            [24] 1863 	jnz	00102$
                                   1864 ;	lcd.c:442: printf("\n\r0x%02x: ",k);
      0005E8 C0 07            [24] 1865 	push	ar7
      0005EA C0 06            [24] 1866 	push	ar6
      0005EC C0 06            [24] 1867 	push	ar6
      0005EE C0 07            [24] 1868 	push	ar7
      0005F0 74r2B            [12] 1869 	mov	a,#___str_20
      0005F2 C0 E0            [24] 1870 	push	acc
      0005F4 74s02            [12] 1871 	mov	a,#(___str_20 >> 8)
      0005F6 C0 E0            [24] 1872 	push	acc
      0005F8 74 80            [12] 1873 	mov	a,#0x80
      0005FA C0 E0            [24] 1874 	push	acc
      0005FC 12r00r00         [24] 1875 	lcall	_printf
      0005FF E5 81            [12] 1876 	mov	a,sp
      000601 24 FB            [12] 1877 	add	a,#0xfb
      000603 F5 81            [12] 1878 	mov	sp,a
      000605 D0 06            [24] 1879 	pop	ar6
      000607 D0 07            [24] 1880 	pop	ar7
      000609                       1881 00102$:
                                   1882 ;	lcd.c:444: printf("0x%02x ",read_lcd_address(1,k));    // Read and print the value at the current address
      000609 90r00r42         [24] 1883 	mov	dptr,#_read_lcd_address_PARM_2
      00060C EE               [12] 1884 	mov	a,r6
      00060D F0               [24] 1885 	movx	@dptr,a
      00060E 75 82 01         [24] 1886 	mov	dpl,#0x01
      000611 C0 07            [24] 1887 	push	ar7
      000613 C0 06            [24] 1888 	push	ar6
      000615 12r05r69         [24] 1889 	lcall	_read_lcd_address
      000618 AD 82            [24] 1890 	mov	r5,dpl
      00061A 7C 00            [12] 1891 	mov	r4,#0x00
      00061C C0 05            [24] 1892 	push	ar5
      00061E C0 04            [24] 1893 	push	ar4
      000620 74r36            [12] 1894 	mov	a,#___str_21
      000622 C0 E0            [24] 1895 	push	acc
      000624 74s02            [12] 1896 	mov	a,#(___str_21 >> 8)
      000626 C0 E0            [24] 1897 	push	acc
      000628 74 80            [12] 1898 	mov	a,#0x80
      00062A C0 E0            [24] 1899 	push	acc
      00062C 12r00r00         [24] 1900 	lcall	_printf
      00062F E5 81            [12] 1901 	mov	a,sp
      000631 24 FB            [12] 1902 	add	a,#0xfb
      000633 F5 81            [12] 1903 	mov	sp,a
      000635 D0 06            [24] 1904 	pop	ar6
      000637 D0 07            [24] 1905 	pop	ar7
                                   1906 ;	lcd.c:440: for(uint16_t k=0x00;k<=0x5F;k++){
      000639 0E               [12] 1907 	inc	r6
      00063A BE 00 9A         [24] 1908 	cjne	r6,#0x00,00108$
      00063D 0F               [12] 1909 	inc	r7
      00063E 80 97            [24] 1910 	sjmp	00108$
      000640                       1911 00103$:
                                   1912 ;	lcd.c:447: printf("\n\r\n\rPrinting Hexdump of CGRAM\n\r");
      000640 74r3E            [12] 1913 	mov	a,#___str_22
      000642 C0 E0            [24] 1914 	push	acc
      000644 74s02            [12] 1915 	mov	a,#(___str_22 >> 8)
      000646 C0 E0            [24] 1916 	push	acc
      000648 74 80            [12] 1917 	mov	a,#0x80
      00064A C0 E0            [24] 1918 	push	acc
      00064C 12r00r00         [24] 1919 	lcall	_printf
      00064F 15 81            [12] 1920 	dec	sp
      000651 15 81            [12] 1921 	dec	sp
      000653 15 81            [12] 1922 	dec	sp
                                   1923 ;	lcd.c:450: for(uint16_t k=0x40;k<=0x7F;k++){
      000655 7E 40            [12] 1924 	mov	r6,#0x40
      000657 7F 00            [12] 1925 	mov	r7,#0x00
      000659                       1926 00111$:
      000659 8E 04            [24] 1927 	mov	ar4,r6
      00065B 8F 05            [24] 1928 	mov	ar5,r7
      00065D C3               [12] 1929 	clr	c
      00065E 74 7F            [12] 1930 	mov	a,#0x7f
      000660 9C               [12] 1931 	subb	a,r4
      000661 E4               [12] 1932 	clr	a
      000662 9D               [12] 1933 	subb	a,r5
      000663 40 5D            [24] 1934 	jc	00106$
                                   1935 ;	lcd.c:451: if(k%16 == 0){                              // Print new line and address every 16 bytes
      000665 EC               [12] 1936 	mov	a,r4
      000666 54 0F            [12] 1937 	anl	a,#0x0f
      000668 70 21            [24] 1938 	jnz	00105$
                                   1939 ;	lcd.c:452: printf("\n\r0x%02x: ",k);
      00066A C0 07            [24] 1940 	push	ar7
      00066C C0 06            [24] 1941 	push	ar6
      00066E C0 06            [24] 1942 	push	ar6
      000670 C0 07            [24] 1943 	push	ar7
      000672 74r2B            [12] 1944 	mov	a,#___str_20
      000674 C0 E0            [24] 1945 	push	acc
      000676 74s02            [12] 1946 	mov	a,#(___str_20 >> 8)
      000678 C0 E0            [24] 1947 	push	acc
      00067A 74 80            [12] 1948 	mov	a,#0x80
      00067C C0 E0            [24] 1949 	push	acc
      00067E 12r00r00         [24] 1950 	lcall	_printf
      000681 E5 81            [12] 1951 	mov	a,sp
      000683 24 FB            [12] 1952 	add	a,#0xfb
      000685 F5 81            [12] 1953 	mov	sp,a
      000687 D0 06            [24] 1954 	pop	ar6
      000689 D0 07            [24] 1955 	pop	ar7
      00068B                       1956 00105$:
                                   1957 ;	lcd.c:454: printf("0x%02x ",read_lcd_address(0,k));    // Read and print the value at the current address
      00068B 90r00r42         [24] 1958 	mov	dptr,#_read_lcd_address_PARM_2
      00068E EE               [12] 1959 	mov	a,r6
      00068F F0               [24] 1960 	movx	@dptr,a
      000690 75 82 00         [24] 1961 	mov	dpl,#0x00
      000693 C0 07            [24] 1962 	push	ar7
      000695 C0 06            [24] 1963 	push	ar6
      000697 12r05r69         [24] 1964 	lcall	_read_lcd_address
      00069A AD 82            [24] 1965 	mov	r5,dpl
      00069C 7C 00            [12] 1966 	mov	r4,#0x00
      00069E C0 05            [24] 1967 	push	ar5
      0006A0 C0 04            [24] 1968 	push	ar4
      0006A2 74r36            [12] 1969 	mov	a,#___str_21
      0006A4 C0 E0            [24] 1970 	push	acc
      0006A6 74s02            [12] 1971 	mov	a,#(___str_21 >> 8)
      0006A8 C0 E0            [24] 1972 	push	acc
      0006AA 74 80            [12] 1973 	mov	a,#0x80
      0006AC C0 E0            [24] 1974 	push	acc
      0006AE 12r00r00         [24] 1975 	lcall	_printf
      0006B1 E5 81            [12] 1976 	mov	a,sp
      0006B3 24 FB            [12] 1977 	add	a,#0xfb
      0006B5 F5 81            [12] 1978 	mov	sp,a
      0006B7 D0 06            [24] 1979 	pop	ar6
      0006B9 D0 07            [24] 1980 	pop	ar7
                                   1981 ;	lcd.c:450: for(uint16_t k=0x40;k<=0x7F;k++){
      0006BB 0E               [12] 1982 	inc	r6
      0006BC BE 00 9A         [24] 1983 	cjne	r6,#0x00,00111$
      0006BF 0F               [12] 1984 	inc	r7
      0006C0 80 97            [24] 1985 	sjmp	00111$
      0006C2                       1986 00106$:
                                   1987 ;	lcd.c:457: printf("\n\r");
      0006C2 74r63            [12] 1988 	mov	a,#___str_4
      0006C4 C0 E0            [24] 1989 	push	acc
      0006C6 74s00            [12] 1990 	mov	a,#(___str_4 >> 8)
      0006C8 C0 E0            [24] 1991 	push	acc
      0006CA 74 80            [12] 1992 	mov	a,#0x80
      0006CC C0 E0            [24] 1993 	push	acc
      0006CE 12r00r00         [24] 1994 	lcall	_printf
      0006D1 15 81            [12] 1995 	dec	sp
      0006D3 15 81            [12] 1996 	dec	sp
      0006D5 15 81            [12] 1997 	dec	sp
                                   1998 ;	lcd.c:458: lcdgotoaddr(save_cursor_address);               // Restore the original cursor position
      0006D7 90r00r00         [24] 1999 	mov	dptr,#_save_cursor_address
      0006DA E0               [24] 2000 	movx	a,@dptr
      0006DB F5 82            [12] 2001 	mov	dpl,a
      0006DD 12r00rDF         [24] 2002 	lcall	_lcdgotoaddr
                                   2003 ;	lcd.c:459: printf("\033[0m");                              // Reset terminal color to default
      0006E0 74r5E            [12] 2004 	mov	a,#___str_23
      0006E2 C0 E0            [24] 2005 	push	acc
      0006E4 74s02            [12] 2006 	mov	a,#(___str_23 >> 8)
      0006E6 C0 E0            [24] 2007 	push	acc
      0006E8 74 80            [12] 2008 	mov	a,#0x80
      0006EA C0 E0            [24] 2009 	push	acc
      0006EC 12r00r00         [24] 2010 	lcall	_printf
      0006EF 15 81            [12] 2011 	dec	sp
      0006F1 15 81            [12] 2012 	dec	sp
      0006F3 15 81            [12] 2013 	dec	sp
      0006F5 A2*04            [12] 2014 	mov	c,_handler_lcd_hexdump_sloc0_1_0
      0006F7 92 AF            [24] 2015 	mov	ea,c
                                   2016 ;	lcd.c:461: }
      0006F9 22               [24] 2017 	ret
                                   2018 ;------------------------------------------------------------
                                   2019 ;Allocation info for local variables in function 'get_hex_value'
                                   2020 ;------------------------------------------------------------
                                   2021 ;digit1                    Allocated with name '_get_hex_value_digit1_65536_165'
                                   2022 ;digit2                    Allocated with name '_get_hex_value_digit2_65536_165'
                                   2023 ;hex_value                 Allocated with name '_get_hex_value_hex_value_65536_165'
                                   2024 ;------------------------------------------------------------
                                   2025 ;	lcd.c:463: unsigned char get_hex_value(void) {
                                   2026 ;	-----------------------------------------
                                   2027 ;	 function get_hex_value
                                   2028 ;	-----------------------------------------
      0006FA                       2029 _get_hex_value:
                                   2030 ;	lcd.c:465: printf("\n\rEnter a hexadecimal value between (00 to 1F) or (40 to 58): ");
      0006FA 74r63            [12] 2031 	mov	a,#___str_24
      0006FC C0 E0            [24] 2032 	push	acc
      0006FE 74s02            [12] 2033 	mov	a,#(___str_24 >> 8)
      000700 C0 E0            [24] 2034 	push	acc
      000702 74 80            [12] 2035 	mov	a,#0x80
      000704 C0 E0            [24] 2036 	push	acc
      000706 12r00r00         [24] 2037 	lcall	_printf
      000709 15 81            [12] 2038 	dec	sp
      00070B 15 81            [12] 2039 	dec	sp
      00070D 15 81            [12] 2040 	dec	sp
                                   2041 ;	lcd.c:467: while (1) {                         //loop until a valid input is entered
      00070F                       2042 00116$:
                                   2043 ;	lcd.c:468: digit1 = putchar(getchar());    //get first digit from input and display it
      00070F 12r00r00         [24] 2044 	lcall	_getchar
      000712 12r00r00         [24] 2045 	lcall	_putchar
      000715 AE 82            [24] 2046 	mov	r6,dpl
                                   2047 ;	lcd.c:469: digit2 = putchar(getchar());    //get second digit from input and display it
      000717 C0 06            [24] 2048 	push	ar6
      000719 12r00r00         [24] 2049 	lcall	_getchar
      00071C 12r00r00         [24] 2050 	lcall	_putchar
      00071F AD 82            [24] 2051 	mov	r5,dpl
      000721 AF 83            [24] 2052 	mov	r7,dph
      000723 D0 06            [24] 2053 	pop	ar6
                                   2054 ;	lcd.c:472: if (digit1 >= '0' && digit1 <= '9' && digit2 >= '0' && digit2 <= '9') {
      000725 BE 30 00         [24] 2055 	cjne	r6,#0x30,00160$
      000728                       2056 00160$:
      000728 40 24            [24] 2057 	jc	00110$
      00072A EE               [12] 2058 	mov	a,r6
      00072B 24 C6            [12] 2059 	add	a,#0xff - 0x39
      00072D 40 1F            [24] 2060 	jc	00110$
      00072F BD 30 00         [24] 2061 	cjne	r5,#0x30,00163$
      000732                       2062 00163$:
      000732 40 1A            [24] 2063 	jc	00110$
      000734 ED               [12] 2064 	mov	a,r5
      000735 24 C6            [12] 2065 	add	a,#0xff - 0x39
      000737 40 15            [24] 2066 	jc	00110$
                                   2067 ;	lcd.c:473: hex_value = ((digit1 - '0') << 4) | (digit2 - '0'); //convert the digits to a hexadecimal value
      000739 8E 07            [24] 2068 	mov	ar7,r6
      00073B EF               [12] 2069 	mov	a,r7
      00073C 24 D0            [12] 2070 	add	a,#0xd0
      00073E C4               [12] 2071 	swap	a
      00073F 54 F0            [12] 2072 	anl	a,#0xf0
      000741 FF               [12] 2073 	mov	r7,a
      000742 8D 04            [24] 2074 	mov	ar4,r5
      000744 EC               [12] 2075 	mov	a,r4
      000745 24 D0            [12] 2076 	add	a,#0xd0
      000747 90r00r44         [24] 2077 	mov	dptr,#_get_hex_value_hex_value_65536_165
      00074A 4F               [12] 2078 	orl	a,r7
      00074B F0               [24] 2079 	movx	@dptr,a
                                   2080 ;	lcd.c:474: break; //break the loop
      00074C 80 5A            [24] 2081 	sjmp	00117$
      00074E                       2082 00110$:
                                   2083 ;	lcd.c:477: else if ((digit1 == '0' || digit1 == '1' || digit1 == '4' || digit1 == '5') && (digit2 >= 'A' && digit2 <= 'F')) {
      00074E BE 30 02         [24] 2084 	cjne	r6,#0x30,00166$
      000751 80 0D            [24] 2085 	sjmp	00108$
      000753                       2086 00166$:
      000753 BE 31 02         [24] 2087 	cjne	r6,#0x31,00167$
      000756 80 08            [24] 2088 	sjmp	00108$
      000758                       2089 00167$:
      000758 BE 34 02         [24] 2090 	cjne	r6,#0x34,00168$
      00075B 80 03            [24] 2091 	sjmp	00108$
      00075D                       2092 00168$:
      00075D BE 35 1B         [24] 2093 	cjne	r6,#0x35,00102$
      000760                       2094 00108$:
      000760 BD 41 00         [24] 2095 	cjne	r5,#0x41,00171$
      000763                       2096 00171$:
      000763 40 16            [24] 2097 	jc	00102$
      000765 ED               [12] 2098 	mov	a,r5
      000766 24 B9            [12] 2099 	add	a,#0xff - 0x46
      000768 40 11            [24] 2100 	jc	00102$
                                   2101 ;	lcd.c:478: hex_value = ((digit1 - '0') << 4) | (digit2 - '7'); //convert the digits to a hexadecimal value
      00076A EE               [12] 2102 	mov	a,r6
      00076B 24 D0            [12] 2103 	add	a,#0xd0
      00076D C4               [12] 2104 	swap	a
      00076E 54 F0            [12] 2105 	anl	a,#0xf0
      000770 FE               [12] 2106 	mov	r6,a
      000771 ED               [12] 2107 	mov	a,r5
      000772 24 C9            [12] 2108 	add	a,#0xc9
      000774 90r00r44         [24] 2109 	mov	dptr,#_get_hex_value_hex_value_65536_165
      000777 4E               [12] 2110 	orl	a,r6
      000778 F0               [24] 2111 	movx	@dptr,a
                                   2112 ;	lcd.c:479: break; //break the loop
      000779 80 2D            [24] 2113 	sjmp	00117$
      00077B                       2114 00102$:
                                   2115 ;	lcd.c:482: printf("\n\rInvalid input. ");      //display error message if input is invalid
      00077B 74rA2            [12] 2116 	mov	a,#___str_25
      00077D C0 E0            [24] 2117 	push	acc
      00077F 74s02            [12] 2118 	mov	a,#(___str_25 >> 8)
      000781 C0 E0            [24] 2119 	push	acc
      000783 74 80            [12] 2120 	mov	a,#0x80
      000785 C0 E0            [24] 2121 	push	acc
      000787 12r00r00         [24] 2122 	lcall	_printf
      00078A 15 81            [12] 2123 	dec	sp
      00078C 15 81            [12] 2124 	dec	sp
      00078E 15 81            [12] 2125 	dec	sp
                                   2126 ;	lcd.c:484: printf("Please enter a valid input: "); //prompt user to enter a valid input
      000790 74rB4            [12] 2127 	mov	a,#___str_26
      000792 C0 E0            [24] 2128 	push	acc
      000794 74s02            [12] 2129 	mov	a,#(___str_26 >> 8)
      000796 C0 E0            [24] 2130 	push	acc
      000798 74 80            [12] 2131 	mov	a,#0x80
      00079A C0 E0            [24] 2132 	push	acc
      00079C 12r00r00         [24] 2133 	lcall	_printf
      00079F 15 81            [12] 2134 	dec	sp
      0007A1 15 81            [12] 2135 	dec	sp
      0007A3 15 81            [12] 2136 	dec	sp
      0007A5 02r07r0F         [24] 2137 	ljmp	00116$
      0007A8                       2138 00117$:
                                   2139 ;	lcd.c:486: return hex_value;                           //return the hexadecimal value
      0007A8 90r00r44         [24] 2140 	mov	dptr,#_get_hex_value_hex_value_65536_165
      0007AB E0               [24] 2141 	movx	a,@dptr
                                   2142 ;	lcd.c:487: }
      0007AC F5 82            [12] 2143 	mov	dpl,a
      0007AE 22               [24] 2144 	ret
                                   2145 ;------------------------------------------------------------
                                   2146 ;Allocation info for local variables in function 'create_custom_char'
                                   2147 ;------------------------------------------------------------
                                   2148 ;sloc0                     Allocated with name '_create_custom_char_sloc0_1_0'
                                   2149 ;row_values                Allocated with name '_create_custom_char_PARM_2'
                                   2150 ;char_code                 Allocated with name '_create_custom_char_char_code_65536_170'
                                   2151 ;bit_6                     Allocated with name '_create_custom_char_bit_6_65536_171'
                                   2152 ;code_num                  Allocated with name '_create_custom_char_code_num_65536_171'
                                   2153 ;bit_3_shift               Allocated with name '_create_custom_char_bit_3_shift_65536_171'
                                   2154 ;char_num                  Allocated with name '_create_custom_char_char_num_65536_171'
                                   2155 ;i                         Allocated with name '_create_custom_char_i_65537_172'
                                   2156 ;------------------------------------------------------------
                                   2157 ;	lcd.c:488: void create_custom_char(unsigned char char_code, unsigned char row_values[]) {
                                   2158 ;	-----------------------------------------
                                   2159 ;	 function create_custom_char
                                   2160 ;	-----------------------------------------
      0007AF                       2161 _create_custom_char:
      0007AF E5 82            [12] 2162 	mov	a,dpl
      0007B1 90r00r48         [24] 2163 	mov	dptr,#_create_custom_char_char_code_65536_170
      0007B4 F0               [24] 2164 	movx	@dptr,a
                                   2165 ;	lcd.c:491: unsigned char code_num = char_code - '0';
      0007B5 E0               [24] 2166 	movx	a,@dptr
                                   2167 ;	lcd.c:492: unsigned char bit_3_shift = code_num << 3;
      0007B6 24 D0            [12] 2168 	add	a,#0xd0
      0007B8 C4               [12] 2169 	swap	a
      0007B9 03               [12] 2170 	rr	a
      0007BA 54 F8            [12] 2171 	anl	a,#0xf8
      0007BC FF               [12] 2172 	mov	r7,a
                                   2173 ;	lcd.c:493: unsigned char char_num = bit_6 | bit_3_shift;
      0007BD 43 07 40         [24] 2174 	orl	ar7,#0x40
                                   2175 ;	lcd.c:496: printf_tiny("\n\rThe custom character with code 0x%x has been created.", char_num);
      0007C0 8F 05            [24] 2176 	mov	ar5,r7
      0007C2 7E 00            [12] 2177 	mov	r6,#0x00
      0007C4 C0 07            [24] 2178 	push	ar7
      0007C6 C0 06            [24] 2179 	push	ar6
      0007C8 C0 05            [24] 2180 	push	ar5
      0007CA C0 05            [24] 2181 	push	ar5
      0007CC C0 06            [24] 2182 	push	ar6
      0007CE 74rD1            [12] 2183 	mov	a,#___str_27
      0007D0 C0 E0            [24] 2184 	push	acc
      0007D2 74s02            [12] 2185 	mov	a,#(___str_27 >> 8)
      0007D4 C0 E0            [24] 2186 	push	acc
      0007D6 12r00r00         [24] 2187 	lcall	_printf_tiny
      0007D9 E5 81            [12] 2188 	mov	a,sp
      0007DB 24 FC            [12] 2189 	add	a,#0xfc
      0007DD F5 81            [12] 2190 	mov	sp,a
      0007DF D0 05            [24] 2191 	pop	ar5
      0007E1 D0 06            [24] 2192 	pop	ar6
      0007E3 D0 07            [24] 2193 	pop	ar7
                                   2194 ;	lcd.c:500: while (i < 8) {
      0007E5 90r00r45         [24] 2195 	mov	dptr,#_create_custom_char_PARM_2
      0007E8 E0               [24] 2196 	movx	a,@dptr
      0007E9 F5*00            [12] 2197 	mov	_create_custom_char_sloc0_1_0,a
      0007EB A3               [24] 2198 	inc	dptr
      0007EC E0               [24] 2199 	movx	a,@dptr
      0007ED F5*01            [12] 2200 	mov	(_create_custom_char_sloc0_1_0 + 1),a
      0007EF A3               [24] 2201 	inc	dptr
      0007F0 E0               [24] 2202 	movx	a,@dptr
      0007F1 F5*02            [12] 2203 	mov	(_create_custom_char_sloc0_1_0 + 2),a
      0007F3 78 00            [12] 2204 	mov	r0,#0x00
      0007F5 79 00            [12] 2205 	mov	r1,#0x00
      0007F7                       2206 00101$:
      0007F7 C3               [12] 2207 	clr	c
      0007F8 E8               [12] 2208 	mov	a,r0
      0007F9 94 08            [12] 2209 	subb	a,#0x08
      0007FB E9               [12] 2210 	mov	a,r1
      0007FC 64 80            [12] 2211 	xrl	a,#0x80
      0007FE 94 80            [12] 2212 	subb	a,#0x80
      000800 40 01            [24] 2213 	jc	00115$
      000802 22               [24] 2214 	ret
      000803                       2215 00115$:
                                   2216 ;	lcd.c:502: LCD_RS = 0;
                                   2217 ;	assignBit
      000803 C2 92            [12] 2218 	clr	_P1_2
                                   2219 ;	lcd.c:503: LCD_RW = 0;
                                   2220 ;	assignBit
      000805 C2 93            [12] 2221 	clr	_P1_3
                                   2222 ;	lcd.c:505: lcd_ptr = char_num + i;
      000807 88 04            [24] 2223 	mov	ar4,r0
      000809 8F 03            [24] 2224 	mov	ar3,r7
      00080B 90 F0 00         [24] 2225 	mov	dptr,#_lcd_ptr
      00080E EC               [12] 2226 	mov	a,r4
      00080F 2B               [12] 2227 	add	a,r3
      000810 F0               [24] 2228 	movx	@dptr,a
                                   2229 ;	lcd.c:507: printf_tiny("\n\rLCD_ptr = %x", char_num + i);
      000811 E8               [12] 2230 	mov	a,r0
      000812 2D               [12] 2231 	add	a,r5
      000813 FB               [12] 2232 	mov	r3,a
      000814 E9               [12] 2233 	mov	a,r1
      000815 3E               [12] 2234 	addc	a,r6
      000816 FC               [12] 2235 	mov	r4,a
      000817 C0 07            [24] 2236 	push	ar7
      000819 C0 06            [24] 2237 	push	ar6
      00081B C0 05            [24] 2238 	push	ar5
      00081D C0 01            [24] 2239 	push	ar1
      00081F C0 00            [24] 2240 	push	ar0
      000821 C0 03            [24] 2241 	push	ar3
      000823 C0 04            [24] 2242 	push	ar4
      000825 74r09            [12] 2243 	mov	a,#___str_28
      000827 C0 E0            [24] 2244 	push	acc
      000829 74s03            [12] 2245 	mov	a,#(___str_28 >> 8)
      00082B C0 E0            [24] 2246 	push	acc
      00082D 12r00r00         [24] 2247 	lcall	_printf_tiny
      000830 E5 81            [12] 2248 	mov	a,sp
      000832 24 FC            [12] 2249 	add	a,#0xfc
      000834 F5 81            [12] 2250 	mov	sp,a
                                   2251 ;	lcd.c:509: lcdbusywait();
      000836 12r00r40         [24] 2252 	lcall	_lcdbusywait
      000839 D0 00            [24] 2253 	pop	ar0
      00083B D0 01            [24] 2254 	pop	ar1
                                   2255 ;	lcd.c:511: LCD_RS = 1;
                                   2256 ;	assignBit
      00083D D2 92            [12] 2257 	setb	_P1_2
                                   2258 ;	lcd.c:512: LCD_RW = 0;
                                   2259 ;	assignBit
      00083F C2 93            [12] 2260 	clr	_P1_3
                                   2261 ;	lcd.c:513: lcd_ptr = row_values[i];
      000841 E8               [12] 2262 	mov	a,r0
      000842 25*00            [12] 2263 	add	a,_create_custom_char_sloc0_1_0
      000844 FA               [12] 2264 	mov	r2,a
      000845 E9               [12] 2265 	mov	a,r1
      000846 35*01            [12] 2266 	addc	a,(_create_custom_char_sloc0_1_0 + 1)
      000848 FB               [12] 2267 	mov	r3,a
      000849 AC*02            [24] 2268 	mov	r4,(_create_custom_char_sloc0_1_0 + 2)
      00084B 8A 82            [24] 2269 	mov	dpl,r2
      00084D 8B 83            [24] 2270 	mov	dph,r3
      00084F 8C F0            [24] 2271 	mov	b,r4
      000851 12r00r00         [24] 2272 	lcall	__gptrget
      000854 90 F0 00         [24] 2273 	mov	dptr,#_lcd_ptr
      000857 F0               [24] 2274 	movx	@dptr,a
                                   2275 ;	lcd.c:514: lcdbusywait();
      000858 C0 01            [24] 2276 	push	ar1
      00085A C0 00            [24] 2277 	push	ar0
      00085C 12r00r40         [24] 2278 	lcall	_lcdbusywait
      00085F D0 00            [24] 2279 	pop	ar0
      000861 D0 01            [24] 2280 	pop	ar1
      000863 D0 05            [24] 2281 	pop	ar5
      000865 D0 06            [24] 2282 	pop	ar6
      000867 D0 07            [24] 2283 	pop	ar7
                                   2284 ;	lcd.c:516: i++;
      000869 08               [12] 2285 	inc	r0
      00086A B8 00 01         [24] 2286 	cjne	r0,#0x00,00116$
      00086D 09               [12] 2287 	inc	r1
      00086E                       2288 00116$:
                                   2289 ;	lcd.c:518: }
      00086E 02r07rF7         [24] 2290 	ljmp	00101$
                                   2291 ;------------------------------------------------------------
                                   2292 ;Allocation info for local variables in function 'handler_custom_char'
                                   2293 ;------------------------------------------------------------
                                   2294 ;save_address              Allocated with name '_handler_custom_char_save_address_65537_176'
                                   2295 ;char_code                 Allocated with name '_handler_custom_char_char_code_65538_177'
                                   2296 ;row_values                Allocated with name '_handler_custom_char_row_values_65539_178'
                                   2297 ;j                         Allocated with name '_handler_custom_char_j_65539_178'
                                   2298 ;------------------------------------------------------------
                                   2299 ;	lcd.c:520: void handler_custom_char(void) {
                                   2300 ;	-----------------------------------------
                                   2301 ;	 function handler_custom_char
                                   2302 ;	-----------------------------------------
      000871                       2303 _handler_custom_char:
                                   2304 ;	lcd.c:521: printf("\033[0;33m"); // Set text color to yellow
      000871 74r18            [12] 2305 	mov	a,#___str_29
      000873 C0 E0            [24] 2306 	push	acc
      000875 74s03            [12] 2307 	mov	a,#(___str_29 >> 8)
      000877 C0 E0            [24] 2308 	push	acc
      000879 74 80            [12] 2309 	mov	a,#0x80
      00087B C0 E0            [24] 2310 	push	acc
      00087D 12r00r00         [24] 2311 	lcall	_printf
      000880 15 81            [12] 2312 	dec	sp
      000882 15 81            [12] 2313 	dec	sp
      000884 15 81            [12] 2314 	dec	sp
                                   2315 ;	lcd.c:524: unsigned int save_address = get_cursor_address();
      000886 12r00rD2         [24] 2316 	lcall	_get_cursor_address
      000889 AF 82            [24] 2317 	mov	r7,dpl
                                   2318 ;	lcd.c:526: printf_tiny("Please enter the code for the custom character: ");
      00088B C0 07            [24] 2319 	push	ar7
      00088D 74r20            [12] 2320 	mov	a,#___str_30
      00088F C0 E0            [24] 2321 	push	acc
      000891 74s03            [12] 2322 	mov	a,#(___str_30 >> 8)
      000893 C0 E0            [24] 2323 	push	acc
      000895 12r00r00         [24] 2324 	lcall	_printf_tiny
      000898 15 81            [12] 2325 	dec	sp
      00089A 15 81            [12] 2326 	dec	sp
                                   2327 ;	lcd.c:528: unsigned char char_code = getchar();
      00089C 12r00r00         [24] 2328 	lcall	_getchar
      00089F AD 82            [24] 2329 	mov	r5,dpl
                                   2330 ;	lcd.c:531: printf_tiny("%c\n\r", char_code);
      0008A1 8D 04            [24] 2331 	mov	ar4,r5
      0008A3 7E 00            [12] 2332 	mov	r6,#0x00
      0008A5 C0 05            [24] 2333 	push	ar5
      0008A7 C0 04            [24] 2334 	push	ar4
      0008A9 C0 06            [24] 2335 	push	ar6
      0008AB 74r51            [12] 2336 	mov	a,#___str_31
      0008AD C0 E0            [24] 2337 	push	acc
      0008AF 74s03            [12] 2338 	mov	a,#(___str_31 >> 8)
      0008B1 C0 E0            [24] 2339 	push	acc
      0008B3 12r00r00         [24] 2340 	lcall	_printf_tiny
      0008B6 E5 81            [12] 2341 	mov	a,sp
      0008B8 24 FC            [12] 2342 	add	a,#0xfc
      0008BA F5 81            [12] 2343 	mov	sp,a
      0008BC D0 05            [24] 2344 	pop	ar5
      0008BE D0 07            [24] 2345 	pop	ar7
                                   2346 ;	lcd.c:537: while (j < 8) { // Loop through each row of the custom character and get its value from the user
      0008C0 7E 00            [12] 2347 	mov	r6,#0x00
      0008C2                       2348 00101$:
      0008C2 BE 08 00         [24] 2349 	cjne	r6,#0x08,00115$
      0008C5                       2350 00115$:
      0008C5 50 4B            [24] 2351 	jnc	00103$
                                   2352 ;	lcd.c:538: printf_tiny("\n\rPlease enter the value for row %d: ", j);
      0008C7 8E 03            [24] 2353 	mov	ar3,r6
      0008C9 7C 00            [12] 2354 	mov	r4,#0x00
      0008CB C0 07            [24] 2355 	push	ar7
      0008CD C0 06            [24] 2356 	push	ar6
      0008CF C0 05            [24] 2357 	push	ar5
      0008D1 C0 03            [24] 2358 	push	ar3
      0008D3 C0 04            [24] 2359 	push	ar4
      0008D5 74r56            [12] 2360 	mov	a,#___str_32
      0008D7 C0 E0            [24] 2361 	push	acc
      0008D9 74s03            [12] 2362 	mov	a,#(___str_32 >> 8)
      0008DB C0 E0            [24] 2363 	push	acc
      0008DD 12r00r00         [24] 2364 	lcall	_printf_tiny
      0008E0 E5 81            [12] 2365 	mov	a,sp
      0008E2 24 FC            [12] 2366 	add	a,#0xfc
      0008E4 F5 81            [12] 2367 	mov	sp,a
      0008E6 D0 05            [24] 2368 	pop	ar5
      0008E8 D0 06            [24] 2369 	pop	ar6
                                   2370 ;	lcd.c:539: row_values[j] = get_hex_value();
      0008EA EE               [12] 2371 	mov	a,r6
      0008EB 24r49            [12] 2372 	add	a,#_handler_custom_char_row_values_65539_178
      0008ED FB               [12] 2373 	mov	r3,a
      0008EE E4               [12] 2374 	clr	a
      0008EF 34s00            [12] 2375 	addc	a,#(_handler_custom_char_row_values_65539_178 >> 8)
      0008F1 FC               [12] 2376 	mov	r4,a
      0008F2 C0 06            [24] 2377 	push	ar6
      0008F4 C0 05            [24] 2378 	push	ar5
      0008F6 C0 04            [24] 2379 	push	ar4
      0008F8 C0 03            [24] 2380 	push	ar3
      0008FA 12r06rFA         [24] 2381 	lcall	_get_hex_value
      0008FD AA 82            [24] 2382 	mov	r2,dpl
      0008FF D0 03            [24] 2383 	pop	ar3
      000901 D0 04            [24] 2384 	pop	ar4
      000903 D0 05            [24] 2385 	pop	ar5
      000905 D0 06            [24] 2386 	pop	ar6
      000907 D0 07            [24] 2387 	pop	ar7
      000909 8B 82            [24] 2388 	mov	dpl,r3
      00090B 8C 83            [24] 2389 	mov	dph,r4
      00090D EA               [12] 2390 	mov	a,r2
      00090E F0               [24] 2391 	movx	@dptr,a
                                   2392 ;	lcd.c:540: j++;
      00090F 0E               [12] 2393 	inc	r6
      000910 80 B0            [24] 2394 	sjmp	00101$
      000912                       2395 00103$:
                                   2396 ;	lcd.c:555: }
      000912 D2*05            [12] 2397 	setb	_handler_custom_char_sloc0_1_0
      000914 10 AF 02         [24] 2398 	jbc	ea,00117$
      000917 C2*05            [12] 2399 	clr	_handler_custom_char_sloc0_1_0
      000919                       2400 00117$:
                                   2401 ;	lcd.c:545: create_custom_char(char_code, row_values);
      000919 90r00r45         [24] 2402 	mov	dptr,#_create_custom_char_PARM_2
      00091C 74r49            [12] 2403 	mov	a,#_handler_custom_char_row_values_65539_178
      00091E F0               [24] 2404 	movx	@dptr,a
      00091F 74s00            [12] 2405 	mov	a,#(_handler_custom_char_row_values_65539_178 >> 8)
      000921 A3               [24] 2406 	inc	dptr
      000922 F0               [24] 2407 	movx	@dptr,a
      000923 E4               [12] 2408 	clr	a
      000924 A3               [24] 2409 	inc	dptr
      000925 F0               [24] 2410 	movx	@dptr,a
      000926 8D 82            [24] 2411 	mov	dpl,r5
      000928 C0 07            [24] 2412 	push	ar7
      00092A C0 05            [24] 2413 	push	ar5
      00092C 12r07rAF         [24] 2414 	lcall	_create_custom_char
                                   2415 ;	lcd.c:548: handler_lcdgotoxy();
      00092F 12r03rB9         [24] 2416 	lcall	_handler_lcdgotoxy
      000932 D0 05            [24] 2417 	pop	ar5
                                   2418 ;	lcd.c:551: lcdputch(char_code - '0');
      000934 ED               [12] 2419 	mov	a,r5
      000935 24 D0            [12] 2420 	add	a,#0xd0
      000937 F5 82            [12] 2421 	mov	dpl,a
      000939 12r01rB5         [24] 2422 	lcall	_lcdputch
      00093C D0 07            [24] 2423 	pop	ar7
                                   2424 ;	lcd.c:554: lcdgotoaddr(save_address);
      00093E 8F 82            [24] 2425 	mov	dpl,r7
      000940 12r00rDF         [24] 2426 	lcall	_lcdgotoaddr
      000943 A2*05            [12] 2427 	mov	c,_handler_custom_char_sloc0_1_0
      000945 92 AF            [24] 2428 	mov	ea,c
                                   2429 ;	lcd.c:558: printf("\033[0m");
      000947 74r5E            [12] 2430 	mov	a,#___str_23
      000949 C0 E0            [24] 2431 	push	acc
      00094B 74s02            [12] 2432 	mov	a,#(___str_23 >> 8)
      00094D C0 E0            [24] 2433 	push	acc
      00094F 74 80            [12] 2434 	mov	a,#0x80
      000951 C0 E0            [24] 2435 	push	acc
      000953 12r00r00         [24] 2436 	lcall	_printf
      000956 15 81            [12] 2437 	dec	sp
      000958 15 81            [12] 2438 	dec	sp
      00095A 15 81            [12] 2439 	dec	sp
                                   2440 ;	lcd.c:559: }
      00095C 22               [24] 2441 	ret
                                   2442 ;------------------------------------------------------------
                                   2443 ;Allocation info for local variables in function 'handle_cu_custom_char'
                                   2444 ;------------------------------------------------------------
                                   2445 ;ccode1                    Allocated with name '_handle_cu_custom_char_ccode1_65537_183'
                                   2446 ;row_vals1                 Allocated with name '_handle_cu_custom_char_row_vals1_65537_183'
                                   2447 ;ccode2                    Allocated with name '_handle_cu_custom_char_ccode2_65538_185'
                                   2448 ;row_vals2                 Allocated with name '_handle_cu_custom_char_row_vals2_65538_185'
                                   2449 ;ccode3                    Allocated with name '_handle_cu_custom_char_ccode3_65539_187'
                                   2450 ;row_vals3                 Allocated with name '_handle_cu_custom_char_row_vals3_65539_187'
                                   2451 ;ccode4                    Allocated with name '_handle_cu_custom_char_ccode4_65540_189'
                                   2452 ;row_vals4                 Allocated with name '_handle_cu_custom_char_row_vals4_65540_189'
                                   2453 ;------------------------------------------------------------
                                   2454 ;	lcd.c:561: void handle_cu_custom_char(void)
                                   2455 ;	-----------------------------------------
                                   2456 ;	 function handle_cu_custom_char
                                   2457 ;	-----------------------------------------
      00095D                       2458 _handle_cu_custom_char:
                                   2459 ;	lcd.c:563: printf("\033[0;33m");                           // Set text color to yellow
      00095D 74r18            [12] 2460 	mov	a,#___str_29
      00095F C0 E0            [24] 2461 	push	acc
      000961 74s03            [12] 2462 	mov	a,#(___str_29 >> 8)
      000963 C0 E0            [24] 2463 	push	acc
      000965 74 80            [12] 2464 	mov	a,#0x80
      000967 C0 E0            [24] 2465 	push	acc
      000969 12r00r00         [24] 2466 	lcall	_printf
      00096C 15 81            [12] 2467 	dec	sp
      00096E 15 81            [12] 2468 	dec	sp
      000970 15 81            [12] 2469 	dec	sp
                                   2470 ;	lcd.c:564: save_cursor_address = get_cursor_address();     // Get current cursor address and save it in a variable
      000972 12r00rD2         [24] 2471 	lcall	_get_cursor_address
      000975 E5 82            [12] 2472 	mov	a,dpl
      000977 90r00r00         [24] 2473 	mov	dptr,#_save_cursor_address
      00097A F0               [24] 2474 	movx	@dptr,a
                                   2475 ;	lcd.c:568: unsigned char row_vals1[8] = {0x00, 0x00, 0x0F, 0x08, 0x08, 0x09, 0x09, 0x09};
      00097B 90r00r51         [24] 2476 	mov	dptr,#_handle_cu_custom_char_row_vals1_65537_183
      00097E E4               [12] 2477 	clr	a
      00097F F0               [24] 2478 	movx	@dptr,a
      000980 90r00r52         [24] 2479 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0001)
      000983 F0               [24] 2480 	movx	@dptr,a
      000984 90r00r53         [24] 2481 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0002)
      000987 74 0F            [12] 2482 	mov	a,#0x0f
      000989 F0               [24] 2483 	movx	@dptr,a
      00098A 90r00r54         [24] 2484 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0003)
      00098D 74 08            [12] 2485 	mov	a,#0x08
      00098F F0               [24] 2486 	movx	@dptr,a
      000990 90r00r55         [24] 2487 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0004)
      000993 F0               [24] 2488 	movx	@dptr,a
      000994 90r00r56         [24] 2489 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0005)
      000997 04               [12] 2490 	inc	a
      000998 F0               [24] 2491 	movx	@dptr,a
      000999 90r00r57         [24] 2492 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0006)
      00099C F0               [24] 2493 	movx	@dptr,a
      00099D 90r00r58         [24] 2494 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0007)
      0009A0 F0               [24] 2495 	movx	@dptr,a
                                   2496 ;	lcd.c:573: }
      0009A1 D2*06            [12] 2497 	setb	_handle_cu_custom_char_sloc0_1_0
      0009A3 10 AF 02         [24] 2498 	jbc	ea,00103$
      0009A6 C2*06            [12] 2499 	clr	_handle_cu_custom_char_sloc0_1_0
      0009A8                       2500 00103$:
                                   2501 ;	lcd.c:570: create_custom_char(ccode1, row_vals1);      // Call function to create custom character on the LCD
      0009A8 90r00r45         [24] 2502 	mov	dptr,#_create_custom_char_PARM_2
      0009AB 74r51            [12] 2503 	mov	a,#_handle_cu_custom_char_row_vals1_65537_183
      0009AD F0               [24] 2504 	movx	@dptr,a
      0009AE 74s00            [12] 2505 	mov	a,#(_handle_cu_custom_char_row_vals1_65537_183 >> 8)
      0009B0 A3               [24] 2506 	inc	dptr
      0009B1 F0               [24] 2507 	movx	@dptr,a
      0009B2 E4               [12] 2508 	clr	a
      0009B3 A3               [24] 2509 	inc	dptr
      0009B4 F0               [24] 2510 	movx	@dptr,a
      0009B5 75 82 31         [24] 2511 	mov	dpl,#0x31
      0009B8 12r07rAF         [24] 2512 	lcall	_create_custom_char
                                   2513 ;	lcd.c:571: lcdgotoxy('1', '4');                        // Move cursor to position to display custom character 1
      0009BB 90r00r06         [24] 2514 	mov	dptr,#_lcdgotoxy_PARM_2
      0009BE 74 34            [12] 2515 	mov	a,#0x34
      0009C0 F0               [24] 2516 	movx	@dptr,a
      0009C1 75 82 31         [24] 2517 	mov	dpl,#0x31
      0009C4 12r00rFC         [24] 2518 	lcall	_lcdgotoxy
                                   2519 ;	lcd.c:572: lcdputch(ccode1 - '0');                     // Display custom character 1 on the LCD screen
      0009C7 75 82 01         [24] 2520 	mov	dpl,#0x01
      0009CA 12r01rB5         [24] 2521 	lcall	_lcdputch
      0009CD A2*06            [12] 2522 	mov	c,_handle_cu_custom_char_sloc0_1_0
      0009CF 92 AF            [24] 2523 	mov	ea,c
                                   2524 ;	lcd.c:577: unsigned char row_vals2[8] = {0x00, 0x00, 0x18, 0x00, 0x00, 0x02, 0x02, 0x02};
      0009D1 90r00r59         [24] 2525 	mov	dptr,#_handle_cu_custom_char_row_vals2_65538_185
      0009D4 E4               [12] 2526 	clr	a
      0009D5 F0               [24] 2527 	movx	@dptr,a
      0009D6 90r00r5A         [24] 2528 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0001)
      0009D9 F0               [24] 2529 	movx	@dptr,a
      0009DA 90r00r5B         [24] 2530 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0002)
      0009DD 74 18            [12] 2531 	mov	a,#0x18
      0009DF F0               [24] 2532 	movx	@dptr,a
      0009E0 90r00r5C         [24] 2533 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0003)
      0009E3 E4               [12] 2534 	clr	a
      0009E4 F0               [24] 2535 	movx	@dptr,a
      0009E5 90r00r5D         [24] 2536 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0004)
      0009E8 F0               [24] 2537 	movx	@dptr,a
      0009E9 90r00r5E         [24] 2538 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0005)
      0009EC 74 02            [12] 2539 	mov	a,#0x02
      0009EE F0               [24] 2540 	movx	@dptr,a
      0009EF 90r00r5F         [24] 2541 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0006)
      0009F2 F0               [24] 2542 	movx	@dptr,a
      0009F3 90r00r60         [24] 2543 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0007)
      0009F6 F0               [24] 2544 	movx	@dptr,a
                                   2545 ;	lcd.c:583: }
      0009F7 D2*06            [12] 2546 	setb	_handle_cu_custom_char_sloc0_1_0
      0009F9 10 AF 02         [24] 2547 	jbc	ea,00104$
      0009FC C2*06            [12] 2548 	clr	_handle_cu_custom_char_sloc0_1_0
      0009FE                       2549 00104$:
                                   2550 ;	lcd.c:579: create_custom_char(ccode2, row_vals2);      // Call function to create custom character on the LCD
      0009FE 90r00r45         [24] 2551 	mov	dptr,#_create_custom_char_PARM_2
      000A01 74r59            [12] 2552 	mov	a,#_handle_cu_custom_char_row_vals2_65538_185
      000A03 F0               [24] 2553 	movx	@dptr,a
      000A04 74s00            [12] 2554 	mov	a,#(_handle_cu_custom_char_row_vals2_65538_185 >> 8)
      000A06 A3               [24] 2555 	inc	dptr
      000A07 F0               [24] 2556 	movx	@dptr,a
      000A08 E4               [12] 2557 	clr	a
      000A09 A3               [24] 2558 	inc	dptr
      000A0A F0               [24] 2559 	movx	@dptr,a
      000A0B 75 82 32         [24] 2560 	mov	dpl,#0x32
      000A0E 12r07rAF         [24] 2561 	lcall	_create_custom_char
                                   2562 ;	lcd.c:580: lcdgotoxy('1', '5');                        // Move cursor to position to display custom character 2
      000A11 90r00r06         [24] 2563 	mov	dptr,#_lcdgotoxy_PARM_2
      000A14 74 35            [12] 2564 	mov	a,#0x35
      000A16 F0               [24] 2565 	movx	@dptr,a
      000A17 75 82 31         [24] 2566 	mov	dpl,#0x31
      000A1A 12r00rFC         [24] 2567 	lcall	_lcdgotoxy
                                   2568 ;	lcd.c:581: lcdputch(ccode2 - '0');                     // Display custom character 2 on the LCD screen
      000A1D 75 82 02         [24] 2569 	mov	dpl,#0x02
      000A20 12r01rB5         [24] 2570 	lcall	_lcdputch
                                   2571 ;	lcd.c:582: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000A23 90r00r00         [24] 2572 	mov	dptr,#_save_cursor_address
      000A26 E0               [24] 2573 	movx	a,@dptr
      000A27 F5 82            [12] 2574 	mov	dpl,a
      000A29 12r00rDF         [24] 2575 	lcall	_lcdgotoaddr
      000A2C A2*06            [12] 2576 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000A2E 92 AF            [24] 2577 	mov	ea,c
                                   2578 ;	lcd.c:587: unsigned char row_vals3[8] = {0x09, 0x09, 0x09, 0x0F, 0x01, 0x01, 0x00, 0x00};
      000A30 90r00r61         [24] 2579 	mov	dptr,#_handle_cu_custom_char_row_vals3_65539_187
      000A33 74 09            [12] 2580 	mov	a,#0x09
      000A35 F0               [24] 2581 	movx	@dptr,a
      000A36 90r00r62         [24] 2582 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0001)
      000A39 F0               [24] 2583 	movx	@dptr,a
      000A3A 90r00r63         [24] 2584 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0002)
      000A3D F0               [24] 2585 	movx	@dptr,a
      000A3E 90r00r64         [24] 2586 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0003)
      000A41 74 0F            [12] 2587 	mov	a,#0x0f
      000A43 F0               [24] 2588 	movx	@dptr,a
      000A44 90r00r65         [24] 2589 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0004)
      000A47 74 01            [12] 2590 	mov	a,#0x01
      000A49 F0               [24] 2591 	movx	@dptr,a
      000A4A 90r00r66         [24] 2592 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0005)
      000A4D F0               [24] 2593 	movx	@dptr,a
      000A4E 90r00r67         [24] 2594 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0006)
      000A51 E4               [12] 2595 	clr	a
      000A52 F0               [24] 2596 	movx	@dptr,a
      000A53 90r00r68         [24] 2597 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0007)
      000A56 F0               [24] 2598 	movx	@dptr,a
                                   2599 ;	lcd.c:593: }
      000A57 D2*06            [12] 2600 	setb	_handle_cu_custom_char_sloc0_1_0
      000A59 10 AF 02         [24] 2601 	jbc	ea,00105$
      000A5C C2*06            [12] 2602 	clr	_handle_cu_custom_char_sloc0_1_0
      000A5E                       2603 00105$:
                                   2604 ;	lcd.c:589: create_custom_char(ccode3, row_vals3);      // Call function to create custom character on the LCD
      000A5E 90r00r45         [24] 2605 	mov	dptr,#_create_custom_char_PARM_2
      000A61 74r61            [12] 2606 	mov	a,#_handle_cu_custom_char_row_vals3_65539_187
      000A63 F0               [24] 2607 	movx	@dptr,a
      000A64 74s00            [12] 2608 	mov	a,#(_handle_cu_custom_char_row_vals3_65539_187 >> 8)
      000A66 A3               [24] 2609 	inc	dptr
      000A67 F0               [24] 2610 	movx	@dptr,a
      000A68 E4               [12] 2611 	clr	a
      000A69 A3               [24] 2612 	inc	dptr
      000A6A F0               [24] 2613 	movx	@dptr,a
      000A6B 75 82 33         [24] 2614 	mov	dpl,#0x33
      000A6E 12r07rAF         [24] 2615 	lcall	_create_custom_char
                                   2616 ;	lcd.c:590: lcdgotoxy('2', '4');                        // Move cursor to position to display custom character 3
      000A71 90r00r06         [24] 2617 	mov	dptr,#_lcdgotoxy_PARM_2
      000A74 74 34            [12] 2618 	mov	a,#0x34
      000A76 F0               [24] 2619 	movx	@dptr,a
      000A77 75 82 32         [24] 2620 	mov	dpl,#0x32
      000A7A 12r00rFC         [24] 2621 	lcall	_lcdgotoxy
                                   2622 ;	lcd.c:591: lcdputch(ccode3 - '0');                     // Display custom character 3 on the LCD screen
      000A7D 75 82 03         [24] 2623 	mov	dpl,#0x03
      000A80 12r01rB5         [24] 2624 	lcall	_lcdputch
                                   2625 ;	lcd.c:592: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000A83 90r00r00         [24] 2626 	mov	dptr,#_save_cursor_address
      000A86 E0               [24] 2627 	movx	a,@dptr
      000A87 F5 82            [12] 2628 	mov	dpl,a
      000A89 12r00rDF         [24] 2629 	lcall	_lcdgotoaddr
      000A8C A2*06            [12] 2630 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000A8E 92 AF            [24] 2631 	mov	ea,c
                                   2632 ;	lcd.c:597: unsigned char row_vals4[8] = {0x02, 0x02, 0x02, 0x1A, 0x02, 0x1E, 0x00, 0x00};
      000A90 90r00r69         [24] 2633 	mov	dptr,#_handle_cu_custom_char_row_vals4_65540_189
      000A93 74 02            [12] 2634 	mov	a,#0x02
      000A95 F0               [24] 2635 	movx	@dptr,a
      000A96 90r00r6A         [24] 2636 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0001)
      000A99 F0               [24] 2637 	movx	@dptr,a
      000A9A 90r00r6B         [24] 2638 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0002)
      000A9D F0               [24] 2639 	movx	@dptr,a
      000A9E 90r00r6C         [24] 2640 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0003)
      000AA1 74 1A            [12] 2641 	mov	a,#0x1a
      000AA3 F0               [24] 2642 	movx	@dptr,a
      000AA4 90r00r6D         [24] 2643 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0004)
      000AA7 74 02            [12] 2644 	mov	a,#0x02
      000AA9 F0               [24] 2645 	movx	@dptr,a
      000AAA 90r00r6E         [24] 2646 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0005)
      000AAD 74 1E            [12] 2647 	mov	a,#0x1e
      000AAF F0               [24] 2648 	movx	@dptr,a
      000AB0 90r00r6F         [24] 2649 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0006)
      000AB3 E4               [12] 2650 	clr	a
      000AB4 F0               [24] 2651 	movx	@dptr,a
      000AB5 90r00r70         [24] 2652 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0007)
      000AB8 F0               [24] 2653 	movx	@dptr,a
                                   2654 ;	lcd.c:603: }
      000AB9 D2*06            [12] 2655 	setb	_handle_cu_custom_char_sloc0_1_0
      000ABB 10 AF 02         [24] 2656 	jbc	ea,00106$
      000ABE C2*06            [12] 2657 	clr	_handle_cu_custom_char_sloc0_1_0
      000AC0                       2658 00106$:
                                   2659 ;	lcd.c:599: create_custom_char(ccode4, row_vals4);      // Call function to create custom character on the LCD
      000AC0 90r00r45         [24] 2660 	mov	dptr,#_create_custom_char_PARM_2
      000AC3 74r69            [12] 2661 	mov	a,#_handle_cu_custom_char_row_vals4_65540_189
      000AC5 F0               [24] 2662 	movx	@dptr,a
      000AC6 74s00            [12] 2663 	mov	a,#(_handle_cu_custom_char_row_vals4_65540_189 >> 8)
      000AC8 A3               [24] 2664 	inc	dptr
      000AC9 F0               [24] 2665 	movx	@dptr,a
      000ACA E4               [12] 2666 	clr	a
      000ACB A3               [24] 2667 	inc	dptr
      000ACC F0               [24] 2668 	movx	@dptr,a
      000ACD 75 82 34         [24] 2669 	mov	dpl,#0x34
      000AD0 12r07rAF         [24] 2670 	lcall	_create_custom_char
                                   2671 ;	lcd.c:600: lcdgotoxy('2', '5');                        // Move cursor to position to display custom character 4
      000AD3 90r00r06         [24] 2672 	mov	dptr,#_lcdgotoxy_PARM_2
      000AD6 74 35            [12] 2673 	mov	a,#0x35
      000AD8 F0               [24] 2674 	movx	@dptr,a
      000AD9 75 82 32         [24] 2675 	mov	dpl,#0x32
      000ADC 12r00rFC         [24] 2676 	lcall	_lcdgotoxy
                                   2677 ;	lcd.c:601: lcdputch(ccode4 - '0');                     // Display custom character 4 on the LCD screen
      000ADF 75 82 04         [24] 2678 	mov	dpl,#0x04
      000AE2 12r01rB5         [24] 2679 	lcall	_lcdputch
                                   2680 ;	lcd.c:602: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000AE5 90r00r00         [24] 2681 	mov	dptr,#_save_cursor_address
      000AE8 E0               [24] 2682 	movx	a,@dptr
      000AE9 F5 82            [12] 2683 	mov	dpl,a
      000AEB 12r00rDF         [24] 2684 	lcall	_lcdgotoaddr
      000AEE A2*06            [12] 2685 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000AF0 92 AF            [24] 2686 	mov	ea,c
                                   2687 ;	lcd.c:605: printf("\033[0m");                              // Reset text color to default
      000AF2 74r5E            [12] 2688 	mov	a,#___str_23
      000AF4 C0 E0            [24] 2689 	push	acc
      000AF6 74s02            [12] 2690 	mov	a,#(___str_23 >> 8)
      000AF8 C0 E0            [24] 2691 	push	acc
      000AFA 74 80            [12] 2692 	mov	a,#0x80
      000AFC C0 E0            [24] 2693 	push	acc
      000AFE 12r00r00         [24] 2694 	lcall	_printf
      000B01 15 81            [12] 2695 	dec	sp
      000B03 15 81            [12] 2696 	dec	sp
      000B05 15 81            [12] 2697 	dec	sp
                                   2698 ;	lcd.c:606: }
      000B07 22               [24] 2699 	ret
                                   2700 ;------------------------------------------------------------
                                   2701 ;Allocation info for local variables in function 'handle_sadsmiley_custom_char'
                                   2702 ;------------------------------------------------------------
                                   2703 ;ccode1                    Allocated with name '_handle_sadsmiley_custom_char_ccode1_65537_193'
                                   2704 ;row_vals1                 Allocated with name '_handle_sadsmiley_custom_char_row_vals1_65537_193'
                                   2705 ;ccode2                    Allocated with name '_handle_sadsmiley_custom_char_ccode2_65538_195'
                                   2706 ;row_vals2                 Allocated with name '_handle_sadsmiley_custom_char_row_vals2_65538_195'
                                   2707 ;ccode3                    Allocated with name '_handle_sadsmiley_custom_char_ccode3_65539_197'
                                   2708 ;row_vals3                 Allocated with name '_handle_sadsmiley_custom_char_row_vals3_65539_197'
                                   2709 ;ccode4                    Allocated with name '_handle_sadsmiley_custom_char_ccode4_65540_199'
                                   2710 ;row_vals4                 Allocated with name '_handle_sadsmiley_custom_char_row_vals4_65540_199'
                                   2711 ;------------------------------------------------------------
                                   2712 ;	lcd.c:611: void handle_sadsmiley_custom_char(void)
                                   2713 ;	-----------------------------------------
                                   2714 ;	 function handle_sadsmiley_custom_char
                                   2715 ;	-----------------------------------------
      000B08                       2716 _handle_sadsmiley_custom_char:
                                   2717 ;	lcd.c:614: printf("\033[0;33m");
      000B08 74r18            [12] 2718 	mov	a,#___str_29
      000B0A C0 E0            [24] 2719 	push	acc
      000B0C 74s03            [12] 2720 	mov	a,#(___str_29 >> 8)
      000B0E C0 E0            [24] 2721 	push	acc
      000B10 74 80            [12] 2722 	mov	a,#0x80
      000B12 C0 E0            [24] 2723 	push	acc
      000B14 12r00r00         [24] 2724 	lcall	_printf
      000B17 15 81            [12] 2725 	dec	sp
      000B19 15 81            [12] 2726 	dec	sp
      000B1B 15 81            [12] 2727 	dec	sp
                                   2728 ;	lcd.c:617: save_cursor_address = get_cursor_address();
      000B1D 12r00rD2         [24] 2729 	lcall	_get_cursor_address
      000B20 E5 82            [12] 2730 	mov	a,dpl
      000B22 90r00r00         [24] 2731 	mov	dptr,#_save_cursor_address
      000B25 F0               [24] 2732 	movx	@dptr,a
                                   2733 ;	lcd.c:621: unsigned char row_vals1[8] = {0x1F, 0x1F, 0x11, 0x15, 0x11, 0x1F, 0x1F, 0x1F};
      000B26 90r00r71         [24] 2734 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals1_65537_193
      000B29 74 1F            [12] 2735 	mov	a,#0x1f
      000B2B F0               [24] 2736 	movx	@dptr,a
      000B2C 90r00r72         [24] 2737 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0001)
      000B2F F0               [24] 2738 	movx	@dptr,a
      000B30 90r00r73         [24] 2739 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0002)
      000B33 74 11            [12] 2740 	mov	a,#0x11
      000B35 F0               [24] 2741 	movx	@dptr,a
      000B36 90r00r74         [24] 2742 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0003)
      000B39 74 15            [12] 2743 	mov	a,#0x15
      000B3B F0               [24] 2744 	movx	@dptr,a
      000B3C 90r00r75         [24] 2745 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0004)
      000B3F 74 11            [12] 2746 	mov	a,#0x11
      000B41 F0               [24] 2747 	movx	@dptr,a
      000B42 90r00r76         [24] 2748 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0005)
      000B45 74 1F            [12] 2749 	mov	a,#0x1f
      000B47 F0               [24] 2750 	movx	@dptr,a
      000B48 90r00r77         [24] 2751 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0006)
      000B4B F0               [24] 2752 	movx	@dptr,a
      000B4C 90r00r78         [24] 2753 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0007)
      000B4F F0               [24] 2754 	movx	@dptr,a
                                   2755 ;	lcd.c:628: }
      000B50 D2*07            [12] 2756 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000B52 10 AF 02         [24] 2757 	jbc	ea,00103$
      000B55 C2*07            [12] 2758 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000B57                       2759 00103$:
                                   2760 ;	lcd.c:624: create_custom_char(ccode1, row_vals1);
      000B57 90r00r45         [24] 2761 	mov	dptr,#_create_custom_char_PARM_2
      000B5A 74r71            [12] 2762 	mov	a,#_handle_sadsmiley_custom_char_row_vals1_65537_193
      000B5C F0               [24] 2763 	movx	@dptr,a
      000B5D 74s00            [12] 2764 	mov	a,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 >> 8)
      000B5F A3               [24] 2765 	inc	dptr
      000B60 F0               [24] 2766 	movx	@dptr,a
      000B61 E4               [12] 2767 	clr	a
      000B62 A3               [24] 2768 	inc	dptr
      000B63 F0               [24] 2769 	movx	@dptr,a
      000B64 75 82 31         [24] 2770 	mov	dpl,#0x31
      000B67 12r07rAF         [24] 2771 	lcall	_create_custom_char
                                   2772 ;	lcd.c:626: lcdgotoxy('1', '4');
      000B6A 90r00r06         [24] 2773 	mov	dptr,#_lcdgotoxy_PARM_2
      000B6D 74 34            [12] 2774 	mov	a,#0x34
      000B6F F0               [24] 2775 	movx	@dptr,a
      000B70 75 82 31         [24] 2776 	mov	dpl,#0x31
      000B73 12r00rFC         [24] 2777 	lcall	_lcdgotoxy
                                   2778 ;	lcd.c:627: lcdputch(ccode1 - '0');
      000B76 75 82 01         [24] 2779 	mov	dpl,#0x01
      000B79 12r01rB5         [24] 2780 	lcall	_lcdputch
      000B7C A2*07            [12] 2781 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000B7E 92 AF            [24] 2782 	mov	ea,c
                                   2783 ;	lcd.c:632: unsigned char row_vals2[8] = {0x1F, 0x1F, 0x11, 0x15, 0x11, 0x1F, 0x1F, 0x1F};
      000B80 90r00r79         [24] 2784 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals2_65538_195
      000B83 74 1F            [12] 2785 	mov	a,#0x1f
      000B85 F0               [24] 2786 	movx	@dptr,a
      000B86 90r00r7A         [24] 2787 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0001)
      000B89 F0               [24] 2788 	movx	@dptr,a
      000B8A 90r00r7B         [24] 2789 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0002)
      000B8D 74 11            [12] 2790 	mov	a,#0x11
      000B8F F0               [24] 2791 	movx	@dptr,a
      000B90 90r00r7C         [24] 2792 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0003)
      000B93 74 15            [12] 2793 	mov	a,#0x15
      000B95 F0               [24] 2794 	movx	@dptr,a
      000B96 90r00r7D         [24] 2795 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0004)
      000B99 74 11            [12] 2796 	mov	a,#0x11
      000B9B F0               [24] 2797 	movx	@dptr,a
      000B9C 90r00r7E         [24] 2798 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0005)
      000B9F 74 1F            [12] 2799 	mov	a,#0x1f
      000BA1 F0               [24] 2800 	movx	@dptr,a
      000BA2 90r00r7F         [24] 2801 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0006)
      000BA5 F0               [24] 2802 	movx	@dptr,a
      000BA6 90r00r80         [24] 2803 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0007)
      000BA9 F0               [24] 2804 	movx	@dptr,a
                                   2805 ;	lcd.c:641: }
      000BAA D2*07            [12] 2806 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000BAC 10 AF 02         [24] 2807 	jbc	ea,00104$
      000BAF C2*07            [12] 2808 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000BB1                       2809 00104$:
                                   2810 ;	lcd.c:635: create_custom_char(ccode2, row_vals2);
      000BB1 90r00r45         [24] 2811 	mov	dptr,#_create_custom_char_PARM_2
      000BB4 74r79            [12] 2812 	mov	a,#_handle_sadsmiley_custom_char_row_vals2_65538_195
      000BB6 F0               [24] 2813 	movx	@dptr,a
      000BB7 74s00            [12] 2814 	mov	a,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 >> 8)
      000BB9 A3               [24] 2815 	inc	dptr
      000BBA F0               [24] 2816 	movx	@dptr,a
      000BBB E4               [12] 2817 	clr	a
      000BBC A3               [24] 2818 	inc	dptr
      000BBD F0               [24] 2819 	movx	@dptr,a
      000BBE 75 82 32         [24] 2820 	mov	dpl,#0x32
      000BC1 12r07rAF         [24] 2821 	lcall	_create_custom_char
                                   2822 ;	lcd.c:637: lcdgotoxy('1', '5');
      000BC4 90r00r06         [24] 2823 	mov	dptr,#_lcdgotoxy_PARM_2
      000BC7 74 35            [12] 2824 	mov	a,#0x35
      000BC9 F0               [24] 2825 	movx	@dptr,a
      000BCA 75 82 31         [24] 2826 	mov	dpl,#0x31
      000BCD 12r00rFC         [24] 2827 	lcall	_lcdgotoxy
                                   2828 ;	lcd.c:638: lcdputch(ccode2 - '0');
      000BD0 75 82 02         [24] 2829 	mov	dpl,#0x02
      000BD3 12r01rB5         [24] 2830 	lcall	_lcdputch
                                   2831 ;	lcd.c:640: lcdgotoaddr(save_cursor_address);
      000BD6 90r00r00         [24] 2832 	mov	dptr,#_save_cursor_address
      000BD9 E0               [24] 2833 	movx	a,@dptr
      000BDA F5 82            [12] 2834 	mov	dpl,a
      000BDC 12r00rDF         [24] 2835 	lcall	_lcdgotoaddr
      000BDF A2*07            [12] 2836 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000BE1 92 AF            [24] 2837 	mov	ea,c
                                   2838 ;	lcd.c:645: unsigned char row_vals3[8] = {0x1F, 0x1F, 0x1F, 0x10, 0x1B, 0x1C, 0x1F, 0x1F};
      000BE3 90r00r81         [24] 2839 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals3_65539_197
      000BE6 74 1F            [12] 2840 	mov	a,#0x1f
      000BE8 F0               [24] 2841 	movx	@dptr,a
      000BE9 90r00r82         [24] 2842 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0001)
      000BEC F0               [24] 2843 	movx	@dptr,a
      000BED 90r00r83         [24] 2844 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0002)
      000BF0 F0               [24] 2845 	movx	@dptr,a
      000BF1 90r00r84         [24] 2846 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0003)
      000BF4 74 10            [12] 2847 	mov	a,#0x10
      000BF6 F0               [24] 2848 	movx	@dptr,a
      000BF7 90r00r85         [24] 2849 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0004)
      000BFA 74 1B            [12] 2850 	mov	a,#0x1b
      000BFC F0               [24] 2851 	movx	@dptr,a
      000BFD 90r00r86         [24] 2852 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0005)
      000C00 04               [12] 2853 	inc	a
      000C01 F0               [24] 2854 	movx	@dptr,a
      000C02 90r00r87         [24] 2855 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0006)
      000C05 74 1F            [12] 2856 	mov	a,#0x1f
      000C07 F0               [24] 2857 	movx	@dptr,a
      000C08 90r00r88         [24] 2858 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0007)
      000C0B F0               [24] 2859 	movx	@dptr,a
                                   2860 ;	lcd.c:654: }
      000C0C D2*07            [12] 2861 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000C0E 10 AF 02         [24] 2862 	jbc	ea,00105$
      000C11 C2*07            [12] 2863 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000C13                       2864 00105$:
                                   2865 ;	lcd.c:648: create_custom_char(ccode3, row_vals3);
      000C13 90r00r45         [24] 2866 	mov	dptr,#_create_custom_char_PARM_2
      000C16 74r81            [12] 2867 	mov	a,#_handle_sadsmiley_custom_char_row_vals3_65539_197
      000C18 F0               [24] 2868 	movx	@dptr,a
      000C19 74s00            [12] 2869 	mov	a,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 >> 8)
      000C1B A3               [24] 2870 	inc	dptr
      000C1C F0               [24] 2871 	movx	@dptr,a
      000C1D E4               [12] 2872 	clr	a
      000C1E A3               [24] 2873 	inc	dptr
      000C1F F0               [24] 2874 	movx	@dptr,a
      000C20 75 82 33         [24] 2875 	mov	dpl,#0x33
      000C23 12r07rAF         [24] 2876 	lcall	_create_custom_char
                                   2877 ;	lcd.c:650: lcdgotoxy('2', '4');
      000C26 90r00r06         [24] 2878 	mov	dptr,#_lcdgotoxy_PARM_2
      000C29 74 34            [12] 2879 	mov	a,#0x34
      000C2B F0               [24] 2880 	movx	@dptr,a
      000C2C 75 82 32         [24] 2881 	mov	dpl,#0x32
      000C2F 12r00rFC         [24] 2882 	lcall	_lcdgotoxy
                                   2883 ;	lcd.c:651: lcdputch(ccode3 - '0');
      000C32 75 82 03         [24] 2884 	mov	dpl,#0x03
      000C35 12r01rB5         [24] 2885 	lcall	_lcdputch
                                   2886 ;	lcd.c:653: lcdgotoaddr(save_cursor_address);
      000C38 90r00r00         [24] 2887 	mov	dptr,#_save_cursor_address
      000C3B E0               [24] 2888 	movx	a,@dptr
      000C3C F5 82            [12] 2889 	mov	dpl,a
      000C3E 12r00rDF         [24] 2890 	lcall	_lcdgotoaddr
      000C41 A2*07            [12] 2891 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000C43 92 AF            [24] 2892 	mov	ea,c
                                   2893 ;	lcd.c:658: unsigned char row_vals4[8] = {0x1F, 0x1F, 0x1F, 0x01, 0x1B, 0x07, 0x1F, 0x1F};
      000C45 90r00r89         [24] 2894 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals4_65540_199
      000C48 74 1F            [12] 2895 	mov	a,#0x1f
      000C4A F0               [24] 2896 	movx	@dptr,a
      000C4B 90r00r8A         [24] 2897 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0001)
      000C4E F0               [24] 2898 	movx	@dptr,a
      000C4F 90r00r8B         [24] 2899 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0002)
      000C52 F0               [24] 2900 	movx	@dptr,a
      000C53 90r00r8C         [24] 2901 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0003)
      000C56 74 01            [12] 2902 	mov	a,#0x01
      000C58 F0               [24] 2903 	movx	@dptr,a
      000C59 90r00r8D         [24] 2904 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0004)
      000C5C 74 1B            [12] 2905 	mov	a,#0x1b
      000C5E F0               [24] 2906 	movx	@dptr,a
      000C5F 90r00r8E         [24] 2907 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0005)
      000C62 74 07            [12] 2908 	mov	a,#0x07
      000C64 F0               [24] 2909 	movx	@dptr,a
      000C65 90r00r8F         [24] 2910 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0006)
      000C68 74 1F            [12] 2911 	mov	a,#0x1f
      000C6A F0               [24] 2912 	movx	@dptr,a
      000C6B 90r00r90         [24] 2913 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0007)
      000C6E F0               [24] 2914 	movx	@dptr,a
                                   2915 ;	lcd.c:667: }
      000C6F D2*07            [12] 2916 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000C71 10 AF 02         [24] 2917 	jbc	ea,00106$
      000C74 C2*07            [12] 2918 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000C76                       2919 00106$:
                                   2920 ;	lcd.c:661: create_custom_char(ccode4, row_vals4);
      000C76 90r00r45         [24] 2921 	mov	dptr,#_create_custom_char_PARM_2
      000C79 74r89            [12] 2922 	mov	a,#_handle_sadsmiley_custom_char_row_vals4_65540_199
      000C7B F0               [24] 2923 	movx	@dptr,a
      000C7C 74s00            [12] 2924 	mov	a,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 >> 8)
      000C7E A3               [24] 2925 	inc	dptr
      000C7F F0               [24] 2926 	movx	@dptr,a
      000C80 E4               [12] 2927 	clr	a
      000C81 A3               [24] 2928 	inc	dptr
      000C82 F0               [24] 2929 	movx	@dptr,a
      000C83 75 82 34         [24] 2930 	mov	dpl,#0x34
      000C86 12r07rAF         [24] 2931 	lcall	_create_custom_char
                                   2932 ;	lcd.c:663: lcdgotoxy('2', '5');
      000C89 90r00r06         [24] 2933 	mov	dptr,#_lcdgotoxy_PARM_2
      000C8C 74 35            [12] 2934 	mov	a,#0x35
      000C8E F0               [24] 2935 	movx	@dptr,a
      000C8F 75 82 32         [24] 2936 	mov	dpl,#0x32
      000C92 12r00rFC         [24] 2937 	lcall	_lcdgotoxy
                                   2938 ;	lcd.c:664: lcdputch(ccode4 - '0');
      000C95 75 82 04         [24] 2939 	mov	dpl,#0x04
      000C98 12r01rB5         [24] 2940 	lcall	_lcdputch
                                   2941 ;	lcd.c:666: lcdgotoaddr(save_cursor_address);
      000C9B 90r00r00         [24] 2942 	mov	dptr,#_save_cursor_address
      000C9E E0               [24] 2943 	movx	a,@dptr
      000C9F F5 82            [12] 2944 	mov	dpl,a
      000CA1 12r00rDF         [24] 2945 	lcall	_lcdgotoaddr
      000CA4 A2*07            [12] 2946 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000CA6 92 AF            [24] 2947 	mov	ea,c
                                   2948 ;	lcd.c:670: printf("\033[0m");
      000CA8 74r5E            [12] 2949 	mov	a,#___str_23
      000CAA C0 E0            [24] 2950 	push	acc
      000CAC 74s02            [12] 2951 	mov	a,#(___str_23 >> 8)
      000CAE C0 E0            [24] 2952 	push	acc
      000CB0 74 80            [12] 2953 	mov	a,#0x80
      000CB2 C0 E0            [24] 2954 	push	acc
      000CB4 12r00r00         [24] 2955 	lcall	_printf
      000CB7 15 81            [12] 2956 	dec	sp
      000CB9 15 81            [12] 2957 	dec	sp
      000CBB 15 81            [12] 2958 	dec	sp
                                   2959 ;	lcd.c:671: }
      000CBD 22               [24] 2960 	ret
                                   2961 ;------------------------------------------------------------
                                   2962 ;Allocation info for local variables in function 'handle_lock_custom_char'
                                   2963 ;------------------------------------------------------------
                                   2964 ;ccode1                    Allocated with name '_handle_lock_custom_char_ccode1_65536_202'
                                   2965 ;row_vals1                 Allocated with name '_handle_lock_custom_char_row_vals1_65536_202'
                                   2966 ;ccode2                    Allocated with name '_handle_lock_custom_char_ccode2_65537_204'
                                   2967 ;row_vals2                 Allocated with name '_handle_lock_custom_char_row_vals2_65537_204'
                                   2968 ;ccode3                    Allocated with name '_handle_lock_custom_char_ccode3_65538_206'
                                   2969 ;row_vals3                 Allocated with name '_handle_lock_custom_char_row_vals3_65538_206'
                                   2970 ;ccode4                    Allocated with name '_handle_lock_custom_char_ccode4_65539_208'
                                   2971 ;row_vals4                 Allocated with name '_handle_lock_custom_char_row_vals4_65539_208'
                                   2972 ;------------------------------------------------------------
                                   2973 ;	lcd.c:672: void handle_lock_custom_char(void)
                                   2974 ;	-----------------------------------------
                                   2975 ;	 function handle_lock_custom_char
                                   2976 ;	-----------------------------------------
      000CBE                       2977 _handle_lock_custom_char:
                                   2978 ;	lcd.c:676: unsigned char row_vals1[8] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
      000CBE 90r00r91         [24] 2979 	mov	dptr,#_handle_lock_custom_char_row_vals1_65536_202
      000CC1 74 1F            [12] 2980 	mov	a,#0x1f
      000CC3 F0               [24] 2981 	movx	@dptr,a
      000CC4 90r00r92         [24] 2982 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0001)
      000CC7 F0               [24] 2983 	movx	@dptr,a
      000CC8 90r00r93         [24] 2984 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0002)
      000CCB F0               [24] 2985 	movx	@dptr,a
      000CCC 90r00r94         [24] 2986 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0003)
      000CCF F0               [24] 2987 	movx	@dptr,a
      000CD0 90r00r95         [24] 2988 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0004)
      000CD3 F0               [24] 2989 	movx	@dptr,a
      000CD4 90r00r96         [24] 2990 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0005)
      000CD7 F0               [24] 2991 	movx	@dptr,a
      000CD8 90r00r97         [24] 2992 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0006)
      000CDB F0               [24] 2993 	movx	@dptr,a
      000CDC 90r00r98         [24] 2994 	mov	dptr,#(_handle_lock_custom_char_row_vals1_65536_202 + 0x0007)
      000CDF F0               [24] 2995 	movx	@dptr,a
                                   2996 ;	lcd.c:683: }
      000CE0 D2*08            [12] 2997 	setb	_handle_lock_custom_char_sloc0_1_0
      000CE2 10 AF 02         [24] 2998 	jbc	ea,00103$
      000CE5 C2*08            [12] 2999 	clr	_handle_lock_custom_char_sloc0_1_0
      000CE7                       3000 00103$:
                                   3001 ;	lcd.c:679: create_custom_char(ccode1, row_vals1);
      000CE7 90r00r45         [24] 3002 	mov	dptr,#_create_custom_char_PARM_2
      000CEA 74r91            [12] 3003 	mov	a,#_handle_lock_custom_char_row_vals1_65536_202
      000CEC F0               [24] 3004 	movx	@dptr,a
      000CED 74s00            [12] 3005 	mov	a,#(_handle_lock_custom_char_row_vals1_65536_202 >> 8)
      000CEF A3               [24] 3006 	inc	dptr
      000CF0 F0               [24] 3007 	movx	@dptr,a
      000CF1 E4               [12] 3008 	clr	a
      000CF2 A3               [24] 3009 	inc	dptr
      000CF3 F0               [24] 3010 	movx	@dptr,a
      000CF4 75 82 31         [24] 3011 	mov	dpl,#0x31
      000CF7 12r07rAF         [24] 3012 	lcall	_create_custom_char
                                   3013 ;	lcd.c:681: lcdgotoxy('3', '7');
      000CFA 90r00r06         [24] 3014 	mov	dptr,#_lcdgotoxy_PARM_2
      000CFD 74 37            [12] 3015 	mov	a,#0x37
      000CFF F0               [24] 3016 	movx	@dptr,a
      000D00 75 82 33         [24] 3017 	mov	dpl,#0x33
      000D03 12r00rFC         [24] 3018 	lcall	_lcdgotoxy
                                   3019 ;	lcd.c:682: lcdputch(ccode1 - '0');
      000D06 75 82 01         [24] 3020 	mov	dpl,#0x01
      000D09 12r01rB5         [24] 3021 	lcall	_lcdputch
      000D0C A2*08            [12] 3022 	mov	c,_handle_lock_custom_char_sloc0_1_0
      000D0E 92 AF            [24] 3023 	mov	ea,c
                                   3024 ;	lcd.c:687: unsigned char row_vals2[8] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
      000D10 90r00r99         [24] 3025 	mov	dptr,#_handle_lock_custom_char_row_vals2_65537_204
      000D13 74 1F            [12] 3026 	mov	a,#0x1f
      000D15 F0               [24] 3027 	movx	@dptr,a
      000D16 90r00r9A         [24] 3028 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0001)
      000D19 F0               [24] 3029 	movx	@dptr,a
      000D1A 90r00r9B         [24] 3030 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0002)
      000D1D F0               [24] 3031 	movx	@dptr,a
      000D1E 90r00r9C         [24] 3032 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0003)
      000D21 F0               [24] 3033 	movx	@dptr,a
      000D22 90r00r9D         [24] 3034 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0004)
      000D25 F0               [24] 3035 	movx	@dptr,a
      000D26 90r00r9E         [24] 3036 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0005)
      000D29 F0               [24] 3037 	movx	@dptr,a
      000D2A 90r00r9F         [24] 3038 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0006)
      000D2D F0               [24] 3039 	movx	@dptr,a
      000D2E 90r00rA0         [24] 3040 	mov	dptr,#(_handle_lock_custom_char_row_vals2_65537_204 + 0x0007)
      000D31 F0               [24] 3041 	movx	@dptr,a
                                   3042 ;	lcd.c:696: }
      000D32 D2*08            [12] 3043 	setb	_handle_lock_custom_char_sloc0_1_0
      000D34 10 AF 02         [24] 3044 	jbc	ea,00104$
      000D37 C2*08            [12] 3045 	clr	_handle_lock_custom_char_sloc0_1_0
      000D39                       3046 00104$:
                                   3047 ;	lcd.c:690: create_custom_char(ccode2, row_vals2);
      000D39 90r00r45         [24] 3048 	mov	dptr,#_create_custom_char_PARM_2
      000D3C 74r99            [12] 3049 	mov	a,#_handle_lock_custom_char_row_vals2_65537_204
      000D3E F0               [24] 3050 	movx	@dptr,a
      000D3F 74s00            [12] 3051 	mov	a,#(_handle_lock_custom_char_row_vals2_65537_204 >> 8)
      000D41 A3               [24] 3052 	inc	dptr
      000D42 F0               [24] 3053 	movx	@dptr,a
      000D43 E4               [12] 3054 	clr	a
      000D44 A3               [24] 3055 	inc	dptr
      000D45 F0               [24] 3056 	movx	@dptr,a
      000D46 75 82 32         [24] 3057 	mov	dpl,#0x32
      000D49 12r07rAF         [24] 3058 	lcall	_create_custom_char
                                   3059 ;	lcd.c:692: lcdgotoxy('3', '8');
      000D4C 90r00r06         [24] 3060 	mov	dptr,#_lcdgotoxy_PARM_2
      000D4F 74 38            [12] 3061 	mov	a,#0x38
      000D51 F0               [24] 3062 	movx	@dptr,a
      000D52 75 82 33         [24] 3063 	mov	dpl,#0x33
      000D55 12r00rFC         [24] 3064 	lcall	_lcdgotoxy
                                   3065 ;	lcd.c:693: lcdputch(ccode2 - '0');
      000D58 75 82 02         [24] 3066 	mov	dpl,#0x02
      000D5B 12r01rB5         [24] 3067 	lcall	_lcdputch
                                   3068 ;	lcd.c:695: lcdgotoaddr(save_cursor_address);
      000D5E 90r00r00         [24] 3069 	mov	dptr,#_save_cursor_address
      000D61 E0               [24] 3070 	movx	a,@dptr
      000D62 F5 82            [12] 3071 	mov	dpl,a
      000D64 12r00rDF         [24] 3072 	lcall	_lcdgotoaddr
      000D67 A2*08            [12] 3073 	mov	c,_handle_lock_custom_char_sloc0_1_0
      000D69 92 AF            [24] 3074 	mov	ea,c
                                   3075 ;	lcd.c:700: unsigned char row_vals3[8] = {0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10};
      000D6B 90r00rA1         [24] 3076 	mov	dptr,#_handle_lock_custom_char_row_vals3_65538_206
      000D6E 74 03            [12] 3077 	mov	a,#0x03
      000D70 F0               [24] 3078 	movx	@dptr,a
      000D71 90r00rA2         [24] 3079 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0001)
      000D74 04               [12] 3080 	inc	a
      000D75 F0               [24] 3081 	movx	@dptr,a
      000D76 90r00rA3         [24] 3082 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0002)
      000D79 23               [12] 3083 	rl	a
      000D7A F0               [24] 3084 	movx	@dptr,a
      000D7B 90r00rA4         [24] 3085 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0003)
      000D7E 23               [12] 3086 	rl	a
      000D7F F0               [24] 3087 	movx	@dptr,a
      000D80 90r00rA5         [24] 3088 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0004)
      000D83 F0               [24] 3089 	movx	@dptr,a
      000D84 90r00rA6         [24] 3090 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0005)
      000D87 F0               [24] 3091 	movx	@dptr,a
      000D88 90r00rA7         [24] 3092 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0006)
      000D8B F0               [24] 3093 	movx	@dptr,a
      000D8C 90r00rA8         [24] 3094 	mov	dptr,#(_handle_lock_custom_char_row_vals3_65538_206 + 0x0007)
      000D8F F0               [24] 3095 	movx	@dptr,a
                                   3096 ;	lcd.c:709: }
      000D90 D2*08            [12] 3097 	setb	_handle_lock_custom_char_sloc0_1_0
      000D92 10 AF 02         [24] 3098 	jbc	ea,00105$
      000D95 C2*08            [12] 3099 	clr	_handle_lock_custom_char_sloc0_1_0
      000D97                       3100 00105$:
                                   3101 ;	lcd.c:703: create_custom_char(ccode3, row_vals3);
      000D97 90r00r45         [24] 3102 	mov	dptr,#_create_custom_char_PARM_2
      000D9A 74rA1            [12] 3103 	mov	a,#_handle_lock_custom_char_row_vals3_65538_206
      000D9C F0               [24] 3104 	movx	@dptr,a
      000D9D 74s00            [12] 3105 	mov	a,#(_handle_lock_custom_char_row_vals3_65538_206 >> 8)
      000D9F A3               [24] 3106 	inc	dptr
      000DA0 F0               [24] 3107 	movx	@dptr,a
      000DA1 E4               [12] 3108 	clr	a
      000DA2 A3               [24] 3109 	inc	dptr
      000DA3 F0               [24] 3110 	movx	@dptr,a
      000DA4 75 82 33         [24] 3111 	mov	dpl,#0x33
      000DA7 12r07rAF         [24] 3112 	lcall	_create_custom_char
                                   3113 ;	lcd.c:705: lcdgotoxy('2', '7');
      000DAA 90r00r06         [24] 3114 	mov	dptr,#_lcdgotoxy_PARM_2
      000DAD 74 37            [12] 3115 	mov	a,#0x37
      000DAF F0               [24] 3116 	movx	@dptr,a
      000DB0 75 82 32         [24] 3117 	mov	dpl,#0x32
      000DB3 12r00rFC         [24] 3118 	lcall	_lcdgotoxy
                                   3119 ;	lcd.c:706: lcdputch(ccode3 - '0');
      000DB6 75 82 03         [24] 3120 	mov	dpl,#0x03
      000DB9 12r01rB5         [24] 3121 	lcall	_lcdputch
                                   3122 ;	lcd.c:708: lcdgotoaddr(save_cursor_address);
      000DBC 90r00r00         [24] 3123 	mov	dptr,#_save_cursor_address
      000DBF E0               [24] 3124 	movx	a,@dptr
      000DC0 F5 82            [12] 3125 	mov	dpl,a
      000DC2 12r00rDF         [24] 3126 	lcall	_lcdgotoaddr
      000DC5 A2*08            [12] 3127 	mov	c,_handle_lock_custom_char_sloc0_1_0
      000DC7 92 AF            [24] 3128 	mov	ea,c
                                   3129 ;	lcd.c:713: unsigned char row_vals4[8] = {0x18, 0x04, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01};
      000DC9 90r00rA9         [24] 3130 	mov	dptr,#_handle_lock_custom_char_row_vals4_65539_208
      000DCC 74 18            [12] 3131 	mov	a,#0x18
      000DCE F0               [24] 3132 	movx	@dptr,a
      000DCF 90r00rAA         [24] 3133 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0001)
      000DD2 74 04            [12] 3134 	mov	a,#0x04
      000DD4 F0               [24] 3135 	movx	@dptr,a
      000DD5 90r00rAB         [24] 3136 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0002)
      000DD8 03               [12] 3137 	rr	a
      000DD9 F0               [24] 3138 	movx	@dptr,a
      000DDA 90r00rAC         [24] 3139 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0003)
      000DDD 14               [12] 3140 	dec	a
      000DDE F0               [24] 3141 	movx	@dptr,a
      000DDF 90r00rAD         [24] 3142 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0004)
      000DE2 F0               [24] 3143 	movx	@dptr,a
      000DE3 90r00rAE         [24] 3144 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0005)
      000DE6 F0               [24] 3145 	movx	@dptr,a
      000DE7 90r00rAF         [24] 3146 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0006)
      000DEA F0               [24] 3147 	movx	@dptr,a
      000DEB 90r00rB0         [24] 3148 	mov	dptr,#(_handle_lock_custom_char_row_vals4_65539_208 + 0x0007)
      000DEE F0               [24] 3149 	movx	@dptr,a
                                   3150 ;	lcd.c:722: }
      000DEF D2*08            [12] 3151 	setb	_handle_lock_custom_char_sloc0_1_0
      000DF1 10 AF 02         [24] 3152 	jbc	ea,00106$
      000DF4 C2*08            [12] 3153 	clr	_handle_lock_custom_char_sloc0_1_0
      000DF6                       3154 00106$:
                                   3155 ;	lcd.c:716: create_custom_char(ccode4, row_vals4);
      000DF6 90r00r45         [24] 3156 	mov	dptr,#_create_custom_char_PARM_2
      000DF9 74rA9            [12] 3157 	mov	a,#_handle_lock_custom_char_row_vals4_65539_208
      000DFB F0               [24] 3158 	movx	@dptr,a
      000DFC 74s00            [12] 3159 	mov	a,#(_handle_lock_custom_char_row_vals4_65539_208 >> 8)
      000DFE A3               [24] 3160 	inc	dptr
      000DFF F0               [24] 3161 	movx	@dptr,a
      000E00 E4               [12] 3162 	clr	a
      000E01 A3               [24] 3163 	inc	dptr
      000E02 F0               [24] 3164 	movx	@dptr,a
      000E03 75 82 34         [24] 3165 	mov	dpl,#0x34
      000E06 12r07rAF         [24] 3166 	lcall	_create_custom_char
                                   3167 ;	lcd.c:718: lcdgotoxy('2', '8');
      000E09 90r00r06         [24] 3168 	mov	dptr,#_lcdgotoxy_PARM_2
      000E0C 74 38            [12] 3169 	mov	a,#0x38
      000E0E F0               [24] 3170 	movx	@dptr,a
      000E0F 75 82 32         [24] 3171 	mov	dpl,#0x32
      000E12 12r00rFC         [24] 3172 	lcall	_lcdgotoxy
                                   3173 ;	lcd.c:719: lcdputch(ccode4 - '0');
      000E15 75 82 04         [24] 3174 	mov	dpl,#0x04
      000E18 12r01rB5         [24] 3175 	lcall	_lcdputch
                                   3176 ;	lcd.c:721: lcdgotoaddr(save_cursor_address);
      000E1B 90r00r00         [24] 3177 	mov	dptr,#_save_cursor_address
      000E1E E0               [24] 3178 	movx	a,@dptr
      000E1F F5 82            [12] 3179 	mov	dpl,a
      000E21 12r00rDF         [24] 3180 	lcall	_lcdgotoaddr
      000E24 A2*08            [12] 3181 	mov	c,_handle_lock_custom_char_sloc0_1_0
      000E26 92 AF            [24] 3182 	mov	ea,c
                                   3183 ;	lcd.c:724: }
      000E28 22               [24] 3184 	ret
                                   3185 ;------------------------------------------------------------
                                   3186 ;Allocation info for local variables in function 'handle_unlock_custom_char'
                                   3187 ;------------------------------------------------------------
                                   3188 ;ccode1                    Allocated with name '_handle_unlock_custom_char_ccode1_65536_211'
                                   3189 ;row_vals1                 Allocated with name '_handle_unlock_custom_char_row_vals1_65536_211'
                                   3190 ;ccode2                    Allocated with name '_handle_unlock_custom_char_ccode2_65537_213'
                                   3191 ;row_vals2                 Allocated with name '_handle_unlock_custom_char_row_vals2_65537_213'
                                   3192 ;ccode3                    Allocated with name '_handle_unlock_custom_char_ccode3_65538_215'
                                   3193 ;row_vals3                 Allocated with name '_handle_unlock_custom_char_row_vals3_65538_215'
                                   3194 ;ccode4                    Allocated with name '_handle_unlock_custom_char_ccode4_65539_217'
                                   3195 ;row_vals4                 Allocated with name '_handle_unlock_custom_char_row_vals4_65539_217'
                                   3196 ;------------------------------------------------------------
                                   3197 ;	lcd.c:726: void handle_unlock_custom_char(void)
                                   3198 ;	-----------------------------------------
                                   3199 ;	 function handle_unlock_custom_char
                                   3200 ;	-----------------------------------------
      000E29                       3201 _handle_unlock_custom_char:
                                   3202 ;	lcd.c:730: unsigned char row_vals1[8] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
      000E29 90r00rB1         [24] 3203 	mov	dptr,#_handle_unlock_custom_char_row_vals1_65536_211
      000E2C 74 1F            [12] 3204 	mov	a,#0x1f
      000E2E F0               [24] 3205 	movx	@dptr,a
      000E2F 90r00rB2         [24] 3206 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0001)
      000E32 F0               [24] 3207 	movx	@dptr,a
      000E33 90r00rB3         [24] 3208 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0002)
      000E36 F0               [24] 3209 	movx	@dptr,a
      000E37 90r00rB4         [24] 3210 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0003)
      000E3A F0               [24] 3211 	movx	@dptr,a
      000E3B 90r00rB5         [24] 3212 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0004)
      000E3E F0               [24] 3213 	movx	@dptr,a
      000E3F 90r00rB6         [24] 3214 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0005)
      000E42 F0               [24] 3215 	movx	@dptr,a
      000E43 90r00rB7         [24] 3216 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0006)
      000E46 F0               [24] 3217 	movx	@dptr,a
      000E47 90r00rB8         [24] 3218 	mov	dptr,#(_handle_unlock_custom_char_row_vals1_65536_211 + 0x0007)
      000E4A F0               [24] 3219 	movx	@dptr,a
                                   3220 ;	lcd.c:737: }
      000E4B D2*09            [12] 3221 	setb	_handle_unlock_custom_char_sloc0_1_0
      000E4D 10 AF 02         [24] 3222 	jbc	ea,00103$
      000E50 C2*09            [12] 3223 	clr	_handle_unlock_custom_char_sloc0_1_0
      000E52                       3224 00103$:
                                   3225 ;	lcd.c:733: create_custom_char(ccode1, row_vals1);
      000E52 90r00r45         [24] 3226 	mov	dptr,#_create_custom_char_PARM_2
      000E55 74rB1            [12] 3227 	mov	a,#_handle_unlock_custom_char_row_vals1_65536_211
      000E57 F0               [24] 3228 	movx	@dptr,a
      000E58 74s00            [12] 3229 	mov	a,#(_handle_unlock_custom_char_row_vals1_65536_211 >> 8)
      000E5A A3               [24] 3230 	inc	dptr
      000E5B F0               [24] 3231 	movx	@dptr,a
      000E5C E4               [12] 3232 	clr	a
      000E5D A3               [24] 3233 	inc	dptr
      000E5E F0               [24] 3234 	movx	@dptr,a
      000E5F 75 82 31         [24] 3235 	mov	dpl,#0x31
      000E62 12r07rAF         [24] 3236 	lcall	_create_custom_char
                                   3237 ;	lcd.c:735: lcdgotoxy('3', '7');
      000E65 90r00r06         [24] 3238 	mov	dptr,#_lcdgotoxy_PARM_2
      000E68 74 37            [12] 3239 	mov	a,#0x37
      000E6A F0               [24] 3240 	movx	@dptr,a
      000E6B 75 82 33         [24] 3241 	mov	dpl,#0x33
      000E6E 12r00rFC         [24] 3242 	lcall	_lcdgotoxy
                                   3243 ;	lcd.c:736: lcdputch(ccode1 - '0');
      000E71 75 82 01         [24] 3244 	mov	dpl,#0x01
      000E74 12r01rB5         [24] 3245 	lcall	_lcdputch
      000E77 A2*09            [12] 3246 	mov	c,_handle_unlock_custom_char_sloc0_1_0
      000E79 92 AF            [24] 3247 	mov	ea,c
                                   3248 ;	lcd.c:741: unsigned char row_vals2[8] = {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F};
      000E7B 90r00rB9         [24] 3249 	mov	dptr,#_handle_unlock_custom_char_row_vals2_65537_213
      000E7E 74 1F            [12] 3250 	mov	a,#0x1f
      000E80 F0               [24] 3251 	movx	@dptr,a
      000E81 90r00rBA         [24] 3252 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0001)
      000E84 F0               [24] 3253 	movx	@dptr,a
      000E85 90r00rBB         [24] 3254 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0002)
      000E88 F0               [24] 3255 	movx	@dptr,a
      000E89 90r00rBC         [24] 3256 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0003)
      000E8C F0               [24] 3257 	movx	@dptr,a
      000E8D 90r00rBD         [24] 3258 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0004)
      000E90 F0               [24] 3259 	movx	@dptr,a
      000E91 90r00rBE         [24] 3260 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0005)
      000E94 F0               [24] 3261 	movx	@dptr,a
      000E95 90r00rBF         [24] 3262 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0006)
      000E98 F0               [24] 3263 	movx	@dptr,a
      000E99 90r00rC0         [24] 3264 	mov	dptr,#(_handle_unlock_custom_char_row_vals2_65537_213 + 0x0007)
      000E9C F0               [24] 3265 	movx	@dptr,a
                                   3266 ;	lcd.c:750: }
      000E9D D2*09            [12] 3267 	setb	_handle_unlock_custom_char_sloc0_1_0
      000E9F 10 AF 02         [24] 3268 	jbc	ea,00104$
      000EA2 C2*09            [12] 3269 	clr	_handle_unlock_custom_char_sloc0_1_0
      000EA4                       3270 00104$:
                                   3271 ;	lcd.c:744: create_custom_char(ccode2, row_vals2);
      000EA4 90r00r45         [24] 3272 	mov	dptr,#_create_custom_char_PARM_2
      000EA7 74rB9            [12] 3273 	mov	a,#_handle_unlock_custom_char_row_vals2_65537_213
      000EA9 F0               [24] 3274 	movx	@dptr,a
      000EAA 74s00            [12] 3275 	mov	a,#(_handle_unlock_custom_char_row_vals2_65537_213 >> 8)
      000EAC A3               [24] 3276 	inc	dptr
      000EAD F0               [24] 3277 	movx	@dptr,a
      000EAE E4               [12] 3278 	clr	a
      000EAF A3               [24] 3279 	inc	dptr
      000EB0 F0               [24] 3280 	movx	@dptr,a
      000EB1 75 82 32         [24] 3281 	mov	dpl,#0x32
      000EB4 12r07rAF         [24] 3282 	lcall	_create_custom_char
                                   3283 ;	lcd.c:746: lcdgotoxy('3', '8');
      000EB7 90r00r06         [24] 3284 	mov	dptr,#_lcdgotoxy_PARM_2
      000EBA 74 38            [12] 3285 	mov	a,#0x38
      000EBC F0               [24] 3286 	movx	@dptr,a
      000EBD 75 82 33         [24] 3287 	mov	dpl,#0x33
      000EC0 12r00rFC         [24] 3288 	lcall	_lcdgotoxy
                                   3289 ;	lcd.c:747: lcdputch(ccode2 - '0');
      000EC3 75 82 02         [24] 3290 	mov	dpl,#0x02
      000EC6 12r01rB5         [24] 3291 	lcall	_lcdputch
                                   3292 ;	lcd.c:749: lcdgotoaddr(save_cursor_address);
      000EC9 90r00r00         [24] 3293 	mov	dptr,#_save_cursor_address
      000ECC E0               [24] 3294 	movx	a,@dptr
      000ECD F5 82            [12] 3295 	mov	dpl,a
      000ECF 12r00rDF         [24] 3296 	lcall	_lcdgotoaddr
      000ED2 A2*09            [12] 3297 	mov	c,_handle_unlock_custom_char_sloc0_1_0
      000ED4 92 AF            [24] 3298 	mov	ea,c
                                   3299 ;	lcd.c:754: unsigned char row_vals3[8] = {0x18, 0x04, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01};
      000ED6 90r00rC1         [24] 3300 	mov	dptr,#_handle_unlock_custom_char_row_vals3_65538_215
      000ED9 74 18            [12] 3301 	mov	a,#0x18
      000EDB F0               [24] 3302 	movx	@dptr,a
      000EDC 90r00rC2         [24] 3303 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0001)
      000EDF 74 04            [12] 3304 	mov	a,#0x04
      000EE1 F0               [24] 3305 	movx	@dptr,a
      000EE2 90r00rC3         [24] 3306 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0002)
      000EE5 03               [12] 3307 	rr	a
      000EE6 F0               [24] 3308 	movx	@dptr,a
      000EE7 90r00rC4         [24] 3309 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0003)
      000EEA 14               [12] 3310 	dec	a
      000EEB F0               [24] 3311 	movx	@dptr,a
      000EEC 90r00rC5         [24] 3312 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0004)
      000EEF F0               [24] 3313 	movx	@dptr,a
      000EF0 90r00rC6         [24] 3314 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0005)
      000EF3 F0               [24] 3315 	movx	@dptr,a
      000EF4 90r00rC7         [24] 3316 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0006)
      000EF7 F0               [24] 3317 	movx	@dptr,a
      000EF8 90r00rC8         [24] 3318 	mov	dptr,#(_handle_unlock_custom_char_row_vals3_65538_215 + 0x0007)
      000EFB F0               [24] 3319 	movx	@dptr,a
                                   3320 ;	lcd.c:764: }
      000EFC D2*09            [12] 3321 	setb	_handle_unlock_custom_char_sloc0_1_0
      000EFE 10 AF 02         [24] 3322 	jbc	ea,00105$
      000F01 C2*09            [12] 3323 	clr	_handle_unlock_custom_char_sloc0_1_0
      000F03                       3324 00105$:
                                   3325 ;	lcd.c:758: create_custom_char(ccode3, row_vals3);
      000F03 90r00r45         [24] 3326 	mov	dptr,#_create_custom_char_PARM_2
      000F06 74rC1            [12] 3327 	mov	a,#_handle_unlock_custom_char_row_vals3_65538_215
      000F08 F0               [24] 3328 	movx	@dptr,a
      000F09 74s00            [12] 3329 	mov	a,#(_handle_unlock_custom_char_row_vals3_65538_215 >> 8)
      000F0B A3               [24] 3330 	inc	dptr
      000F0C F0               [24] 3331 	movx	@dptr,a
      000F0D E4               [12] 3332 	clr	a
      000F0E A3               [24] 3333 	inc	dptr
      000F0F F0               [24] 3334 	movx	@dptr,a
      000F10 75 82 33         [24] 3335 	mov	dpl,#0x33
      000F13 12r07rAF         [24] 3336 	lcall	_create_custom_char
                                   3337 ;	lcd.c:760: lcdgotoxy('2', '6');
      000F16 90r00r06         [24] 3338 	mov	dptr,#_lcdgotoxy_PARM_2
      000F19 74 36            [12] 3339 	mov	a,#0x36
      000F1B F0               [24] 3340 	movx	@dptr,a
      000F1C 75 82 32         [24] 3341 	mov	dpl,#0x32
      000F1F 12r00rFC         [24] 3342 	lcall	_lcdgotoxy
                                   3343 ;	lcd.c:761: lcdputch(ccode3 - '0');
      000F22 75 82 03         [24] 3344 	mov	dpl,#0x03
      000F25 12r01rB5         [24] 3345 	lcall	_lcdputch
                                   3346 ;	lcd.c:763: lcdgotoaddr(save_cursor_address);
      000F28 90r00r00         [24] 3347 	mov	dptr,#_save_cursor_address
      000F2B E0               [24] 3348 	movx	a,@dptr
      000F2C F5 82            [12] 3349 	mov	dpl,a
      000F2E 12r00rDF         [24] 3350 	lcall	_lcdgotoaddr
      000F31 A2*09            [12] 3351 	mov	c,_handle_unlock_custom_char_sloc0_1_0
      000F33 92 AF            [24] 3352 	mov	ea,c
                                   3353 ;	lcd.c:769: unsigned char row_vals4[8] = {0x03, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10, 0x10};
      000F35 90r00rC9         [24] 3354 	mov	dptr,#_handle_unlock_custom_char_row_vals4_65539_217
      000F38 74 03            [12] 3355 	mov	a,#0x03
      000F3A F0               [24] 3356 	movx	@dptr,a
      000F3B 90r00rCA         [24] 3357 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0001)
      000F3E 04               [12] 3358 	inc	a
      000F3F F0               [24] 3359 	movx	@dptr,a
      000F40 90r00rCB         [24] 3360 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0002)
      000F43 23               [12] 3361 	rl	a
      000F44 F0               [24] 3362 	movx	@dptr,a
      000F45 90r00rCC         [24] 3363 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0003)
      000F48 23               [12] 3364 	rl	a
      000F49 F0               [24] 3365 	movx	@dptr,a
      000F4A 90r00rCD         [24] 3366 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0004)
      000F4D F0               [24] 3367 	movx	@dptr,a
      000F4E 90r00rCE         [24] 3368 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0005)
      000F51 F0               [24] 3369 	movx	@dptr,a
      000F52 90r00rCF         [24] 3370 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0006)
      000F55 F0               [24] 3371 	movx	@dptr,a
      000F56 90r00rD0         [24] 3372 	mov	dptr,#(_handle_unlock_custom_char_row_vals4_65539_217 + 0x0007)
      000F59 F0               [24] 3373 	movx	@dptr,a
                                   3374 ;	lcd.c:779: }
      000F5A D2*09            [12] 3375 	setb	_handle_unlock_custom_char_sloc0_1_0
      000F5C 10 AF 02         [24] 3376 	jbc	ea,00106$
      000F5F C2*09            [12] 3377 	clr	_handle_unlock_custom_char_sloc0_1_0
      000F61                       3378 00106$:
                                   3379 ;	lcd.c:773: create_custom_char(ccode4, row_vals4);
      000F61 90r00r45         [24] 3380 	mov	dptr,#_create_custom_char_PARM_2
      000F64 74rC9            [12] 3381 	mov	a,#_handle_unlock_custom_char_row_vals4_65539_217
      000F66 F0               [24] 3382 	movx	@dptr,a
      000F67 74s00            [12] 3383 	mov	a,#(_handle_unlock_custom_char_row_vals4_65539_217 >> 8)
      000F69 A3               [24] 3384 	inc	dptr
      000F6A F0               [24] 3385 	movx	@dptr,a
      000F6B E4               [12] 3386 	clr	a
      000F6C A3               [24] 3387 	inc	dptr
      000F6D F0               [24] 3388 	movx	@dptr,a
      000F6E 75 82 34         [24] 3389 	mov	dpl,#0x34
      000F71 12r07rAF         [24] 3390 	lcall	_create_custom_char
                                   3391 ;	lcd.c:775: lcdgotoxy('2', '5');
      000F74 90r00r06         [24] 3392 	mov	dptr,#_lcdgotoxy_PARM_2
      000F77 74 35            [12] 3393 	mov	a,#0x35
      000F79 F0               [24] 3394 	movx	@dptr,a
      000F7A 75 82 32         [24] 3395 	mov	dpl,#0x32
      000F7D 12r00rFC         [24] 3396 	lcall	_lcdgotoxy
                                   3397 ;	lcd.c:776: lcdputch(ccode4 - '0');
      000F80 75 82 04         [24] 3398 	mov	dpl,#0x04
      000F83 12r01rB5         [24] 3399 	lcall	_lcdputch
                                   3400 ;	lcd.c:778: lcdgotoaddr(save_cursor_address);
      000F86 90r00r00         [24] 3401 	mov	dptr,#_save_cursor_address
      000F89 E0               [24] 3402 	movx	a,@dptr
      000F8A F5 82            [12] 3403 	mov	dpl,a
      000F8C 12r00rDF         [24] 3404 	lcall	_lcdgotoaddr
      000F8F A2*09            [12] 3405 	mov	c,_handle_unlock_custom_char_sloc0_1_0
      000F91 92 AF            [24] 3406 	mov	ea,c
                                   3407 ;	lcd.c:781: }
      000F93 22               [24] 3408 	ret
                                   3409 ;------------------------------------------------------------
                                   3410 ;Allocation info for local variables in function 'handle_newuser_custom_char'
                                   3411 ;------------------------------------------------------------
                                   3412 ;ccode1                    Allocated with name '_handle_newuser_custom_char_ccode1_65536_220'
                                   3413 ;row_vals1                 Allocated with name '_handle_newuser_custom_char_row_vals1_65536_220'
                                   3414 ;ccode2                    Allocated with name '_handle_newuser_custom_char_ccode2_65537_222'
                                   3415 ;row_vals2                 Allocated with name '_handle_newuser_custom_char_row_vals2_65537_222'
                                   3416 ;ccode3                    Allocated with name '_handle_newuser_custom_char_ccode3_65538_224'
                                   3417 ;row_vals3                 Allocated with name '_handle_newuser_custom_char_row_vals3_65538_224'
                                   3418 ;ccode4                    Allocated with name '_handle_newuser_custom_char_ccode4_65539_226'
                                   3419 ;row_vals4                 Allocated with name '_handle_newuser_custom_char_row_vals4_65539_226'
                                   3420 ;------------------------------------------------------------
                                   3421 ;	lcd.c:782: void handle_newuser_custom_char(void)
                                   3422 ;	-----------------------------------------
                                   3423 ;	 function handle_newuser_custom_char
                                   3424 ;	-----------------------------------------
      000F94                       3425 _handle_newuser_custom_char:
                                   3426 ;	lcd.c:786: unsigned char row_vals1[8] = {0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10, 0x10};
      000F94 90r00rD1         [24] 3427 	mov	dptr,#_handle_newuser_custom_char_row_vals1_65536_220
      000F97 E4               [12] 3428 	clr	a
      000F98 F0               [24] 3429 	movx	@dptr,a
      000F99 90r00rD2         [24] 3430 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0001)
      000F9C F0               [24] 3431 	movx	@dptr,a
      000F9D 90r00rD3         [24] 3432 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0002)
      000FA0 74 07            [12] 3433 	mov	a,#0x07
      000FA2 F0               [24] 3434 	movx	@dptr,a
      000FA3 90r00rD4         [24] 3435 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0003)
      000FA6 04               [12] 3436 	inc	a
      000FA7 F0               [24] 3437 	movx	@dptr,a
      000FA8 90r00rD5         [24] 3438 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0004)
      000FAB 23               [12] 3439 	rl	a
      000FAC F0               [24] 3440 	movx	@dptr,a
      000FAD 90r00rD6         [24] 3441 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0005)
      000FB0 F0               [24] 3442 	movx	@dptr,a
      000FB1 90r00rD7         [24] 3443 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0006)
      000FB4 F0               [24] 3444 	movx	@dptr,a
      000FB5 90r00rD8         [24] 3445 	mov	dptr,#(_handle_newuser_custom_char_row_vals1_65536_220 + 0x0007)
      000FB8 F0               [24] 3446 	movx	@dptr,a
                                   3447 ;	lcd.c:793: }
      000FB9 D2*0A            [12] 3448 	setb	_handle_newuser_custom_char_sloc0_1_0
      000FBB 10 AF 02         [24] 3449 	jbc	ea,00103$
      000FBE C2*0A            [12] 3450 	clr	_handle_newuser_custom_char_sloc0_1_0
      000FC0                       3451 00103$:
                                   3452 ;	lcd.c:789: create_custom_char(ccode1, row_vals1);
      000FC0 90r00r45         [24] 3453 	mov	dptr,#_create_custom_char_PARM_2
      000FC3 74rD1            [12] 3454 	mov	a,#_handle_newuser_custom_char_row_vals1_65536_220
      000FC5 F0               [24] 3455 	movx	@dptr,a
      000FC6 74s00            [12] 3456 	mov	a,#(_handle_newuser_custom_char_row_vals1_65536_220 >> 8)
      000FC8 A3               [24] 3457 	inc	dptr
      000FC9 F0               [24] 3458 	movx	@dptr,a
      000FCA E4               [12] 3459 	clr	a
      000FCB A3               [24] 3460 	inc	dptr
      000FCC F0               [24] 3461 	movx	@dptr,a
      000FCD 75 82 31         [24] 3462 	mov	dpl,#0x31
      000FD0 12r07rAF         [24] 3463 	lcall	_create_custom_char
                                   3464 ;	lcd.c:791: lcdgotoxy('3', '7');
      000FD3 90r00r06         [24] 3465 	mov	dptr,#_lcdgotoxy_PARM_2
      000FD6 74 37            [12] 3466 	mov	a,#0x37
      000FD8 F0               [24] 3467 	movx	@dptr,a
      000FD9 75 82 33         [24] 3468 	mov	dpl,#0x33
      000FDC 12r00rFC         [24] 3469 	lcall	_lcdgotoxy
                                   3470 ;	lcd.c:792: lcdputch(ccode1 - '0');
      000FDF 75 82 01         [24] 3471 	mov	dpl,#0x01
      000FE2 12r01rB5         [24] 3472 	lcall	_lcdputch
      000FE5 A2*0A            [12] 3473 	mov	c,_handle_newuser_custom_char_sloc0_1_0
      000FE7 92 AF            [24] 3474 	mov	ea,c
                                   3475 ;	lcd.c:797: unsigned char row_vals2[8] = {0x00, 0x00, 0x1C, 0x02, 0x09, 0x1D, 0x09, 0x01};
      000FE9 90r00rD9         [24] 3476 	mov	dptr,#_handle_newuser_custom_char_row_vals2_65537_222
      000FEC E4               [12] 3477 	clr	a
      000FED F0               [24] 3478 	movx	@dptr,a
      000FEE 90r00rDA         [24] 3479 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0001)
      000FF1 F0               [24] 3480 	movx	@dptr,a
      000FF2 90r00rDB         [24] 3481 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0002)
      000FF5 74 1C            [12] 3482 	mov	a,#0x1c
      000FF7 F0               [24] 3483 	movx	@dptr,a
      000FF8 90r00rDC         [24] 3484 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0003)
      000FFB 74 02            [12] 3485 	mov	a,#0x02
      000FFD F0               [24] 3486 	movx	@dptr,a
      000FFE 90r00rDD         [24] 3487 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0004)
      001001 74 09            [12] 3488 	mov	a,#0x09
      001003 F0               [24] 3489 	movx	@dptr,a
      001004 90r00rDE         [24] 3490 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0005)
      001007 74 1D            [12] 3491 	mov	a,#0x1d
      001009 F0               [24] 3492 	movx	@dptr,a
      00100A 90r00rDF         [24] 3493 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0006)
      00100D 74 09            [12] 3494 	mov	a,#0x09
      00100F F0               [24] 3495 	movx	@dptr,a
      001010 90r00rE0         [24] 3496 	mov	dptr,#(_handle_newuser_custom_char_row_vals2_65537_222 + 0x0007)
      001013 74 01            [12] 3497 	mov	a,#0x01
      001015 F0               [24] 3498 	movx	@dptr,a
                                   3499 ;	lcd.c:806: }
      001016 D2*0A            [12] 3500 	setb	_handle_newuser_custom_char_sloc0_1_0
      001018 10 AF 02         [24] 3501 	jbc	ea,00104$
      00101B C2*0A            [12] 3502 	clr	_handle_newuser_custom_char_sloc0_1_0
      00101D                       3503 00104$:
                                   3504 ;	lcd.c:800: create_custom_char(ccode2, row_vals2);
      00101D 90r00r45         [24] 3505 	mov	dptr,#_create_custom_char_PARM_2
      001020 74rD9            [12] 3506 	mov	a,#_handle_newuser_custom_char_row_vals2_65537_222
      001022 F0               [24] 3507 	movx	@dptr,a
      001023 74s00            [12] 3508 	mov	a,#(_handle_newuser_custom_char_row_vals2_65537_222 >> 8)
      001025 A3               [24] 3509 	inc	dptr
      001026 F0               [24] 3510 	movx	@dptr,a
      001027 E4               [12] 3511 	clr	a
      001028 A3               [24] 3512 	inc	dptr
      001029 F0               [24] 3513 	movx	@dptr,a
      00102A 75 82 32         [24] 3514 	mov	dpl,#0x32
      00102D 12r07rAF         [24] 3515 	lcall	_create_custom_char
                                   3516 ;	lcd.c:802: lcdgotoxy('3', '8');
      001030 90r00r06         [24] 3517 	mov	dptr,#_lcdgotoxy_PARM_2
      001033 74 38            [12] 3518 	mov	a,#0x38
      001035 F0               [24] 3519 	movx	@dptr,a
      001036 75 82 33         [24] 3520 	mov	dpl,#0x33
      001039 12r00rFC         [24] 3521 	lcall	_lcdgotoxy
                                   3522 ;	lcd.c:803: lcdputch(ccode2 - '0');
      00103C 75 82 02         [24] 3523 	mov	dpl,#0x02
      00103F 12r01rB5         [24] 3524 	lcall	_lcdputch
                                   3525 ;	lcd.c:805: lcdgotoaddr(save_cursor_address);
      001042 90r00r00         [24] 3526 	mov	dptr,#_save_cursor_address
      001045 E0               [24] 3527 	movx	a,@dptr
      001046 F5 82            [12] 3528 	mov	dpl,a
      001048 12r00rDF         [24] 3529 	lcall	_lcdgotoaddr
      00104B A2*0A            [12] 3530 	mov	c,_handle_newuser_custom_char_sloc0_1_0
      00104D 92 AF            [24] 3531 	mov	ea,c
                                   3532 ;	lcd.c:810: unsigned char row_vals3[8] = {0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x04, 0x03};
      00104F 90r00rE1         [24] 3533 	mov	dptr,#_handle_newuser_custom_char_row_vals3_65538_224
      001052 E4               [12] 3534 	clr	a
      001053 F0               [24] 3535 	movx	@dptr,a
      001054 90r00rE2         [24] 3536 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0001)
      001057 F0               [24] 3537 	movx	@dptr,a
      001058 90r00rE3         [24] 3538 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0002)
      00105B F0               [24] 3539 	movx	@dptr,a
      00105C 90r00rE4         [24] 3540 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0003)
      00105F F0               [24] 3541 	movx	@dptr,a
      001060 90r00rE5         [24] 3542 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0004)
      001063 74 03            [12] 3543 	mov	a,#0x03
      001065 F0               [24] 3544 	movx	@dptr,a
      001066 90r00rE6         [24] 3545 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0005)
      001069 04               [12] 3546 	inc	a
      00106A F0               [24] 3547 	movx	@dptr,a
      00106B 90r00rE7         [24] 3548 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0006)
      00106E F0               [24] 3549 	movx	@dptr,a
      00106F 90r00rE8         [24] 3550 	mov	dptr,#(_handle_newuser_custom_char_row_vals3_65538_224 + 0x0007)
      001072 14               [12] 3551 	dec	a
      001073 F0               [24] 3552 	movx	@dptr,a
                                   3553 ;	lcd.c:819: }
      001074 D2*0A            [12] 3554 	setb	_handle_newuser_custom_char_sloc0_1_0
      001076 10 AF 02         [24] 3555 	jbc	ea,00105$
      001079 C2*0A            [12] 3556 	clr	_handle_newuser_custom_char_sloc0_1_0
      00107B                       3557 00105$:
                                   3558 ;	lcd.c:813: create_custom_char(ccode3, row_vals3);
      00107B 90r00r45         [24] 3559 	mov	dptr,#_create_custom_char_PARM_2
      00107E 74rE1            [12] 3560 	mov	a,#_handle_newuser_custom_char_row_vals3_65538_224
      001080 F0               [24] 3561 	movx	@dptr,a
      001081 74s00            [12] 3562 	mov	a,#(_handle_newuser_custom_char_row_vals3_65538_224 >> 8)
      001083 A3               [24] 3563 	inc	dptr
      001084 F0               [24] 3564 	movx	@dptr,a
      001085 E4               [12] 3565 	clr	a
      001086 A3               [24] 3566 	inc	dptr
      001087 F0               [24] 3567 	movx	@dptr,a
      001088 75 82 33         [24] 3568 	mov	dpl,#0x33
      00108B 12r07rAF         [24] 3569 	lcall	_create_custom_char
                                   3570 ;	lcd.c:815: lcdgotoxy('2', '7');
      00108E 90r00r06         [24] 3571 	mov	dptr,#_lcdgotoxy_PARM_2
      001091 74 37            [12] 3572 	mov	a,#0x37
      001093 F0               [24] 3573 	movx	@dptr,a
      001094 75 82 32         [24] 3574 	mov	dpl,#0x32
      001097 12r00rFC         [24] 3575 	lcall	_lcdgotoxy
                                   3576 ;	lcd.c:816: lcdputch(ccode3 - '0');
      00109A 75 82 03         [24] 3577 	mov	dpl,#0x03
      00109D 12r01rB5         [24] 3578 	lcall	_lcdputch
                                   3579 ;	lcd.c:818: lcdgotoaddr(save_cursor_address);
      0010A0 90r00r00         [24] 3580 	mov	dptr,#_save_cursor_address
      0010A3 E0               [24] 3581 	movx	a,@dptr
      0010A4 F5 82            [12] 3582 	mov	dpl,a
      0010A6 12r00rDF         [24] 3583 	lcall	_lcdgotoaddr
      0010A9 A2*0A            [12] 3584 	mov	c,_handle_newuser_custom_char_sloc0_1_0
      0010AB 92 AF            [24] 3585 	mov	ea,c
                                   3586 ;	lcd.c:823: unsigned char row_vals4[8] = {0x00, 0x00, 0x00, 0x00, 0x18, 0x04, 0x04, 0x18};
      0010AD 90r00rE9         [24] 3587 	mov	dptr,#_handle_newuser_custom_char_row_vals4_65539_226
      0010B0 E4               [12] 3588 	clr	a
      0010B1 F0               [24] 3589 	movx	@dptr,a
      0010B2 90r00rEA         [24] 3590 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0001)
      0010B5 F0               [24] 3591 	movx	@dptr,a
      0010B6 90r00rEB         [24] 3592 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0002)
      0010B9 F0               [24] 3593 	movx	@dptr,a
      0010BA 90r00rEC         [24] 3594 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0003)
      0010BD F0               [24] 3595 	movx	@dptr,a
      0010BE 90r00rED         [24] 3596 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0004)
      0010C1 74 18            [12] 3597 	mov	a,#0x18
      0010C3 F0               [24] 3598 	movx	@dptr,a
      0010C4 90r00rEE         [24] 3599 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0005)
      0010C7 74 04            [12] 3600 	mov	a,#0x04
      0010C9 F0               [24] 3601 	movx	@dptr,a
      0010CA 90r00rEF         [24] 3602 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0006)
      0010CD F0               [24] 3603 	movx	@dptr,a
      0010CE 90r00rF0         [24] 3604 	mov	dptr,#(_handle_newuser_custom_char_row_vals4_65539_226 + 0x0007)
      0010D1 74 18            [12] 3605 	mov	a,#0x18
      0010D3 F0               [24] 3606 	movx	@dptr,a
                                   3607 ;	lcd.c:832: }
      0010D4 D2*0A            [12] 3608 	setb	_handle_newuser_custom_char_sloc0_1_0
      0010D6 10 AF 02         [24] 3609 	jbc	ea,00106$
      0010D9 C2*0A            [12] 3610 	clr	_handle_newuser_custom_char_sloc0_1_0
      0010DB                       3611 00106$:
                                   3612 ;	lcd.c:826: create_custom_char(ccode4, row_vals4);
      0010DB 90r00r45         [24] 3613 	mov	dptr,#_create_custom_char_PARM_2
      0010DE 74rE9            [12] 3614 	mov	a,#_handle_newuser_custom_char_row_vals4_65539_226
      0010E0 F0               [24] 3615 	movx	@dptr,a
      0010E1 74s00            [12] 3616 	mov	a,#(_handle_newuser_custom_char_row_vals4_65539_226 >> 8)
      0010E3 A3               [24] 3617 	inc	dptr
      0010E4 F0               [24] 3618 	movx	@dptr,a
      0010E5 E4               [12] 3619 	clr	a
      0010E6 A3               [24] 3620 	inc	dptr
      0010E7 F0               [24] 3621 	movx	@dptr,a
      0010E8 75 82 34         [24] 3622 	mov	dpl,#0x34
      0010EB 12r07rAF         [24] 3623 	lcall	_create_custom_char
                                   3624 ;	lcd.c:828: lcdgotoxy('2', '8');
      0010EE 90r00r06         [24] 3625 	mov	dptr,#_lcdgotoxy_PARM_2
      0010F1 74 38            [12] 3626 	mov	a,#0x38
      0010F3 F0               [24] 3627 	movx	@dptr,a
      0010F4 75 82 32         [24] 3628 	mov	dpl,#0x32
      0010F7 12r00rFC         [24] 3629 	lcall	_lcdgotoxy
                                   3630 ;	lcd.c:829: lcdputch(ccode4 - '0');
      0010FA 75 82 04         [24] 3631 	mov	dpl,#0x04
      0010FD 12r01rB5         [24] 3632 	lcall	_lcdputch
                                   3633 ;	lcd.c:831: lcdgotoaddr(save_cursor_address);
      001100 90r00r00         [24] 3634 	mov	dptr,#_save_cursor_address
      001103 E0               [24] 3635 	movx	a,@dptr
      001104 F5 82            [12] 3636 	mov	dpl,a
      001106 12r00rDF         [24] 3637 	lcall	_lcdgotoaddr
      001109 A2*0A            [12] 3638 	mov	c,_handle_newuser_custom_char_sloc0_1_0
      00110B 92 AF            [24] 3639 	mov	ea,c
                                   3640 ;	lcd.c:834: }
      00110D 22               [24] 3641 	ret
                                   3642 ;------------------------------------------------------------
                                   3643 ;Allocation info for local variables in function 'print_author'
                                   3644 ;------------------------------------------------------------
                                   3645 ;str                       Allocated with name '_print_author_str_65537_230'
                                   3646 ;------------------------------------------------------------
                                   3647 ;	lcd.c:836: void print_author(void)
                                   3648 ;	-----------------------------------------
                                   3649 ;	 function print_author
                                   3650 ;	-----------------------------------------
      00110E                       3651 _print_author:
                                   3652 ;	lcd.c:839: printf_tiny("\033[1;33m\n\rAuthor Info Printed !!\r\n");
      00110E 74r7C            [12] 3653 	mov	a,#___str_33
      001110 C0 E0            [24] 3654 	push	acc
      001112 74s03            [12] 3655 	mov	a,#(___str_33 >> 8)
      001114 C0 E0            [24] 3656 	push	acc
      001116 12r00r00         [24] 3657 	lcall	_printf_tiny
      001119 15 81            [12] 3658 	dec	sp
      00111B 15 81            [12] 3659 	dec	sp
                                   3660 ;	lcd.c:843: str = "Kiran Jojare    ESD Summer 2023 Lab 4           ";
                                   3661 ;	lcd.c:854: }
      00111D D2*0B            [12] 3662 	setb	_print_author_sloc0_1_0
      00111F 10 AF 02         [24] 3663 	jbc	ea,00103$
      001122 C2*0B            [12] 3664 	clr	_print_author_sloc0_1_0
      001124                       3665 00103$:
                                   3666 ;	lcd.c:849: lcdgotoaddr(0x00);
      001124 75 82 00         [24] 3667 	mov	dpl,#0x00
      001127 12r00rDF         [24] 3668 	lcall	_lcdgotoaddr
                                   3669 ;	lcd.c:850: lcdputstr(str);
      00112A 90r03r9E         [24] 3670 	mov	dptr,#___str_34
      00112D 75 F0 80         [24] 3671 	mov	b,#0x80
      001130 12r02r18         [24] 3672 	lcall	_lcdputstr
                                   3673 ;	lcd.c:853: lcdgotoaddr(0x00);
      001133 75 82 00         [24] 3674 	mov	dpl,#0x00
      001136 12r00rDF         [24] 3675 	lcall	_lcdgotoaddr
      001139 A2*0B            [12] 3676 	mov	c,_print_author_sloc0_1_0
      00113B 92 AF            [24] 3677 	mov	ea,c
                                   3678 ;	lcd.c:855: return;
                                   3679 ;	lcd.c:856: }
      00113D 22               [24] 3680 	ret
                                   3681 	.area CSEG    (CODE)
                                   3682 	.area CONST   (CODE)
                                   3683 	.area CONST   (CODE)
      000000                       3684 ___str_0:
      000000 20 20 20 20 20 20 20  3685 	.ascii "       "
      000007 00                    3686 	.db 0x00
                                   3687 	.area CSEG    (CODE)
                                   3688 	.area CONST   (CODE)
      000008                       3689 ___str_1:
      000008 1B                    3690 	.db 0x1b
      000009 5B 31 3B 33 33 6D     3691 	.ascii "[1;33m"
      00000F 0A                    3692 	.db 0x0a
      000010 0D                    3693 	.db 0x0d
      000011 4C 43 44 20 43 6C 65  3694 	.ascii "LCD Cleared!!"
             61 72 65 64 21 21
      00001E 0D                    3695 	.db 0x0d
      00001F 0A                    3696 	.db 0x0a
      000020 00                    3697 	.db 0x00
                                   3698 	.area CSEG    (CODE)
                                   3699 	.area CONST   (CODE)
      000021                       3700 ___str_2:
      000021 1B                    3701 	.db 0x1b
      000022 5B 31 3B 33 33 6D     3702 	.ascii "[1;33m"
      000028 0A                    3703 	.db 0x0a
      000029 0D                    3704 	.db 0x0d
      00002A 45 6E 74 65 72 20 43  3705 	.ascii "Enter Character to put on LCD !!"
             68 61 72 61 63 74 65
             72 20 74 6F 20 70 75
             74 20 6F 6E 20 4C 43
             44 20 21 21
      00004A 0D                    3706 	.db 0x0d
      00004B 0A                    3707 	.db 0x0a
      00004C 00                    3708 	.db 0x00
                                   3709 	.area CSEG    (CODE)
                                   3710 	.area CONST   (CODE)
      00004D                       3711 ___str_3:
      00004D 0A                    3712 	.db 0x0a
      00004E 0D                    3713 	.db 0x0d
      00004F 45 6E 74 65 72 65 64  3714 	.ascii "Entered Char = %c"
             20 43 68 61 72 20 3D
             20 25 63
      000060 0A                    3715 	.db 0x0a
      000061 0D                    3716 	.db 0x0d
      000062 00                    3717 	.db 0x00
                                   3718 	.area CSEG    (CODE)
                                   3719 	.area CONST   (CODE)
      000063                       3720 ___str_4:
      000063 0A                    3721 	.db 0x0a
      000064 0D                    3722 	.db 0x0d
      000065 00                    3723 	.db 0x00
                                   3724 	.area CSEG    (CODE)
                                   3725 	.area CONST   (CODE)
      000066                       3726 ___str_5:
      000066 1B                    3727 	.db 0x1b
      000067 5B 31 3B 33 33 6D     3728 	.ascii "[1;33m"
      00006D 0A                    3729 	.db 0x0a
      00006E 0D                    3730 	.db 0x0d
      00006F 45 6E 74 65 72 20 53  3731 	.ascii "Enter String to put on LCD !!"
             74 72 69 6E 67 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      00008C 0D                    3732 	.db 0x0d
      00008D 0A                    3733 	.db 0x0a
      00008E 00                    3734 	.db 0x00
                                   3735 	.area CSEG    (CODE)
                                   3736 	.area CONST   (CODE)
      00008F                       3737 ___str_6:
      00008F 45 6E 74 65 72 65 64  3738 	.ascii "Entered String = %s"
             20 53 74 72 69 6E 67
             20 3D 20 25 73
      0000A2 0A                    3739 	.db 0x0a
      0000A3 0D                    3740 	.db 0x0d
      0000A4 00                    3741 	.db 0x00
                                   3742 	.area CSEG    (CODE)
                                   3743 	.area CONST   (CODE)
      0000A5                       3744 ___str_7:
      0000A5 1B                    3745 	.db 0x1b
      0000A6 5B 31 3B 33 33 6D     3746 	.ascii "[1;33m"
      0000AC 0A                    3747 	.db 0x0a
      0000AD 0D                    3748 	.db 0x0d
      0000AE 45 6E 74 65 72 20 58  3749 	.ascii "Enter X-Co-ordinate to put on LCD !!"
             2D 43 6F 2D 6F 72 64
             69 6E 61 74 65 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      0000D2 0D                    3750 	.db 0x0d
      0000D3 0A                    3751 	.db 0x0a
      0000D4 00                    3752 	.db 0x00
                                   3753 	.area CSEG    (CODE)
                                   3754 	.area CONST   (CODE)
      0000D5                       3755 ___str_8:
      0000D5 58 2D 43 6F 72 64 69  3756 	.ascii "X-Cordinate = %c"
             6E 61 74 65 20 3D 20
             25 63
      0000E5 0A                    3757 	.db 0x0a
      0000E6 0D                    3758 	.db 0x0d
      0000E7 00                    3759 	.db 0x00
                                   3760 	.area CSEG    (CODE)
                                   3761 	.area CONST   (CODE)
      0000E8                       3762 ___str_9:
      0000E8 1B                    3763 	.db 0x1b
      0000E9 5B 31 3B 33 33 6D     3764 	.ascii "[1;33m"
      0000EF 0A                    3765 	.db 0x0a
      0000F0 0D                    3766 	.db 0x0d
      0000F1 45 6E 74 65 72 20 59  3767 	.ascii "Enter Y-Co-ordinate to put on LCD !!"
             2D 43 6F 2D 6F 72 64
             69 6E 61 74 65 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      000115 0D                    3768 	.db 0x0d
      000116 0A                    3769 	.db 0x0a
      000117 00                    3770 	.db 0x00
                                   3771 	.area CSEG    (CODE)
                                   3772 	.area CONST   (CODE)
      000118                       3773 ___str_10:
      000118 59 2D 43 6F 72 64 69  3774 	.ascii "Y-Cordinate = %c"
             6E 61 74 65 20 3D 20
             25 63
      000128 0A                    3775 	.db 0x0a
      000129 0D                    3776 	.db 0x0d
      00012A 00                    3777 	.db 0x00
                                   3778 	.area CSEG    (CODE)
                                   3779 	.area CONST   (CODE)
      00012B                       3780 ___str_11:
      00012B 1B                    3781 	.db 0x1b
      00012C 5B 31 3B 33 31 6D 49  3782 	.ascii "[1;31mInvalid coordinate!!"
             6E 76 61 6C 69 64 20
             63 6F 6F 72 64 69 6E
             61 74 65 21 21
      000146 0A                    3783 	.db 0x0a
      000147 0D                    3784 	.db 0x0d
      000148 00                    3785 	.db 0x00
                                   3786 	.area CSEG    (CODE)
                                   3787 	.area CONST   (CODE)
      000149                       3788 ___str_12:
      000149 1B                    3789 	.db 0x1b
      00014A 5B 31 3B 33 33 6D     3790 	.ascii "[1;33m"
      000150 0A                    3791 	.db 0x0a
      000151 0D                    3792 	.db 0x0d
      000152 43 75 72 73 6F 72 20  3793 	.ascii "Cursor Movement Completed!!"
             4D 6F 76 65 6D 65 6E
             74 20 43 6F 6D 70 6C
             65 74 65 64 21 21
      00016D 0D                    3794 	.db 0x0d
      00016E 0A                    3795 	.db 0x0a
      00016F 00                    3796 	.db 0x00
                                   3797 	.area CSEG    (CODE)
                                   3798 	.area CONST   (CODE)
      000170                       3799 ___str_13:
      000170 1B                    3800 	.db 0x1b
      000171 5B 31 3B 33 33 6D     3801 	.ascii "[1;33m"
      000177 0A                    3802 	.db 0x0a
      000178 0D                    3803 	.db 0x0d
      000179 45 6E 74 65 72 20 61  3804 	.ascii "Enter address to put onto the LCD !!"
             64 64 72 65 73 73 20
             74 6F 20 70 75 74 20
             6F 6E 74 6F 20 74 68
             65 20 4C 43 44 20 21
             21
      00019D 0D                    3805 	.db 0x0d
      00019E 0A                    3806 	.db 0x0a
      00019F 00                    3807 	.db 0x00
                                   3808 	.area CSEG    (CODE)
                                   3809 	.area CONST   (CODE)
      0001A0                       3810 ___str_14:
      0001A0 41 64 64 72 65 73 73  3811 	.ascii "Address Entered = %s"
             20 45 6E 74 65 72 65
             64 20 3D 20 25 73
      0001B4 0A                    3812 	.db 0x0a
      0001B5 0D                    3813 	.db 0x0d
      0001B6 00                    3814 	.db 0x00
                                   3815 	.area CSEG    (CODE)
                                   3816 	.area CONST   (CODE)
      0001B7                       3817 ___str_15:
      0001B7 1B                    3818 	.db 0x1b
      0001B8 5B 31 3B 33 33 6D     3819 	.ascii "[1;33m"
      0001BE 0A                    3820 	.db 0x0a
      0001BF 0D                    3821 	.db 0x0d
      0001C0 54 69 6D 65 20 50 61  3822 	.ascii "Time Paused !!"
             75 73 65 64 20 21 21
      0001CE 0D                    3823 	.db 0x0d
      0001CF 0A                    3824 	.db 0x0a
      0001D0 00                    3825 	.db 0x00
                                   3826 	.area CSEG    (CODE)
                                   3827 	.area CONST   (CODE)
      0001D1                       3828 ___str_16:
      0001D1 1B                    3829 	.db 0x1b
      0001D2 5B 31 3B 33 33 6D     3830 	.ascii "[1;33m"
      0001D8 0A                    3831 	.db 0x0a
      0001D9 0D                    3832 	.db 0x0d
      0001DA 54 69 6D 65 20 52 65  3833 	.ascii "Time Resumed !!"
             73 75 6D 65 64 20 21
             21
      0001E9 0D                    3834 	.db 0x0d
      0001EA 0A                    3835 	.db 0x0a
      0001EB 00                    3836 	.db 0x00
                                   3837 	.area CSEG    (CODE)
                                   3838 	.area CONST   (CODE)
      0001EC                       3839 ___str_17:
      0001EC 1B                    3840 	.db 0x1b
      0001ED 5B 31 3B 33 33 6D     3841 	.ascii "[1;33m"
      0001F3 0A                    3842 	.db 0x0a
      0001F4 0D                    3843 	.db 0x0d
      0001F5 54 69 6D 65 20 52 65  3844 	.ascii "Time Reset !!"
             73 65 74 20 21 21
      000202 0D                    3845 	.db 0x0d
      000203 0A                    3846 	.db 0x0a
      000204 00                    3847 	.db 0x00
                                   3848 	.area CSEG    (CODE)
                                   3849 	.area CONST   (CODE)
      000205                       3850 ___str_18:
      000205 1B                    3851 	.db 0x1b
      000206 5B 31 3B 33 34 6D     3852 	.ascii "[1;34m"
      00020C 00                    3853 	.db 0x00
                                   3854 	.area CSEG    (CODE)
                                   3855 	.area CONST   (CODE)
      00020D                       3856 ___str_19:
      00020D 0A                    3857 	.db 0x0a
      00020E 0D                    3858 	.db 0x0d
      00020F 50 72 69 6E 74 69 6E  3859 	.ascii "Printing Hexdump of DDRAM"
             67 20 48 65 78 64 75
             6D 70 20 6F 66 20 44
             44 52 41 4D
      000228 0A                    3860 	.db 0x0a
      000229 0D                    3861 	.db 0x0d
      00022A 00                    3862 	.db 0x00
                                   3863 	.area CSEG    (CODE)
                                   3864 	.area CONST   (CODE)
      00022B                       3865 ___str_20:
      00022B 0A                    3866 	.db 0x0a
      00022C 0D                    3867 	.db 0x0d
      00022D 30 78 25 30 32 78 3A  3868 	.ascii "0x%02x: "
             20
      000235 00                    3869 	.db 0x00
                                   3870 	.area CSEG    (CODE)
                                   3871 	.area CONST   (CODE)
      000236                       3872 ___str_21:
      000236 30 78 25 30 32 78 20  3873 	.ascii "0x%02x "
      00023D 00                    3874 	.db 0x00
                                   3875 	.area CSEG    (CODE)
                                   3876 	.area CONST   (CODE)
      00023E                       3877 ___str_22:
      00023E 0A                    3878 	.db 0x0a
      00023F 0D                    3879 	.db 0x0d
      000240 0A                    3880 	.db 0x0a
      000241 0D                    3881 	.db 0x0d
      000242 50 72 69 6E 74 69 6E  3882 	.ascii "Printing Hexdump of CGRAM"
             67 20 48 65 78 64 75
             6D 70 20 6F 66 20 43
             47 52 41 4D
      00025B 0A                    3883 	.db 0x0a
      00025C 0D                    3884 	.db 0x0d
      00025D 00                    3885 	.db 0x00
                                   3886 	.area CSEG    (CODE)
                                   3887 	.area CONST   (CODE)
      00025E                       3888 ___str_23:
      00025E 1B                    3889 	.db 0x1b
      00025F 5B 30 6D              3890 	.ascii "[0m"
      000262 00                    3891 	.db 0x00
                                   3892 	.area CSEG    (CODE)
                                   3893 	.area CONST   (CODE)
      000263                       3894 ___str_24:
      000263 0A                    3895 	.db 0x0a
      000264 0D                    3896 	.db 0x0d
      000265 45 6E 74 65 72 20 61  3897 	.ascii "Enter a hexadecimal value between (00 to 1F) or (40 to 58): "
             20 68 65 78 61 64 65
             63 69 6D 61 6C 20 76
             61 6C 75 65 20 62 65
             74 77 65 65 6E 20 28
             30 30 20 74 6F 20 31
             46 29 20 6F 72 20 28
             34 30 20 74 6F 20 35
             38 29 3A 20
      0002A1 00                    3898 	.db 0x00
                                   3899 	.area CSEG    (CODE)
                                   3900 	.area CONST   (CODE)
      0002A2                       3901 ___str_25:
      0002A2 0A                    3902 	.db 0x0a
      0002A3 0D                    3903 	.db 0x0d
      0002A4 49 6E 76 61 6C 69 64  3904 	.ascii "Invalid input. "
             20 69 6E 70 75 74 2E
             20
      0002B3 00                    3905 	.db 0x00
                                   3906 	.area CSEG    (CODE)
                                   3907 	.area CONST   (CODE)
      0002B4                       3908 ___str_26:
      0002B4 50 6C 65 61 73 65 20  3909 	.ascii "Please enter a valid input: "
             65 6E 74 65 72 20 61
             20 76 61 6C 69 64 20
             69 6E 70 75 74 3A 20
      0002D0 00                    3910 	.db 0x00
                                   3911 	.area CSEG    (CODE)
                                   3912 	.area CONST   (CODE)
      0002D1                       3913 ___str_27:
      0002D1 0A                    3914 	.db 0x0a
      0002D2 0D                    3915 	.db 0x0d
      0002D3 54 68 65 20 63 75 73  3916 	.ascii "The custom character with code 0x%x has been created."
             74 6F 6D 20 63 68 61
             72 61 63 74 65 72 20
             77 69 74 68 20 63 6F
             64 65 20 30 78 25 78
             20 68 61 73 20 62 65
             65 6E 20 63 72 65 61
             74 65 64 2E
      000308 00                    3917 	.db 0x00
                                   3918 	.area CSEG    (CODE)
                                   3919 	.area CONST   (CODE)
      000309                       3920 ___str_28:
      000309 0A                    3921 	.db 0x0a
      00030A 0D                    3922 	.db 0x0d
      00030B 4C 43 44 5F 70 74 72  3923 	.ascii "LCD_ptr = %x"
             20 3D 20 25 78
      000317 00                    3924 	.db 0x00
                                   3925 	.area CSEG    (CODE)
                                   3926 	.area CONST   (CODE)
      000318                       3927 ___str_29:
      000318 1B                    3928 	.db 0x1b
      000319 5B 30 3B 33 33 6D     3929 	.ascii "[0;33m"
      00031F 00                    3930 	.db 0x00
                                   3931 	.area CSEG    (CODE)
                                   3932 	.area CONST   (CODE)
      000320                       3933 ___str_30:
      000320 50 6C 65 61 73 65 20  3934 	.ascii "Please enter the code for the custom character: "
             65 6E 74 65 72 20 74
             68 65 20 63 6F 64 65
             20 66 6F 72 20 74 68
             65 20 63 75 73 74 6F
             6D 20 63 68 61 72 61
             63 74 65 72 3A 20
      000350 00                    3935 	.db 0x00
                                   3936 	.area CSEG    (CODE)
                                   3937 	.area CONST   (CODE)
      000351                       3938 ___str_31:
      000351 25 63                 3939 	.ascii "%c"
      000353 0A                    3940 	.db 0x0a
      000354 0D                    3941 	.db 0x0d
      000355 00                    3942 	.db 0x00
                                   3943 	.area CSEG    (CODE)
                                   3944 	.area CONST   (CODE)
      000356                       3945 ___str_32:
      000356 0A                    3946 	.db 0x0a
      000357 0D                    3947 	.db 0x0d
      000358 50 6C 65 61 73 65 20  3948 	.ascii "Please enter the value for row %d: "
             65 6E 74 65 72 20 74
             68 65 20 76 61 6C 75
             65 20 66 6F 72 20 72
             6F 77 20 25 64 3A 20
      00037B 00                    3949 	.db 0x00
                                   3950 	.area CSEG    (CODE)
                                   3951 	.area CONST   (CODE)
      00037C                       3952 ___str_33:
      00037C 1B                    3953 	.db 0x1b
      00037D 5B 31 3B 33 33 6D     3954 	.ascii "[1;33m"
      000383 0A                    3955 	.db 0x0a
      000384 0D                    3956 	.db 0x0d
      000385 41 75 74 68 6F 72 20  3957 	.ascii "Author Info Printed !!"
             49 6E 66 6F 20 50 72
             69 6E 74 65 64 20 21
             21
      00039B 0D                    3958 	.db 0x0d
      00039C 0A                    3959 	.db 0x0a
      00039D 00                    3960 	.db 0x00
                                   3961 	.area CSEG    (CODE)
                                   3962 	.area CONST   (CODE)
      00039E                       3963 ___str_34:
      00039E 4B 69 72 61 6E 20 4A  3964 	.ascii "Kiran Jojare    ESD Summer 2023 Lab 4           "
             6F 6A 61 72 65 20 20
             20 20 45 53 44 20 53
             75 6D 6D 65 72 20 32
             30 32 33 20 4C 61 62
             20 34 20 20 20 20 20
             20 20 20 20 20 20
      0003CE 00                    3965 	.db 0x00
                                   3966 	.area CSEG    (CODE)
                                   3967 	.area XINIT   (CODE)
      000000                       3968 __xinit__save_cursor_address:
      000000 00                    3969 	.db #0x00	; 0
                                   3970 	.area CABS    (ABS,CODE)
