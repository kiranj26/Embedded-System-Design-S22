                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _init_timer
                                     13 	.globl _timer0_ISR
                                     14 	.globl _delay_sec
                                     15 	.globl _delay_ms
                                     16 	.globl __sdcc_external_startup
                                     17 	.globl _get_cursor_address
                                     18 	.globl _handle_newuser_custom_char
                                     19 	.globl _handle_unlock_custom_char
                                     20 	.globl _handle_lock_custom_char
                                     21 	.globl _handler_lcdclear
                                     22 	.globl _lcdputstr
                                     23 	.globl _lcdgotoxy
                                     24 	.globl _lcdgotoaddr
                                     25 	.globl _init_lcd
                                     26 	.globl _uart_init
                                     27 	.globl _CY
                                     28 	.globl _AC
                                     29 	.globl _F0
                                     30 	.globl _RS1
                                     31 	.globl _RS0
                                     32 	.globl _OV
                                     33 	.globl _F1
                                     34 	.globl _P
                                     35 	.globl _PS
                                     36 	.globl _PT1
                                     37 	.globl _PX1
                                     38 	.globl _PT0
                                     39 	.globl _PX0
                                     40 	.globl _RD
                                     41 	.globl _WR
                                     42 	.globl _T1
                                     43 	.globl _T0
                                     44 	.globl _INT1
                                     45 	.globl _INT0
                                     46 	.globl _TXD
                                     47 	.globl _RXD
                                     48 	.globl _P3_7
                                     49 	.globl _P3_6
                                     50 	.globl _P3_5
                                     51 	.globl _P3_4
                                     52 	.globl _P3_3
                                     53 	.globl _P3_2
                                     54 	.globl _P3_1
                                     55 	.globl _P3_0
                                     56 	.globl _EA
                                     57 	.globl _ES
                                     58 	.globl _ET1
                                     59 	.globl _EX1
                                     60 	.globl _ET0
                                     61 	.globl _EX0
                                     62 	.globl _P2_7
                                     63 	.globl _P2_6
                                     64 	.globl _P2_5
                                     65 	.globl _P2_4
                                     66 	.globl _P2_3
                                     67 	.globl _P2_2
                                     68 	.globl _P2_1
                                     69 	.globl _P2_0
                                     70 	.globl _SM0
                                     71 	.globl _SM1
                                     72 	.globl _SM2
                                     73 	.globl _REN
                                     74 	.globl _TB8
                                     75 	.globl _RB8
                                     76 	.globl _TI
                                     77 	.globl _RI
                                     78 	.globl _P1_7
                                     79 	.globl _P1_6
                                     80 	.globl _P1_5
                                     81 	.globl _P1_4
                                     82 	.globl _P1_3
                                     83 	.globl _P1_2
                                     84 	.globl _P1_1
                                     85 	.globl _P1_0
                                     86 	.globl _TF1
                                     87 	.globl _TR1
                                     88 	.globl _TF0
                                     89 	.globl _TR0
                                     90 	.globl _IE1
                                     91 	.globl _IT1
                                     92 	.globl _IE0
                                     93 	.globl _IT0
                                     94 	.globl _P0_7
                                     95 	.globl _P0_6
                                     96 	.globl _P0_5
                                     97 	.globl _P0_4
                                     98 	.globl _P0_3
                                     99 	.globl _P0_2
                                    100 	.globl _P0_1
                                    101 	.globl _P0_0
                                    102 	.globl _TXD0
                                    103 	.globl _RXD0
                                    104 	.globl _BREG_F7
                                    105 	.globl _BREG_F6
                                    106 	.globl _BREG_F5
                                    107 	.globl _BREG_F4
                                    108 	.globl _BREG_F3
                                    109 	.globl _BREG_F2
                                    110 	.globl _BREG_F1
                                    111 	.globl _BREG_F0
                                    112 	.globl _P5_7
                                    113 	.globl _P5_6
                                    114 	.globl _P5_5
                                    115 	.globl _P5_4
                                    116 	.globl _P5_3
                                    117 	.globl _P5_2
                                    118 	.globl _P5_1
                                    119 	.globl _P5_0
                                    120 	.globl _P4_7
                                    121 	.globl _P4_6
                                    122 	.globl _P4_5
                                    123 	.globl _P4_4
                                    124 	.globl _P4_3
                                    125 	.globl _P4_2
                                    126 	.globl _P4_1
                                    127 	.globl _P4_0
                                    128 	.globl _PX0L
                                    129 	.globl _PT0L
                                    130 	.globl _PX1L
                                    131 	.globl _PT1L
                                    132 	.globl _PSL
                                    133 	.globl _PT2L
                                    134 	.globl _PPCL
                                    135 	.globl _EC
                                    136 	.globl _CCF0
                                    137 	.globl _CCF1
                                    138 	.globl _CCF2
                                    139 	.globl _CCF3
                                    140 	.globl _CCF4
                                    141 	.globl _CR
                                    142 	.globl _CF
                                    143 	.globl _TF2
                                    144 	.globl _EXF2
                                    145 	.globl _RCLK
                                    146 	.globl _TCLK
                                    147 	.globl _EXEN2
                                    148 	.globl _TR2
                                    149 	.globl _C_T2
                                    150 	.globl _CP_RL2
                                    151 	.globl _T2CON_7
                                    152 	.globl _T2CON_6
                                    153 	.globl _T2CON_5
                                    154 	.globl _T2CON_4
                                    155 	.globl _T2CON_3
                                    156 	.globl _T2CON_2
                                    157 	.globl _T2CON_1
                                    158 	.globl _T2CON_0
                                    159 	.globl _PT2
                                    160 	.globl _ET2
                                    161 	.globl _B
                                    162 	.globl _ACC
                                    163 	.globl _PSW
                                    164 	.globl _IP
                                    165 	.globl _P3
                                    166 	.globl _IE
                                    167 	.globl _P2
                                    168 	.globl _SBUF
                                    169 	.globl _SCON
                                    170 	.globl _P1
                                    171 	.globl _TH1
                                    172 	.globl _TH0
                                    173 	.globl _TL1
                                    174 	.globl _TL0
                                    175 	.globl _TMOD
                                    176 	.globl _TCON
                                    177 	.globl _PCON
                                    178 	.globl _DPH
                                    179 	.globl _DPL
                                    180 	.globl _SP
                                    181 	.globl _P0
                                    182 	.globl _SBUF0
                                    183 	.globl _DP0L
                                    184 	.globl _DP0H
                                    185 	.globl _EECON
                                    186 	.globl _KBF
                                    187 	.globl _KBE
                                    188 	.globl _KBLS
                                    189 	.globl _BRL
                                    190 	.globl _BDRCON
                                    191 	.globl _T2MOD
                                    192 	.globl _SPDAT
                                    193 	.globl _SPSTA
                                    194 	.globl _SPCON
                                    195 	.globl _SADEN
                                    196 	.globl _SADDR
                                    197 	.globl _WDTPRG
                                    198 	.globl _WDTRST
                                    199 	.globl _P5
                                    200 	.globl _P4
                                    201 	.globl _IPH1
                                    202 	.globl _IPL1
                                    203 	.globl _IPH0
                                    204 	.globl _IPL0
                                    205 	.globl _IEN1
                                    206 	.globl _IEN0
                                    207 	.globl _CMOD
                                    208 	.globl _CL
                                    209 	.globl _CH
                                    210 	.globl _CCON
                                    211 	.globl _CCAPM4
                                    212 	.globl _CCAPM3
                                    213 	.globl _CCAPM2
                                    214 	.globl _CCAPM1
                                    215 	.globl _CCAPM0
                                    216 	.globl _CCAP4L
                                    217 	.globl _CCAP3L
                                    218 	.globl _CCAP2L
                                    219 	.globl _CCAP1L
                                    220 	.globl _CCAP0L
                                    221 	.globl _CCAP4H
                                    222 	.globl _CCAP3H
                                    223 	.globl _CCAP2H
                                    224 	.globl _CCAP1H
                                    225 	.globl _CCAP0H
                                    226 	.globl _CKCON1
                                    227 	.globl _CKCON0
                                    228 	.globl _CKRL
                                    229 	.globl _AUXR1
                                    230 	.globl _AUXR
                                    231 	.globl _TH2
                                    232 	.globl _TL2
                                    233 	.globl _RCAP2H
                                    234 	.globl _RCAP2L
                                    235 	.globl _T2CON
                                    236 	.globl _minutes_tens_digit
                                    237 	.globl _minutes_ones_digit
                                    238 	.globl _seconds_tens_digit
                                    239 	.globl _seconds_ones_digit
                                    240 	.globl _tenth_of_second
                                    241 	.globl _update_lcd
                                    242 ;--------------------------------------------------------
                                    243 ; special function registers
                                    244 ;--------------------------------------------------------
                                    245 	.area RSEG    (ABS,DATA)
      000000                        246 	.org 0x0000
                           0000C8   247 _T2CON	=	0x00c8
                           0000CA   248 _RCAP2L	=	0x00ca
                           0000CB   249 _RCAP2H	=	0x00cb
                           0000CC   250 _TL2	=	0x00cc
                           0000CD   251 _TH2	=	0x00cd
                           00008E   252 _AUXR	=	0x008e
                           0000A2   253 _AUXR1	=	0x00a2
                           000097   254 _CKRL	=	0x0097
                           00008F   255 _CKCON0	=	0x008f
                           0000AF   256 _CKCON1	=	0x00af
                           0000FA   257 _CCAP0H	=	0x00fa
                           0000FB   258 _CCAP1H	=	0x00fb
                           0000FC   259 _CCAP2H	=	0x00fc
                           0000FD   260 _CCAP3H	=	0x00fd
                           0000FE   261 _CCAP4H	=	0x00fe
                           0000EA   262 _CCAP0L	=	0x00ea
                           0000EB   263 _CCAP1L	=	0x00eb
                           0000EC   264 _CCAP2L	=	0x00ec
                           0000ED   265 _CCAP3L	=	0x00ed
                           0000EE   266 _CCAP4L	=	0x00ee
                           0000DA   267 _CCAPM0	=	0x00da
                           0000DB   268 _CCAPM1	=	0x00db
                           0000DC   269 _CCAPM2	=	0x00dc
                           0000DD   270 _CCAPM3	=	0x00dd
                           0000DE   271 _CCAPM4	=	0x00de
                           0000D8   272 _CCON	=	0x00d8
                           0000F9   273 _CH	=	0x00f9
                           0000E9   274 _CL	=	0x00e9
                           0000D9   275 _CMOD	=	0x00d9
                           0000A8   276 _IEN0	=	0x00a8
                           0000B1   277 _IEN1	=	0x00b1
                           0000B8   278 _IPL0	=	0x00b8
                           0000B7   279 _IPH0	=	0x00b7
                           0000B2   280 _IPL1	=	0x00b2
                           0000B3   281 _IPH1	=	0x00b3
                           0000C0   282 _P4	=	0x00c0
                           0000E8   283 _P5	=	0x00e8
                           0000A6   284 _WDTRST	=	0x00a6
                           0000A7   285 _WDTPRG	=	0x00a7
                           0000A9   286 _SADDR	=	0x00a9
                           0000B9   287 _SADEN	=	0x00b9
                           0000C3   288 _SPCON	=	0x00c3
                           0000C4   289 _SPSTA	=	0x00c4
                           0000C5   290 _SPDAT	=	0x00c5
                           0000C9   291 _T2MOD	=	0x00c9
                           00009B   292 _BDRCON	=	0x009b
                           00009A   293 _BRL	=	0x009a
                           00009C   294 _KBLS	=	0x009c
                           00009D   295 _KBE	=	0x009d
                           00009E   296 _KBF	=	0x009e
                           0000D2   297 _EECON	=	0x00d2
                           000083   298 _DP0H	=	0x0083
                           000082   299 _DP0L	=	0x0082
                           000099   300 _SBUF0	=	0x0099
                           000080   301 _P0	=	0x0080
                           000081   302 _SP	=	0x0081
                           000082   303 _DPL	=	0x0082
                           000083   304 _DPH	=	0x0083
                           000087   305 _PCON	=	0x0087
                           000088   306 _TCON	=	0x0088
                           000089   307 _TMOD	=	0x0089
                           00008A   308 _TL0	=	0x008a
                           00008B   309 _TL1	=	0x008b
                           00008C   310 _TH0	=	0x008c
                           00008D   311 _TH1	=	0x008d
                           000090   312 _P1	=	0x0090
                           000098   313 _SCON	=	0x0098
                           000099   314 _SBUF	=	0x0099
                           0000A0   315 _P2	=	0x00a0
                           0000A8   316 _IE	=	0x00a8
                           0000B0   317 _P3	=	0x00b0
                           0000B8   318 _IP	=	0x00b8
                           0000D0   319 _PSW	=	0x00d0
                           0000E0   320 _ACC	=	0x00e0
                           0000F0   321 _B	=	0x00f0
                                    322 ;--------------------------------------------------------
                                    323 ; special function bits
                                    324 ;--------------------------------------------------------
                                    325 	.area RSEG    (ABS,DATA)
      000000                        326 	.org 0x0000
                           0000AD   327 _ET2	=	0x00ad
                           0000BD   328 _PT2	=	0x00bd
                           0000C8   329 _T2CON_0	=	0x00c8
                           0000C9   330 _T2CON_1	=	0x00c9
                           0000CA   331 _T2CON_2	=	0x00ca
                           0000CB   332 _T2CON_3	=	0x00cb
                           0000CC   333 _T2CON_4	=	0x00cc
                           0000CD   334 _T2CON_5	=	0x00cd
                           0000CE   335 _T2CON_6	=	0x00ce
                           0000CF   336 _T2CON_7	=	0x00cf
                           0000C8   337 _CP_RL2	=	0x00c8
                           0000C9   338 _C_T2	=	0x00c9
                           0000CA   339 _TR2	=	0x00ca
                           0000CB   340 _EXEN2	=	0x00cb
                           0000CC   341 _TCLK	=	0x00cc
                           0000CD   342 _RCLK	=	0x00cd
                           0000CE   343 _EXF2	=	0x00ce
                           0000CF   344 _TF2	=	0x00cf
                           0000DF   345 _CF	=	0x00df
                           0000DE   346 _CR	=	0x00de
                           0000DC   347 _CCF4	=	0x00dc
                           0000DB   348 _CCF3	=	0x00db
                           0000DA   349 _CCF2	=	0x00da
                           0000D9   350 _CCF1	=	0x00d9
                           0000D8   351 _CCF0	=	0x00d8
                           0000AE   352 _EC	=	0x00ae
                           0000BE   353 _PPCL	=	0x00be
                           0000BD   354 _PT2L	=	0x00bd
                           0000BC   355 _PSL	=	0x00bc
                           0000BB   356 _PT1L	=	0x00bb
                           0000BA   357 _PX1L	=	0x00ba
                           0000B9   358 _PT0L	=	0x00b9
                           0000B8   359 _PX0L	=	0x00b8
                           0000C0   360 _P4_0	=	0x00c0
                           0000C1   361 _P4_1	=	0x00c1
                           0000C2   362 _P4_2	=	0x00c2
                           0000C3   363 _P4_3	=	0x00c3
                           0000C4   364 _P4_4	=	0x00c4
                           0000C5   365 _P4_5	=	0x00c5
                           0000C6   366 _P4_6	=	0x00c6
                           0000C7   367 _P4_7	=	0x00c7
                           0000E8   368 _P5_0	=	0x00e8
                           0000E9   369 _P5_1	=	0x00e9
                           0000EA   370 _P5_2	=	0x00ea
                           0000EB   371 _P5_3	=	0x00eb
                           0000EC   372 _P5_4	=	0x00ec
                           0000ED   373 _P5_5	=	0x00ed
                           0000EE   374 _P5_6	=	0x00ee
                           0000EF   375 _P5_7	=	0x00ef
                           0000F0   376 _BREG_F0	=	0x00f0
                           0000F1   377 _BREG_F1	=	0x00f1
                           0000F2   378 _BREG_F2	=	0x00f2
                           0000F3   379 _BREG_F3	=	0x00f3
                           0000F4   380 _BREG_F4	=	0x00f4
                           0000F5   381 _BREG_F5	=	0x00f5
                           0000F6   382 _BREG_F6	=	0x00f6
                           0000F7   383 _BREG_F7	=	0x00f7
                           0000B0   384 _RXD0	=	0x00b0
                           0000B1   385 _TXD0	=	0x00b1
                           000080   386 _P0_0	=	0x0080
                           000081   387 _P0_1	=	0x0081
                           000082   388 _P0_2	=	0x0082
                           000083   389 _P0_3	=	0x0083
                           000084   390 _P0_4	=	0x0084
                           000085   391 _P0_5	=	0x0085
                           000086   392 _P0_6	=	0x0086
                           000087   393 _P0_7	=	0x0087
                           000088   394 _IT0	=	0x0088
                           000089   395 _IE0	=	0x0089
                           00008A   396 _IT1	=	0x008a
                           00008B   397 _IE1	=	0x008b
                           00008C   398 _TR0	=	0x008c
                           00008D   399 _TF0	=	0x008d
                           00008E   400 _TR1	=	0x008e
                           00008F   401 _TF1	=	0x008f
                           000090   402 _P1_0	=	0x0090
                           000091   403 _P1_1	=	0x0091
                           000092   404 _P1_2	=	0x0092
                           000093   405 _P1_3	=	0x0093
                           000094   406 _P1_4	=	0x0094
                           000095   407 _P1_5	=	0x0095
                           000096   408 _P1_6	=	0x0096
                           000097   409 _P1_7	=	0x0097
                           000098   410 _RI	=	0x0098
                           000099   411 _TI	=	0x0099
                           00009A   412 _RB8	=	0x009a
                           00009B   413 _TB8	=	0x009b
                           00009C   414 _REN	=	0x009c
                           00009D   415 _SM2	=	0x009d
                           00009E   416 _SM1	=	0x009e
                           00009F   417 _SM0	=	0x009f
                           0000A0   418 _P2_0	=	0x00a0
                           0000A1   419 _P2_1	=	0x00a1
                           0000A2   420 _P2_2	=	0x00a2
                           0000A3   421 _P2_3	=	0x00a3
                           0000A4   422 _P2_4	=	0x00a4
                           0000A5   423 _P2_5	=	0x00a5
                           0000A6   424 _P2_6	=	0x00a6
                           0000A7   425 _P2_7	=	0x00a7
                           0000A8   426 _EX0	=	0x00a8
                           0000A9   427 _ET0	=	0x00a9
                           0000AA   428 _EX1	=	0x00aa
                           0000AB   429 _ET1	=	0x00ab
                           0000AC   430 _ES	=	0x00ac
                           0000AF   431 _EA	=	0x00af
                           0000B0   432 _P3_0	=	0x00b0
                           0000B1   433 _P3_1	=	0x00b1
                           0000B2   434 _P3_2	=	0x00b2
                           0000B3   435 _P3_3	=	0x00b3
                           0000B4   436 _P3_4	=	0x00b4
                           0000B5   437 _P3_5	=	0x00b5
                           0000B6   438 _P3_6	=	0x00b6
                           0000B7   439 _P3_7	=	0x00b7
                           0000B0   440 _RXD	=	0x00b0
                           0000B1   441 _TXD	=	0x00b1
                           0000B2   442 _INT0	=	0x00b2
                           0000B3   443 _INT1	=	0x00b3
                           0000B4   444 _T0	=	0x00b4
                           0000B5   445 _T1	=	0x00b5
                           0000B6   446 _WR	=	0x00b6
                           0000B7   447 _RD	=	0x00b7
                           0000B8   448 _PX0	=	0x00b8
                           0000B9   449 _PT0	=	0x00b9
                           0000BA   450 _PX1	=	0x00ba
                           0000BB   451 _PT1	=	0x00bb
                           0000BC   452 _PS	=	0x00bc
                           0000D0   453 _P	=	0x00d0
                           0000D1   454 _F1	=	0x00d1
                           0000D2   455 _OV	=	0x00d2
                           0000D3   456 _RS0	=	0x00d3
                           0000D4   457 _RS1	=	0x00d4
                           0000D5   458 _F0	=	0x00d5
                           0000D6   459 _AC	=	0x00d6
                           0000D7   460 _CY	=	0x00d7
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable register banks
                                    463 ;--------------------------------------------------------
                                    464 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        465 	.ds 8
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable bit register bank
                                    468 ;--------------------------------------------------------
                                    469 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        470 bits:
      000000                        471 	.ds 1
                           008000   472 	b0 = bits[0]
                           008100   473 	b1 = bits[1]
                           008200   474 	b2 = bits[2]
                           008300   475 	b3 = bits[3]
                           008400   476 	b4 = bits[4]
                           008500   477 	b5 = bits[5]
                           008600   478 	b6 = bits[6]
                           008700   479 	b7 = bits[7]
                                    480 ;--------------------------------------------------------
                                    481 ; internal ram data
                                    482 ;--------------------------------------------------------
                                    483 	.area DSEG    (DATA)
                                    484 ;--------------------------------------------------------
                                    485 ; overlayable items in internal ram
                                    486 ;--------------------------------------------------------
                                    487 ;--------------------------------------------------------
                                    488 ; Stack segment in internal ram
                                    489 ;--------------------------------------------------------
                                    490 	.area	SSEG
      000000                        491 __start__stack:
      000000                        492 	.ds	1
                                    493 
                                    494 ;--------------------------------------------------------
                                    495 ; indirectly addressable internal ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area ISEG    (DATA)
                                    498 ;--------------------------------------------------------
                                    499 ; absolute internal ram data
                                    500 ;--------------------------------------------------------
                                    501 	.area IABS    (ABS,DATA)
                                    502 	.area IABS    (ABS,DATA)
                                    503 ;--------------------------------------------------------
                                    504 ; bit data
                                    505 ;--------------------------------------------------------
                                    506 	.area BSEG    (BIT)
      000000                        507 _main_sloc0_1_0:
      000000                        508 	.ds 1
                                    509 ;--------------------------------------------------------
                                    510 ; paged external ram data
                                    511 ;--------------------------------------------------------
                                    512 	.area PSEG    (PAG,XDATA)
                                    513 ;--------------------------------------------------------
                                    514 ; external ram data
                                    515 ;--------------------------------------------------------
                                    516 	.area XSEG    (XDATA)
      000000                        517 _delay_ms_ms_65536_102:
      000000                        518 	.ds 2
      000002                        519 _delay_sec_sec_65536_106:
      000002                        520 	.ds 2
      000004                        521 _timer0_ISR_counter_02s_65537_110:
      000004                        522 	.ds 2
      000006                        523 _timer0_ISR_save_cursor_addr_65537_110:
      000006                        524 	.ds 1
      000007                        525 _main_fingerprint_count_65536_120:
      000007                        526 	.ds 2
      000009                        527 _main_char_detected_196608_122:
      000009                        528 	.ds 1
                                    529 ;--------------------------------------------------------
                                    530 ; absolute external ram data
                                    531 ;--------------------------------------------------------
                                    532 	.area XABS    (ABS,XDATA)
                                    533 ;--------------------------------------------------------
                                    534 ; external initialized ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area XISEG   (XDATA)
      000000                        537 _update_lcd::
      000000                        538 	.ds 2
      000002                        539 _tenth_of_second::
      000002                        540 	.ds 1
      000003                        541 _seconds_ones_digit::
      000003                        542 	.ds 1
      000004                        543 _seconds_tens_digit::
      000004                        544 	.ds 1
      000005                        545 _minutes_ones_digit::
      000005                        546 	.ds 1
      000006                        547 _minutes_tens_digit::
      000006                        548 	.ds 1
                                    549 	.area HOME    (CODE)
                                    550 	.area GSINIT0 (CODE)
                                    551 	.area GSINIT1 (CODE)
                                    552 	.area GSINIT2 (CODE)
                                    553 	.area GSINIT3 (CODE)
                                    554 	.area GSINIT4 (CODE)
                                    555 	.area GSINIT5 (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 	.area GSFINAL (CODE)
                                    558 	.area CSEG    (CODE)
                                    559 ;--------------------------------------------------------
                                    560 ; interrupt vector
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
      000000                        563 __interrupt_vect:
      000000 02r00r00         [24]  564 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  565 	reti
      000004                        566 	.ds	7
      00000B 02r00r76         [24]  567 	ljmp	_timer0_ISR
                                    568 ;--------------------------------------------------------
                                    569 ; global & static initialisations
                                    570 ;--------------------------------------------------------
                                    571 	.area HOME    (CODE)
                                    572 	.area GSINIT  (CODE)
                                    573 	.area GSFINAL (CODE)
                                    574 	.area GSINIT  (CODE)
                                    575 	.globl __sdcc_gsinit_startup
                                    576 	.globl __sdcc_program_startup
                                    577 	.globl __start__stack
                                    578 	.globl __mcs51_genXINIT
                                    579 	.globl __mcs51_genXRAMCLEAR
                                    580 	.globl __mcs51_genRAMCLEAR
                                    581 ;------------------------------------------------------------
                                    582 ;Allocation info for local variables in function 'timer0_ISR'
                                    583 ;------------------------------------------------------------
                                    584 ;counter_02s               Allocated with name '_timer0_ISR_counter_02s_65537_110'
                                    585 ;save_cursor_addr          Allocated with name '_timer0_ISR_save_cursor_addr_65537_110'
                                    586 ;------------------------------------------------------------
                                    587 ;	main.c:73: static int counter_02s = 0; // Initialize a static variable called counter_02s with a value of 0
      000000 90r00r04         [24]  588 	mov	dptr,#_timer0_ISR_counter_02s_65537_110
      000003 E4               [12]  589 	clr	a
      000004 F0               [24]  590 	movx	@dptr,a
      000005 A3               [24]  591 	inc	dptr
      000006 F0               [24]  592 	movx	@dptr,a
                                    593 ;------------------------------------------------------------
                                    594 ;Allocation info for local variables in function 'main'
                                    595 ;------------------------------------------------------------
                                    596 ;fingerprint_count         Allocated with name '_main_fingerprint_count_65536_120'
                                    597 ;char_detected             Allocated with name '_main_char_detected_196608_122'
                                    598 ;------------------------------------------------------------
                                    599 ;	main.c:129: static int fingerprint_count = 0;
      000007 90r00r07         [24]  600 	mov	dptr,#_main_fingerprint_count_65536_120
      00000A E4               [12]  601 	clr	a
      00000B F0               [24]  602 	movx	@dptr,a
      00000C A3               [24]  603 	inc	dptr
      00000D F0               [24]  604 	movx	@dptr,a
                                    605 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  606 	ljmp	__sdcc_program_startup
                                    607 ;--------------------------------------------------------
                                    608 ; Home
                                    609 ;--------------------------------------------------------
                                    610 	.area HOME    (CODE)
                                    611 	.area HOME    (CODE)
      00000E                        612 __sdcc_program_startup:
      00000E 02r01r67         [24]  613 	ljmp	_main
                                    614 ;	return from main will return to caller
                                    615 ;--------------------------------------------------------
                                    616 ; code
                                    617 ;--------------------------------------------------------
                                    618 	.area CSEG    (CODE)
                                    619 ;------------------------------------------------------------
                                    620 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    621 ;------------------------------------------------------------
                                    622 ;	main.c:40: _sdcc_external_startup()
                                    623 ;	-----------------------------------------
                                    624 ;	 function _sdcc_external_startup
                                    625 ;	-----------------------------------------
      000000                        626 __sdcc_external_startup:
                           000007   627 	ar7 = 0x07
                           000006   628 	ar6 = 0x06
                           000005   629 	ar5 = 0x05
                           000004   630 	ar4 = 0x04
                           000003   631 	ar3 = 0x03
                           000002   632 	ar2 = 0x02
                           000001   633 	ar1 = 0x01
                           000000   634 	ar0 = 0x00
                                    635 ;	main.c:43: AUXR |= (XRS1 | XRS0);
      000000 43 8E 0C         [24]  636 	orl	_AUXR,#0x0c
                                    637 ;	main.c:45: return 0;
      000003 90 00 00         [24]  638 	mov	dptr,#0x0000
                                    639 ;	main.c:46: }
      000006 22               [24]  640 	ret
                                    641 ;------------------------------------------------------------
                                    642 ;Allocation info for local variables in function 'delay_ms'
                                    643 ;------------------------------------------------------------
                                    644 ;ms                        Allocated with name '_delay_ms_ms_65536_102'
                                    645 ;i                         Allocated with name '_delay_ms_i_65536_103'
                                    646 ;j                         Allocated with name '_delay_ms_j_65536_103'
                                    647 ;------------------------------------------------------------
                                    648 ;	main.c:56: void delay_ms(unsigned int ms) {
                                    649 ;	-----------------------------------------
                                    650 ;	 function delay_ms
                                    651 ;	-----------------------------------------
      000007                        652 _delay_ms:
      000007 AF 83            [24]  653 	mov	r7,dph
      000009 E5 82            [12]  654 	mov	a,dpl
      00000B 90r00r00         [24]  655 	mov	dptr,#_delay_ms_ms_65536_102
      00000E F0               [24]  656 	movx	@dptr,a
      00000F EF               [12]  657 	mov	a,r7
      000010 A3               [24]  658 	inc	dptr
      000011 F0               [24]  659 	movx	@dptr,a
                                    660 ;	main.c:58: for(i = 0; i < ms; i++)
      000012 90r00r00         [24]  661 	mov	dptr,#_delay_ms_ms_65536_102
      000015 E0               [24]  662 	movx	a,@dptr
      000016 FE               [12]  663 	mov	r6,a
      000017 A3               [24]  664 	inc	dptr
      000018 E0               [24]  665 	movx	a,@dptr
      000019 FF               [12]  666 	mov	r7,a
      00001A 7C 00            [12]  667 	mov	r4,#0x00
      00001C 7D 00            [12]  668 	mov	r5,#0x00
      00001E                        669 00107$:
      00001E C3               [12]  670 	clr	c
      00001F EC               [12]  671 	mov	a,r4
      000020 9E               [12]  672 	subb	a,r6
      000021 ED               [12]  673 	mov	a,r5
      000022 9F               [12]  674 	subb	a,r7
      000023 50 14            [24]  675 	jnc	00109$
                                    676 ;	main.c:59: for(j = 0; j < 1275; j++);
      000025 7A FB            [12]  677 	mov	r2,#0xfb
      000027 7B 04            [12]  678 	mov	r3,#0x04
      000029                        679 00105$:
      000029 1A               [12]  680 	dec	r2
      00002A BA FF 01         [24]  681 	cjne	r2,#0xff,00130$
      00002D 1B               [12]  682 	dec	r3
      00002E                        683 00130$:
      00002E EA               [12]  684 	mov	a,r2
      00002F 4B               [12]  685 	orl	a,r3
      000030 70 F7            [24]  686 	jnz	00105$
                                    687 ;	main.c:58: for(i = 0; i < ms; i++)
      000032 0C               [12]  688 	inc	r4
      000033 BC 00 E8         [24]  689 	cjne	r4,#0x00,00107$
      000036 0D               [12]  690 	inc	r5
      000037 80 E5            [24]  691 	sjmp	00107$
      000039                        692 00109$:
                                    693 ;	main.c:60: }
      000039 22               [24]  694 	ret
                                    695 ;------------------------------------------------------------
                                    696 ;Allocation info for local variables in function 'delay_sec'
                                    697 ;------------------------------------------------------------
                                    698 ;sec                       Allocated with name '_delay_sec_sec_65536_106'
                                    699 ;i                         Allocated with name '_delay_sec_i_65536_107'
                                    700 ;------------------------------------------------------------
                                    701 ;	main.c:62: void delay_sec(unsigned int sec) {
                                    702 ;	-----------------------------------------
                                    703 ;	 function delay_sec
                                    704 ;	-----------------------------------------
      00003A                        705 _delay_sec:
      00003A AF 83            [24]  706 	mov	r7,dph
      00003C E5 82            [12]  707 	mov	a,dpl
      00003E 90r00r02         [24]  708 	mov	dptr,#_delay_sec_sec_65536_106
      000041 F0               [24]  709 	movx	@dptr,a
      000042 EF               [12]  710 	mov	a,r7
      000043 A3               [24]  711 	inc	dptr
      000044 F0               [24]  712 	movx	@dptr,a
                                    713 ;	main.c:64: for(i = 0; i < sec; i++)
      000045 90r00r02         [24]  714 	mov	dptr,#_delay_sec_sec_65536_106
      000048 E0               [24]  715 	movx	a,@dptr
      000049 FE               [12]  716 	mov	r6,a
      00004A A3               [24]  717 	inc	dptr
      00004B E0               [24]  718 	movx	a,@dptr
      00004C FF               [12]  719 	mov	r7,a
      00004D 7C 00            [12]  720 	mov	r4,#0x00
      00004F 7D 00            [12]  721 	mov	r5,#0x00
      000051                        722 00103$:
      000051 C3               [12]  723 	clr	c
      000052 EC               [12]  724 	mov	a,r4
      000053 9E               [12]  725 	subb	a,r6
      000054 ED               [12]  726 	mov	a,r5
      000055 9F               [12]  727 	subb	a,r7
      000056 50 1D            [24]  728 	jnc	00105$
                                    729 ;	main.c:65: delay_ms(1000);
      000058 90 03 E8         [24]  730 	mov	dptr,#0x03e8
      00005B C0 07            [24]  731 	push	ar7
      00005D C0 06            [24]  732 	push	ar6
      00005F C0 05            [24]  733 	push	ar5
      000061 C0 04            [24]  734 	push	ar4
      000063 12r00r07         [24]  735 	lcall	_delay_ms
      000066 D0 04            [24]  736 	pop	ar4
      000068 D0 05            [24]  737 	pop	ar5
      00006A D0 06            [24]  738 	pop	ar6
      00006C D0 07            [24]  739 	pop	ar7
                                    740 ;	main.c:64: for(i = 0; i < sec; i++)
      00006E 0C               [12]  741 	inc	r4
      00006F BC 00 DF         [24]  742 	cjne	r4,#0x00,00103$
      000072 0D               [12]  743 	inc	r5
      000073 80 DC            [24]  744 	sjmp	00103$
      000075                        745 00105$:
                                    746 ;	main.c:66: }
      000075 22               [24]  747 	ret
                                    748 ;------------------------------------------------------------
                                    749 ;Allocation info for local variables in function 'timer0_ISR'
                                    750 ;------------------------------------------------------------
                                    751 ;counter_02s               Allocated with name '_timer0_ISR_counter_02s_65537_110'
                                    752 ;save_cursor_addr          Allocated with name '_timer0_ISR_save_cursor_addr_65537_110'
                                    753 ;------------------------------------------------------------
                                    754 ;	main.c:68: void timer0_ISR() __interrupt(1) { // Define Timer 0 interrupt service routine
                                    755 ;	-----------------------------------------
                                    756 ;	 function timer0_ISR
                                    757 ;	-----------------------------------------
      000076                        758 _timer0_ISR:
      000076 C0*00            [24]  759 	push	bits
      000078 C0 E0            [24]  760 	push	acc
      00007A C0 F0            [24]  761 	push	b
      00007C C0 82            [24]  762 	push	dpl
      00007E C0 83            [24]  763 	push	dph
      000080 C0 07            [24]  764 	push	(0+7)
      000082 C0 06            [24]  765 	push	(0+6)
      000084 C0 05            [24]  766 	push	(0+5)
      000086 C0 04            [24]  767 	push	(0+4)
      000088 C0 03            [24]  768 	push	(0+3)
      00008A C0 02            [24]  769 	push	(0+2)
      00008C C0 01            [24]  770 	push	(0+1)
      00008E C0 00            [24]  771 	push	(0+0)
      000090 C0 D0            [24]  772 	push	psw
      000092 75 D0 00         [24]  773 	mov	psw,#0x00
                                    774 ;	main.c:69: EA = 0;     // Disable interrupts
                                    775 ;	assignBit
      000095 C2 AF            [12]  776 	clr	_EA
                                    777 ;	main.c:71: TF0 = 0;    // Clear Timer 0 interrupt flag
                                    778 ;	assignBit
      000097 C2 8D            [12]  779 	clr	_TF0
                                    780 ;	main.c:74: volatile uint8_t save_cursor_addr = get_cursor_address(); // Get the current cursor address and store it in save_cursor_addr
      000099 12r00r00         [24]  781 	lcall	_get_cursor_address
      00009C E5 82            [12]  782 	mov	a,dpl
      00009E 90r00r06         [24]  783 	mov	dptr,#_timer0_ISR_save_cursor_addr_65537_110
      0000A1 F0               [24]  784 	movx	@dptr,a
                                    785 ;	main.c:77: if (counter_02s == 2) { // If the counter_02s equals 2, which means 0.2 seconds have passed
      0000A2 90r00r04         [24]  786 	mov	dptr,#_timer0_ISR_counter_02s_65537_110
      0000A5 E0               [24]  787 	movx	a,@dptr
      0000A6 FE               [12]  788 	mov	r6,a
      0000A7 A3               [24]  789 	inc	dptr
      0000A8 E0               [24]  790 	movx	a,@dptr
      0000A9 FF               [12]  791 	mov	r7,a
      0000AA BE 02 1A         [24]  792 	cjne	r6,#0x02,00102$
      0000AD BF 00 17         [24]  793 	cjne	r7,#0x00,00102$
                                    794 ;	main.c:78: P1_1 = P1_1 ^ 1;    // Toggle pin P1_1
      0000B0 B2 91            [12]  795 	cpl	_P1_1
                                    796 ;	main.c:79: update_lcd  = 1;    // Set the update_lcd flag to 1 to update the LCD
      0000B2 90r00r00         [24]  797 	mov	dptr,#_update_lcd
      0000B5 74 01            [12]  798 	mov	a,#0x01
      0000B7 F0               [24]  799 	movx	@dptr,a
      0000B8 E4               [12]  800 	clr	a
      0000B9 A3               [24]  801 	inc	dptr
      0000BA F0               [24]  802 	movx	@dptr,a
                                    803 ;	main.c:80: counter_02s = 0;    // Reset the counter_02s
      0000BB 90r00r04         [24]  804 	mov	dptr,#_timer0_ISR_counter_02s_65537_110
      0000BE F0               [24]  805 	movx	@dptr,a
      0000BF A3               [24]  806 	inc	dptr
      0000C0 F0               [24]  807 	movx	@dptr,a
                                    808 ;	main.c:81: tenth_of_second++;  // Increment the tenth of a second counter
      0000C1 90r00r02         [24]  809 	mov	dptr,#_tenth_of_second
      0000C4 E0               [24]  810 	movx	a,@dptr
      0000C5 04               [12]  811 	inc	a
      0000C6 F0               [24]  812 	movx	@dptr,a
      0000C7                        813 00102$:
                                    814 ;	main.c:83: counter_02s++;  // Increment the counter_02s
      0000C7 90r00r04         [24]  815 	mov	dptr,#_timer0_ISR_counter_02s_65537_110
      0000CA E0               [24]  816 	movx	a,@dptr
      0000CB 24 01            [12]  817 	add	a,#0x01
      0000CD F0               [24]  818 	movx	@dptr,a
      0000CE A3               [24]  819 	inc	dptr
      0000CF E0               [24]  820 	movx	a,@dptr
      0000D0 34 00            [12]  821 	addc	a,#0x00
      0000D2 F0               [24]  822 	movx	@dptr,a
                                    823 ;	main.c:85: TL0 = 0xfd;     // Set the low value of Timer 0 to 0xfd
      0000D3 75 8A FD         [24]  824 	mov	_TL0,#0xfd
                                    825 ;	main.c:86: TH0 = 0x4b;     // Set the high value of Timer 0 to 0x4b
      0000D6 75 8C 4B         [24]  826 	mov	_TH0,#0x4b
                                    827 ;	main.c:88: if (tenth_of_second == ':') { // If the tenth of a second counter equals ':', which means 1 second has passed
      0000D9 90r00r02         [24]  828 	mov	dptr,#_tenth_of_second
      0000DC E0               [24]  829 	movx	a,@dptr
      0000DD FF               [12]  830 	mov	r7,a
      0000DE BF 3A 4A         [24]  831 	cjne	r7,#0x3a,00112$
                                    832 ;	main.c:89: tenth_of_second = '0'; // Reset the tenth of a second counter to '0'
      0000E1 90r00r02         [24]  833 	mov	dptr,#_tenth_of_second
      0000E4 74 30            [12]  834 	mov	a,#0x30
      0000E6 F0               [24]  835 	movx	@dptr,a
                                    836 ;	main.c:90: seconds_ones_digit++; // Increment the first digit of the seconds counter
      0000E7 90r00r03         [24]  837 	mov	dptr,#_seconds_ones_digit
      0000EA E0               [24]  838 	movx	a,@dptr
      0000EB 04               [12]  839 	inc	a
      0000EC F0               [24]  840 	movx	@dptr,a
                                    841 ;	main.c:92: if (seconds_ones_digit == ':') { // If the first digit of the seconds counter equals ':', which means 10 seconds have passed
      0000ED E0               [24]  842 	movx	a,@dptr
      0000EE FF               [12]  843 	mov	r7,a
      0000EF BF 3A 39         [24]  844 	cjne	r7,#0x3a,00112$
                                    845 ;	main.c:93: seconds_ones_digit = '0'; // Reset the first digit of the seconds counter to '0'
      0000F2 90r00r03         [24]  846 	mov	dptr,#_seconds_ones_digit
      0000F5 74 30            [12]  847 	mov	a,#0x30
      0000F7 F0               [24]  848 	movx	@dptr,a
                                    849 ;	main.c:94: seconds_tens_digit++; // Increment the second digit of the seconds counter
      0000F8 90r00r04         [24]  850 	mov	dptr,#_seconds_tens_digit
      0000FB E0               [24]  851 	movx	a,@dptr
      0000FC 04               [12]  852 	inc	a
      0000FD F0               [24]  853 	movx	@dptr,a
                                    854 ;	main.c:96: if (seconds_tens_digit == '6') { // If the second digit of the seconds counter equals '6', which means 1 minute has passed
      0000FE E0               [24]  855 	movx	a,@dptr
      0000FF FF               [12]  856 	mov	r7,a
      000100 BF 36 28         [24]  857 	cjne	r7,#0x36,00112$
                                    858 ;	main.c:97: seconds_tens_digit = '0'; // Reset the second digit of the seconds counter to '0'
      000103 90r00r04         [24]  859 	mov	dptr,#_seconds_tens_digit
      000106 74 30            [12]  860 	mov	a,#0x30
      000108 F0               [24]  861 	movx	@dptr,a
                                    862 ;	main.c:98: minutes_ones_digit++; // Increment the first digit of the minutes counter
      000109 90r00r05         [24]  863 	mov	dptr,#_minutes_ones_digit
      00010C E0               [24]  864 	movx	a,@dptr
      00010D 04               [12]  865 	inc	a
      00010E F0               [24]  866 	movx	@dptr,a
                                    867 ;	main.c:100: if (minutes_ones_digit == ':') { // If the first digit of the minutes counter equals ':', which means 10 minutes have passed
      00010F E0               [24]  868 	movx	a,@dptr
      000110 FF               [12]  869 	mov	r7,a
      000111 BF 3A 17         [24]  870 	cjne	r7,#0x3a,00112$
                                    871 ;	main.c:101: minutes_ones_digit = '0'; // Reset the first digit of the minutes counter to '0'
      000114 90r00r05         [24]  872 	mov	dptr,#_minutes_ones_digit
      000117 74 30            [12]  873 	mov	a,#0x30
      000119 F0               [24]  874 	movx	@dptr,a
                                    875 ;	main.c:102: minutes_tens_digit++; // Increment the second digit of the minutes counter
      00011A 90r00r06         [24]  876 	mov	dptr,#_minutes_tens_digit
      00011D E0               [24]  877 	movx	a,@dptr
      00011E 04               [12]  878 	inc	a
      00011F F0               [24]  879 	movx	@dptr,a
                                    880 ;	main.c:104: if (minutes_tens_digit == '6') { // If the second digit of the minutes counter equals '6', which means 1 hour has passed
      000120 E0               [24]  881 	movx	a,@dptr
      000121 FF               [12]  882 	mov	r7,a
      000122 BF 36 06         [24]  883 	cjne	r7,#0x36,00112$
                                    884 ;	main.c:105: minutes_tens_digit = '0'; // Reset the second digit of the minutes counter to '0'
      000125 90r00r06         [24]  885 	mov	dptr,#_minutes_tens_digit
      000128 74 30            [12]  886 	mov	a,#0x30
      00012A F0               [24]  887 	movx	@dptr,a
      00012B                        888 00112$:
                                    889 ;	main.c:111: lcdgotoaddr(save_cursor_addr); // Move the cursor to the previous cursor address
      00012B 90r00r06         [24]  890 	mov	dptr,#_timer0_ISR_save_cursor_addr_65537_110
      00012E E0               [24]  891 	movx	a,@dptr
      00012F F5 82            [12]  892 	mov	dpl,a
      000131 12r00r00         [24]  893 	lcall	_lcdgotoaddr
                                    894 ;	main.c:112: EA=1; // Enable interrupts
                                    895 ;	assignBit
      000134 D2 AF            [12]  896 	setb	_EA
                                    897 ;	main.c:113: }
      000136 D0 D0            [24]  898 	pop	psw
      000138 D0 00            [24]  899 	pop	(0+0)
      00013A D0 01            [24]  900 	pop	(0+1)
      00013C D0 02            [24]  901 	pop	(0+2)
      00013E D0 03            [24]  902 	pop	(0+3)
      000140 D0 04            [24]  903 	pop	(0+4)
      000142 D0 05            [24]  904 	pop	(0+5)
      000144 D0 06            [24]  905 	pop	(0+6)
      000146 D0 07            [24]  906 	pop	(0+7)
      000148 D0 83            [24]  907 	pop	dph
      00014A D0 82            [24]  908 	pop	dpl
      00014C D0 F0            [24]  909 	pop	b
      00014E D0 E0            [24]  910 	pop	acc
      000150 D0*00            [24]  911 	pop	bits
      000152 32               [24]  912 	reti
                                    913 ;------------------------------------------------------------
                                    914 ;Allocation info for local variables in function 'init_timer'
                                    915 ;------------------------------------------------------------
                                    916 ;	main.c:116: void init_timer(void){
                                    917 ;	-----------------------------------------
                                    918 ;	 function init_timer
                                    919 ;	-----------------------------------------
      000153                        920 _init_timer:
                                    921 ;	main.c:117: TCON=TCON&(~0x30);   // Clearing the last 2 bits in TCON register
      000153 53 88 CF         [24]  922 	anl	_TCON,#0xcf
                                    923 ;	main.c:118: TMOD |= 0x01;        // Setting the Timer 0 mode to 16-bit mode
      000156 43 89 01         [24]  924 	orl	_TMOD,#0x01
                                    925 ;	main.c:119: TL0 = 0xfd;          // Setting the initial value of Timer 0 low byte
      000159 75 8A FD         [24]  926 	mov	_TL0,#0xfd
                                    927 ;	main.c:120: TH0 = 0x4b;          // Setting the initial value of Timer 0 high byte
      00015C 75 8C 4B         [24]  928 	mov	_TH0,#0x4b
                                    929 ;	main.c:121: IE   |=0x82;         // Enabling Timer 0 interrupt
      00015F 43 A8 82         [24]  930 	orl	_IE,#0x82
                                    931 ;	main.c:122: PT0 = 1;             // Setting the Timer 0 interrupt priority to high
                                    932 ;	assignBit
      000162 D2 B9            [12]  933 	setb	_PT0
                                    934 ;	main.c:123: TR0 = 1;             // Starting Timer 0
                                    935 ;	assignBit
      000164 D2 8C            [12]  936 	setb	_TR0
                                    937 ;	main.c:124: }
      000166 22               [24]  938 	ret
                                    939 ;------------------------------------------------------------
                                    940 ;Allocation info for local variables in function 'main'
                                    941 ;------------------------------------------------------------
                                    942 ;fingerprint_count         Allocated with name '_main_fingerprint_count_65536_120'
                                    943 ;char_detected             Allocated with name '_main_char_detected_196608_122'
                                    944 ;------------------------------------------------------------
                                    945 ;	main.c:127: void main(void)
                                    946 ;	-----------------------------------------
                                    947 ;	 function main
                                    948 ;	-----------------------------------------
      000167                        949 _main:
                                    950 ;	main.c:131: uart_init();        // Initialize UART for serial communication
      000167 12r00r00         [24]  951 	lcall	_uart_init
                                    952 ;	main.c:132: init_lcd();         // Initialize LCD
      00016A 12r00r00         [24]  953 	lcall	_init_lcd
                                    954 ;	main.c:135: lcdgotoxy('0','0');
      00016D 90r00r00         [24]  955 	mov	dptr,#_lcdgotoxy_PARM_2
      000170 74 30            [12]  956 	mov	a,#0x30
      000172 F0               [24]  957 	movx	@dptr,a
      000173 75 82 30         [24]  958 	mov	dpl,#0x30
      000176 12r00r00         [24]  959 	lcall	_lcdgotoxy
                                    960 ;	main.c:136: lcdputstr("Hello");
      000179 90r00r00         [24]  961 	mov	dptr,#___str_0
      00017C 75 F0 80         [24]  962 	mov	b,#0x80
      00017F 12r00r00         [24]  963 	lcall	_lcdputstr
                                    964 ;	main.c:137: lcdgotoxy('1','0');
      000182 90r00r00         [24]  965 	mov	dptr,#_lcdgotoxy_PARM_2
      000185 74 30            [12]  966 	mov	a,#0x30
      000187 F0               [24]  967 	movx	@dptr,a
      000188 75 82 31         [24]  968 	mov	dpl,#0x31
      00018B 12r00r00         [24]  969 	lcall	_lcdgotoxy
                                    970 ;	main.c:138: lcdputstr("STM32F411E-Disco");
      00018E 90r00r06         [24]  971 	mov	dptr,#___str_1
      000191 75 F0 80         [24]  972 	mov	b,#0x80
      000194 12r00r00         [24]  973 	lcall	_lcdputstr
                                    974 ;	main.c:139: lcdgotoxy('0','0');
      000197 90r00r00         [24]  975 	mov	dptr,#_lcdgotoxy_PARM_2
      00019A 74 30            [12]  976 	mov	a,#0x30
      00019C F0               [24]  977 	movx	@dptr,a
      00019D 75 82 30         [24]  978 	mov	dpl,#0x30
      0001A0 12r00r00         [24]  979 	lcall	_lcdgotoxy
                                    980 ;	main.c:140: delay_sec(1);
      0001A3 90 00 01         [24]  981 	mov	dptr,#0x0001
      0001A6 12r00r3A         [24]  982 	lcall	_delay_sec
                                    983 ;	main.c:141: while(1)
      0001A9                        984 00111$:
                                    985 ;	main.c:152: if(RI)
      0001A9 30 98 FD         [24]  986 	jnb	_RI,00111$
                                    987 ;	main.c:155: char_detected = SBUF;           // Store the character in a variable
      0001AC 90r00r09         [24]  988 	mov	dptr,#_main_char_detected_196608_122
      0001AF E5 99            [12]  989 	mov	a,_SBUF
      0001B1 F0               [24]  990 	movx	@dptr,a
                                    991 ;	main.c:159: RI = 0;                         // Reset the flag
                                    992 ;	assignBit
      0001B2 C2 98            [12]  993 	clr	_RI
                                    994 ;	main.c:161: switch(char_detected)           // Perform a certain action based on the received character
      0001B4 90r00r09         [24]  995 	mov	dptr,#_main_char_detected_196608_122
      0001B7 E0               [24]  996 	movx	a,@dptr
      0001B8 FF               [12]  997 	mov	r7,a
      0001B9 BF 41 02         [24]  998 	cjne	r7,#0x41,00144$
      0001BC 80 19            [24]  999 	sjmp	00101$
      0001BE                       1000 00144$:
      0001BE BF 42 02         [24] 1001 	cjne	r7,#0x42,00145$
      0001C1 80 70            [24] 1002 	sjmp	00102$
      0001C3                       1003 00145$:
      0001C3 BF 43 03         [24] 1004 	cjne	r7,#0x43,00146$
      0001C6 02r02r78         [24] 1005 	ljmp	00103$
      0001C9                       1006 00146$:
      0001C9 BF 44 03         [24] 1007 	cjne	r7,#0x44,00147$
      0001CC 02r02rBD         [24] 1008 	ljmp	00104$
      0001CF                       1009 00147$:
      0001CF BF 5A 03         [24] 1010 	cjne	r7,#0x5a,00148$
      0001D2 02r03r14         [24] 1011 	ljmp	00105$
      0001D5                       1012 00148$:
                                   1013 ;	main.c:163: case 'A':                       // If the character 'L' is received
      0001D5 80 D2            [24] 1014 	sjmp	00111$
      0001D7                       1015 00101$:
                                   1016 ;	main.c:176: }
      0001D7 D2*00            [12] 1017 	setb	_main_sloc0_1_0
      0001D9 10 AF 02         [24] 1018 	jbc	ea,00149$
      0001DC C2*00            [12] 1019 	clr	_main_sloc0_1_0
      0001DE                       1020 00149$:
                                   1021 ;	main.c:167: handler_lcdclear();
      0001DE 12r00r00         [24] 1022 	lcall	_handler_lcdclear
                                   1023 ;	main.c:168: lcdgotoxy('0','0');
      0001E1 90r00r00         [24] 1024 	mov	dptr,#_lcdgotoxy_PARM_2
      0001E4 74 30            [12] 1025 	mov	a,#0x30
      0001E6 F0               [24] 1026 	movx	@dptr,a
      0001E7 75 82 30         [24] 1027 	mov	dpl,#0x30
      0001EA 12r00r00         [24] 1028 	lcall	_lcdgotoxy
                                   1029 ;	main.c:169: lcdputstr("|   New User   |");
      0001ED 90r00r17         [24] 1030 	mov	dptr,#___str_2
      0001F0 75 F0 80         [24] 1031 	mov	b,#0x80
      0001F3 12r00r00         [24] 1032 	lcall	_lcdputstr
                                   1033 ;	main.c:170: lcdgotoxy('1','0');
      0001F6 90r00r00         [24] 1034 	mov	dptr,#_lcdgotoxy_PARM_2
      0001F9 74 30            [12] 1035 	mov	a,#0x30
      0001FB F0               [24] 1036 	movx	@dptr,a
      0001FC 75 82 31         [24] 1037 	mov	dpl,#0x31
      0001FF 12r00r00         [24] 1038 	lcall	_lcdgotoxy
                                   1039 ;	main.c:171: lcdputstr("|   Enrolled   |");
      000202 90r00r28         [24] 1040 	mov	dptr,#___str_3
      000205 75 F0 80         [24] 1041 	mov	b,#0x80
      000208 12r00r00         [24] 1042 	lcall	_lcdputstr
                                   1043 ;	main.c:172: lcdgotoxy('0','0');
      00020B 90r00r00         [24] 1044 	mov	dptr,#_lcdgotoxy_PARM_2
      00020E 74 30            [12] 1045 	mov	a,#0x30
      000210 F0               [24] 1046 	movx	@dptr,a
      000211 75 82 30         [24] 1047 	mov	dpl,#0x30
      000214 12r00r00         [24] 1048 	lcall	_lcdgotoxy
                                   1049 ;	main.c:173: handle_newuser_custom_char();
      000217 12r00r00         [24] 1050 	lcall	_handle_newuser_custom_char
                                   1051 ;	main.c:174: delay_sec(1);
      00021A 90 00 01         [24] 1052 	mov	dptr,#0x0001
      00021D 12r00r3A         [24] 1053 	lcall	_delay_sec
                                   1054 ;	main.c:175: fingerprint_count++;
      000220 90r00r07         [24] 1055 	mov	dptr,#_main_fingerprint_count_65536_120
      000223 E0               [24] 1056 	movx	a,@dptr
      000224 24 01            [12] 1057 	add	a,#0x01
      000226 F0               [24] 1058 	movx	@dptr,a
      000227 A3               [24] 1059 	inc	dptr
      000228 E0               [24] 1060 	movx	a,@dptr
      000229 34 00            [12] 1061 	addc	a,#0x00
      00022B F0               [24] 1062 	movx	@dptr,a
      00022C A2*00            [12] 1063 	mov	c,_main_sloc0_1_0
      00022E 92 AF            [24] 1064 	mov	ea,c
                                   1065 ;	main.c:177: break;
      000230 02r01rA9         [24] 1066 	ljmp	00111$
                                   1067 ;	main.c:179: case 'B': // If the character 'A' is received
      000233                       1068 00102$:
                                   1069 ;	main.c:180: handler_lcdclear();
      000233 12r00r00         [24] 1070 	lcall	_handler_lcdclear
                                   1071 ;	main.c:181: lcdgotoxy('0','0');
      000236 90r00r00         [24] 1072 	mov	dptr,#_lcdgotoxy_PARM_2
      000239 74 30            [12] 1073 	mov	a,#0x30
      00023B F0               [24] 1074 	movx	@dptr,a
      00023C 75 82 30         [24] 1075 	mov	dpl,#0x30
      00023F 12r00r00         [24] 1076 	lcall	_lcdgotoxy
                                   1077 ;	main.c:182: lcdputstr("|      User    |");
      000242 90r00r39         [24] 1078 	mov	dptr,#___str_4
      000245 75 F0 80         [24] 1079 	mov	b,#0x80
      000248 12r00r00         [24] 1080 	lcall	_lcdputstr
                                   1081 ;	main.c:183: lcdgotoxy('1','0');
      00024B 90r00r00         [24] 1082 	mov	dptr,#_lcdgotoxy_PARM_2
      00024E 74 30            [12] 1083 	mov	a,#0x30
      000250 F0               [24] 1084 	movx	@dptr,a
      000251 75 82 31         [24] 1085 	mov	dpl,#0x31
      000254 12r00r00         [24] 1086 	lcall	_lcdgotoxy
                                   1087 ;	main.c:184: lcdputstr("|  Authorized  |");
      000257 90r00r4A         [24] 1088 	mov	dptr,#___str_5
      00025A 75 F0 80         [24] 1089 	mov	b,#0x80
      00025D 12r00r00         [24] 1090 	lcall	_lcdputstr
                                   1091 ;	main.c:185: lcdgotoxy('0','0');
      000260 90r00r00         [24] 1092 	mov	dptr,#_lcdgotoxy_PARM_2
      000263 74 30            [12] 1093 	mov	a,#0x30
      000265 F0               [24] 1094 	movx	@dptr,a
      000266 75 82 30         [24] 1095 	mov	dpl,#0x30
      000269 12r00r00         [24] 1096 	lcall	_lcdgotoxy
                                   1097 ;	main.c:186: handle_unlock_custom_char();
      00026C 12r00r00         [24] 1098 	lcall	_handle_unlock_custom_char
                                   1099 ;	main.c:187: delay_sec(1);
      00026F 90 00 01         [24] 1100 	mov	dptr,#0x0001
      000272 12r00r3A         [24] 1101 	lcall	_delay_sec
                                   1102 ;	main.c:188: break;
      000275 02r01rA9         [24] 1103 	ljmp	00111$
                                   1104 ;	main.c:190: case 'C': // If the character 'B' is received
      000278                       1105 00103$:
                                   1106 ;	main.c:191: handler_lcdclear();
      000278 12r00r00         [24] 1107 	lcall	_handler_lcdclear
                                   1108 ;	main.c:192: lcdgotoxy('0','0');
      00027B 90r00r00         [24] 1109 	mov	dptr,#_lcdgotoxy_PARM_2
      00027E 74 30            [12] 1110 	mov	a,#0x30
      000280 F0               [24] 1111 	movx	@dptr,a
      000281 75 82 30         [24] 1112 	mov	dpl,#0x30
      000284 12r00r00         [24] 1113 	lcall	_lcdgotoxy
                                   1114 ;	main.c:193: lcdputstr("|     User     |");
      000287 90r00r5B         [24] 1115 	mov	dptr,#___str_6
      00028A 75 F0 80         [24] 1116 	mov	b,#0x80
      00028D 12r00r00         [24] 1117 	lcall	_lcdputstr
                                   1118 ;	main.c:194: lcdgotoxy('1','0');
      000290 90r00r00         [24] 1119 	mov	dptr,#_lcdgotoxy_PARM_2
      000293 74 30            [12] 1120 	mov	a,#0x30
      000295 F0               [24] 1121 	movx	@dptr,a
      000296 75 82 31         [24] 1122 	mov	dpl,#0x31
      000299 12r00r00         [24] 1123 	lcall	_lcdgotoxy
                                   1124 ;	main.c:195: lcdputstr("| Un-Authorized|");
      00029C 90r00r6C         [24] 1125 	mov	dptr,#___str_7
      00029F 75 F0 80         [24] 1126 	mov	b,#0x80
      0002A2 12r00r00         [24] 1127 	lcall	_lcdputstr
                                   1128 ;	main.c:196: lcdgotoxy('0','0');
      0002A5 90r00r00         [24] 1129 	mov	dptr,#_lcdgotoxy_PARM_2
      0002A8 74 30            [12] 1130 	mov	a,#0x30
      0002AA F0               [24] 1131 	movx	@dptr,a
      0002AB 75 82 30         [24] 1132 	mov	dpl,#0x30
      0002AE 12r00r00         [24] 1133 	lcall	_lcdgotoxy
                                   1134 ;	main.c:197: handle_lock_custom_char();
      0002B1 12r00r00         [24] 1135 	lcall	_handle_lock_custom_char
                                   1136 ;	main.c:198: delay_sec(1);
      0002B4 90 00 01         [24] 1137 	mov	dptr,#0x0001
      0002B7 12r00r3A         [24] 1138 	lcall	_delay_sec
                                   1139 ;	main.c:199: break;
      0002BA 02r01rA9         [24] 1140 	ljmp	00111$
                                   1141 ;	main.c:201: case 'D': // If the character 'C' is received
      0002BD                       1142 00104$:
                                   1143 ;	main.c:202: handler_lcdclear();
      0002BD 12r00r00         [24] 1144 	lcall	_handler_lcdclear
                                   1145 ;	main.c:203: lcdgotoxy('0','0');
      0002C0 90r00r00         [24] 1146 	mov	dptr,#_lcdgotoxy_PARM_2
      0002C3 74 30            [12] 1147 	mov	a,#0x30
      0002C5 F0               [24] 1148 	movx	@dptr,a
      0002C6 75 82 30         [24] 1149 	mov	dpl,#0x30
      0002C9 12r00r00         [24] 1150 	lcall	_lcdgotoxy
                                   1151 ;	main.c:204: lcdputstr("|  Existing    |");
      0002CC 90r00r7D         [24] 1152 	mov	dptr,#___str_8
      0002CF 75 F0 80         [24] 1153 	mov	b,#0x80
      0002D2 12r00r00         [24] 1154 	lcall	_lcdputstr
                                   1155 ;	main.c:205: lcdgotoxy('1','0');
      0002D5 90r00r00         [24] 1156 	mov	dptr,#_lcdgotoxy_PARM_2
      0002D8 74 30            [12] 1157 	mov	a,#0x30
      0002DA F0               [24] 1158 	movx	@dptr,a
      0002DB 75 82 31         [24] 1159 	mov	dpl,#0x31
      0002DE 12r00r00         [24] 1160 	lcall	_lcdgotoxy
                                   1161 ;	main.c:206: lcdputstr("|  Data Base   |");
      0002E1 90r00r8E         [24] 1162 	mov	dptr,#___str_9
      0002E4 75 F0 80         [24] 1163 	mov	b,#0x80
      0002E7 12r00r00         [24] 1164 	lcall	_lcdputstr
                                   1165 ;	main.c:207: lcdgotoxy('2','0');
      0002EA 90r00r00         [24] 1166 	mov	dptr,#_lcdgotoxy_PARM_2
      0002ED 74 30            [12] 1167 	mov	a,#0x30
      0002EF F0               [24] 1168 	movx	@dptr,a
      0002F0 75 82 32         [24] 1169 	mov	dpl,#0x32
      0002F3 12r00r00         [24] 1170 	lcall	_lcdgotoxy
                                   1171 ;	main.c:208: lcdputstr("|   Cleared    |");
      0002F6 90r00r9F         [24] 1172 	mov	dptr,#___str_10
      0002F9 75 F0 80         [24] 1173 	mov	b,#0x80
      0002FC 12r00r00         [24] 1174 	lcall	_lcdputstr
                                   1175 ;	main.c:209: lcdgotoxy('0','0');
      0002FF 90r00r00         [24] 1176 	mov	dptr,#_lcdgotoxy_PARM_2
      000302 74 30            [12] 1177 	mov	a,#0x30
      000304 F0               [24] 1178 	movx	@dptr,a
      000305 75 82 30         [24] 1179 	mov	dpl,#0x30
      000308 12r00r00         [24] 1180 	lcall	_lcdgotoxy
                                   1181 ;	main.c:210: delay_sec(1);
      00030B 90 00 01         [24] 1182 	mov	dptr,#0x0001
      00030E 12r00r3A         [24] 1183 	lcall	_delay_sec
                                   1184 ;	main.c:212: break;
      000311 02r01rA9         [24] 1185 	ljmp	00111$
                                   1186 ;	main.c:271: case 'Z': // If the character 'P' is received
      000314                       1187 00105$:
                                   1188 ;	main.c:272: handler_lcdclear();
      000314 12r00r00         [24] 1189 	lcall	_handler_lcdclear
                                   1190 ;	main.c:273: lcdgotoxy('0','0');
      000317 90r00r00         [24] 1191 	mov	dptr,#_lcdgotoxy_PARM_2
      00031A 74 30            [12] 1192 	mov	a,#0x30
      00031C F0               [24] 1193 	movx	@dptr,a
      00031D 75 82 30         [24] 1194 	mov	dpl,#0x30
      000320 12r00r00         [24] 1195 	lcall	_lcdgotoxy
                                   1196 ;	main.c:274: delay_sec(1);
      000323 90 00 01         [24] 1197 	mov	dptr,#0x0001
      000326 12r00r3A         [24] 1198 	lcall	_delay_sec
                                   1199 ;	main.c:275: break;
                                   1200 ;	main.c:279: }
                                   1201 ;	main.c:282: }
      000329 02r01rA9         [24] 1202 	ljmp	00111$
                                   1203 	.area CSEG    (CODE)
                                   1204 	.area CONST   (CODE)
                                   1205 	.area CONST   (CODE)
      000000                       1206 ___str_0:
      000000 48 65 6C 6C 6F        1207 	.ascii "Hello"
      000005 00                    1208 	.db 0x00
                                   1209 	.area CSEG    (CODE)
                                   1210 	.area CONST   (CODE)
      000006                       1211 ___str_1:
      000006 53 54 4D 33 32 46 34  1212 	.ascii "STM32F411E-Disco"
             31 31 45 2D 44 69 73
             63 6F
      000016 00                    1213 	.db 0x00
                                   1214 	.area CSEG    (CODE)
                                   1215 	.area CONST   (CODE)
      000017                       1216 ___str_2:
      000017 7C 20 20 20 4E 65 77  1217 	.ascii "|   New User   |"
             20 55 73 65 72 20 20
             20 7C
      000027 00                    1218 	.db 0x00
                                   1219 	.area CSEG    (CODE)
                                   1220 	.area CONST   (CODE)
      000028                       1221 ___str_3:
      000028 7C 20 20 20 45 6E 72  1222 	.ascii "|   Enrolled   |"
             6F 6C 6C 65 64 20 20
             20 7C
      000038 00                    1223 	.db 0x00
                                   1224 	.area CSEG    (CODE)
                                   1225 	.area CONST   (CODE)
      000039                       1226 ___str_4:
      000039 7C 20 20 20 20 20 20  1227 	.ascii "|      User    |"
             55 73 65 72 20 20 20
             20 7C
      000049 00                    1228 	.db 0x00
                                   1229 	.area CSEG    (CODE)
                                   1230 	.area CONST   (CODE)
      00004A                       1231 ___str_5:
      00004A 7C 20 20 41 75 74 68  1232 	.ascii "|  Authorized  |"
             6F 72 69 7A 65 64 20
             20 7C
      00005A 00                    1233 	.db 0x00
                                   1234 	.area CSEG    (CODE)
                                   1235 	.area CONST   (CODE)
      00005B                       1236 ___str_6:
      00005B 7C 20 20 20 20 20 55  1237 	.ascii "|     User     |"
             73 65 72 20 20 20 20
             20 7C
      00006B 00                    1238 	.db 0x00
                                   1239 	.area CSEG    (CODE)
                                   1240 	.area CONST   (CODE)
      00006C                       1241 ___str_7:
      00006C 7C 20 55 6E 2D 41 75  1242 	.ascii "| Un-Authorized|"
             74 68 6F 72 69 7A 65
             64 7C
      00007C 00                    1243 	.db 0x00
                                   1244 	.area CSEG    (CODE)
                                   1245 	.area CONST   (CODE)
      00007D                       1246 ___str_8:
      00007D 7C 20 20 45 78 69 73  1247 	.ascii "|  Existing    |"
             74 69 6E 67 20 20 20
             20 7C
      00008D 00                    1248 	.db 0x00
                                   1249 	.area CSEG    (CODE)
                                   1250 	.area CONST   (CODE)
      00008E                       1251 ___str_9:
      00008E 7C 20 20 44 61 74 61  1252 	.ascii "|  Data Base   |"
             20 42 61 73 65 20 20
             20 7C
      00009E 00                    1253 	.db 0x00
                                   1254 	.area CSEG    (CODE)
                                   1255 	.area CONST   (CODE)
      00009F                       1256 ___str_10:
      00009F 7C 20 20 20 43 6C 65  1257 	.ascii "|   Cleared    |"
             61 72 65 64 20 20 20
             20 7C
      0000AF 00                    1258 	.db 0x00
                                   1259 	.area CSEG    (CODE)
                                   1260 	.area XINIT   (CODE)
      000000                       1261 __xinit__update_lcd:
      000000 00 00                 1262 	.byte #0x00, #0x00	;  0
      000002                       1263 __xinit__tenth_of_second:
      000002 30                    1264 	.db #0x30	; 48	'0'
      000003                       1265 __xinit__seconds_ones_digit:
      000003 30                    1266 	.db #0x30	; 48	'0'
      000004                       1267 __xinit__seconds_tens_digit:
      000004 30                    1268 	.db #0x30	; 48	'0'
      000005                       1269 __xinit__minutes_ones_digit:
      000005 30                    1270 	.db #0x30	; 48	'0'
      000006                       1271 __xinit__minutes_tens_digit:
      000006 30                    1272 	.db #0x30	; 48	'0'
                                   1273 	.area CABS    (ABS,CODE)
