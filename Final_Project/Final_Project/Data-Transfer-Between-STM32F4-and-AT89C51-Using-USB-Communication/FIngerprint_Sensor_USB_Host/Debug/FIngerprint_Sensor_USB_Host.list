
FIngerprint_Sensor_USB_Host.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca64  0800ca64  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca64  0800ca64  0001ca64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca6c  0800ca6c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca6c  0800ca6c  0001ca6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  0800ca74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d60  2000016c  0800cbe0  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ecc  0800cbe0  00021ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016041  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b0d  00000000  00000000  000361dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00039cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a48b  00000000  00000000  0003bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001754f  00000000  00000000  00056133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bdd8  00000000  00000000  0006d682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f945a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ac  00000000  00000000  000f94ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bad0 	.word	0x0800bad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800bad0 	.word	0x0800bad0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <UART3_FINGER_Init>:
const uint8_t CMD_GET_FP_COUNT[] = {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x13, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x5E};



void UART3_FINGER_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	uartFinger.Instance = USART2;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <UART3_FINGER_Init+0x50>)
 800059c:	601a      	str	r2, [r3, #0]
	uartFinger.Init.BaudRate = 57600;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005a0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80005a4:	605a      	str	r2, [r3, #4]
	uartFinger.Init.WordLength = UART_WORDLENGTH_8B;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
	uartFinger.Init.StopBits = UART_STOPBITS_1;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	60da      	str	r2, [r3, #12]
	uartFinger.Init.Parity = UART_PARITY_NONE;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
	uartFinger.Init.Mode = UART_MODE_TX_RX;
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005ba:	220c      	movs	r2, #12
 80005bc:	615a      	str	r2, [r3, #20]
	uartFinger.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
	uartFinger.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uartFinger) != HAL_OK)
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <UART3_FINGER_Init+0x4c>)
 80005cc:	f005 fbf6 	bl	8005dbc <HAL_UART_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <UART3_FINGER_Init+0x46>
	{
		Error_Handler();
 80005d6:	f002 fd57 	bl	8003088 <Error_Handler>
	}

}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000188 	.word	0x20000188
 80005e4:	40004400 	.word	0x40004400

080005e8 <writeRegister>:

int8_t writeRegister(uint8_t regAdd, uint8_t value)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	460a      	mov	r2, r1
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	4613      	mov	r3, r2
 80005f6:	71bb      	strb	r3, [r7, #6]
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_WRITE_REG, regAdd,value};
 80005f8:	230e      	movs	r3, #14
 80005fa:	733b      	strb	r3, [r7, #12]
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	737b      	strb	r3, [r7, #13]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	73bb      	strb	r3, [r7, #14]
	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 5, packet);
 8000604:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <writeRegister+0x58>)
 8000606:	6818      	ldr	r0, [r3, #0]
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2205      	movs	r2, #5
 800060e:	2101      	movs	r1, #1
 8000610:	f000 f82c 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <writeRegister+0x5c>)
 8000616:	f000 f8df 	bl	80007d8 <getReply>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d006      	beq.n	8000632 <writeRegister+0x4a>
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <writeRegister+0x5c>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b07      	cmp	r3, #7
 800062a:	d002      	beq.n	8000632 <writeRegister+0x4a>
		return -1;
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000630:	e002      	b.n	8000638 <writeRegister+0x50>
	return recvPacket[1];
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <writeRegister+0x5c>)
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	b25b      	sxtb	r3, r3
}
 8000638:	4618      	mov	r0, r3
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000000 	.word	0x20000000
 8000644:	200001d0 	.word	0x200001d0

08000648 <setSecurityLevel>:

int8_t setSecurityLevel(uint8_t level)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
	int8_t ret = writeRegister(FINGERPRINT_SECURITY_REG_ADDR, level);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4619      	mov	r1, r3
 8000656:	2005      	movs	r0, #5
 8000658:	f7ff ffc6 	bl	80005e8 <writeRegister>
 800065c:	4603      	mov	r3, r0
 800065e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <writePacket>:
	int8_t ret = writeRegister(FINGERPRINT_PACKET_REG_ADDR, size);
	return ret;
}

void writePacket(uint32_t addr, uint8_t packettype, uint16_t len, uint8_t *packet)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	460b      	mov	r3, r1
 8000678:	72fb      	strb	r3, [r7, #11]
 800067a:	4613      	mov	r3, r2
 800067c:	813b      	strh	r3, [r7, #8]
	uint16_t sum;
	uint8_t i;

	uint8_t startcodeH = FINGERPRINT_STARTCODE >> 8;
 800067e:	23ef      	movs	r3, #239	; 0xef
 8000680:	773b      	strb	r3, [r7, #28]
	uint8_t startcodeL = FINGERPRINT_STARTCODE&0xff;
 8000682:	2301      	movs	r3, #1
 8000684:	76fb      	strb	r3, [r7, #27]
	uint8_t addr1 = addr >> 24;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	0e1b      	lsrs	r3, r3, #24
 800068a:	b2db      	uxtb	r3, r3
 800068c:	76bb      	strb	r3, [r7, #26]
	uint8_t addr2 = addr >> 16;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	0c1b      	lsrs	r3, r3, #16
 8000692:	b2db      	uxtb	r3, r3
 8000694:	767b      	strb	r3, [r7, #25]
	uint8_t addr3 = addr >> 8;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	b2db      	uxtb	r3, r3
 800069c:	763b      	strb	r3, [r7, #24]
	uint8_t addr4 = addr&0xff;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	75fb      	strb	r3, [r7, #23]
	uint8_t lenH = len>>8;
 80006a4:	893b      	ldrh	r3, [r7, #8]
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	75bb      	strb	r3, [r7, #22]
	uint8_t lenL = len&0xff;
 80006ae:	893b      	ldrh	r3, [r7, #8]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&uartFinger, &startcodeH, 1, DEFAULTTIMEOUT);
 80006b4:	f107 011c 	add.w	r1, r7, #28
 80006b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006bc:	2201      	movs	r2, #1
 80006be:	4845      	ldr	r0, [pc, #276]	; (80007d4 <writePacket+0x168>)
 80006c0:	f005 fbc9 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &startcodeL, 1, DEFAULTTIMEOUT);
 80006c4:	f107 011b 	add.w	r1, r7, #27
 80006c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006cc:	2201      	movs	r2, #1
 80006ce:	4841      	ldr	r0, [pc, #260]	; (80007d4 <writePacket+0x168>)
 80006d0:	f005 fbc1 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &addr1, 1, DEFAULTTIMEOUT);
 80006d4:	f107 011a 	add.w	r1, r7, #26
 80006d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006dc:	2201      	movs	r2, #1
 80006de:	483d      	ldr	r0, [pc, #244]	; (80007d4 <writePacket+0x168>)
 80006e0:	f005 fbb9 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &addr2, 1, DEFAULTTIMEOUT);
 80006e4:	f107 0119 	add.w	r1, r7, #25
 80006e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006ec:	2201      	movs	r2, #1
 80006ee:	4839      	ldr	r0, [pc, #228]	; (80007d4 <writePacket+0x168>)
 80006f0:	f005 fbb1 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &addr3, 1, DEFAULTTIMEOUT);
 80006f4:	f107 0118 	add.w	r1, r7, #24
 80006f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80006fc:	2201      	movs	r2, #1
 80006fe:	4835      	ldr	r0, [pc, #212]	; (80007d4 <writePacket+0x168>)
 8000700:	f005 fba9 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &addr4, 1, DEFAULTTIMEOUT);
 8000704:	f107 0117 	add.w	r1, r7, #23
 8000708:	f241 3388 	movw	r3, #5000	; 0x1388
 800070c:	2201      	movs	r2, #1
 800070e:	4831      	ldr	r0, [pc, #196]	; (80007d4 <writePacket+0x168>)
 8000710:	f005 fba1 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &packettype, 1, DEFAULTTIMEOUT);
 8000714:	f107 010b 	add.w	r1, r7, #11
 8000718:	f241 3388 	movw	r3, #5000	; 0x1388
 800071c:	2201      	movs	r2, #1
 800071e:	482d      	ldr	r0, [pc, #180]	; (80007d4 <writePacket+0x168>)
 8000720:	f005 fb99 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &lenH, 1, DEFAULTTIMEOUT);
 8000724:	f107 0116 	add.w	r1, r7, #22
 8000728:	f241 3388 	movw	r3, #5000	; 0x1388
 800072c:	2201      	movs	r2, #1
 800072e:	4829      	ldr	r0, [pc, #164]	; (80007d4 <writePacket+0x168>)
 8000730:	f005 fb91 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &lenL, 1, DEFAULTTIMEOUT);
 8000734:	f107 0115 	add.w	r1, r7, #21
 8000738:	f241 3388 	movw	r3, #5000	; 0x1388
 800073c:	2201      	movs	r2, #1
 800073e:	4825      	ldr	r0, [pc, #148]	; (80007d4 <writePacket+0x168>)
 8000740:	f005 fb89 	bl	8005e56 <HAL_UART_Transmit>

	sum = (len>>8) + (len&0xff) + packettype;
 8000744:	893b      	ldrh	r3, [r7, #8]
 8000746:	0a1b      	lsrs	r3, r3, #8
 8000748:	b29a      	uxth	r2, r3
 800074a:	893b      	ldrh	r3, [r7, #8]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	b29b      	uxth	r3, r3
 8000750:	4413      	add	r3, r2
 8000752:	b29a      	uxth	r2, r3
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	b29b      	uxth	r3, r3
 8000758:	4413      	add	r3, r2
 800075a:	83fb      	strh	r3, [r7, #30]
	uint8_t packet_int8;
	for (i=0; i< len-2; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	777b      	strb	r3, [r7, #29]
 8000760:	e017      	b.n	8000792 <writePacket+0x126>
		packet_int8 = packet[i];
 8000762:	7f7b      	ldrb	r3, [r7, #29]
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	753b      	strb	r3, [r7, #20]
		HAL_UART_Transmit(&uartFinger, &packet_int8, 1, DEFAULTTIMEOUT);
 800076c:	f107 0114 	add.w	r1, r7, #20
 8000770:	f241 3388 	movw	r3, #5000	; 0x1388
 8000774:	2201      	movs	r2, #1
 8000776:	4817      	ldr	r0, [pc, #92]	; (80007d4 <writePacket+0x168>)
 8000778:	f005 fb6d 	bl	8005e56 <HAL_UART_Transmit>
		sum += packet[i];
 800077c:	7f7b      	ldrb	r3, [r7, #29]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b29a      	uxth	r2, r3
 8000786:	8bfb      	ldrh	r3, [r7, #30]
 8000788:	4413      	add	r3, r2
 800078a:	83fb      	strh	r3, [r7, #30]
	for (i=0; i< len-2; i++) {
 800078c:	7f7b      	ldrb	r3, [r7, #29]
 800078e:	3301      	adds	r3, #1
 8000790:	777b      	strb	r3, [r7, #29]
 8000792:	7f7a      	ldrb	r2, [r7, #29]
 8000794:	893b      	ldrh	r3, [r7, #8]
 8000796:	3b02      	subs	r3, #2
 8000798:	429a      	cmp	r2, r3
 800079a:	dbe2      	blt.n	8000762 <writePacket+0xf6>
	}

	uint8_t sumH = sum>>8;
 800079c:	8bfb      	ldrh	r3, [r7, #30]
 800079e:	0a1b      	lsrs	r3, r3, #8
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	74fb      	strb	r3, [r7, #19]
	uint8_t sumL = sum&0xff;
 80007a6:	8bfb      	ldrh	r3, [r7, #30]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&uartFinger, &sumH, 1, DEFAULTTIMEOUT);
 80007ac:	f107 0113 	add.w	r1, r7, #19
 80007b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80007b4:	2201      	movs	r2, #1
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <writePacket+0x168>)
 80007b8:	f005 fb4d 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&uartFinger, &sumL, 1, DEFAULTTIMEOUT);
 80007bc:	f107 0112 	add.w	r1, r7, #18
 80007c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80007c4:	2201      	movs	r2, #1
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <writePacket+0x168>)
 80007c8:	f005 fb45 	bl	8005e56 <HAL_UART_Transmit>
}
 80007cc:	bf00      	nop
 80007ce:	3720      	adds	r7, #32
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000188 	.word	0x20000188

080007d8 <getReply>:

uint8_t getReply(uint8_t packet[])
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	uint8_t reply[20], idx, i, packettype;
	uint16_t len;
	idx = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	while (1)
	{
		//cho RX san sang
		while (uartFinger.RxState != HAL_UART_STATE_READY) {}
 80007e6:	bf00      	nop
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <getReply+0xe8>)
 80007ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	d1f9      	bne.n	80007e8 <getReply+0x10>
		//nhan packet tu cam bien van tay
		HAL_UART_Receive(&uartFinger, &reply[idx], 1, DEFAULTTIMEOUT);
 80007f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f8:	f107 020c 	add.w	r2, r7, #12
 80007fc:	18d1      	adds	r1, r2, r3
 80007fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000802:	2201      	movs	r2, #1
 8000804:	482e      	ldr	r0, [pc, #184]	; (80008c0 <getReply+0xe8>)
 8000806:	f005 fbb8 	bl	8005f7a <HAL_UART_Receive>
		if ((idx == 0) && (reply[0] != (FINGERPRINT_STARTCODE >> 8)))
 800080a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080e:	2b00      	cmp	r3, #0
 8000810:	d102      	bne.n	8000818 <getReply+0x40>
 8000812:	7b3b      	ldrb	r3, [r7, #12]
 8000814:	2bef      	cmp	r3, #239	; 0xef
 8000816:	d14b      	bne.n	80008b0 <getReply+0xd8>
			continue;
		idx++;
 8000818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800081c:	3301      	adds	r3, #1
 800081e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		// kiem tra packet!
		if (idx >= 9) {
 8000822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000826:	2b08      	cmp	r3, #8
 8000828:	d9dd      	bls.n	80007e6 <getReply+0xe>
			if ((reply[0] != (FINGERPRINT_STARTCODE >> 8)) ||
 800082a:	7b3b      	ldrb	r3, [r7, #12]
 800082c:	2bef      	cmp	r3, #239	; 0xef
 800082e:	d102      	bne.n	8000836 <getReply+0x5e>
					(reply[1] != (FINGERPRINT_STARTCODE & 0xFF)))
 8000830:	7b7b      	ldrb	r3, [r7, #13]
			if ((reply[0] != (FINGERPRINT_STARTCODE >> 8)) ||
 8000832:	2b01      	cmp	r3, #1
 8000834:	d001      	beq.n	800083a <getReply+0x62>
				return FINGERPRINT_BADPACKET;
 8000836:	23fe      	movs	r3, #254	; 0xfe
 8000838:	e03e      	b.n	80008b8 <getReply+0xe0>

			packettype = reply[6];
 800083a:	7cbb      	ldrb	r3, [r7, #18]
 800083c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			len = reply[7];
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	847b      	strh	r3, [r7, #34]	; 0x22

			len <<= 8;
 8000844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	847b      	strh	r3, [r7, #34]	; 0x22
			len |= reply[8];
 800084a:	7d3b      	ldrb	r3, [r7, #20]
 800084c:	b29a      	uxth	r2, r3
 800084e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000850:	4313      	orrs	r3, r2
 8000852:	847b      	strh	r3, [r7, #34]	; 0x22
			len -= 2;
 8000854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000856:	3b02      	subs	r3, #2
 8000858:	847b      	strh	r3, [r7, #34]	; 0x22

			if (idx <= (len+10)) continue;
 800085a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800085e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000860:	330a      	adds	r3, #10
 8000862:	429a      	cmp	r2, r3
 8000864:	dd26      	ble.n	80008b4 <getReply+0xdc>
			packet[0] = packettype;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800086c:	701a      	strb	r2, [r3, #0]
			for (i=0; i<len; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000874:	e013      	b.n	800089e <getReply+0xc6>
				packet[1+i] = reply[9+i];
 8000876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800087a:	f103 0209 	add.w	r2, r3, #9
 800087e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000882:	3301      	adds	r3, #1
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	440b      	add	r3, r1
 800088a:	3228      	adds	r2, #40	; 0x28
 800088c:	443a      	add	r2, r7
 800088e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8000892:	701a      	strb	r2, [r3, #0]
			for (i=0; i<len; i++) {
 8000894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000898:	3301      	adds	r3, #1
 800089a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800089e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d8e5      	bhi.n	8000876 <getReply+0x9e>
			}
			return len;
 80008aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	e003      	b.n	80008b8 <getReply+0xe0>
			continue;
 80008b0:	bf00      	nop
 80008b2:	e798      	b.n	80007e6 <getReply+0xe>
			if (idx <= (len+10)) continue;
 80008b4:	bf00      	nop
		while (uartFinger.RxState != HAL_UART_STATE_READY) {}
 80008b6:	e796      	b.n	80007e6 <getReply+0xe>
		}
	}
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000188 	.word	0x20000188

080008c4 <verifyPassword>:

uint8_t verifyPassword(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
	uint8_t len;

	uint8_t packet[] = {FINGERPRINT_VERIFYPASSWORD,
 80008ca:	2313      	movs	r3, #19
 80008cc:	703b      	strb	r3, [r7, #0]
			(thePassword >> 24), (thePassword >> 16),
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <verifyPassword+0x6c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	0e1b      	lsrs	r3, r3, #24
	uint8_t packet[] = {FINGERPRINT_VERIFYPASSWORD,
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	707b      	strb	r3, [r7, #1]
			(thePassword >> 24), (thePassword >> 16),
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <verifyPassword+0x6c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	0c1b      	lsrs	r3, r3, #16
	uint8_t packet[] = {FINGERPRINT_VERIFYPASSWORD,
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	70bb      	strb	r3, [r7, #2]
			(thePassword >> 8), thePassword};
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <verifyPassword+0x6c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
	uint8_t packet[] = {FINGERPRINT_VERIFYPASSWORD,
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	70fb      	strb	r3, [r7, #3]
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <verifyPassword+0x6c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	713b      	strb	r3, [r7, #4]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 7, packet);
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <verifyPassword+0x70>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	463b      	mov	r3, r7
 80008fa:	2207      	movs	r2, #7
 80008fc:	2101      	movs	r1, #1
 80008fe:	f7ff feb5 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <verifyPassword+0x74>)
 8000904:	f7ff ff68 	bl	80007d8 <getReply>
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]

	if ((len == 1) && (recvPacket[0] == FINGERPRINT_ACKPACKET) && (recvPacket[1] == FINGERPRINT_OK))
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d109      	bne.n	8000926 <verifyPassword+0x62>
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <verifyPassword+0x74>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b07      	cmp	r3, #7
 8000918:	d105      	bne.n	8000926 <verifyPassword+0x62>
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <verifyPassword+0x74>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <verifyPassword+0x62>
		return 1;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <verifyPassword+0x64>

	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200001e4 	.word	0x200001e4
 8000934:	20000000 	.word	0x20000000
 8000938:	200001d0 	.word	0x200001d0

0800093c <setPassword>:

uint8_t setPassword(uint32_t password)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
//	if ((len == 1) && (recvPacket[0] == FINGERPRINT_ACKPACKET) && (recvPacket[1] == FINGERPRINT_OK))
//		return 1;
//
//	return 0;
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_SETPASSWORD, (uint8_t)(password >> 24),
 8000944:	2312      	movs	r3, #18
 8000946:	723b      	strb	r3, [r7, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	0e1b      	lsrs	r3, r3, #24
 800094c:	b2db      	uxtb	r3, r3
 800094e:	727b      	strb	r3, [r7, #9]
            (uint8_t)(password >> 16), (uint8_t)(password >> 8),
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	b2db      	uxtb	r3, r3
	uint8_t packet[] = {FINGERPRINT_SETPASSWORD, (uint8_t)(password >> 24),
 8000956:	72bb      	strb	r3, [r7, #10]
            (uint8_t)(password >> 16), (uint8_t)(password >> 8),
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	0a1b      	lsrs	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
	uint8_t packet[] = {FINGERPRINT_SETPASSWORD, (uint8_t)(password >> 24),
 800095e:	72fb      	strb	r3, [r7, #11]
            (uint8_t)(password & 0xFF)};
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	b2db      	uxtb	r3, r3
	uint8_t packet[] = {FINGERPRINT_SETPASSWORD, (uint8_t)(password >> 24),
 8000964:	733b      	strb	r3, [r7, #12]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <setPassword+0x64>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2207      	movs	r2, #7
 8000970:	2101      	movs	r1, #1
 8000972:	f7ff fe7b 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000976:	480b      	ldr	r0, [pc, #44]	; (80009a4 <setPassword+0x68>)
 8000978:	f7ff ff2e 	bl	80007d8 <getReply>
 800097c:	4603      	mov	r3, r0
 800097e:	73fb      	strb	r3, [r7, #15]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d005      	beq.n	8000992 <setPassword+0x56>
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <setPassword+0x68>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b07      	cmp	r3, #7
 800098c:	d001      	beq.n	8000992 <setPassword+0x56>
		return -1;
 800098e:	23ff      	movs	r3, #255	; 0xff
 8000990:	e001      	b.n	8000996 <setPassword+0x5a>
	return recvPacket[1];
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <setPassword+0x68>)
 8000994:	785b      	ldrb	r3, [r3, #1]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000
 80009a4:	200001d0 	.word	0x200001d0

080009a8 <getImage>:

int8_t getImage(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_GETIMAGE};
 80009ae:	2301      	movs	r3, #1
 80009b0:	713b      	strb	r3, [r7, #4]
	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 3, packet);
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <getImage+0x44>)
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2203      	movs	r2, #3
 80009ba:	2101      	movs	r1, #1
 80009bc:	f7ff fe56 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <getImage+0x48>)
 80009c2:	f7ff ff09 	bl	80007d8 <getReply>
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d006      	beq.n	80009de <getImage+0x36>
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <getImage+0x48>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b07      	cmp	r3, #7
 80009d6:	d002      	beq.n	80009de <getImage+0x36>
		return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009dc:	e002      	b.n	80009e4 <getImage+0x3c>
	return recvPacket[1];
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <getImage+0x48>)
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	b25b      	sxtb	r3, r3
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000000 	.word	0x20000000
 80009f0:	200001d0 	.word	0x200001d0

080009f4 <image2Tz>:

int8_t image2Tz(uint8_t slot)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_IMAGE2TZ, slot};
 80009fe:	2302      	movs	r3, #2
 8000a00:	733b      	strb	r3, [r7, #12]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	737b      	strb	r3, [r7, #13]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <image2Tz+0x50>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2204      	movs	r2, #4
 8000a10:	2101      	movs	r1, #1
 8000a12:	f7ff fe2b 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <image2Tz+0x54>)
 8000a18:	f7ff fede 	bl	80007d8 <getReply>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	73fb      	strb	r3, [r7, #15]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d006      	beq.n	8000a34 <image2Tz+0x40>
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <image2Tz+0x54>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d002      	beq.n	8000a34 <image2Tz+0x40>
		return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a32:	e002      	b.n	8000a3a <image2Tz+0x46>
	return recvPacket[1];
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <image2Tz+0x54>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	b25b      	sxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	200001d0 	.word	0x200001d0

08000a4c <createModel>:

int8_t createModel(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_REGMODEL};
 8000a52:	2305      	movs	r3, #5
 8000a54:	713b      	strb	r3, [r7, #4]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <createModel+0x44>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	2101      	movs	r1, #1
 8000a60:	f7ff fe04 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <createModel+0x48>)
 8000a66:	f7ff feb7 	bl	80007d8 <getReply>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d006      	beq.n	8000a82 <createModel+0x36>
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <createModel+0x48>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d002      	beq.n	8000a82 <createModel+0x36>
		return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a80:	e002      	b.n	8000a88 <createModel+0x3c>
	return recvPacket[1];
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <createModel+0x48>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	b25b      	sxtb	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000000 	.word	0x20000000
 8000a94:	200001d0 	.word	0x200001d0

08000a98 <storeModel>:

int8_t storeModel(uint16_t id)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_STORE, 0x02, 0, 0};
 8000aa2:	f240 2306 	movw	r3, #518	; 0x206
 8000aa6:	60bb      	str	r3, [r7, #8]
	packet[2] = id >> 8;
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	72bb      	strb	r3, [r7, #10]
	packet[3] = id & 0xFF;
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	72fb      	strb	r3, [r7, #11]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <storeModel+0x5c>)
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	2206      	movs	r2, #6
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	f7ff fdd2 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <storeModel+0x60>)
 8000aca:	f7ff fe85 	bl	80007d8 <getReply>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	73fb      	strb	r3, [r7, #15]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d006      	beq.n	8000ae6 <storeModel+0x4e>
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <storeModel+0x60>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	d002      	beq.n	8000ae6 <storeModel+0x4e>
		return -1;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae4:	e002      	b.n	8000aec <storeModel+0x54>
	return recvPacket[1];
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <storeModel+0x60>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	b25b      	sxtb	r3, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	200001d0 	.word	0x200001d0

08000afc <emptyDatabase>:
		return -1;
	return recvPacket[1];
}

int8_t emptyDatabase(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_EMPTY};
 8000b02:	230d      	movs	r3, #13
 8000b04:	713b      	strb	r3, [r7, #4]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <emptyDatabase+0x44>)
 8000b08:	6818      	ldr	r0, [r3, #0]
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	2101      	movs	r1, #1
 8000b10:	f7ff fdac 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <emptyDatabase+0x48>)
 8000b16:	f7ff fe5f 	bl	80007d8 <getReply>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d006      	beq.n	8000b32 <emptyDatabase+0x36>
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <emptyDatabase+0x48>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b07      	cmp	r3, #7
 8000b2a:	d002      	beq.n	8000b32 <emptyDatabase+0x36>
		return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b30:	e002      	b.n	8000b38 <emptyDatabase+0x3c>
	return recvPacket[1];
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <emptyDatabase+0x48>)
 8000b34:	785b      	ldrb	r3, [r3, #1]
 8000b36:	b25b      	sxtb	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000000 	.word	0x20000000
 8000b44:	200001d0 	.word	0x200001d0

08000b48 <printFingerID>:

void printFingerID(uint16_t fingerID, uint16_t confidence) {
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b0b6      	sub	sp, #216	; 0xd8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	4613      	mov	r3, r2
 8000b56:	80bb      	strh	r3, [r7, #4]
    char line[] = "+-------------------------------------------+\r\n";
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <printFingerID+0xc0>)
 8000b5a:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000b5e:	461d      	mov	r5, r3
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt1[80];
    char prompt2[80];
    sprintf(prompt1, "|          Finger ID:  %c                    |\r\n", (char)fingerID);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	461a      	mov	r2, r3
 8000b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b7a:	4924      	ldr	r1, [pc, #144]	; (8000c0c <printFingerID+0xc4>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f00a fb47 	bl	800b210 <siprintf>
    sprintf(prompt2, "|          Confidence: %d                    |\r\n", confidence);
 8000b82:	88ba      	ldrh	r2, [r7, #4]
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	4921      	ldr	r1, [pc, #132]	; (8000c10 <printFingerID+0xc8>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00a fb40 	bl	800b210 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8000b90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fb23 	bl	80001e0 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba6:	481b      	ldr	r0, [pc, #108]	; (8000c14 <printFingerID+0xcc>)
 8000ba8:	f005 f955 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, strlen(prompt1), HAL_MAX_DELAY);
 8000bac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb15 	bl	80001e0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc2:	4814      	ldr	r0, [pc, #80]	; (8000c14 <printFingerID+0xcc>)
 8000bc4:	f005 f947 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, strlen(prompt2), HAL_MAX_DELAY);
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fb07 	bl	80001e0 <strlen>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	f107 0108 	add.w	r1, r7, #8
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <printFingerID+0xcc>)
 8000be0:	f005 f939 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8000be4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff faf9 	bl	80001e0 <strlen>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8000bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <printFingerID+0xcc>)
 8000bfc:	f005 f92b 	bl	8005e56 <HAL_UART_Transmit>
}
 8000c00:	bf00      	nop
 8000c02:	37d8      	adds	r7, #216	; 0xd8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bdb0      	pop	{r4, r5, r7, pc}
 8000c08:	0800bb50 	.word	0x0800bb50
 8000c0c:	0800bae8 	.word	0x0800bae8
 8000c10:	0800bb1c 	.word	0x0800bb1c
 8000c14:	20000204 	.word	0x20000204

08000c18 <printFailed>:

void printFailed() {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b098      	sub	sp, #96	; 0x60
 8000c1c:	af00      	add	r7, sp, #0
    char line[] = "+-------------------------------------------+\r\n";
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <printFailed+0x8c>)
 8000c20:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000c24:	461d      	mov	r5, r3
 8000c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt1[] = "|      Failed to find fingerprint template  |\r\n";
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <printFailed+0x90>)
 8000c38:	463c      	mov	r4, r7
 8000c3a:	461d      	mov	r5, r3
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8000c4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fac5 	bl	80001e0 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	4812      	ldr	r0, [pc, #72]	; (8000cac <printFailed+0x94>)
 8000c64:	f005 f8f7 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, strlen(prompt1), HAL_MAX_DELAY);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fab8 	bl	80001e0 <strlen>
 8000c70:	4603      	mov	r3, r0
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4639      	mov	r1, r7
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <printFailed+0x94>)
 8000c7c:	f005 f8eb 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8000c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff faab 	bl	80001e0 <strlen>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <printFailed+0x94>)
 8000c98:	f005 f8dd 	bl	8005e56 <HAL_UART_Transmit>
}
 8000c9c:	bf00      	nop
 8000c9e:	3760      	adds	r7, #96	; 0x60
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca4:	0800bb50 	.word	0x0800bb50
 8000ca8:	0800bb80 	.word	0x0800bb80
 8000cac:	20000204 	.word	0x20000204

08000cb0 <fingerFastSearch>:


int8_t fingerFastSearch(void)
{
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b09a      	sub	sp, #104	; 0x68
 8000cb4:	af00      	add	r7, sp, #0
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3};
 8000cb6:	4ab3      	ldr	r2, [pc, #716]	; (8000f84 <fingerFastSearch+0x2d4>)
 8000cb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc0:	6018      	str	r0, [r3, #0]
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	8019      	strh	r1, [r3, #0]

	fingerID = 0xFFFF;
 8000cc6:	4bb0      	ldr	r3, [pc, #704]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ccc:	801a      	strh	r2, [r3, #0]
	confidence = 0xFFFF;
 8000cce:	4baf      	ldr	r3, [pc, #700]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd4:	801a      	strh	r2, [r3, #0]

	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
 8000cd6:	4bae      	ldr	r3, [pc, #696]	; (8000f90 <fingerFastSearch+0x2e0>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cde:	2208      	movs	r2, #8
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	f7ff fcc3 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8000ce6:	48ab      	ldr	r0, [pc, #684]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000ce8:	f7ff fd76 	bl	80007d8 <getReply>
 8000cec:	4603      	mov	r3, r0
 8000cee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET))
 8000cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d006      	beq.n	8000d08 <fingerFastSearch+0x58>
 8000cfa:	4ba6      	ldr	r3, [pc, #664]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d002      	beq.n	8000d08 <fingerFastSearch+0x58>
		return -1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	e158      	b.n	8000fba <fingerFastSearch+0x30a>

	fingerID = recvPacket[2];
 8000d08:	4ba2      	ldr	r3, [pc, #648]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000d0a:	789b      	ldrb	r3, [r3, #2]
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b9e      	ldr	r3, [pc, #632]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d10:	801a      	strh	r2, [r3, #0]
	fingerID <<= 8;
 8000d12:	4b9d      	ldr	r3, [pc, #628]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b9b      	ldr	r3, [pc, #620]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d1c:	801a      	strh	r2, [r3, #0]
	fingerID |= recvPacket[3];
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b98      	ldr	r3, [pc, #608]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b96      	ldr	r3, [pc, #600]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d2e:	801a      	strh	r2, [r3, #0]

	confidence = recvPacket[4];
 8000d30:	4b98      	ldr	r3, [pc, #608]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000d32:	791b      	ldrb	r3, [r3, #4]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b95      	ldr	r3, [pc, #596]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d38:	801a      	strh	r2, [r3, #0]
	confidence <<= 8;
 8000d3a:	4b94      	ldr	r3, [pc, #592]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d44:	801a      	strh	r2, [r3, #0]
	confidence |= recvPacket[5];
 8000d46:	4b93      	ldr	r3, [pc, #588]	; (8000f94 <fingerFastSearch+0x2e4>)
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b8f      	ldr	r3, [pc, #572]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d56:	801a      	strh	r2, [r3, #0]

	if (fingerID == 0xFFFF)
 8000d58:	4b8b      	ldr	r3, [pc, #556]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d104      	bne.n	8000d6e <fingerFastSearch+0xbe>
	{
		printFailed();
 8000d64:	f7ff ff58 	bl	8000c18 <printFailed>
		return -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6c:	e125      	b.n	8000fba <fingerFastSearch+0x30a>
	}
	else
	{
		printFingerID(fingerID, confidence);
 8000d6e:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <fingerFastSearch+0x2d8>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	4a86      	ldr	r2, [pc, #536]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fee5 	bl	8000b48 <printFingerID>


		if(security_level == 0)
 8000d7e:	4b86      	ldr	r3, [pc, #536]	; (8000f98 <fingerFastSearch+0x2e8>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d13d      	bne.n	8000e02 <fingerFastSearch+0x152>
		{
			// security level 0 check
			if (confidence <= 50 )
 8000d86:	4b81      	ldr	r3, [pc, #516]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	2b32      	cmp	r3, #50	; 0x32
 8000d8c:	f200 8112 	bhi.w	8000fb4 <fingerFastSearch+0x304>
			{
			    char line[]      = "+-------------------------------------------+\r\n";
 8000d90:	4b82      	ldr	r3, [pc, #520]	; (8000f9c <fingerFastSearch+0x2ec>)
 8000d92:	463c      	mov	r4, r7
 8000d94:	461d      	mov	r5, r3
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000da2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    char prompt1[]   = "|        Week Confidence for Level 0        |\r\n";
 8000da6:	4b7e      	ldr	r3, [pc, #504]	; (8000fa0 <fingerFastSearch+0x2f0>)
 8000da8:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000dac:	461d      	mov	r5, r3
 8000dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc4:	2230      	movs	r2, #48	; 0x30
 8000dc6:	4877      	ldr	r0, [pc, #476]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000dc8:	f005 f845 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	f002 fbb5 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8000dd2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dda:	2230      	movs	r2, #48	; 0x30
 8000ddc:	4871      	ldr	r0, [pc, #452]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000dde:	f005 f83a 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000de2:	2064      	movs	r0, #100	; 0x64
 8000de4:	f002 fbaa 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000de8:	4639      	mov	r1, r7
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dee:	2230      	movs	r2, #48	; 0x30
 8000df0:	486c      	ldr	r0, [pc, #432]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000df2:	f005 f830 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000df6:	2064      	movs	r0, #100	; 0x64
 8000df8:	f002 fba0 	bl	800353c <HAL_Delay>
			    return -1;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e00:	e0db      	b.n	8000fba <fingerFastSearch+0x30a>
			}

		}else if (security_level == 1)
 8000e02:	4b65      	ldr	r3, [pc, #404]	; (8000f98 <fingerFastSearch+0x2e8>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d13d      	bne.n	8000e86 <fingerFastSearch+0x1d6>
		{
			// security level 2 check
			if (confidence <= 75 )
 8000e0a:	4b60      	ldr	r3, [pc, #384]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	2b4b      	cmp	r3, #75	; 0x4b
 8000e10:	f200 80d0 	bhi.w	8000fb4 <fingerFastSearch+0x304>
			{
			    char line[]      = "+-------------------------------------------+\r\n";
 8000e14:	4b61      	ldr	r3, [pc, #388]	; (8000f9c <fingerFastSearch+0x2ec>)
 8000e16:	463c      	mov	r4, r7
 8000e18:	461d      	mov	r5, r3
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    char prompt1[]   = "|        Week Confidence for Level 1        |\r\n";
 8000e2a:	4b5f      	ldr	r3, [pc, #380]	; (8000fa8 <fingerFastSearch+0x2f8>)
 8000e2c:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000e30:	461d      	mov	r5, r3
 8000e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000e42:	4639      	mov	r1, r7
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e48:	2230      	movs	r2, #48	; 0x30
 8000e4a:	4856      	ldr	r0, [pc, #344]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000e4c:	f005 f803 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	; 0x64
 8000e52:	f002 fb73 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8000e56:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	4850      	ldr	r0, [pc, #320]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000e62:	f004 fff8 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000e66:	2064      	movs	r0, #100	; 0x64
 8000e68:	f002 fb68 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e72:	2230      	movs	r2, #48	; 0x30
 8000e74:	484b      	ldr	r0, [pc, #300]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000e76:	f004 ffee 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000e7a:	2064      	movs	r0, #100	; 0x64
 8000e7c:	f002 fb5e 	bl	800353c <HAL_Delay>
			    return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e84:	e099      	b.n	8000fba <fingerFastSearch+0x30a>
			}

		}else if (security_level == 2)
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <fingerFastSearch+0x2e8>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d13d      	bne.n	8000f0a <fingerFastSearch+0x25a>
		{
			// security level 2 check
			if (confidence <= 100 )
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	2b64      	cmp	r3, #100	; 0x64
 8000e94:	f200 808e 	bhi.w	8000fb4 <fingerFastSearch+0x304>
			{
			    char line[]      = "+-------------------------------------------+\r\n";
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <fingerFastSearch+0x2ec>)
 8000e9a:	463c      	mov	r4, r7
 8000e9c:	461d      	mov	r5, r3
 8000e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    char prompt1[]   = "|        Week Confidence for Level 2        |\r\n";
 8000eae:	4b3f      	ldr	r3, [pc, #252]	; (8000fac <fingerFastSearch+0x2fc>)
 8000eb0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2230      	movs	r2, #48	; 0x30
 8000ece:	4835      	ldr	r0, [pc, #212]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000ed0:	f004 ffc1 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f002 fb31 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8000eda:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee2:	2230      	movs	r2, #48	; 0x30
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000ee6:	f004 ffb6 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f002 fb26 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000ef0:	4639      	mov	r1, r7
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	482a      	ldr	r0, [pc, #168]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000efa:	f004 ffac 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f002 fb1c 	bl	800353c <HAL_Delay>
			    return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f08:	e057      	b.n	8000fba <fingerFastSearch+0x30a>
			}

		}else
		{
			// security level 3 check
			if (confidence <= 125 )
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <fingerFastSearch+0x2dc>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2b7d      	cmp	r3, #125	; 0x7d
 8000f10:	d850      	bhi.n	8000fb4 <fingerFastSearch+0x304>
			{
			    char line[]      = "+-------------------------------------------+\r\n";
 8000f12:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <fingerFastSearch+0x2ec>)
 8000f14:	463c      	mov	r4, r7
 8000f16:	461d      	mov	r5, r3
 8000f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    char prompt1[]   = "|        Week Confidence for Level 3        |\r\n";
 8000f28:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <fingerFastSearch+0x300>)
 8000f2a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000f2e:	461d      	mov	r5, r3
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000f40:	4639      	mov	r1, r7
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	4816      	ldr	r0, [pc, #88]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000f4a:	f004 ff84 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000f4e:	2064      	movs	r0, #100	; 0x64
 8000f50:	f002 faf4 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8000f54:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5c:	2230      	movs	r2, #48	; 0x30
 8000f5e:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000f60:	f004 ff79 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f002 fae9 	bl	800353c <HAL_Delay>

			    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8000f6a:	4639      	mov	r1, r7
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f70:	2230      	movs	r2, #48	; 0x30
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <fingerFastSearch+0x2f4>)
 8000f74:	f004 ff6f 	bl	8005e56 <HAL_UART_Transmit>
			    HAL_Delay(100);
 8000f78:	2064      	movs	r0, #100	; 0x64
 8000f7a:	f002 fadf 	bl	800353c <HAL_Delay>
			    return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f82:	e01a      	b.n	8000fba <fingerFastSearch+0x30a>
 8000f84:	0800bbb0 	.word	0x0800bbb0
 8000f88:	200001cc 	.word	0x200001cc
 8000f8c:	200001ce 	.word	0x200001ce
 8000f90:	20000000 	.word	0x20000000
 8000f94:	200001d0 	.word	0x200001d0
 8000f98:	200001ee 	.word	0x200001ee
 8000f9c:	0800bb50 	.word	0x0800bb50
 8000fa0:	0800bbb8 	.word	0x0800bbb8
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	0800bbe8 	.word	0x0800bbe8
 8000fac:	0800bc18 	.word	0x0800bc18
 8000fb0:	0800bc48 	.word	0x0800bc48
			}

		}
		return recvPacket[1];
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <fingerFastSearch+0x314>)
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	b25b      	sxtb	r3, r3
	}

	//return recvPacket[1];
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3768      	adds	r7, #104	; 0x68
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001d0 	.word	0x200001d0

08000fc8 <fingerEnroll>:

int8_t fingerEnroll(uint8_t id)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b0f0      	sub	sp, #448	; 0x1c0
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000fd4:	f2a3 13b9 	subw	r3, r3, #441	; 0x1b9
 8000fd8:	701a      	strb	r2, [r3, #0]
    char line[]      = "+-------------------------------------------+\r\n";
 8000fda:	4bbf      	ldr	r3, [pc, #764]	; (80012d8 <fingerEnroll+0x310>)
 8000fdc:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8000fe0:	461d      	mov	r5, r3
 8000fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt1[]   = "|          Enrolling Fingerprint            |\r\n";
 8000ff2:	4bba      	ldr	r3, [pc, #744]	; (80012dc <fingerEnroll+0x314>)
 8000ff4:	f507 74ae 	add.w	r4, r7, #348	; 0x15c
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt2[]   = "To confirm fingerprint put your finger again\r\n";
 800100a:	4bb5      	ldr	r3, [pc, #724]	; (80012e0 <fingerEnroll+0x318>)
 800100c:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800101e:	c407      	stmia	r4!, {r0, r1, r2}
 8001020:	8023      	strh	r3, [r4, #0]
 8001022:	3402      	adds	r4, #2
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	7023      	strb	r3, [r4, #0]
    char prompt3[]   = "Converted fingerprint to image\r\n";
 8001028:	4bae      	ldr	r3, [pc, #696]	; (80012e4 <fingerEnroll+0x31c>)
 800102a:	f507 7484 	add.w	r4, r7, #264	; 0x108
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	7023      	strb	r3, [r4, #0]
    char prompt4[]   = "Created image model\r\n";
 800103c:	4baa      	ldr	r3, [pc, #680]	; (80012e8 <fingerEnroll+0x320>)
 800103e:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001042:	461d      	mov	r5, r3
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104c:	6020      	str	r0, [r4, #0]
 800104e:	3404      	adds	r4, #4
 8001050:	8021      	strh	r1, [r4, #0]
    char prompt5[]   = "Fingerprint captured converting to image\r\n";
 8001052:	4ba6      	ldr	r3, [pc, #664]	; (80012ec <fingerEnroll+0x324>)
 8001054:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001058:	461d      	mov	r5, r3
 800105a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001066:	c403      	stmia	r4!, {r0, r1}
 8001068:	8022      	strh	r2, [r4, #0]
 800106a:	3402      	adds	r4, #2
 800106c:	0c13      	lsrs	r3, r2, #16
 800106e:	7023      	strb	r3, [r4, #0]
    char prompt6[]   = "Stored fingerprint image in data base\r\n";
 8001070:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001074:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001078:	4a9d      	ldr	r2, [pc, #628]	; (80012f0 <fingerEnroll+0x328>)
 800107a:	461c      	mov	r4, r3
 800107c:	4615      	mov	r5, r2
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001086:	e895 0003 	ldmia.w	r5, {r0, r1}
 800108a:	e884 0003 	stmia.w	r4, {r0, r1}
    char prompt7[]   = "Failed to store fingerprint into data base\r\n";
 800108e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001092:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001096:	4a97      	ldr	r2, [pc, #604]	; (80012f4 <fingerEnroll+0x32c>)
 8001098:	461c      	mov	r4, r3
 800109a:	4615      	mov	r5, r2
 800109c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010a8:	c407      	stmia	r4!, {r0, r1, r2}
 80010aa:	7023      	strb	r3, [r4, #0]
    char prompt8[]   = "Error in image conversion\r\n";
 80010ac:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80010b0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <fingerEnroll+0x330>)
 80010b6:	461c      	mov	r4, r3
 80010b8:	4615      	mov	r5, r2
 80010ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    char prompt9[]   = "Error in model creation\r\n";
 80010c6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80010ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80010ce:	4a8b      	ldr	r2, [pc, #556]	; (80012fc <fingerEnroll+0x334>)
 80010d0:	461c      	mov	r4, r3
 80010d2:	4615      	mov	r5, r2
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010dc:	c403      	stmia	r4!, {r0, r1}
 80010de:	8022      	strh	r2, [r4, #0]

    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 80010e0:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e8:	2230      	movs	r2, #48	; 0x30
 80010ea:	4885      	ldr	r0, [pc, #532]	; (8001300 <fingerEnroll+0x338>)
 80010ec:	f004 feb3 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 80010f0:	2064      	movs	r0, #100	; 0x64
 80010f2:	f002 fa23 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 80010f6:	f507 71ae 	add.w	r1, r7, #348	; 0x15c
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	487f      	ldr	r0, [pc, #508]	; (8001300 <fingerEnroll+0x338>)
 8001102:	f004 fea8 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001106:	2064      	movs	r0, #100	; 0x64
 8001108:	f002 fa18 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 800110c:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8001110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001114:	2230      	movs	r2, #48	; 0x30
 8001116:	487a      	ldr	r0, [pc, #488]	; (8001300 <fingerEnroll+0x338>)
 8001118:	f004 fe9d 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f002 fa0d 	bl	800353c <HAL_Delay>

    int8_t p = -1;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_OK)
 8001128:	e004      	b.n	8001134 <fingerEnroll+0x16c>
    {
        p = getImage();
 800112a:	f7ff fc3d 	bl	80009a8 <getImage>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_OK)
 8001134:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f6      	bne.n	800112a <fingerEnroll+0x162>
    }

    p = image2Tz(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff fc59 	bl	80009f4 <image2Tz>
 8001142:	4603      	mov	r3, r0
 8001144:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    if(p != FINGERPRINT_OK)
 8001148:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <fingerEnroll+0x1a2>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt8, sizeof(prompt8), HAL_MAX_DELAY);
 8001150:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001158:	221c      	movs	r2, #28
 800115a:	4869      	ldr	r0, [pc, #420]	; (8001300 <fingerEnroll+0x338>)
 800115c:	f004 fe7b 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f002 f9eb 	bl	800353c <HAL_Delay>
        return 0;
 8001166:	2300      	movs	r3, #0
 8001168:	e0f9      	b.n	800135e <fingerEnroll+0x396>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt5, sizeof(prompt5), HAL_MAX_DELAY);
 800116a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001172:	222b      	movs	r2, #43	; 0x2b
 8001174:	4862      	ldr	r0, [pc, #392]	; (8001300 <fingerEnroll+0x338>)
 8001176:	f004 fe6e 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	f002 f9de 	bl	800353c <HAL_Delay>
    HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f002 f9da 	bl	800353c <HAL_Delay>

    p = -1;
 8001188:	23ff      	movs	r3, #255	; 0xff
 800118a:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_NOFINGER)
 800118e:	e004      	b.n	800119a <fingerEnroll+0x1d2>
    {
        p = getImage();
 8001190:	f7ff fc0a 	bl	80009a8 <getImage>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_NOFINGER)
 800119a:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d1f6      	bne.n	8001190 <fingerEnroll+0x1c8>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 80011a2:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011aa:	222f      	movs	r2, #47	; 0x2f
 80011ac:	4854      	ldr	r0, [pc, #336]	; (8001300 <fingerEnroll+0x338>)
 80011ae:	f004 fe52 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 80011b2:	2064      	movs	r0, #100	; 0x64
 80011b4:	f002 f9c2 	bl	800353c <HAL_Delay>

    p = -1;
 80011b8:	23ff      	movs	r3, #255	; 0xff
 80011ba:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_OK) {
 80011be:	e004      	b.n	80011ca <fingerEnroll+0x202>
        p = getImage();
 80011c0:	f7ff fbf2 	bl	80009a8 <getImage>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    while (p != FINGERPRINT_OK) {
 80011ca:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f6      	bne.n	80011c0 <fingerEnroll+0x1f8>
    }

    p = image2Tz(2);
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fc0e 	bl	80009f4 <image2Tz>
 80011d8:	4603      	mov	r3, r0
 80011da:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    if(p != FINGERPRINT_OK)
 80011de:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00d      	beq.n	8001202 <fingerEnroll+0x23a>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt8, sizeof(prompt8), HAL_MAX_DELAY);
 80011e6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ee:	221c      	movs	r2, #28
 80011f0:	4843      	ldr	r0, [pc, #268]	; (8001300 <fingerEnroll+0x338>)
 80011f2:	f004 fe30 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f002 f9a0 	bl	800353c <HAL_Delay>
        return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001200:	e0ad      	b.n	800135e <fingerEnroll+0x396>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
 8001202:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120a:	2221      	movs	r2, #33	; 0x21
 800120c:	483c      	ldr	r0, [pc, #240]	; (8001300 <fingerEnroll+0x338>)
 800120e:	f004 fe22 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f002 f992 	bl	800353c <HAL_Delay>

    p = createModel();
 8001218:	f7ff fc18 	bl	8000a4c <createModel>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    if(p != FINGERPRINT_OK)
 8001222:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <fingerEnroll+0x27e>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt9, sizeof(prompt9), HAL_MAX_DELAY);
 800122a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800122e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001232:	221a      	movs	r2, #26
 8001234:	4832      	ldr	r0, [pc, #200]	; (8001300 <fingerEnroll+0x338>)
 8001236:	f004 fe0e 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f002 f97e 	bl	800353c <HAL_Delay>
        return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001244:	e08b      	b.n	800135e <fingerEnroll+0x396>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt4, sizeof(prompt4), HAL_MAX_DELAY);
 8001246:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 800124a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800124e:	2216      	movs	r2, #22
 8001250:	482b      	ldr	r0, [pc, #172]	; (8001300 <fingerEnroll+0x338>)
 8001252:	f004 fe00 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001256:	2064      	movs	r0, #100	; 0x64
 8001258:	f002 f970 	bl	800353c <HAL_Delay>

    p = storeModel(id);
 800125c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001260:	f2a3 13b9 	subw	r3, r3, #441	; 0x1b9
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fc15 	bl	8000a98 <storeModel>
 800126e:	4603      	mov	r3, r0
 8001270:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
    if (p == FINGERPRINT_OK)
 8001274:	f997 31bf 	ldrsb.w	r3, [r7, #447]	; 0x1bf
 8001278:	2b00      	cmp	r3, #0
 800127a:	d145      	bne.n	8001308 <fingerEnroll+0x340>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt6, sizeof(prompt6), HAL_MAX_DELAY);
 800127c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001284:	2228      	movs	r2, #40	; 0x28
 8001286:	481e      	ldr	r0, [pc, #120]	; (8001300 <fingerEnroll+0x338>)
 8001288:	f004 fde5 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f002 f955 	bl	800353c <HAL_Delay>
        HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001292:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	2230      	movs	r2, #48	; 0x30
 800129c:	4818      	ldr	r0, [pc, #96]	; (8001300 <fingerEnroll+0x338>)
 800129e:	f004 fdda 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	f002 f94a 	bl	800353c <HAL_Delay>

        char command[] 	= "FPS Enroll Passed\r\n";
 80012a8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80012ac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80012b0:	4a14      	ldr	r2, [pc, #80]	; (8001304 <fingerEnroll+0x33c>)
 80012b2:	461c      	mov	r4, r3
 80012b4:	4615      	mov	r5, r2
 80012b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	6023      	str	r3, [r4, #0]
        CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2114      	movs	r1, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 fb03 	bl	800a8d0 <CDC_Transmit_FS>
        HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f002 f936 	bl	800353c <HAL_Delay>
        return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d4:	e043      	b.n	800135e <fingerEnroll+0x396>
 80012d6:	bf00      	nop
 80012d8:	0800bb50 	.word	0x0800bb50
 80012dc:	0800bc78 	.word	0x0800bc78
 80012e0:	0800bca8 	.word	0x0800bca8
 80012e4:	0800bcd8 	.word	0x0800bcd8
 80012e8:	0800bcfc 	.word	0x0800bcfc
 80012ec:	0800bd14 	.word	0x0800bd14
 80012f0:	0800bd40 	.word	0x0800bd40
 80012f4:	0800bd68 	.word	0x0800bd68
 80012f8:	0800bd98 	.word	0x0800bd98
 80012fc:	0800bdb4 	.word	0x0800bdb4
 8001300:	20000204 	.word	0x20000204
 8001304:	0800bdd0 	.word	0x0800bdd0
    }
    else
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt7, sizeof(prompt7), HAL_MAX_DELAY);
 8001308:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001310:	222d      	movs	r2, #45	; 0x2d
 8001312:	4815      	ldr	r0, [pc, #84]	; (8001368 <fingerEnroll+0x3a0>)
 8001314:	f004 fd9f 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	; 0x64
 800131a:	f002 f90f 	bl	800353c <HAL_Delay>
        HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 800131e:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001326:	2230      	movs	r2, #48	; 0x30
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <fingerEnroll+0x3a0>)
 800132a:	f004 fd94 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 800132e:	2064      	movs	r0, #100	; 0x64
 8001330:	f002 f904 	bl	800353c <HAL_Delay>

        char command[] 	= "FPS Enroll Failed\r\n";
 8001334:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001338:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <fingerEnroll+0x3a4>)
 800133e:	461c      	mov	r4, r3
 8001340:	4615      	mov	r5, r2
 8001342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	6023      	str	r3, [r4, #0]
        CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2114      	movs	r1, #20
 8001350:	4618      	mov	r0, r3
 8001352:	f009 fabd 	bl	800a8d0 <CDC_Transmit_FS>
        HAL_Delay(100);
 8001356:	2064      	movs	r0, #100	; 0x64
 8001358:	f002 f8f0 	bl	800353c <HAL_Delay>
        return 0;
 800135c:	2300      	movs	r3, #0
    }
    return 0;
}
 800135e:	4618      	mov	r0, r3
 8001360:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8001364:	46bd      	mov	sp, r7
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	20000204 	.word	0x20000204
 800136c:	0800bde4 	.word	0x0800bde4

08001370 <fingerIDSearch>:

int8_t fingerIDSearch(void)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b0de      	sub	sp, #376	; 0x178
 8001374:	af00      	add	r7, sp, #0
    char line[] 	= "+-------------------------------------------+\r\n";
 8001376:	4ba2      	ldr	r3, [pc, #648]	; (8001600 <fingerIDSearch+0x290>)
 8001378:	f507 74a2 	add.w	r4, r7, #324	; 0x144
 800137c:	461d      	mov	r5, r3
 800137e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800138a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt1[] 	= "|           Searching Fingerprint           |\r\n";
 800138e:	4b9d      	ldr	r3, [pc, #628]	; (8001604 <fingerIDSearch+0x294>)
 8001390:	f507 748a 	add.w	r4, r7, #276	; 0x114
 8001394:	461d      	mov	r5, r3
 8001396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt2[] = "Put Finger on Scanner\r\n";
 80013a6:	4b98      	ldr	r3, [pc, #608]	; (8001608 <fingerIDSearch+0x298>)
 80013a8:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 80013ac:	461d      	mov	r5, r3
 80013ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013b6:	e884 0003 	stmia.w	r4, {r0, r1}
    char prompt3[] = "Converting fingerprint to image\r\n";
 80013ba:	4b94      	ldr	r3, [pc, #592]	; (800160c <fingerIDSearch+0x29c>)
 80013bc:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80013c0:	461d      	mov	r5, r3
 80013c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	8023      	strh	r3, [r4, #0]
    char prompt4[] = "Successfully converted fingerprint to image\r\n";
 80013ce:	4b90      	ldr	r3, [pc, #576]	; (8001610 <fingerIDSearch+0x2a0>)
 80013d0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80013d4:	461d      	mov	r5, r3
 80013d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80013e2:	c407      	stmia	r4!, {r0, r1, r2}
 80013e4:	8023      	strh	r3, [r4, #0]
    char prompt5[] = "Searching in data base\r\n";
 80013e6:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <fingerIDSearch+0x2a4>)
 80013e8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80013ec:	461d      	mov	r5, r3
 80013ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013f6:	c403      	stmia	r4!, {r0, r1}
 80013f8:	7022      	strb	r2, [r4, #0]
    char prompt6[] 	= "|               Fingerprint Found           |\r\n";
 80013fa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80013fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001402:	4a85      	ldr	r2, [pc, #532]	; (8001618 <fingerIDSearch+0x2a8>)
 8001404:	461c      	mov	r4, r3
 8001406:	4615      	mov	r5, r2
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char prompt7[] 	= "|           Fingerprint Not Found           |\r\n";
 8001418:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800141c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001420:	4a7e      	ldr	r2, [pc, #504]	; (800161c <fingerIDSearch+0x2ac>)
 8001422:	461c      	mov	r4, r3
 8001424:	4615      	mov	r5, r2
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001436:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	4877      	ldr	r0, [pc, #476]	; (8001620 <fingerIDSearch+0x2b0>)
 8001442:	f004 fd08 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8001446:	f507 718a 	add.w	r1, r7, #276	; 0x114
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144e:	2230      	movs	r2, #48	; 0x30
 8001450:	4873      	ldr	r0, [pc, #460]	; (8001620 <fingerIDSearch+0x2b0>)
 8001452:	f004 fd00 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001456:	2064      	movs	r0, #100	; 0x64
 8001458:	f002 f870 	bl	800353c <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 800145c:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8001460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001464:	2230      	movs	r2, #48	; 0x30
 8001466:	486e      	ldr	r0, [pc, #440]	; (8001620 <fingerIDSearch+0x2b0>)
 8001468:	f004 fcf5 	bl	8005e56 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 800146c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001474:	2218      	movs	r2, #24
 8001476:	486a      	ldr	r0, [pc, #424]	; (8001620 <fingerIDSearch+0x2b0>)
 8001478:	f004 fced 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(2000);
 800147c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001480:	f002 f85c 	bl	800353c <HAL_Delay>

    int8_t p = -1;
 8001484:	23ff      	movs	r3, #255	; 0xff
 8001486:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    while (p != FINGERPRINT_OK)
 800148a:	e004      	b.n	8001496 <fingerIDSearch+0x126>
    {
        p = getImage();
 800148c:	f7ff fa8c 	bl	80009a8 <getImage>
 8001490:	4603      	mov	r3, r0
 8001492:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    while (p != FINGERPRINT_OK)
 8001496:	f997 3177 	ldrsb.w	r3, [r7, #375]	; 0x177
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f6      	bne.n	800148c <fingerIDSearch+0x11c>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
 800149e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014a6:	2222      	movs	r2, #34	; 0x22
 80014a8:	485d      	ldr	r0, [pc, #372]	; (8001620 <fingerIDSearch+0x2b0>)
 80014aa:	f004 fcd4 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 80014ae:	2064      	movs	r0, #100	; 0x64
 80014b0:	f002 f844 	bl	800353c <HAL_Delay>

    p = image2Tz(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fa9d 	bl	80009f4 <image2Tz>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    if (p != FINGERPRINT_OK)
 80014c0:	f997 3177 	ldrsb.w	r3, [r7, #375]	; 0x177
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00d      	beq.n	80014e4 <fingerIDSearch+0x174>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt4, sizeof(prompt4), HAL_MAX_DELAY);
 80014c8:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d0:	222e      	movs	r2, #46	; 0x2e
 80014d2:	4853      	ldr	r0, [pc, #332]	; (8001620 <fingerIDSearch+0x2b0>)
 80014d4:	f004 fcbf 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f002 f82f 	bl	800353c <HAL_Delay>
        return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e2:	e087      	b.n	80015f4 <fingerIDSearch+0x284>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt4, sizeof(prompt4), HAL_MAX_DELAY);
 80014e4:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ec:	222e      	movs	r2, #46	; 0x2e
 80014ee:	484c      	ldr	r0, [pc, #304]	; (8001620 <fingerIDSearch+0x2b0>)
 80014f0:	f004 fcb1 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f002 f821 	bl	800353c <HAL_Delay>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt5, sizeof(prompt5), HAL_MAX_DELAY);
 80014fa:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	2219      	movs	r2, #25
 8001504:	4846      	ldr	r0, [pc, #280]	; (8001620 <fingerIDSearch+0x2b0>)
 8001506:	f004 fca6 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 800150a:	2064      	movs	r0, #100	; 0x64
 800150c:	f002 f816 	bl	800353c <HAL_Delay>

    p = fingerFastSearch();
 8001510:	f7ff fbce 	bl	8000cb0 <fingerFastSearch>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
    if (p != FINGERPRINT_OK)
 800151a:	f997 3177 	ldrsb.w	r3, [r7, #375]	; 0x177
 800151e:	2b00      	cmp	r3, #0
 8001520:	d036      	beq.n	8001590 <fingerIDSearch+0x220>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001522:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800152a:	2230      	movs	r2, #48	; 0x30
 800152c:	483c      	ldr	r0, [pc, #240]	; (8001620 <fingerIDSearch+0x2b0>)
 800152e:	f004 fc92 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f002 f802 	bl	800353c <HAL_Delay>
        HAL_UART_Transmit(&huart1, (uint8_t*)prompt7, sizeof(prompt7), HAL_MAX_DELAY);
 8001538:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800153c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001540:	2230      	movs	r2, #48	; 0x30
 8001542:	4837      	ldr	r0, [pc, #220]	; (8001620 <fingerIDSearch+0x2b0>)
 8001544:	f004 fc87 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 8001548:	2064      	movs	r0, #100	; 0x64
 800154a:	f001 fff7 	bl	800353c <HAL_Delay>
        HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 800154e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	4831      	ldr	r0, [pc, #196]	; (8001620 <fingerIDSearch+0x2b0>)
 800155a:	f004 fc7c 	bl	8005e56 <HAL_UART_Transmit>
        HAL_Delay(100);
 800155e:	2064      	movs	r0, #100	; 0x64
 8001560:	f001 ffec 	bl	800353c <HAL_Delay>
        char command[] 	= "FPS Search Failed\r\n";
 8001564:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001568:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800156c:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <fingerIDSearch+0x2b4>)
 800156e:	461c      	mov	r4, r3
 8001570:	4615      	mov	r5, r2
 8001572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001576:	682b      	ldr	r3, [r5, #0]
 8001578:	6023      	str	r3, [r4, #0]
        CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2114      	movs	r1, #20
 800157e:	4618      	mov	r0, r3
 8001580:	f009 f9a6 	bl	800a8d0 <CDC_Transmit_FS>
        HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f001 ffd9 	bl	800353c <HAL_Delay>

        return -1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158e:	e031      	b.n	80015f4 <fingerIDSearch+0x284>
    }


    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001590:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 8001594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001598:	2230      	movs	r2, #48	; 0x30
 800159a:	4821      	ldr	r0, [pc, #132]	; (8001620 <fingerIDSearch+0x2b0>)
 800159c:	f004 fc5b 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt6, sizeof(prompt6), HAL_MAX_DELAY);
 80015a0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a8:	2230      	movs	r2, #48	; 0x30
 80015aa:	481d      	ldr	r0, [pc, #116]	; (8001620 <fingerIDSearch+0x2b0>)
 80015ac:	f004 fc53 	bl	8005e56 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 80015b0:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015b8:	2230      	movs	r2, #48	; 0x30
 80015ba:	4819      	ldr	r0, [pc, #100]	; (8001620 <fingerIDSearch+0x2b0>)
 80015bc:	f004 fc4b 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 80015c0:	2064      	movs	r0, #100	; 0x64
 80015c2:	f001 ffbb 	bl	800353c <HAL_Delay>

    char command[] 	= "FPS Search Passed\r\n";
 80015c6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80015ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <fingerIDSearch+0x2b8>)
 80015d0:	461c      	mov	r4, r3
 80015d2:	4615      	mov	r5, r2
 80015d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	6023      	str	r3, [r4, #0]
    CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	2114      	movs	r1, #20
 80015e2:	4618      	mov	r0, r3
 80015e4:	f009 f974 	bl	800a8d0 <CDC_Transmit_FS>
    HAL_Delay(100);
 80015e8:	2064      	movs	r0, #100	; 0x64
 80015ea:	f001 ffa7 	bl	800353c <HAL_Delay>

    return fingerID;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <fingerIDSearch+0x2bc>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b25b      	sxtb	r3, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800bb50 	.word	0x0800bb50
 8001604:	0800bdf8 	.word	0x0800bdf8
 8001608:	0800be28 	.word	0x0800be28
 800160c:	0800be40 	.word	0x0800be40
 8001610:	0800be64 	.word	0x0800be64
 8001614:	0800be94 	.word	0x0800be94
 8001618:	0800beb0 	.word	0x0800beb0
 800161c:	0800bee0 	.word	0x0800bee0
 8001620:	20000204 	.word	0x20000204
 8001624:	0800bf10 	.word	0x0800bf10
 8001628:	0800bf24 	.word	0x0800bf24
 800162c:	200001cc 	.word	0x200001cc

08001630 <getParameter>:

int8_t getParameter(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
	uint8_t len;
	uint8_t packet[] = {FINGERPRINT_READSYSPARAM};
 8001636:	230f      	movs	r3, #15
 8001638:	713b      	strb	r3, [r7, #4]
	writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet), packet);
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <getParameter+0x120>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2201      	movs	r2, #1
 8001642:	2101      	movs	r1, #1
 8001644:	f7ff f812 	bl	800066c <writePacket>
	len = getReply(recvPacket);
 8001648:	4842      	ldr	r0, [pc, #264]	; (8001754 <getParameter+0x124>)
 800164a:	f7ff f8c5 	bl	80007d8 <getReply>
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]

	if ((len != 1) && (recvPacket[0] != FINGERPRINT_ACKPACKET)){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d006      	beq.n	8001666 <getParameter+0x36>
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <getParameter+0x124>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b07      	cmp	r3, #7
 800165e:	d002      	beq.n	8001666 <getParameter+0x36>
		return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001664:	e06f      	b.n	8001746 <getParameter+0x116>
	}

	status_reg = ((uint16_t)recvPacket[1] << 8) | recvPacket[2];
 8001666:	4b3b      	ldr	r3, [pc, #236]	; (8001754 <getParameter+0x124>)
 8001668:	785b      	ldrb	r3, [r3, #1]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <getParameter+0x124>)
 8001670:	789b      	ldrb	r3, [r3, #2]
 8001672:	b21b      	sxth	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b21b      	sxth	r3, r3
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <getParameter+0x128>)
 800167c:	801a      	strh	r2, [r3, #0]
	system_id = ((uint16_t)recvPacket[3] << 8) | recvPacket[4];
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <getParameter+0x124>)
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	4b33      	ldr	r3, [pc, #204]	; (8001754 <getParameter+0x124>)
 8001688:	791b      	ldrb	r3, [r3, #4]
 800168a:	b21b      	sxth	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b21b      	sxth	r3, r3
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <getParameter+0x12c>)
 8001694:	801a      	strh	r2, [r3, #0]
	capacity = (((uint16_t)recvPacket[5] << 8) | recvPacket[6] ) + 162;
 8001696:	4b2f      	ldr	r3, [pc, #188]	; (8001754 <getParameter+0x124>)
 8001698:	795b      	ldrb	r3, [r3, #5]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <getParameter+0x124>)
 80016a0:	799b      	ldrb	r3, [r3, #6]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	33a2      	adds	r3, #162	; 0xa2
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b2c      	ldr	r3, [pc, #176]	; (8001760 <getParameter+0x130>)
 80016b0:	801a      	strh	r2, [r3, #0]
	//capacity = (((uint16_t)recvPacket[5] << 8) | recvPacket[6] );
	security_level = (((uint16_t)recvPacket[7] << 8) | recvPacket[8])*0;
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <getParameter+0x134>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
	//security_level = (((uint16_t)recvPacket[7] << 8) | recvPacket[8]);

	device_addr = theAddress;
 80016b8:	4b25      	ldr	r3, [pc, #148]	; (8001750 <getParameter+0x120>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <getParameter+0x138>)
 80016c0:	801a      	strh	r2, [r3, #0]
	packet_len = ((uint16_t)recvPacket[13] << 8) | recvPacket[14];
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <getParameter+0x124>)
 80016c4:	7b5b      	ldrb	r3, [r3, #13]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <getParameter+0x124>)
 80016cc:	7b9b      	ldrb	r3, [r3, #14]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <getParameter+0x13c>)
 80016d8:	801a      	strh	r2, [r3, #0]
	if (packet_len == 0) {
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <getParameter+0x13c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <getParameter+0xba>
		packet_len = 32;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <getParameter+0x13c>)
 80016e4:	2220      	movs	r2, #32
 80016e6:	801a      	strh	r2, [r3, #0]
 80016e8:	e01b      	b.n	8001722 <getParameter+0xf2>
	} else if (packet_len == 1) {
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <getParameter+0x13c>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d103      	bne.n	80016fa <getParameter+0xca>
		packet_len = 64;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <getParameter+0x13c>)
 80016f4:	2240      	movs	r2, #64	; 0x40
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	e013      	b.n	8001722 <getParameter+0xf2>
	} else if (packet_len == 2) {
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <getParameter+0x13c>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d103      	bne.n	800170a <getParameter+0xda>
		packet_len = 128;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <getParameter+0x13c>)
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	e00b      	b.n	8001722 <getParameter+0xf2>
	} else if (packet_len == 3) {
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <getParameter+0x13c>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d104      	bne.n	800171c <getParameter+0xec>
		packet_len = 256;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <getParameter+0x13c>)
 8001714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001718:	801a      	strh	r2, [r3, #0]
 800171a:	e002      	b.n	8001722 <getParameter+0xf2>
	} else
	{
		packet_len = 32;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <getParameter+0x13c>)
 800171e:	2220      	movs	r2, #32
 8001720:	801a      	strh	r2, [r3, #0]
	}
	baud_rate = (((uint16_t)recvPacket[15] << 8) | recvPacket[16]) + 9600;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <getParameter+0x124>)
 8001724:	7bdb      	ldrb	r3, [r3, #15]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <getParameter+0x124>)
 800172c:	7c1b      	ldrb	r3, [r3, #16]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21b      	sxth	r3, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	f503 5316 	add.w	r3, r3, #9600	; 0x2580
 800173a:	b29a      	uxth	r2, r3
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <getParameter+0x140>)
 800173e:	801a      	strh	r2, [r3, #0]

	showParameter();
 8001740:	f000 f818 	bl	8001774 <showParameter>


	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000
 8001754:	200001d0 	.word	0x200001d0
 8001758:	200001e8 	.word	0x200001e8
 800175c:	200001ea 	.word	0x200001ea
 8001760:	200001ec 	.word	0x200001ec
 8001764:	200001ee 	.word	0x200001ee
 8001768:	200001f0 	.word	0x200001f0
 800176c:	200001f2 	.word	0x200001f2
 8001770:	200001f4 	.word	0x200001f4

08001774 <showParameter>:

void showParameter(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b09a      	sub	sp, #104	; 0x68
 8001778:	af00      	add	r7, sp, #0
	char uartBuf[100];
	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	49af      	ldr	r1, [pc, #700]	; (8001a3c <showParameter+0x2c8>)
 800177e:	4618      	mov	r0, r3
 8001780:	f009 fd46 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd2a 	bl	80001e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	1d39      	adds	r1, r7, #4
 8001792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001796:	48aa      	ldr	r0, [pc, #680]	; (8001a40 <showParameter+0x2cc>)
 8001798:	f004 fb5d 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f001 fecd 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------Sensor Health    ------------|\r\n");
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	49a7      	ldr	r1, [pc, #668]	; (8001a44 <showParameter+0x2d0>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f009 fd32 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd16 	bl	80001e0 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017be:	48a0      	ldr	r0, [pc, #640]	; (8001a40 <showParameter+0x2cc>)
 80017c0:	f004 fb49 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f001 feb9 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	499b      	ldr	r1, [pc, #620]	; (8001a3c <showParameter+0x2c8>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f009 fd1e 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fd02 	bl	80001e0 <strlen>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	1d39      	adds	r1, r7, #4
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e6:	4896      	ldr	r0, [pc, #600]	; (8001a40 <showParameter+0x2cc>)
 80017e8:	f004 fb35 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80017ec:	2064      	movs	r0, #100	; 0x64
 80017ee:	f001 fea5 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "| Status Register: 0x%04X                     |\r\n", status_reg);
 80017f2:	4b95      	ldr	r3, [pc, #596]	; (8001a48 <showParameter+0x2d4>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4994      	ldr	r1, [pc, #592]	; (8001a4c <showParameter+0x2d8>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f009 fd07 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fceb 	bl	80001e0 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	1d39      	adds	r1, r7, #4
 8001810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001814:	488a      	ldr	r0, [pc, #552]	; (8001a40 <showParameter+0x2cc>)
 8001816:	f004 fb1e 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f001 fe8e 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4986      	ldr	r1, [pc, #536]	; (8001a3c <showParameter+0x2c8>)
 8001824:	4618      	mov	r0, r3
 8001826:	f009 fcf3 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fcd7 	bl	80001e0 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	b29a      	uxth	r2, r3
 8001836:	1d39      	adds	r1, r7, #4
 8001838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800183c:	4880      	ldr	r0, [pc, #512]	; (8001a40 <showParameter+0x2cc>)
 800183e:	f004 fb0a 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f001 fe7a 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "| System ID: %04X                             |\r\n", system_id);
 8001848:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <showParameter+0x2dc>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	4980      	ldr	r1, [pc, #512]	; (8001a54 <showParameter+0x2e0>)
 8001852:	4618      	mov	r0, r3
 8001854:	f009 fcdc 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fcc0 	bl	80001e0 <strlen>
 8001860:	4603      	mov	r3, r0
 8001862:	b29a      	uxth	r2, r3
 8001864:	1d39      	adds	r1, r7, #4
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186a:	4875      	ldr	r0, [pc, #468]	; (8001a40 <showParameter+0x2cc>)
 800186c:	f004 faf3 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001870:	2064      	movs	r0, #100	; 0x64
 8001872:	f001 fe63 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4970      	ldr	r1, [pc, #448]	; (8001a3c <showParameter+0x2c8>)
 800187a:	4618      	mov	r0, r3
 800187c:	f009 fcc8 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fcac 	bl	80001e0 <strlen>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001892:	486b      	ldr	r0, [pc, #428]	; (8001a40 <showParameter+0x2cc>)
 8001894:	f004 fadf 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f001 fe4f 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "| Capacity: %d                                |\r\n", capacity);
 800189e:	4b6e      	ldr	r3, [pc, #440]	; (8001a58 <showParameter+0x2e4>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	496d      	ldr	r1, [pc, #436]	; (8001a5c <showParameter+0x2e8>)
 80018a8:	4618      	mov	r0, r3
 80018aa:	f009 fcb1 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fc95 	bl	80001e0 <strlen>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	1d39      	adds	r1, r7, #4
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c0:	485f      	ldr	r0, [pc, #380]	; (8001a40 <showParameter+0x2cc>)
 80018c2:	f004 fac8 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80018c6:	2064      	movs	r0, #100	; 0x64
 80018c8:	f001 fe38 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	495b      	ldr	r1, [pc, #364]	; (8001a3c <showParameter+0x2c8>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f009 fc9d 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fc81 	bl	80001e0 <strlen>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	1d39      	adds	r1, r7, #4
 80018e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e8:	4855      	ldr	r0, [pc, #340]	; (8001a40 <showParameter+0x2cc>)
 80018ea:	f004 fab4 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80018ee:	2064      	movs	r0, #100	; 0x64
 80018f0:	f001 fe24 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "| Security Level: %0d                         |\r\n", security_level);
 80018f4:	4b5a      	ldr	r3, [pc, #360]	; (8001a60 <showParameter+0x2ec>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4959      	ldr	r1, [pc, #356]	; (8001a64 <showParameter+0x2f0>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f009 fc86 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fc6a 	bl	80001e0 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	b29a      	uxth	r2, r3
 8001910:	1d39      	adds	r1, r7, #4
 8001912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001916:	484a      	ldr	r0, [pc, #296]	; (8001a40 <showParameter+0x2cc>)
 8001918:	f004 fa9d 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 800191c:	2064      	movs	r0, #100	; 0x64
 800191e:	f001 fe0d 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	4945      	ldr	r1, [pc, #276]	; (8001a3c <showParameter+0x2c8>)
 8001926:	4618      	mov	r0, r3
 8001928:	f009 fc72 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fc56 	bl	80001e0 <strlen>
 8001934:	4603      	mov	r3, r0
 8001936:	b29a      	uxth	r2, r3
 8001938:	1d39      	adds	r1, r7, #4
 800193a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193e:	4840      	ldr	r0, [pc, #256]	; (8001a40 <showParameter+0x2cc>)
 8001940:	f004 fa89 	bl	8005e56 <HAL_UART_Transmit>

	sprintf(uartBuf, "| Device Address: 0x%04X                      |\r\n", device_addr);
 8001944:	4b48      	ldr	r3, [pc, #288]	; (8001a68 <showParameter+0x2f4>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	4947      	ldr	r1, [pc, #284]	; (8001a6c <showParameter+0x2f8>)
 800194e:	4618      	mov	r0, r3
 8001950:	f009 fc5e 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fc42 	bl	80001e0 <strlen>
 800195c:	4603      	mov	r3, r0
 800195e:	b29a      	uxth	r2, r3
 8001960:	1d39      	adds	r1, r7, #4
 8001962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001966:	4836      	ldr	r0, [pc, #216]	; (8001a40 <showParameter+0x2cc>)
 8001968:	f004 fa75 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f001 fde5 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4931      	ldr	r1, [pc, #196]	; (8001a3c <showParameter+0x2c8>)
 8001976:	4618      	mov	r0, r3
 8001978:	f009 fc4a 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc2e 	bl	80001e0 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	b29a      	uxth	r2, r3
 8001988:	1d39      	adds	r1, r7, #4
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198e:	482c      	ldr	r0, [pc, #176]	; (8001a40 <showParameter+0x2cc>)
 8001990:	f004 fa61 	bl	8005e56 <HAL_UART_Transmit>

	sprintf(uartBuf, "| Packet Length: %0d                          |\r\n", packet_len);
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <showParameter+0x2fc>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4935      	ldr	r1, [pc, #212]	; (8001a74 <showParameter+0x300>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f009 fc36 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fc1a 	bl	80001e0 <strlen>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	1d39      	adds	r1, r7, #4
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019b6:	4822      	ldr	r0, [pc, #136]	; (8001a40 <showParameter+0x2cc>)
 80019b8:	f004 fa4d 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f001 fdbd 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	491d      	ldr	r1, [pc, #116]	; (8001a3c <showParameter+0x2c8>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f009 fc22 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc06 	bl	80001e0 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	1d39      	adds	r1, r7, #4
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019de:	4818      	ldr	r0, [pc, #96]	; (8001a40 <showParameter+0x2cc>)
 80019e0:	f004 fa39 	bl	8005e56 <HAL_UART_Transmit>

	sprintf(uartBuf, "| Baud Rate: %0d                              |\r\n", baud_rate);
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <showParameter+0x304>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	4923      	ldr	r1, [pc, #140]	; (8001a7c <showParameter+0x308>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f009 fc0e 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fbf2 	bl	80001e0 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	1d39      	adds	r1, r7, #4
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <showParameter+0x2cc>)
 8001a08:	f004 fa25 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001a0c:	2064      	movs	r0, #100	; 0x64
 8001a0e:	f001 fd95 	bl	800353c <HAL_Delay>

	sprintf(uartBuf, "|---------------------------------------------|\r\n");
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4909      	ldr	r1, [pc, #36]	; (8001a3c <showParameter+0x2c8>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f009 fbfa 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fbde 	bl	80001e0 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	1d39      	adds	r1, r7, #4
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <showParameter+0x2cc>)
 8001a30:	f004 fa11 	bl	8005e56 <HAL_UART_Transmit>

}
 8001a34:	bf00      	nop
 8001a36:	3768      	adds	r7, #104	; 0x68
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0800bf38 	.word	0x0800bf38
 8001a40:	20000204 	.word	0x20000204
 8001a44:	0800bf6c 	.word	0x0800bf6c
 8001a48:	200001e8 	.word	0x200001e8
 8001a4c:	0800bfa0 	.word	0x0800bfa0
 8001a50:	200001ea 	.word	0x200001ea
 8001a54:	0800bfd4 	.word	0x0800bfd4
 8001a58:	200001ec 	.word	0x200001ec
 8001a5c:	0800c008 	.word	0x0800c008
 8001a60:	200001ee 	.word	0x200001ee
 8001a64:	0800c03c 	.word	0x0800c03c
 8001a68:	200001f0 	.word	0x200001f0
 8001a6c:	0800c070 	.word	0x0800c070
 8001a70:	200001f2 	.word	0x200001f2
 8001a74:	0800c0a4 	.word	0x0800c0a4
 8001a78:	200001f4 	.word	0x200001f4
 8001a7c:	0800c0d8 	.word	0x0800c0d8

08001a80 <setLEDColor>:


void setLEDColor(uint8_t r, uint8_t g, uint8_t b)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	71bb      	strb	r3, [r7, #6]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	717b      	strb	r3, [r7, #5]
    uint8_t packet[] = {
 8001a92:	23ff      	movs	r3, #255	; 0xff
 8001a94:	723b      	strb	r3, [r7, #8]
 8001a96:	23ff      	movs	r3, #255	; 0xff
 8001a98:	727b      	strb	r3, [r7, #9]
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	72bb      	strb	r3, [r7, #10]
 8001a9e:	2314      	movs	r3, #20
 8001aa0:	72fb      	strb	r3, [r7, #11]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	733b      	strb	r3, [r7, #12]
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	737b      	strb	r3, [r7, #13]
 8001aaa:	79bb      	ldrb	r3, [r7, #6]
 8001aac:	73bb      	strb	r3, [r7, #14]
 8001aae:	797b      	ldrb	r3, [r7, #5]
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	743b      	strb	r3, [r7, #16]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	747b      	strb	r3, [r7, #17]
 8001aba:	2300      	movs	r3, #0
 8001abc:	74bb      	strb	r3, [r7, #18]
        0x14,                   // Command code to set LED color
        0x01,                   // Index of LED to set
        r, g, b, 0x00,          // Red, green, blue, and white components
        0x00, 0x00              // Reserved bytes
    };
    uint16_t sum = 0x08 + 0x14 + 0x01 + r + g + b;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	797b      	ldrb	r3, [r7, #5]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	331d      	adds	r3, #29
 8001ad4:	82fb      	strh	r3, [r7, #22]
    packet[7] = (uint8_t)(sum >> 8);
 8001ad6:	8afb      	ldrh	r3, [r7, #22]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
    packet[8] = (uint8_t)sum;
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	743b      	strb	r3, [r7, #16]

    writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet), packet);
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <setLEDColor+0x84>)
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	220b      	movs	r2, #11
 8001af0:	2101      	movs	r1, #1
 8001af2:	f7fe fdbb 	bl	800066c <writePacket>
    getReply(recvPacket);
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <setLEDColor+0x88>)
 8001af8:	f7fe fe6e 	bl	80007d8 <getReply>
}
 8001afc:	bf00      	nop
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000000 	.word	0x20000000
 8001b08:	200001d0 	.word	0x200001d0

08001b0c <turnOnLED>:
			return -1;
		return recvPacket[1];
	}
}

void turnOnLED(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
//  HAL_Delay(100);
//	  uint8_t cmd_led_on[] = {0xF5, 0x00, 0x24, 0x01, 0x01, 0x00, 0x21, 0x00, 0x00, 0x00, 0x46};
//	  HAL_UART_Transmit(&uartFinger, cmd_led_on, sizeof(cmd_led_on), 100);
//	  HAL_Delay(1000);

	int count = getFingerprintCount(&uartFinger);
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <turnOnLED+0x18>)
 8001b14:	f000 f84e 	bl	8001bb4 <getFingerprintCount>
 8001b18:	6078      	str	r0, [r7, #4]

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000188 	.word	0x20000188

08001b28 <turnOffLED>:

// Function to turn off the LED on AS608 fingerprint module
void turnOffLED(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
//  data[10] = 0x7F; // end byte
//  data[11] = 0x7F; // end byte
//
//  HAL_UART_Transmit(&huart1, data, sizeof(data), 100);
//  HAL_Delay(100);
	  uint8_t cmd_led_off[] = {0xF5, 0x00, 0x24, 0x01, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x45};
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <turnOffLED+0x34>)
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b34:	c303      	stmia	r3!, {r0, r1}
 8001b36:	801a      	strh	r2, [r3, #0]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	0c12      	lsrs	r2, r2, #16
 8001b3c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&uartFinger, cmd_led_off, sizeof(cmd_led_off), 100);
 8001b3e:	1d39      	adds	r1, r7, #4
 8001b40:	2364      	movs	r3, #100	; 0x64
 8001b42:	220b      	movs	r2, #11
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <turnOffLED+0x38>)
 8001b46:	f004 f986 	bl	8005e56 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b4e:	f001 fcf5 	bl	800353c <HAL_Delay>

}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800c10c 	.word	0x0800c10c
 8001b60:	20000188 	.word	0x20000188

08001b64 <sendCommand>:
// Function to send a command over UART and receive a response
// Returns 0 on success, or an error code on failure
uint8_t sendCommand(UART_HandleTypeDef *huart, const uint8_t *command, uint8_t commandSize, uint8_t *response, uint8_t responseSize) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71fb      	strb	r3, [r7, #7]
  // Send the command
  if (HAL_UART_Transmit(huart, (uint8_t *)command, commandSize, UART_TIMEOUT_MS) != HAL_OK) {
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f004 f969 	bl	8005e56 <HAL_UART_Transmit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <sendCommand+0x2a>
    return 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00d      	b.n	8001baa <sendCommand+0x46>
  }

  // Receive the response
  if (HAL_UART_Receive(huart, response, responseSize, UART_TIMEOUT_MS) != HAL_OK) {
 8001b8e:	7e3b      	ldrb	r3, [r7, #24]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f004 f9ee 	bl	8005f7a <HAL_UART_Receive>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <sendCommand+0x44>
    return 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e000      	b.n	8001baa <sendCommand+0x46>
  }

  return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <getFingerprintCount>:

// Function to retrieve the number of fingerprints stored in the module
// Returns the number of fingerprints on success, or -1 on failure
int getFingerprintCount(UART_HandleTypeDef *huart) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
  uint8_t response[16];

  // Send the command to retrieve the number of fingerprints
  if (sendCommand(huart, CMD_GET_FP_COUNT, sizeof(CMD_GET_FP_COUNT), response, sizeof(response)) != 0) {
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	491a      	ldr	r1, [pc, #104]	; (8001c30 <getFingerprintCount+0x7c>)
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ffcb 	bl	8001b64 <sendCommand>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <getFingerprintCount+0x26>
    return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	e026      	b.n	8001c28 <getFingerprintCount+0x74>
  }

  // Check the response header and length
  if (response[0] != 0xEF || response[1] != 0x01 || response[2] != 0xFF || response[3] != 0xFF || response[4] != 0xFF || response[5] != 0xFF || response[6] != 0x01 || response[7] != 0x00 || response[8] != 0x08 || response[9] != 0x13) {
 8001bda:	7b3b      	ldrb	r3, [r7, #12]
 8001bdc:	2bef      	cmp	r3, #239	; 0xef
 8001bde:	d11a      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001be0:	7b7b      	ldrb	r3, [r7, #13]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d117      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001be6:	7bbb      	ldrb	r3, [r7, #14]
 8001be8:	2bff      	cmp	r3, #255	; 0xff
 8001bea:	d114      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	2bff      	cmp	r3, #255	; 0xff
 8001bf0:	d111      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001bf2:	7c3b      	ldrb	r3, [r7, #16]
 8001bf4:	2bff      	cmp	r3, #255	; 0xff
 8001bf6:	d10e      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001bf8:	7c7b      	ldrb	r3, [r7, #17]
 8001bfa:	2bff      	cmp	r3, #255	; 0xff
 8001bfc:	d10b      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001bfe:	7cbb      	ldrb	r3, [r7, #18]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001c04:	7cfb      	ldrb	r3, [r7, #19]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d105      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001c0a:	7d3b      	ldrb	r3, [r7, #20]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d102      	bne.n	8001c16 <getFingerprintCount+0x62>
 8001c10:	7d7b      	ldrb	r3, [r7, #21]
 8001c12:	2b13      	cmp	r3, #19
 8001c14:	d002      	beq.n	8001c1c <getFingerprintCount+0x68>
    return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1a:	e005      	b.n	8001c28 <getFingerprintCount+0x74>
  }

  // Extract the fingerprint count from the response
  int count = (response[11] << 8) | response[10];
 8001c1c:	7dfb      	ldrb	r3, [r7, #23]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	7dba      	ldrb	r2, [r7, #22]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61fb      	str	r3, [r7, #28]

  return count;
 8001c26:	69fb      	ldr	r3, [r7, #28]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	0800ca08 	.word	0x0800ca08

08001c34 <read_flash_memory>:

extern uint32_t flash_address;
extern uint32_t fingerprint_count;

uint32_t read_flash_memory(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001c3a:	f001 fe9b 	bl	8003974 <HAL_FLASH_Unlock>
	uint32_t flash_data = *((__IO uint32_t *)flash_address);
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <read_flash_memory+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Lock();
 8001c46:	f001 feb7 	bl	80039b8 <HAL_FLASH_Lock>
	return flash_data;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000004 	.word	0x20000004

08001c58 <check_initial_status_flash>:
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,flash_address,data);
	HAL_FLASH_Lock();
}

void check_initial_status_flash(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

	flash_address = 0x08040000;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <check_initial_status_flash+0x5c>)
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <check_initial_status_flash+0x60>)
 8001c62:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8001c64:	f001 fe86 	bl	8003974 <HAL_FLASH_Unlock>
	uint32_t flash_data = *((__IO uint32_t *)flash_address);
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <check_initial_status_flash+0x5c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Lock();
 8001c70:	f001 fea2 	bl	80039b8 <HAL_FLASH_Lock>

	if (flash_data == 0xFFFFFFFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c7a:	d113      	bne.n	8001ca4 <check_initial_status_flash+0x4c>
	{
	    // If the first word in the user Flash area is 0xFFFFFFFF,
	    // then the fingerprint_store_count variable has not been written to Flash memory yet.
	    // Set the default value of the variable.
		fingerprint_count = 0;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <check_initial_status_flash+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
		HAL_FLASH_Unlock();
 8001c82:	f001 fe77 	bl	8003974 <HAL_FLASH_Unlock>
		flash_address = 0x08040000;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <check_initial_status_flash+0x5c>)
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <check_initial_status_flash+0x60>)
 8001c8a:	601a      	str	r2, [r3, #0]
		 HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,flash_address,0);
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <check_initial_status_flash+0x5c>)
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f001 fe17 	bl	80038cc <HAL_FLASH_Program>
		//*((__IO uint32_t *)flash_address) = 0x00000000;
		HAL_FLASH_Lock();
 8001c9e:	f001 fe8b 	bl	80039b8 <HAL_FLASH_Lock>
	    // If the first word in the user Flash area is not 0xFFFFFFFF,
	    // then the fingerprint_store_count variable has already been written to Flash memory.
	    // Read the value from Flash memory.
		fingerprint_count = flash_data;
	}
}
 8001ca2:	e002      	b.n	8001caa <check_initial_status_flash+0x52>
		fingerprint_count = flash_data;
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <check_initial_status_flash+0x64>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	08040000 	.word	0x08040000
 8001cbc:	200001fc 	.word	0x200001fc

08001cc0 <print_UI>:
//	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
//	HAL_Delay(100);
//}

void print_UI(void)
{
 8001cc0:	b5b0      	push	{r4, r5, r7, lr}
 8001cc2:	f5ad 7d36 	sub.w	sp, sp, #728	; 0x2d8
 8001cc6:	af00      	add	r7, sp, #0
    // Define UI options
    char line[]     = "+-------------------------------------------+\r\n";
 8001cc8:	4bbf      	ldr	r3, [pc, #764]	; (8001fc8 <print_UI+0x308>)
 8001cca:	f507 742a 	add.w	r4, r7, #680	; 0x2a8
 8001cce:	461d      	mov	r5, r3
 8001cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    char header[]   = "|           Fingerprint Authentication       |\r\n";
 8001ce0:	4bba      	ldr	r3, [pc, #744]	; (8001fcc <print_UI+0x30c>)
 8001ce2:	f507 741d 	add.w	r4, r7, #628	; 0x274
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf4:	682b      	ldr	r3, [r5, #0]
 8001cf6:	7023      	strb	r3, [r4, #0]
    char enroll1[]  = "|                                            |\r\n";
 8001cf8:	4bb5      	ldr	r3, [pc, #724]	; (8001fd0 <print_UI+0x310>)
 8001cfa:	f507 7410 	add.w	r4, r7, #576	; 0x240
 8001cfe:	461d      	mov	r5, r3
 8001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	7023      	strb	r3, [r4, #0]
    char enroll2[]  = "|  E -> Enroll Fingerprint                   |\r\n";
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <print_UI+0x314>)
 8001d12:	f507 7403 	add.w	r4, r7, #524	; 0x20c
 8001d16:	461d      	mov	r5, r3
 8001d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	7023      	strb	r3, [r4, #0]
    char enroll3[]  = "|  F -> Search Fingerprint                   |\r\n";
 8001d28:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001d2c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d30:	4aa9      	ldr	r2, [pc, #676]	; (8001fd8 <print_UI+0x318>)
 8001d32:	461c      	mov	r4, r3
 8001d34:	4615      	mov	r5, r2
 8001d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d42:	682b      	ldr	r3, [r5, #0]
 8001d44:	7023      	strb	r3, [r4, #0]
    char enroll4[]  = "|  G -> Clear Database                       |\r\n";
 8001d46:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001d4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d4e:	4aa3      	ldr	r2, [pc, #652]	; (8001fdc <print_UI+0x31c>)
 8001d50:	461c      	mov	r4, r3
 8001d52:	4615      	mov	r5, r2
 8001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	7023      	strb	r3, [r4, #0]
    char enroll5[]  = "|  H -> Show Sensor Parameters               |\r\n";
 8001d64:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001d68:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d6c:	4a9c      	ldr	r2, [pc, #624]	; (8001fe0 <print_UI+0x320>)
 8001d6e:	461c      	mov	r4, r3
 8001d70:	4615      	mov	r5, r2
 8001d72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	682b      	ldr	r3, [r5, #0]
 8001d80:	7023      	strb	r3, [r4, #0]
    char enroll6[]  = "|  I -> Set LED On/Off Continuesly           |\r\n";
 8001d82:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001d86:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d8a:	4a96      	ldr	r2, [pc, #600]	; (8001fe4 <print_UI+0x324>)
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4615      	mov	r5, r2
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	7023      	strb	r3, [r4, #0]
    char enroll7[]  = "|  J -> Set LED Colour                       |\r\n";
 8001da0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001da4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001da8:	4a8f      	ldr	r2, [pc, #572]	; (8001fe8 <print_UI+0x328>)
 8001daa:	461c      	mov	r4, r3
 8001dac:	4615      	mov	r5, r2
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dba:	682b      	ldr	r3, [r5, #0]
 8001dbc:	7023      	strb	r3, [r4, #0]
    char enroll8[]  = "|  K -> Update Security Level                |\r\n";
 8001dbe:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001dc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc6:	4a89      	ldr	r2, [pc, #548]	; (8001fec <print_UI+0x32c>)
 8001dc8:	461c      	mov	r4, r3
 8001dca:	4615      	mov	r5, r2
 8001dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	7023      	strb	r3, [r4, #0]
    char enroll9[]	= "|  L -> Verify Password                      |\r\n";
 8001ddc:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001de0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8001de4:	4a82      	ldr	r2, [pc, #520]	; (8001ff0 <print_UI+0x330>)
 8001de6:	461c      	mov	r4, r3
 8001de8:	4615      	mov	r5, r2
 8001dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	682b      	ldr	r3, [r5, #0]
 8001df8:	7023      	strb	r3, [r4, #0]
    char enroll10[]	= "|  M -> Set Password                         |\r\n";
 8001dfa:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001dfe:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8001e02:	4a7c      	ldr	r2, [pc, #496]	; (8001ff4 <print_UI+0x334>)
 8001e04:	461c      	mov	r4, r3
 8001e06:	4615      	mov	r5, r2
 8001e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	682b      	ldr	r3, [r5, #0]
 8001e16:	7023      	strb	r3, [r4, #0]
    char enroll11[]	= "|  N -> Display No of fingerprints stored    |\r\n";
 8001e18:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001e1c:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8001e20:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <print_UI+0x338>)
 8001e22:	461c      	mov	r4, r3
 8001e24:	4615      	mov	r5, r2
 8001e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	7023      	strb	r3, [r4, #0]
    char prompt[]   = "|  Enter your choice:                        |\r\n";
 8001e36:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001e3a:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 8001e3e:	4a6f      	ldr	r2, [pc, #444]	; (8001ffc <print_UI+0x33c>)
 8001e40:	461c      	mov	r4, r3
 8001e42:	4615      	mov	r5, r2
 8001e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	7023      	strb	r3, [r4, #0]

    // Transmit UI options over UART
    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001e54:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5c:	2230      	movs	r2, #48	; 0x30
 8001e5e:	4868      	ldr	r0, [pc, #416]	; (8002000 <print_UI+0x340>)
 8001e60:	f003 fff9 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001e64:	2064      	movs	r0, #100	; 0x64
 8001e66:	f001 fb69 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)header, sizeof(header), HAL_MAX_DELAY);
 8001e6a:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e72:	2231      	movs	r2, #49	; 0x31
 8001e74:	4862      	ldr	r0, [pc, #392]	; (8002000 <print_UI+0x340>)
 8001e76:	f003 ffee 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001e7a:	2064      	movs	r0, #100	; 0x64
 8001e7c:	f001 fb5e 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001e80:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e88:	2230      	movs	r2, #48	; 0x30
 8001e8a:	485d      	ldr	r0, [pc, #372]	; (8002000 <print_UI+0x340>)
 8001e8c:	f003 ffe3 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f001 fb53 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll1, sizeof(enroll1), HAL_MAX_DELAY);
 8001e96:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e9e:	2231      	movs	r2, #49	; 0x31
 8001ea0:	4857      	ldr	r0, [pc, #348]	; (8002000 <print_UI+0x340>)
 8001ea2:	f003 ffd8 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001ea6:	2064      	movs	r0, #100	; 0x64
 8001ea8:	f001 fb48 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll2, sizeof(enroll2), HAL_MAX_DELAY);
 8001eac:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eb4:	2231      	movs	r2, #49	; 0x31
 8001eb6:	4852      	ldr	r0, [pc, #328]	; (8002000 <print_UI+0x340>)
 8001eb8:	f003 ffcd 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001ebc:	2064      	movs	r0, #100	; 0x64
 8001ebe:	f001 fb3d 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll3, sizeof(enroll3), HAL_MAX_DELAY);
 8001ec2:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	2231      	movs	r2, #49	; 0x31
 8001ecc:	484c      	ldr	r0, [pc, #304]	; (8002000 <print_UI+0x340>)
 8001ece:	f003 ffc2 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001ed2:	2064      	movs	r0, #100	; 0x64
 8001ed4:	f001 fb32 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll4, sizeof(enroll4), HAL_MAX_DELAY);
 8001ed8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ee0:	2231      	movs	r2, #49	; 0x31
 8001ee2:	4847      	ldr	r0, [pc, #284]	; (8002000 <print_UI+0x340>)
 8001ee4:	f003 ffb7 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001ee8:	2064      	movs	r0, #100	; 0x64
 8001eea:	f001 fb27 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll5, sizeof(enroll5), HAL_MAX_DELAY);
 8001eee:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef6:	2231      	movs	r2, #49	; 0x31
 8001ef8:	4841      	ldr	r0, [pc, #260]	; (8002000 <print_UI+0x340>)
 8001efa:	f003 ffac 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001efe:	2064      	movs	r0, #100	; 0x64
 8001f00:	f001 fb1c 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll6, sizeof(enroll6), HAL_MAX_DELAY);
 8001f04:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0c:	2231      	movs	r2, #49	; 0x31
 8001f0e:	483c      	ldr	r0, [pc, #240]	; (8002000 <print_UI+0x340>)
 8001f10:	f003 ffa1 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	f001 fb11 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll7, sizeof(enroll7), HAL_MAX_DELAY);
 8001f1a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	2231      	movs	r2, #49	; 0x31
 8001f24:	4836      	ldr	r0, [pc, #216]	; (8002000 <print_UI+0x340>)
 8001f26:	f003 ff96 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f2a:	2064      	movs	r0, #100	; 0x64
 8001f2c:	f001 fb06 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll8, sizeof(enroll8), HAL_MAX_DELAY);
 8001f30:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f38:	2231      	movs	r2, #49	; 0x31
 8001f3a:	4831      	ldr	r0, [pc, #196]	; (8002000 <print_UI+0x340>)
 8001f3c:	f003 ff8b 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f001 fafb 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll9, sizeof(enroll9), HAL_MAX_DELAY);
 8001f46:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f4e:	2231      	movs	r2, #49	; 0x31
 8001f50:	482b      	ldr	r0, [pc, #172]	; (8002000 <print_UI+0x340>)
 8001f52:	f003 ff80 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f56:	2064      	movs	r0, #100	; 0x64
 8001f58:	f001 faf0 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll10, sizeof(enroll10), HAL_MAX_DELAY);
 8001f5c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f64:	2231      	movs	r2, #49	; 0x31
 8001f66:	4826      	ldr	r0, [pc, #152]	; (8002000 <print_UI+0x340>)
 8001f68:	f003 ff75 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	f001 fae5 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)enroll11, sizeof(enroll11), HAL_MAX_DELAY);
 8001f72:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7a:	2231      	movs	r2, #49	; 0x31
 8001f7c:	4820      	ldr	r0, [pc, #128]	; (8002000 <print_UI+0x340>)
 8001f7e:	f003 ff6a 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f82:	2064      	movs	r0, #100	; 0x64
 8001f84:	f001 fada 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001f88:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f90:	2230      	movs	r2, #48	; 0x30
 8001f92:	481b      	ldr	r0, [pc, #108]	; (8002000 <print_UI+0x340>)
 8001f94:	f003 ff5f 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001f98:	2064      	movs	r0, #100	; 0x64
 8001f9a:	f001 facf 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001f9e:	1d39      	adds	r1, r7, #4
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa4:	2231      	movs	r2, #49	; 0x31
 8001fa6:	4816      	ldr	r0, [pc, #88]	; (8002000 <print_UI+0x340>)
 8001fa8:	f003 ff55 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001fac:	2064      	movs	r0, #100	; 0x64
 8001fae:	f001 fac5 	bl	800353c <HAL_Delay>

    HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8001fb2:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fba:	2230      	movs	r2, #48	; 0x30
 8001fbc:	4810      	ldr	r0, [pc, #64]	; (8002000 <print_UI+0x340>)
 8001fbe:	f003 ff4a 	bl	8005e56 <HAL_UART_Transmit>
    HAL_Delay(100);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	e01e      	b.n	8002004 <print_UI+0x344>
 8001fc6:	bf00      	nop
 8001fc8:	0800c118 	.word	0x0800c118
 8001fcc:	0800c148 	.word	0x0800c148
 8001fd0:	0800c17c 	.word	0x0800c17c
 8001fd4:	0800c1b0 	.word	0x0800c1b0
 8001fd8:	0800c1e4 	.word	0x0800c1e4
 8001fdc:	0800c218 	.word	0x0800c218
 8001fe0:	0800c24c 	.word	0x0800c24c
 8001fe4:	0800c280 	.word	0x0800c280
 8001fe8:	0800c2b4 	.word	0x0800c2b4
 8001fec:	0800c2e8 	.word	0x0800c2e8
 8001ff0:	0800c31c 	.word	0x0800c31c
 8001ff4:	0800c350 	.word	0x0800c350
 8001ff8:	0800c384 	.word	0x0800c384
 8001ffc:	0800c3b8 	.word	0x0800c3b8
 8002000:	20000204 	.word	0x20000204
 8002004:	f001 fa9a 	bl	800353c <HAL_Delay>
}
 8002008:	bf00      	nop
 800200a:	f507 7736 	add.w	r7, r7, #728	; 0x2d8
 800200e:	46bd      	mov	sp, r7
 8002010:	bdb0      	pop	{r4, r5, r7, pc}
 8002012:	bf00      	nop

08002014 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
 8002028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	4b93      	ldr	r3, [pc, #588]	; (800227c <MX_GPIO_Init+0x268>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a92      	ldr	r2, [pc, #584]	; (800227c <MX_GPIO_Init+0x268>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b90      	ldr	r3, [pc, #576]	; (800227c <MX_GPIO_Init+0x268>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	4b8c      	ldr	r3, [pc, #560]	; (800227c <MX_GPIO_Init+0x268>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a8b      	ldr	r2, [pc, #556]	; (800227c <MX_GPIO_Init+0x268>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b89      	ldr	r3, [pc, #548]	; (800227c <MX_GPIO_Init+0x268>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b85      	ldr	r3, [pc, #532]	; (800227c <MX_GPIO_Init+0x268>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a84      	ldr	r2, [pc, #528]	; (800227c <MX_GPIO_Init+0x268>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b82      	ldr	r3, [pc, #520]	; (800227c <MX_GPIO_Init+0x268>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b7e      	ldr	r3, [pc, #504]	; (800227c <MX_GPIO_Init+0x268>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a7d      	ldr	r2, [pc, #500]	; (800227c <MX_GPIO_Init+0x268>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <MX_GPIO_Init+0x268>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b77      	ldr	r3, [pc, #476]	; (800227c <MX_GPIO_Init+0x268>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a76      	ldr	r2, [pc, #472]	; (800227c <MX_GPIO_Init+0x268>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <MX_GPIO_Init+0x268>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b70      	ldr	r3, [pc, #448]	; (800227c <MX_GPIO_Init+0x268>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a6f      	ldr	r2, [pc, #444]	; (800227c <MX_GPIO_Init+0x268>)
 80020c0:	f043 0308 	orr.w	r3, r3, #8
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MX_GPIO_Init+0x268>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2108      	movs	r1, #8
 80020d6:	486a      	ldr	r0, [pc, #424]	; (8002280 <MX_GPIO_Init+0x26c>)
 80020d8:	f001 ff42 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	2101      	movs	r1, #1
 80020e0:	4868      	ldr	r0, [pc, #416]	; (8002284 <MX_GPIO_Init+0x270>)
 80020e2:	f001 ff3d 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020e6:	2200      	movs	r2, #0
 80020e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80020ec:	4866      	ldr	r0, [pc, #408]	; (8002288 <MX_GPIO_Init+0x274>)
 80020ee:	f001 ff37 	bl	8003f60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020f2:	2304      	movs	r3, #4
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	485e      	ldr	r0, [pc, #376]	; (8002280 <MX_GPIO_Init+0x26c>)
 8002106:	f001 fda7 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800210a:	2308      	movs	r3, #8
 800210c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4857      	ldr	r0, [pc, #348]	; (8002280 <MX_GPIO_Init+0x26c>)
 8002122:	f001 fd99 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PEPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8002126:	2332      	movs	r3, #50	; 0x32
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800212a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800212e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	4851      	ldr	r0, [pc, #324]	; (8002280 <MX_GPIO_Init+0x26c>)
 800213c:	f001 fd8c 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002140:	2301      	movs	r3, #1
 8002142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	484b      	ldr	r0, [pc, #300]	; (8002284 <MX_GPIO_Init+0x270>)
 8002158:	f001 fd7e 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800215c:	2308      	movs	r3, #8
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800216c:	2305      	movs	r3, #5
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	4619      	mov	r1, r3
 8002176:	4843      	ldr	r0, [pc, #268]	; (8002284 <MX_GPIO_Init+0x270>)
 8002178:	f001 fd6e 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800217c:	2301      	movs	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002180:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	483e      	ldr	r0, [pc, #248]	; (800228c <MX_GPIO_Init+0x278>)
 8002192:	f001 fd61 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002196:	2310      	movs	r3, #16
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021a6:	2306      	movs	r3, #6
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80021aa:	f107 031c 	add.w	r3, r7, #28
 80021ae:	4619      	mov	r1, r3
 80021b0:	4836      	ldr	r0, [pc, #216]	; (800228c <MX_GPIO_Init+0x278>)
 80021b2:	f001 fd51 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80021b6:	23e0      	movs	r3, #224	; 0xe0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c6:	2305      	movs	r3, #5
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	482e      	ldr	r0, [pc, #184]	; (800228c <MX_GPIO_Init+0x278>)
 80021d2:	f001 fd41 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80021d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e8:	2305      	movs	r3, #5
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4619      	mov	r1, r3
 80021f2:	4827      	ldr	r0, [pc, #156]	; (8002290 <MX_GPIO_Init+0x27c>)
 80021f4:	f001 fd30 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80021f8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80021fc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	481d      	ldr	r0, [pc, #116]	; (8002288 <MX_GPIO_Init+0x274>)
 8002212:	f001 fd21 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002216:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002228:	2306      	movs	r3, #6
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4814      	ldr	r0, [pc, #80]	; (8002284 <MX_GPIO_Init+0x270>)
 8002234:	f001 fd10 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002238:	2320      	movs	r3, #32
 800223a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	480f      	ldr	r0, [pc, #60]	; (8002288 <MX_GPIO_Init+0x274>)
 800224c:	f001 fd04 	bl	8003c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002250:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002256:	2312      	movs	r3, #18
 8002258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002262:	2304      	movs	r3, #4
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4808      	ldr	r0, [pc, #32]	; (8002290 <MX_GPIO_Init+0x27c>)
 800226e:	f001 fcf3 	bl	8003c58 <HAL_GPIO_Init>

}
 8002272:	bf00      	nop
 8002274:	3730      	adds	r7, #48	; 0x30
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40021000 	.word	0x40021000
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400

08002294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800229a:	f001 f8dd 	bl	8003458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229e:	f000 f8db 	bl	8002458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a2:	f7ff feb7 	bl	8002014 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022a6:	f000 ffd7 	bl	8003258 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80022aa:	f008 fa53 	bl	800a754 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80022ae:	f000 ffa9 	bl	8003204 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  UART3_FINGER_Init();
 80022b2:	f7fe f96f 	bl	8000594 <UART3_FINGER_Init>
  check_initial_status_flash();
 80022b6:	f7ff fccf 	bl	8001c58 <check_initial_status_flash>

  uint8_t prompt[] = "Hello AT89C51\n\r";
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <main+0x1b0>)
 80022bc:	1d3c      	adds	r4, r7, #4
 80022be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart1, (uint8_t *)prompt, sizeof(prompt), HAL_MAX_DELAY);
 80022c4:	1d39      	adds	r1, r7, #4
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ca:	2210      	movs	r2, #16
 80022cc:	485e      	ldr	r0, [pc, #376]	; (8002448 <main+0x1b4>)
 80022ce:	f003 fdc2 	bl	8005e56 <HAL_UART_Transmit>
  HAL_Delay(100);
 80022d2:	2064      	movs	r0, #100	; 0x64
 80022d4:	f001 f932 	bl	800353c <HAL_Delay>

  getParameter();
 80022d8:	f7ff f9aa 	bl	8001630 <getParameter>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (entry == 1)
 80022dc:	4b5b      	ldr	r3, [pc, #364]	; (800244c <main+0x1b8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10c      	bne.n	80022fe <main+0x6a>
	  {
		  HAL_Delay(1000);
 80022e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022e8:	f001 f928 	bl	800353c <HAL_Delay>
		  print_UI();
 80022ec:	f7ff fce8 	bl	8001cc0 <print_UI>
		  HAL_Delay(1000);
 80022f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022f4:	f001 f922 	bl	800353c <HAL_Delay>
		  entry = 1;
 80022f8:	4b54      	ldr	r3, [pc, #336]	; (800244c <main+0x1b8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

	  uint8_t rxData;

	  // Wait until a character is received

	  while (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) != HAL_OK);
 80022fe:	bf00      	nop
 8002300:	1cf9      	adds	r1, r7, #3
 8002302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002306:	2201      	movs	r2, #1
 8002308:	484f      	ldr	r0, [pc, #316]	; (8002448 <main+0x1b4>)
 800230a:	f003 fe36 	bl	8005f7a <HAL_UART_Receive>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f5      	bne.n	8002300 <main+0x6c>
	  HAL_UART_Transmit(&huart1, &rxData, 1, HAL_MAX_DELAY); 	// echo the received character
 8002314:	1cf9      	adds	r1, r7, #3
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231a:	2201      	movs	r2, #1
 800231c:	484a      	ldr	r0, [pc, #296]	; (8002448 <main+0x1b4>)
 800231e:	f003 fd9a 	bl	8005e56 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, "\r\n", 2, HAL_MAX_DELAY); 	// send newline and carriage return
 8002322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002326:	2202      	movs	r2, #2
 8002328:	4949      	ldr	r1, [pc, #292]	; (8002450 <main+0x1bc>)
 800232a:	4847      	ldr	r0, [pc, #284]	; (8002448 <main+0x1b4>)
 800232c:	f003 fd93 	bl	8005e56 <HAL_UART_Transmit>

	  char c = (char)rxData;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	75fb      	strb	r3, [r7, #23]

	  switch (c)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	3b45      	subs	r3, #69	; 0x45
 8002338:	2b29      	cmp	r3, #41	; 0x29
 800233a:	f200 8081 	bhi.w	8002440 <main+0x1ac>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <main+0xb0>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	080023ed 	.word	0x080023ed
 8002348:	080023ff 	.word	0x080023ff
 800234c:	08002411 	.word	0x08002411
 8002350:	08002417 	.word	0x08002417
 8002354:	0800241d 	.word	0x0800241d
 8002358:	08002423 	.word	0x08002423
 800235c:	08002429 	.word	0x08002429
 8002360:	0800242f 	.word	0x0800242f
 8002364:	08002435 	.word	0x08002435
 8002368:	0800243b 	.word	0x0800243b
 800236c:	08002441 	.word	0x08002441
 8002370:	08002441 	.word	0x08002441
 8002374:	08002441 	.word	0x08002441
 8002378:	08002441 	.word	0x08002441
 800237c:	08002441 	.word	0x08002441
 8002380:	08002441 	.word	0x08002441
 8002384:	08002441 	.word	0x08002441
 8002388:	08002441 	.word	0x08002441
 800238c:	08002441 	.word	0x08002441
 8002390:	08002441 	.word	0x08002441
 8002394:	08002441 	.word	0x08002441
 8002398:	08002441 	.word	0x08002441
 800239c:	08002441 	.word	0x08002441
 80023a0:	08002441 	.word	0x08002441
 80023a4:	08002441 	.word	0x08002441
 80023a8:	08002441 	.word	0x08002441
 80023ac:	08002441 	.word	0x08002441
 80023b0:	08002441 	.word	0x08002441
 80023b4:	08002441 	.word	0x08002441
 80023b8:	08002441 	.word	0x08002441
 80023bc:	08002441 	.word	0x08002441
 80023c0:	08002441 	.word	0x08002441
 80023c4:	080023ed 	.word	0x080023ed
 80023c8:	080023ff 	.word	0x080023ff
 80023cc:	08002411 	.word	0x08002411
 80023d0:	08002417 	.word	0x08002417
 80023d4:	0800241d 	.word	0x0800241d
 80023d8:	08002423 	.word	0x08002423
 80023dc:	08002429 	.word	0x08002429
 80023e0:	0800242f 	.word	0x0800242f
 80023e4:	08002435 	.word	0x08002435
 80023e8:	0800243b 	.word	0x0800243b
	  {
	      case 'E':
	      case 'e':
	          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023ec:	2201      	movs	r2, #1
 80023ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f2:	4818      	ldr	r0, [pc, #96]	; (8002454 <main+0x1c0>)
 80023f4:	f001 fdb4 	bl	8003f60 <HAL_GPIO_WritePin>
	          handler_enroll_PFS();
 80023f8:	f000 f8be 	bl	8002578 <handler_enroll_PFS>
	          break;
 80023fc:	e021      	b.n	8002442 <main+0x1ae>

	      case 'F':
	      case 'f':

	          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002404:	4813      	ldr	r0, [pc, #76]	; (8002454 <main+0x1c0>)
 8002406:	f001 fdab 	bl	8003f60 <HAL_GPIO_WritePin>
	          handler_FindFingerprint();
 800240a:	f000 fa43 	bl	8002894 <handler_FindFingerprint>
	          break;
 800240e:	e018      	b.n	8002442 <main+0x1ae>

	      case 'G':
	      case 'g':
	          handler_ClearDataBase();
 8002410:	f000 fa4c 	bl	80028ac <handler_ClearDataBase>
	          break;
 8002414:	e015      	b.n	8002442 <main+0x1ae>

	      case 'H':
	      case 'h':
	    	  showParameter();
 8002416:	f7ff f9ad 	bl	8001774 <showParameter>
	    	  break;
 800241a:	e012      	b.n	8002442 <main+0x1ae>

	      case 'I':
	      case 'i':
	    	  handler_setLED();
 800241c:	f000 fb3e 	bl	8002a9c <handler_setLED>
	    	  break;
 8002420:	e00f      	b.n	8002442 <main+0x1ae>

	      case 'J':
	      case 'j':
	    	  handler_setColour();
 8002422:	f000 fbb3 	bl	8002b8c <handler_setColour>
	    	  break;
 8002426:	e00c      	b.n	8002442 <main+0x1ae>

	      case 'K':
	      case 'k':
	    	  handler_updateSecurity();
 8002428:	f000 fbbc 	bl	8002ba4 <handler_updateSecurity>
	    	  break;
 800242c:	e009      	b.n	8002442 <main+0x1ae>

	      case 'L':
	      case 'l':
	    	  handler_verifyPassword();
 800242e:	f000 fc4d 	bl	8002ccc <handler_verifyPassword>
	    	  break;
 8002432:	e006      	b.n	8002442 <main+0x1ae>

	      case 'M':
	      case 'm':
	    	  handler_setPassword();
 8002434:	f000 fcf6 	bl	8002e24 <handler_setPassword>
	    	  break;
 8002438:	e003      	b.n	8002442 <main+0x1ae>

	      case 'N':
	      case 'n':
	    	  handler_countFingerprints();
 800243a:	f000 fdd5 	bl	8002fe8 <handler_countFingerprints>
	    	  break;
 800243e:	e000      	b.n	8002442 <main+0x1ae>

	      default:
	          break;
 8002440:	bf00      	nop
  {
 8002442:	e74b      	b.n	80022dc <main+0x48>
 8002444:	0800c3f0 	.word	0x0800c3f0
 8002448:	20000204 	.word	0x20000204
 800244c:	20000008 	.word	0x20000008
 8002450:	0800c3ec 	.word	0x0800c3ec
 8002454:	40020c00 	.word	0x40020c00

08002458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	; 0x50
 800245c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2230      	movs	r2, #48	; 0x30
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f008 feca 	bl	800b200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <SystemClock_Config+0xcc>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	4a27      	ldr	r2, [pc, #156]	; (8002524 <SystemClock_Config+0xcc>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	6413      	str	r3, [r2, #64]	; 0x40
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <SystemClock_Config+0xcc>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <SystemClock_Config+0xd0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a21      	ldr	r2, [pc, #132]	; (8002528 <SystemClock_Config+0xd0>)
 80024a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <SystemClock_Config+0xd0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024b4:	2302      	movs	r3, #2
 80024b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b8:	2301      	movs	r3, #1
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024bc:	2310      	movs	r3, #16
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024c0:	2302      	movs	r3, #2
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024c8:	2308      	movs	r3, #8
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024d0:	2304      	movs	r3, #4
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80024d4:	2308      	movs	r3, #8
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 ffd5 	bl	800548c <HAL_RCC_OscConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024e8:	f000 fdce 	bl	8003088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ec:	230f      	movs	r3, #15
 80024ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f0:	2302      	movs	r3, #2
 80024f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002502:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	2103      	movs	r1, #3
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fa36 	bl	800597c <HAL_RCC_ClockConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002516:	f000 fdb7 	bl	8003088 <Error_Handler>
  }
}
 800251a:	bf00      	nop
 800251c:	3750      	adds	r7, #80	; 0x50
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000

0800252c <addFingerprint>:

/* USER CODE BEGIN 4 */


int8_t addFingerprint(uint8_t id)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	int8_t ret;
	if(verifyPassword() == 1 )
 8002536:	f7fe f9c5 	bl	80008c4 <verifyPassword>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d115      	bne.n	800256c <addFingerprint+0x40>
	{
		ret = fingerEnroll(id);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd40 	bl	8000fc8 <fingerEnroll>
 8002548:	4603      	mov	r3, r0
 800254a:	73fb      	strb	r3, [r7, #15]
		if( ret == 0)
 800254c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d104      	bne.n	800255e <addFingerprint+0x32>
		{
			HAL_Delay(1000);
 8002554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002558:	f000 fff0 	bl	800353c <HAL_Delay>
 800255c:	e006      	b.n	800256c <addFingerprint+0x40>
		}
		else
		{
			HAL_Delay(1500);
 800255e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002562:	f000 ffeb 	bl	800353c <HAL_Delay>
			return -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256a:	e000      	b.n	800256e <addFingerprint+0x42>
		}
	}
	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <handler_enroll_PFS>:


void handler_enroll_PFS(void)
{
 8002578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800257c:	b0ce      	sub	sp, #312	; 0x138
 800257e:	af00      	add	r7, sp, #0
	// Define UI options
	char line[]     = "+-------------------------------------------+\r\n";
 8002580:	4bb9      	ldr	r3, [pc, #740]	; (8002868 <handler_enroll_PFS+0x2f0>)
 8002582:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8002586:	461d      	mov	r5, r3
 8002588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800258c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800258e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002590:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt0[]   = "|           Enrolling FIngerprint           |\r\n";
 8002598:	4bb4      	ldr	r3, [pc, #720]	; (800286c <handler_enroll_PFS+0x2f4>)
 800259a:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 800259e:	461d      	mov	r5, r3
 80025a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80025ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//char prompt0[] = "|     Enroll Fingerprint     |\r\n";
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 80025b0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b8:	2230      	movs	r2, #48	; 0x30
 80025ba:	48ad      	ldr	r0, [pc, #692]	; (8002870 <handler_enroll_PFS+0x2f8>)
 80025bc:	f003 fc4b 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80025c0:	2064      	movs	r0, #100	; 0x64
 80025c2:	f000 ffbb 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt0, sizeof(prompt0), HAL_MAX_DELAY);
 80025c6:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ce:	2230      	movs	r2, #48	; 0x30
 80025d0:	48a7      	ldr	r0, [pc, #668]	; (8002870 <handler_enroll_PFS+0x2f8>)
 80025d2:	f003 fc40 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80025d6:	2064      	movs	r0, #100	; 0x64
 80025d8:	f000 ffb0 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 80025dc:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e4:	2230      	movs	r2, #48	; 0x30
 80025e6:	48a2      	ldr	r0, [pc, #648]	; (8002870 <handler_enroll_PFS+0x2f8>)
 80025e8:	f003 fc35 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f000 ffa5 	bl	800353c <HAL_Delay>

	// verify password
	uint8_t success_code = verifyPassword();
 80025f2:	f7fe f967 	bl	80008c4 <verifyPassword>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	if(success_code == 1)
 80025fc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002600:	2b01      	cmp	r3, #1
 8002602:	d118      	bne.n	8002636 <handler_enroll_PFS+0xbe>
	{
	    char prompt1[] = "Sensor Verified Successfully\r\n";
 8002604:	4b9b      	ldr	r3, [pc, #620]	; (8002874 <handler_enroll_PFS+0x2fc>)
 8002606:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800260a:	461d      	mov	r5, r3
 800260c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002610:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002614:	c407      	stmia	r4!, {r0, r1, r2}
 8002616:	8023      	strh	r3, [r4, #0]
 8002618:	3402      	adds	r4, #2
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	7023      	strb	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 800261e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002626:	221f      	movs	r2, #31
 8002628:	4891      	ldr	r0, [pc, #580]	; (8002870 <handler_enroll_PFS+0x2f8>)
 800262a:	f003 fc14 	bl	8005e56 <HAL_UART_Transmit>
	    HAL_Delay(100);
 800262e:	2064      	movs	r0, #100	; 0x64
 8002630:	f000 ff84 	bl	800353c <HAL_Delay>
 8002634:	e019      	b.n	800266a <handler_enroll_PFS+0xf2>
	}
	else
	{
	    char prompt2[] = "Sensor Verification Failed. Incorrect Password!\r\n";
 8002636:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800263a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800263e:	4a8e      	ldr	r2, [pc, #568]	; (8002878 <handler_enroll_PFS+0x300>)
 8002640:	461c      	mov	r4, r3
 8002642:	4615      	mov	r5, r2
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	8023      	strh	r3, [r4, #0]
	    HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 8002654:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265c:	2232      	movs	r2, #50	; 0x32
 800265e:	4884      	ldr	r0, [pc, #528]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002660:	f003 fbf9 	bl	8005e56 <HAL_UART_Transmit>
	    HAL_Delay(100);
 8002664:	2064      	movs	r0, #100	; 0x64
 8002666:	f000 ff69 	bl	800353c <HAL_Delay>
	    // break;
	}

	char prompt3[] = "Enter ID number of fingerprint to add:\r\n";
 800266a:	4b84      	ldr	r3, [pc, #528]	; (800287c <handler_enroll_PFS+0x304>)
 800266c:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8002670:	461d      	mov	r5, r3
 8002672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800267e:	c403      	stmia	r4!, {r0, r1}
 8002680:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
 8002682:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268a:	2229      	movs	r2, #41	; 0x29
 800268c:	4878      	ldr	r0, [pc, #480]	; (8002870 <handler_enroll_PFS+0x2f8>)
 800268e:	f003 fbe2 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002692:	2064      	movs	r0, #100	; 0x64
 8002694:	f000 ff52 	bl	800353c <HAL_Delay>

	uint8_t rxData;
	while (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) != HAL_OK);
 8002698:	bf00      	nop
 800269a:	f107 01a3 	add.w	r1, r7, #163	; 0xa3
 800269e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a2:	2201      	movs	r2, #1
 80026a4:	4872      	ldr	r0, [pc, #456]	; (8002870 <handler_enroll_PFS+0x2f8>)
 80026a6:	f003 fc68 	bl	8005f7a <HAL_UART_Receive>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f4      	bne.n	800269a <handler_enroll_PFS+0x122>

	char echo[3] = {rxData, '\r', '\n'};
 80026b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80026b4:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 80026b8:	230d      	movs	r3, #13
 80026ba:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80026be:	230a      	movs	r3, #10
 80026c0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
	HAL_UART_Transmit(&huart1, (uint8_t *) echo, strlen(echo), HAL_MAX_DELAY);
 80026c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fd89 	bl	80001e0 <strlen>
 80026ce:	4603      	mov	r3, r0
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026da:	4865      	ldr	r0, [pc, #404]	; (8002870 <handler_enroll_PFS+0x2f8>)
 80026dc:	f003 fbbb 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	f000 ff2b 	bl	800353c <HAL_Delay>

	char prompt4[] = "Place Finger on Scanner\r\n";
 80026e6:	4b66      	ldr	r3, [pc, #408]	; (8002880 <handler_enroll_PFS+0x308>)
 80026e8:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80026ec:	461d      	mov	r5, r3
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026f6:	c403      	stmia	r4!, {r0, r1}
 80026f8:	8022      	strh	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt4, sizeof(prompt4), HAL_MAX_DELAY);
 80026fa:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002702:	221a      	movs	r2, #26
 8002704:	485a      	ldr	r0, [pc, #360]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002706:	f003 fba6 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(2000);
 800270a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800270e:	f000 ff15 	bl	800353c <HAL_Delay>

	int8_t ret = addFingerprint(rxData);
 8002712:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff08 	bl	800252c <addFingerprint>
 800271c:	4603      	mov	r3, r0
 800271e:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	if (ret == -1){
 8002722:	f997 3136 	ldrsb.w	r3, [r7, #310]	; 0x136
 8002726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800272a:	d15a      	bne.n	80027e2 <handler_enroll_PFS+0x26a>
		char line1[]  	= "+-------------------------------------------+\r\n";
 800272c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002730:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <handler_enroll_PFS+0x2f0>)
 8002736:	461c      	mov	r4, r3
 8002738:	4615      	mov	r5, r2
 800273a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002742:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002746:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		char prompt5[]  = "|     Fingerprint Enrolled Successfully.    |\r\n";
 800274a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800274e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002752:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <handler_enroll_PFS+0x30c>)
 8002754:	461c      	mov	r4, r3
 8002756:	4615      	mov	r5, r2
 8002758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002760:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002764:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
 8002768:	4639      	mov	r1, r7
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800276e:	2230      	movs	r2, #48	; 0x30
 8002770:	483f      	ldr	r0, [pc, #252]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002772:	f003 fb70 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002776:	2064      	movs	r0, #100	; 0x64
 8002778:	f000 fee0 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt5, sizeof(prompt5), HAL_MAX_DELAY);
 800277c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002784:	2230      	movs	r2, #48	; 0x30
 8002786:	483a      	ldr	r0, [pc, #232]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002788:	f003 fb65 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f000 fed5 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
 8002792:	4639      	mov	r1, r7
 8002794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002798:	2230      	movs	r2, #48	; 0x30
 800279a:	4835      	ldr	r0, [pc, #212]	; (8002870 <handler_enroll_PFS+0x2f8>)
 800279c:	f003 fb5b 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 80027a0:	2064      	movs	r0, #100	; 0x64
 80027a2:	f000 fecb 	bl	800353c <HAL_Delay>

		uint32_t flash_address = 0x08040000;
 80027a6:	4b38      	ldr	r3, [pc, #224]	; (8002888 <handler_enroll_PFS+0x310>)
 80027a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

		// unlock the flash memory
		HAL_FLASH_Unlock();
 80027ac:	f001 f8e2 	bl	8003974 <HAL_FLASH_Unlock>

		// read the current value from flash memory
		flash_data = *((__IO uint32_t *)flash_address);
 80027b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a35      	ldr	r2, [pc, #212]	; (800288c <handler_enroll_PFS+0x314>)
 80027b8:	6013      	str	r3, [r2, #0]

		// increment the value
		flash_data++;
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <handler_enroll_PFS+0x314>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a32      	ldr	r2, [pc, #200]	; (800288c <handler_enroll_PFS+0x314>)
 80027c2:	6013      	str	r3, [r2, #0]

		// write the updated value back to flash memory
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, flash_data);
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <handler_enroll_PFS+0x314>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	4698      	mov	r8, r3
 80027cc:	4691      	mov	r9, r2
 80027ce:	4642      	mov	r2, r8
 80027d0:	464b      	mov	r3, r9
 80027d2:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80027d6:	2002      	movs	r0, #2
 80027d8:	f001 f878 	bl	80038cc <HAL_FLASH_Program>

		// lock the flash memory
		HAL_FLASH_Lock();
 80027dc:	f001 f8ec 	bl	80039b8 <HAL_FLASH_Lock>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt5, sizeof(prompt5), HAL_MAX_DELAY);
		HAL_Delay(100);
		HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
		HAL_Delay(100);
	}
}
 80027e0:	e03c      	b.n	800285c <handler_enroll_PFS+0x2e4>
		char line1[]  	= "+-------------------------------------------+\r\n";
 80027e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <handler_enroll_PFS+0x2f0>)
 80027ec:	461c      	mov	r4, r3
 80027ee:	4615      	mov	r5, r2
 80027f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		char prompt5[]  = "|         Fingerprint Enrolled Failed.      |\r\n";
 8002800:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <handler_enroll_PFS+0x318>)
 800280a:	461c      	mov	r4, r3
 800280c:	4615      	mov	r5, r2
 800280e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
 800281e:	4639      	mov	r1, r7
 8002820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002824:	2230      	movs	r2, #48	; 0x30
 8002826:	4812      	ldr	r0, [pc, #72]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002828:	f003 fb15 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 800282c:	2064      	movs	r0, #100	; 0x64
 800282e:	f000 fe85 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt5, sizeof(prompt5), HAL_MAX_DELAY);
 8002832:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800283a:	2230      	movs	r2, #48	; 0x30
 800283c:	480c      	ldr	r0, [pc, #48]	; (8002870 <handler_enroll_PFS+0x2f8>)
 800283e:	f003 fb0a 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f000 fe7a 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
 8002848:	4639      	mov	r1, r7
 800284a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800284e:	2230      	movs	r2, #48	; 0x30
 8002850:	4807      	ldr	r0, [pc, #28]	; (8002870 <handler_enroll_PFS+0x2f8>)
 8002852:	f003 fb00 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002856:	2064      	movs	r0, #100	; 0x64
 8002858:	f000 fe70 	bl	800353c <HAL_Delay>
}
 800285c:	bf00      	nop
 800285e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002868:	0800c400 	.word	0x0800c400
 800286c:	0800c430 	.word	0x0800c430
 8002870:	20000204 	.word	0x20000204
 8002874:	0800c460 	.word	0x0800c460
 8002878:	0800c480 	.word	0x0800c480
 800287c:	0800c4b4 	.word	0x0800c4b4
 8002880:	0800c4e0 	.word	0x0800c4e0
 8002884:	0800c4fc 	.word	0x0800c4fc
 8002888:	08040000 	.word	0x08040000
 800288c:	200001f8 	.word	0x200001f8
 8002890:	0800c52c 	.word	0x0800c52c

08002894 <handler_FindFingerprint>:

void handler_FindFingerprint(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
	int8_t FPS_ID;

	FPS_ID = fingerIDSearch();
 800289a:	f7fe fd69 	bl	8001370 <fingerIDSearch>
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
//		char prompt5[] = "Finger Detected\r\n";
//		CDC_Transmit_FS((uint8_t*)prompt5, sizeof(prompt5));
//		HAL_Delay(100);
//	}

}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <handler_ClearDataBase>:
//	HAL_UART_Transmit(&huart1, (uint8_t*)line1, sizeof(line1), HAL_MAX_DELAY);
//	HAL_Delay(100);
//}

void handler_ClearDataBase(void)
{
 80028ac:	b5b0      	push	{r4, r5, r7, lr}
 80028ae:	b0c0      	sub	sp, #256	; 0x100
 80028b0:	af00      	add	r7, sp, #0
	char line[]  	= "+-------------------------------------------+\r\n";
 80028b2:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <handler_ClearDataBase+0x1cc>)
 80028b4:	f107 04cc 	add.w	r4, r7, #204	; 0xcc
 80028b8:	461d      	mov	r5, r3
 80028ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt1[]  = "|            Clearing Database              |\r\n";
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <handler_ClearDataBase+0x1d0>)
 80028cc:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 80028d0:	461d      	mov	r5, r3
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt2[]  = "|             Database Cleared              |\r\n";
 80028e2:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <handler_ClearDataBase+0x1d4>)
 80028e4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80028e8:	461d      	mov	r5, r3
 80028ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80028f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt3[]  = "|        Clearing database failed           |\r\n";
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <handler_ClearDataBase+0x1d8>)
 80028fc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002900:	461d      	mov	r5, r3
 8002902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800290a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800290e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	// Transmit clearing message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002912:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800291a:	2230      	movs	r2, #48	; 0x30
 800291c:	485a      	ldr	r0, [pc, #360]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 800291e:	f003 fa9a 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002922:	2064      	movs	r0, #100	; 0x64
 8002924:	f000 fe0a 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8002928:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800292c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002930:	2230      	movs	r2, #48	; 0x30
 8002932:	4855      	ldr	r0, [pc, #340]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 8002934:	f003 fa8f 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	; 0x64
 800293a:	f000 fdff 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 800293e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002946:	2230      	movs	r2, #48	; 0x30
 8002948:	484f      	ldr	r0, [pc, #316]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 800294a:	f003 fa84 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 800294e:	2064      	movs	r0, #100	; 0x64
 8002950:	f000 fdf4 	bl	800353c <HAL_Delay>

	// Clear database
	int8_t ret = emptyDatabase();
 8002954:	f7fe f8d2 	bl	8000afc <emptyDatabase>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	if (ret != -1){
 800295e:	f997 30ff 	ldrsb.w	r3, [r7, #255]	; 0xff
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002966:	d04c      	beq.n	8002a02 <handler_ClearDataBase+0x156>
		// Transmit cleared message over UART
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002968:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002970:	2230      	movs	r2, #48	; 0x30
 8002972:	4845      	ldr	r0, [pc, #276]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 8002974:	f003 fa6f 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002978:	2064      	movs	r0, #100	; 0x64
 800297a:	f000 fddf 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 800297e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002986:	2230      	movs	r2, #48	; 0x30
 8002988:	483f      	ldr	r0, [pc, #252]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 800298a:	f003 fa64 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 800298e:	2064      	movs	r0, #100	; 0x64
 8002990:	f000 fdd4 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002994:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299c:	2230      	movs	r2, #48	; 0x30
 800299e:	483a      	ldr	r0, [pc, #232]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 80029a0:	f003 fa59 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 80029a4:	2064      	movs	r0, #100	; 0x64
 80029a6:	f000 fdc9 	bl	800353c <HAL_Delay>

		char command[] 	= "FPS Database Cleared\r\n";
 80029aa:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <handler_ClearDataBase+0x1e0>)
 80029ac:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80029b0:	461d      	mov	r5, r3
 80029b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029ba:	6020      	str	r0, [r4, #0]
 80029bc:	3404      	adds	r4, #4
 80029be:	8021      	strh	r1, [r4, #0]
 80029c0:	3402      	adds	r4, #2
 80029c2:	0c0b      	lsrs	r3, r1, #16
 80029c4:	7023      	strb	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	2117      	movs	r1, #23
 80029cc:	4618      	mov	r0, r3
 80029ce:	f007 ff7f 	bl	800a8d0 <CDC_Transmit_FS>
		HAL_Delay(100);
 80029d2:	2064      	movs	r0, #100	; 0x64
 80029d4:	f000 fdb2 	bl	800353c <HAL_Delay>

		// clear flash memory for count
		HAL_FLASH_Unlock();
 80029d8:	f000 ffcc 	bl	8003974 <HAL_FLASH_Unlock>
		flash_address = 0x08040000;
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <handler_ClearDataBase+0x1e4>)
 80029de:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <handler_ClearDataBase+0x1e8>)
 80029e0:	601a      	str	r2, [r3, #0]
		while( (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,flash_address,0)) != HAL_OK);
 80029e2:	bf00      	nop
 80029e4:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <handler_ClearDataBase+0x1e4>)
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	2002      	movs	r0, #2
 80029f2:	f000 ff6b 	bl	80038cc <HAL_FLASH_Program>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f3      	bne.n	80029e4 <handler_ClearDataBase+0x138>
		HAL_FLASH_Lock();
 80029fc:	f000 ffdc 	bl	80039b8 <HAL_FLASH_Lock>

		char command[] 	= "FPS Database Clearing Failed\r\n";
		CDC_Transmit_FS((uint8_t*)command, sizeof(command));
		HAL_Delay(100);
	}
}
 8002a00:	e034      	b.n	8002a6c <handler_ClearDataBase+0x1c0>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002a02:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a0a:	2230      	movs	r2, #48	; 0x30
 8002a0c:	481e      	ldr	r0, [pc, #120]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 8002a0e:	f003 fa22 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002a12:	2064      	movs	r0, #100	; 0x64
 8002a14:	f000 fd92 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
 8002a18:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a20:	2230      	movs	r2, #48	; 0x30
 8002a22:	4819      	ldr	r0, [pc, #100]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 8002a24:	f003 fa17 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002a28:	2064      	movs	r0, #100	; 0x64
 8002a2a:	f000 fd87 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002a2e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a36:	2230      	movs	r2, #48	; 0x30
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <handler_ClearDataBase+0x1dc>)
 8002a3a:	f003 fa0c 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002a3e:	2064      	movs	r0, #100	; 0x64
 8002a40:	f000 fd7c 	bl	800353c <HAL_Delay>
		char command[] 	= "FPS Database Clearing Failed\r\n";
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <handler_ClearDataBase+0x1ec>)
 8002a46:	1d3c      	adds	r4, r7, #4
 8002a48:	461d      	mov	r5, r3
 8002a4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a52:	c407      	stmia	r4!, {r0, r1, r2}
 8002a54:	8023      	strh	r3, [r4, #0]
 8002a56:	3402      	adds	r4, #2
 8002a58:	0c1b      	lsrs	r3, r3, #16
 8002a5a:	7023      	strb	r3, [r4, #0]
		CDC_Transmit_FS((uint8_t*)command, sizeof(command));
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	211f      	movs	r1, #31
 8002a60:	4618      	mov	r0, r3
 8002a62:	f007 ff35 	bl	800a8d0 <CDC_Transmit_FS>
		HAL_Delay(100);
 8002a66:	2064      	movs	r0, #100	; 0x64
 8002a68:	f000 fd68 	bl	800353c <HAL_Delay>
}
 8002a6c:	bf00      	nop
 8002a6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bdb0      	pop	{r4, r5, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	0800c400 	.word	0x0800c400
 8002a7c:	0800c570 	.word	0x0800c570
 8002a80:	0800c5a0 	.word	0x0800c5a0
 8002a84:	0800c5d0 	.word	0x0800c5d0
 8002a88:	20000204 	.word	0x20000204
 8002a8c:	0800c600 	.word	0x0800c600
 8002a90:	20000004 	.word	0x20000004
 8002a94:	08040000 	.word	0x08040000
 8002a98:	0800c618 	.word	0x0800c618

08002a9c <handler_setLED>:
    HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, strlen(prompt1), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
}

void handler_setLED(void)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b0c0      	sub	sp, #256	; 0x100
 8002aa0:	af00      	add	r7, sp, #0

	char prompt[] = "Press 1 : To turn it ON\r\nPress 2 : To turn it OFF\n\r";
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <handler_setLED+0xd8>)
 8002aa4:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8002aa8:	461d      	mov	r5, r3
 8002aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ab6:	682b      	ldr	r3, [r5, #0]
 8002ab8:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002aba:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac2:	2234      	movs	r2, #52	; 0x34
 8002ac4:	482c      	ldr	r0, [pc, #176]	; (8002b78 <handler_setLED+0xdc>)
 8002ac6:	f003 f9c6 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002aca:	2064      	movs	r0, #100	; 0x64
 8002acc:	f000 fd36 	bl	800353c <HAL_Delay>
	uint8_t rxData;

	// Wait until a character is received
	while (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) != HAL_OK);
 8002ad0:	bf00      	nop
 8002ad2:	f107 01c7 	add.w	r1, r7, #199	; 0xc7
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ada:	2201      	movs	r2, #1
 8002adc:	4826      	ldr	r0, [pc, #152]	; (8002b78 <handler_setLED+0xdc>)
 8002ade:	f003 fa4c 	bl	8005f7a <HAL_UART_Receive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f4      	bne.n	8002ad2 <handler_setLED+0x36>

	char line[]  	= "+-------------------------------------------+\r\n";
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <handler_setLED+0xe0>)
 8002aea:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8002aee:	461d      	mov	r5, r3
 8002af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002af8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt1[]  = "|              LED Turned ON                |\r\n";
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <handler_setLED+0xe4>)
 8002b02:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8002b06:	461d      	mov	r5, r3
 8002b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt2[]  = "|              LED Turned OFF               |\r\n";
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <handler_setLED+0xe8>)
 8002b1a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002b1e:	461d      	mov	r5, r3
 8002b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt3[]  = "|             Operation Failed              |\r\n";
 8002b30:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <handler_setLED+0xec>)
 8002b32:	1d3c      	adds	r4, r7, #4
 8002b34:	461d      	mov	r5, r3
 8002b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	char c = (char)rxData;
 8002b46:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8002b4a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
	int8_t ret ;
	switch (c)
 8002b4e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002b52:	2b31      	cmp	r3, #49	; 0x31
 8002b54:	d002      	beq.n	8002b5c <handler_setLED+0xc0>
 8002b56:	2b32      	cmp	r3, #50	; 0x32
 8002b58:	d003      	beq.n	8002b62 <handler_setLED+0xc6>
//			}
			turnOffLED();
			break;

		default :
			break;
 8002b5a:	e005      	b.n	8002b68 <handler_setLED+0xcc>
			turnOnLED();
 8002b5c:	f7fe ffd6 	bl	8001b0c <turnOnLED>
			break;
 8002b60:	e002      	b.n	8002b68 <handler_setLED+0xcc>
			turnOffLED();
 8002b62:	f7fe ffe1 	bl	8001b28 <turnOffLED>
			break;
 8002b66:	bf00      	nop

	}

}
 8002b68:	bf00      	nop
 8002b6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bdb0      	pop	{r4, r5, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	0800c688 	.word	0x0800c688
 8002b78:	20000204 	.word	0x20000204
 8002b7c:	0800c400 	.word	0x0800c400
 8002b80:	0800c6bc 	.word	0x0800c6bc
 8002b84:	0800c6ec 	.word	0x0800c6ec
 8002b88:	0800c71c 	.word	0x0800c71c

08002b8c <handler_setColour>:

void handler_setColour(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
//	// green
//	setLEDColor(0, 255, 0);
//	HAL_Delay(100);

	// blue
	setLEDColor(0, 0, 255);
 8002b90:	22ff      	movs	r2, #255	; 0xff
 8002b92:	2100      	movs	r1, #0
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe ff73 	bl	8001a80 <setLEDColor>
	HAL_Delay(100);
 8002b9a:	2064      	movs	r0, #100	; 0x64
 8002b9c:	f000 fcce 	bl	800353c <HAL_Delay>

//	// pale yellow
//	setLEDColor(255, 255, 204);
//	HAL_Delay(100);

}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <handler_updateSecurity>:
void handler_updateSecurity(void)
{
 8002ba4:	b5b0      	push	{r4, r5, r7, lr}
 8002ba6:	b0c0      	sub	sp, #256	; 0x100
 8002ba8:	af00      	add	r7, sp, #0
	char prompt[] = "Enter Security Level : \n\rAvailable Levels 1 to 3\nLevel 1\t(Lowest)\nLevel 2\t(Medium)\nLevel 3\t(Hard)";
 8002baa:	4a43      	ldr	r2, [pc, #268]	; (8002cb8 <handler_updateSecurity+0x114>)
 8002bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	2262      	movs	r2, #98	; 0x62
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f008 fb15 	bl	800b1e4 <memcpy>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002bba:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc2:	2262      	movs	r2, #98	; 0x62
 8002bc4:	483d      	ldr	r0, [pc, #244]	; (8002cbc <handler_updateSecurity+0x118>)
 8002bc6:	f003 f946 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002bca:	2064      	movs	r0, #100	; 0x64
 8002bcc:	f000 fcb6 	bl	800353c <HAL_Delay>
	uint8_t rxData;

	// Wait until a character is received
	while (HAL_UART_Receive(&huart1, &rxData, 1, HAL_MAX_DELAY) != HAL_OK);
 8002bd0:	bf00      	nop
 8002bd2:	f107 019b 	add.w	r1, r7, #155	; 0x9b
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4837      	ldr	r0, [pc, #220]	; (8002cbc <handler_updateSecurity+0x118>)
 8002bde:	f003 f9cc 	bl	8005f7a <HAL_UART_Receive>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f4      	bne.n	8002bd2 <handler_updateSecurity+0x2e>

	char c = rxData;
 8002be8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002bec:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

	switch(c)
 8002bf0:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002bf4:	2b33      	cmp	r3, #51	; 0x33
 8002bf6:	d014      	beq.n	8002c22 <handler_updateSecurity+0x7e>
 8002bf8:	2b33      	cmp	r3, #51	; 0x33
 8002bfa:	dc19      	bgt.n	8002c30 <handler_updateSecurity+0x8c>
 8002bfc:	2b31      	cmp	r3, #49	; 0x31
 8002bfe:	d002      	beq.n	8002c06 <handler_updateSecurity+0x62>
 8002c00:	2b32      	cmp	r3, #50	; 0x32
 8002c02:	d007      	beq.n	8002c14 <handler_updateSecurity+0x70>
		security_level = 3;
		setSecurityLevel(FINGERPRINT_SECURITY_LEVEL_3);
		break;

	default:
		break;
 8002c04:	e014      	b.n	8002c30 <handler_updateSecurity+0x8c>
		security_level = 1;
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <handler_updateSecurity+0x11c>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	801a      	strh	r2, [r3, #0]
		setSecurityLevel(FINGERPRINT_SECURITY_LEVEL_1);
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	f7fd fd1b 	bl	8000648 <setSecurityLevel>
		break;
 8002c12:	e00e      	b.n	8002c32 <handler_updateSecurity+0x8e>
		security_level = 2;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <handler_updateSecurity+0x11c>)
 8002c16:	2202      	movs	r2, #2
 8002c18:	801a      	strh	r2, [r3, #0]
		setSecurityLevel(FINGERPRINT_SECURITY_LEVEL_2);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f7fd fd14 	bl	8000648 <setSecurityLevel>
		break;
 8002c20:	e007      	b.n	8002c32 <handler_updateSecurity+0x8e>
		security_level = 3;
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <handler_updateSecurity+0x11c>)
 8002c24:	2203      	movs	r2, #3
 8002c26:	801a      	strh	r2, [r3, #0]
		setSecurityLevel(FINGERPRINT_SECURITY_LEVEL_3);
 8002c28:	2003      	movs	r0, #3
 8002c2a:	f7fd fd0d 	bl	8000648 <setSecurityLevel>
		break;
 8002c2e:	e000      	b.n	8002c32 <handler_updateSecurity+0x8e>
		break;
 8002c30:	bf00      	nop

	}


	char uartBuf[100];
	char line[]  	= "\n\r+-------------------------------------------+\r\n";
 8002c32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c36:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002c3a:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <handler_updateSecurity+0x120>)
 8002c3c:	461c      	mov	r4, r3
 8002c3e:	4615      	mov	r5, r2
 8002c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	682b      	ldr	r3, [r5, #0]
 8002c4e:	8023      	strh	r3, [r4, #0]
	sprintf(uartBuf,  "| Updated Security Level: %d				   |\r\n", security_level);
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <handler_updateSecurity+0x11c>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c5a:	491b      	ldr	r1, [pc, #108]	; (8002cc8 <handler_updateSecurity+0x124>)
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f008 fad7 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8002c62:	463b      	mov	r3, r7
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fabb 	bl	80001e0 <strlen>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4639      	mov	r1, r7
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c74:	4811      	ldr	r0, [pc, #68]	; (8002cbc <handler_updateSecurity+0x118>)
 8002c76:	f003 f8ee 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8002c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd faae 	bl	80001e0 <strlen>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c90:	480a      	ldr	r0, [pc, #40]	; (8002cbc <handler_updateSecurity+0x118>)
 8002c92:	f003 f8e0 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, strlen(line), HAL_MAX_DELAY);
 8002c96:	463b      	mov	r3, r7
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd faa1 	bl	80001e0 <strlen>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	4639      	mov	r1, r7
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca8:	4804      	ldr	r0, [pc, #16]	; (8002cbc <handler_updateSecurity+0x118>)
 8002caa:	f003 f8d4 	bl	8005e56 <HAL_UART_Transmit>
}
 8002cae:	bf00      	nop
 8002cb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cb8:	0800c774 	.word	0x0800c774
 8002cbc:	20000204 	.word	0x20000204
 8002cc0:	200001ee 	.word	0x200001ee
 8002cc4:	0800c7d8 	.word	0x0800c7d8
 8002cc8:	0800c74c 	.word	0x0800c74c

08002ccc <handler_verifyPassword>:

void handler_verifyPassword(void)
{
 8002ccc:	b5b0      	push	{r4, r5, r7, lr}
 8002cce:	b0b4      	sub	sp, #208	; 0xd0
 8002cd0:	af00      	add	r7, sp, #0
	char line[]  	= "+-------------------------------------------+\r\n";
 8002cd2:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <handler_verifyPassword+0x144>)
 8002cd4:	f107 049c 	add.w	r4, r7, #156	; 0x9c
 8002cd8:	461d      	mov	r5, r3
 8002cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ce2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt1[]  = "|            Verifying Password              |\r\n";
 8002cea:	4b4a      	ldr	r3, [pc, #296]	; (8002e14 <handler_verifyPassword+0x148>)
 8002cec:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002cf0:	461d      	mov	r5, r3
 8002cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cfe:	682b      	ldr	r3, [r5, #0]
 8002d00:	7023      	strb	r3, [r4, #0]
	char prompt2[]  = "|             Password Verified              |\r\n";
 8002d02:	4b45      	ldr	r3, [pc, #276]	; (8002e18 <handler_verifyPassword+0x14c>)
 8002d04:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002d08:	461d      	mov	r5, r3
 8002d0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d16:	682b      	ldr	r3, [r5, #0]
 8002d18:	7023      	strb	r3, [r4, #0]
	char prompt3[]  = "|        Password Verification Failed        |\r\n";
 8002d1a:	4b40      	ldr	r3, [pc, #256]	; (8002e1c <handler_verifyPassword+0x150>)
 8002d1c:	463c      	mov	r4, r7
 8002d1e:	461d      	mov	r5, r3
 8002d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	7023      	strb	r3, [r4, #0]


	// Transmit clearing message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002d30:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d38:	2230      	movs	r2, #48	; 0x30
 8002d3a:	4839      	ldr	r0, [pc, #228]	; (8002e20 <handler_verifyPassword+0x154>)
 8002d3c:	f003 f88b 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002d40:	2064      	movs	r0, #100	; 0x64
 8002d42:	f000 fbfb 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8002d46:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d4e:	2231      	movs	r2, #49	; 0x31
 8002d50:	4833      	ldr	r0, [pc, #204]	; (8002e20 <handler_verifyPassword+0x154>)
 8002d52:	f003 f880 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002d56:	2064      	movs	r0, #100	; 0x64
 8002d58:	f000 fbf0 	bl	800353c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002d5c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d64:	2230      	movs	r2, #48	; 0x30
 8002d66:	482e      	ldr	r0, [pc, #184]	; (8002e20 <handler_verifyPassword+0x154>)
 8002d68:	f003 f875 	bl	8005e56 <HAL_UART_Transmit>
	HAL_Delay(100);
 8002d6c:	2064      	movs	r0, #100	; 0x64
 8002d6e:	f000 fbe5 	bl	800353c <HAL_Delay>

	uint8_t success_code = verifyPassword();
 8002d72:	f7fd fda7 	bl	80008c4 <verifyPassword>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	if(success_code == 1)
 8002d7c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d121      	bne.n	8002dc8 <handler_verifyPassword+0xfc>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002d84:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d8c:	2230      	movs	r2, #48	; 0x30
 8002d8e:	4824      	ldr	r0, [pc, #144]	; (8002e20 <handler_verifyPassword+0x154>)
 8002d90:	f003 f861 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002d94:	2064      	movs	r0, #100	; 0x64
 8002d96:	f000 fbd1 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 8002d9a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da2:	2231      	movs	r2, #49	; 0x31
 8002da4:	481e      	ldr	r0, [pc, #120]	; (8002e20 <handler_verifyPassword+0x154>)
 8002da6:	f003 f856 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002daa:	2064      	movs	r0, #100	; 0x64
 8002dac:	f000 fbc6 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002db0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db8:	2230      	movs	r2, #48	; 0x30
 8002dba:	4819      	ldr	r0, [pc, #100]	; (8002e20 <handler_verifyPassword+0x154>)
 8002dbc:	f003 f84b 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002dc0:	2064      	movs	r0, #100	; 0x64
 8002dc2:	f000 fbbb 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
		HAL_Delay(100);
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
		HAL_Delay(100);
	}
}
 8002dc6:	e01f      	b.n	8002e08 <handler_verifyPassword+0x13c>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002dc8:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dd0:	2230      	movs	r2, #48	; 0x30
 8002dd2:	4813      	ldr	r0, [pc, #76]	; (8002e20 <handler_verifyPassword+0x154>)
 8002dd4:	f003 f83f 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002dd8:	2064      	movs	r0, #100	; 0x64
 8002dda:	f000 fbaf 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
 8002dde:	4639      	mov	r1, r7
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002de4:	2231      	movs	r2, #49	; 0x31
 8002de6:	480e      	ldr	r0, [pc, #56]	; (8002e20 <handler_verifyPassword+0x154>)
 8002de8:	f003 f835 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002dec:	2064      	movs	r0, #100	; 0x64
 8002dee:	f000 fba5 	bl	800353c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002df2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfa:	2230      	movs	r2, #48	; 0x30
 8002dfc:	4808      	ldr	r0, [pc, #32]	; (8002e20 <handler_verifyPassword+0x154>)
 8002dfe:	f003 f82a 	bl	8005e56 <HAL_UART_Transmit>
		HAL_Delay(100);
 8002e02:	2064      	movs	r0, #100	; 0x64
 8002e04:	f000 fb9a 	bl	800353c <HAL_Delay>
}
 8002e08:	bf00      	nop
 8002e0a:	37d0      	adds	r7, #208	; 0xd0
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e10:	0800c400 	.word	0x0800c400
 8002e14:	0800c80c 	.word	0x0800c80c
 8002e18:	0800c840 	.word	0x0800c840
 8002e1c:	0800c874 	.word	0x0800c874
 8002e20:	20000204 	.word	0x20000204

08002e24 <handler_setPassword>:

void handler_setPassword(void)
{
 8002e24:	b5b0      	push	{r4, r5, r7, lr}
 8002e26:	b0d2      	sub	sp, #328	; 0x148
 8002e28:	af00      	add	r7, sp, #0
	char line[]  	= "+-------------------------------------------+\r\n";
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <handler_setPassword+0x1a4>)
 8002e2c:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8002e30:	461d      	mov	r5, r3
 8002e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e3a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt1[]  = "|            Setting New Password           |\r\n";
 8002e42:	4b62      	ldr	r3, [pc, #392]	; (8002fcc <handler_setPassword+0x1a8>)
 8002e44:	f107 04dc 	add.w	r4, r7, #220	; 0xdc
 8002e48:	461d      	mov	r5, r3
 8002e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt2[]  = "|              New Password Set             |\r\n";
 8002e5a:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <handler_setPassword+0x1ac>)
 8002e5c:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8002e60:	461d      	mov	r5, r3
 8002e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char prompt3[]  = "|          Password Setting Failed          |\r\n";
 8002e72:	4b58      	ldr	r3, [pc, #352]	; (8002fd4 <handler_setPassword+0x1b0>)
 8002e74:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8002e78:	461d      	mov	r5, r3
 8002e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e82:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	uint32_t address;
	char prompt[] = "Please enter a 16-bit address (in hex format e.g. 0x0000FF): \r\n";
 8002e8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002e8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e92:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <handler_setPassword+0x1b4>)
 8002e94:	461c      	mov	r4, r3
 8002e96:	4615      	mov	r5, r2
 8002e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002eac:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb4:	2230      	movs	r2, #48	; 0x30
 8002eb6:	4849      	ldr	r0, [pc, #292]	; (8002fdc <handler_setPassword+0x1b8>)
 8002eb8:	f002 ffcd 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt1, sizeof(prompt1), HAL_MAX_DELAY);
 8002ebc:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec4:	2230      	movs	r2, #48	; 0x30
 8002ec6:	4845      	ldr	r0, [pc, #276]	; (8002fdc <handler_setPassword+0x1b8>)
 8002ec8:	f002 ffc5 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002ecc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8002ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed4:	2240      	movs	r2, #64	; 0x40
 8002ed6:	4841      	ldr	r0, [pc, #260]	; (8002fdc <handler_setPassword+0x1b8>)
 8002ed8:	f002 ffbd 	bl	8005e56 <HAL_UART_Transmit>

	// Wait until a newline character is received
	uint8_t buf[2];
	for (int i = 0; i < 2; i++) {
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ee2:	e013      	b.n	8002f0c <handler_setPassword+0xe8>
		while (HAL_UART_Receive(&huart1, &buf[i], 1, HAL_MAX_DELAY) != HAL_OK);
 8002ee4:	bf00      	nop
 8002ee6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002eea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002eee:	18d1      	adds	r1, r2, r3
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <handler_setPassword+0x1b8>)
 8002ef8:	f003 f83f 	bl	8005f7a <HAL_UART_Receive>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f1      	bne.n	8002ee6 <handler_setPassword+0xc2>
	for (int i = 0; i < 2; i++) {
 8002f02:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f06:	3301      	adds	r3, #1
 8002f08:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002f0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	dde7      	ble.n	8002ee4 <handler_setPassword+0xc0>
	}

	// Convert received bytes to a uint16_t variable
	address = (buf[0] << 8) | buf[1];
 8002f14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8002f24:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002f28:	7852      	ldrb	r2, [r2, #1]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	// address = 0;
	thePassword = address;
 8002f30:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <handler_setPassword+0x1bc>)
 8002f32:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002f36:	6013      	str	r3, [r2, #0]

	// Echo back the received address to the user
	char echo[] = "You entered: 0x%0x\r\n";
 8002f38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8002f3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <handler_setPassword+0x1c0>)
 8002f42:	461c      	mov	r4, r3
 8002f44:	4615      	mov	r5, r2
 8002f46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f4e:	6020      	str	r0, [r4, #0]
 8002f50:	3404      	adds	r4, #4
 8002f52:	7021      	strb	r1, [r4, #0]
	char echoBuf[30];
	sprintf(echoBuf, echo, address);
 8002f54:	f107 0120 	add.w	r1, r7, #32
 8002f58:	463b      	mov	r3, r7
 8002f5a:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f008 f956 	bl	800b210 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)echoBuf, strlen(echoBuf), HAL_MAX_DELAY);
 8002f64:	463b      	mov	r3, r7
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd f93a 	bl	80001e0 <strlen>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	4639      	mov	r1, r7
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f76:	4819      	ldr	r0, [pc, #100]	; (8002fdc <handler_setPassword+0x1b8>)
 8002f78:	f002 ff6d 	bl	8005e56 <HAL_UART_Transmit>

	uint8_t ret = setPassword(thePassword);
 8002f7c:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <handler_setPassword+0x1bc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fcdb 	bl	800093c <setPassword>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt3, sizeof(prompt3), HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
	}else
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002f8c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f94:	2230      	movs	r2, #48	; 0x30
 8002f96:	4811      	ldr	r0, [pc, #68]	; (8002fdc <handler_setPassword+0x1b8>)
 8002f98:	f002 ff5d 	bl	8005e56 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)prompt2, sizeof(prompt2), HAL_MAX_DELAY);
 8002f9c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fa4:	2230      	movs	r2, #48	; 0x30
 8002fa6:	480d      	ldr	r0, [pc, #52]	; (8002fdc <handler_setPassword+0x1b8>)
 8002fa8:	f002 ff55 	bl	8005e56 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8002fac:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fb4:	2230      	movs	r2, #48	; 0x30
 8002fb6:	4809      	ldr	r0, [pc, #36]	; (8002fdc <handler_setPassword+0x1b8>)
 8002fb8:	f002 ff4d 	bl	8005e56 <HAL_UART_Transmit>
	}
}
 8002fbc:	bf00      	nop
 8002fbe:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	0800c400 	.word	0x0800c400
 8002fcc:	0800c8a8 	.word	0x0800c8a8
 8002fd0:	0800c8d8 	.word	0x0800c8d8
 8002fd4:	0800c908 	.word	0x0800c908
 8002fd8:	0800c938 	.word	0x0800c938
 8002fdc:	20000204 	.word	0x20000204
 8002fe0:	200001e4 	.word	0x200001e4
 8002fe4:	0800c978 	.word	0x0800c978

08002fe8 <handler_countFingerprints>:

void handler_countFingerprints(void)
{
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b0a0      	sub	sp, #128	; 0x80
 8002fec:	af00      	add	r7, sp, #0
	fingerprint_count = read_flash_memory();
 8002fee:	f7fe fe21 	bl	8001c34 <read_flash_memory>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <handler_countFingerprints+0x90>)
 8002ff6:	6013      	str	r3, [r2, #0]

	char line[]  	= "+-------------------------------------------+\r\n";
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <handler_countFingerprints+0x94>)
 8002ffa:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002ffe:	461d      	mov	r5, r3
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003008:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800300c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char echo[] 	= "|          No of fingerprints [%d]          |\r\n";
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <handler_countFingerprints+0x98>)
 8003012:	f107 0420 	add.w	r4, r7, #32
 8003016:	461d      	mov	r5, r3
 8003018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800301a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800301c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800301e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003020:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char echoBuf[30];
	sprintf(echoBuf, echo, fingerprint_count);
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <handler_countFingerprints+0x90>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	f107 0120 	add.w	r1, r7, #32
 8003030:	463b      	mov	r3, r7
 8003032:	4618      	mov	r0, r3
 8003034:	f008 f8ec 	bl	800b210 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8003038:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800303c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003040:	2230      	movs	r2, #48	; 0x30
 8003042:	4810      	ldr	r0, [pc, #64]	; (8003084 <handler_countFingerprints+0x9c>)
 8003044:	f002 ff07 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)echoBuf, strlen(echoBuf), HAL_MAX_DELAY);
 8003048:	463b      	mov	r3, r7
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd f8c8 	bl	80001e0 <strlen>
 8003050:	4603      	mov	r3, r0
 8003052:	b29a      	uxth	r2, r3
 8003054:	4639      	mov	r1, r7
 8003056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305a:	480a      	ldr	r0, [pc, #40]	; (8003084 <handler_countFingerprints+0x9c>)
 800305c:	f002 fefb 	bl	8005e56 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)line, sizeof(line), HAL_MAX_DELAY);
 8003060:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003068:	2230      	movs	r2, #48	; 0x30
 800306a:	4806      	ldr	r0, [pc, #24]	; (8003084 <handler_countFingerprints+0x9c>)
 800306c:	f002 fef3 	bl	8005e56 <HAL_UART_Transmit>
}
 8003070:	bf00      	nop
 8003072:	3780      	adds	r7, #128	; 0x80
 8003074:	46bd      	mov	sp, r7
 8003076:	bdb0      	pop	{r4, r5, r7, pc}
 8003078:	200001fc 	.word	0x200001fc
 800307c:	0800c400 	.word	0x0800c400
 8003080:	0800c990 	.word	0x0800c990
 8003084:	20000204 	.word	0x20000204

08003088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800308c:	b672      	cpsid	i
}
 800308e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003090:	e7fe      	b.n	8003090 <Error_Handler+0x8>
	...

08003094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_MspInit+0x4c>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	4a0f      	ldr	r2, [pc, #60]	; (80030e0 <HAL_MspInit+0x4c>)
 80030a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a8:	6453      	str	r3, [r2, #68]	; 0x44
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_MspInit+0x4c>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_MspInit+0x4c>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_MspInit+0x4c>)
 80030c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_MspInit+0x4c>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80030d2:	2007      	movs	r0, #7
 80030d4:	f000 fb26 	bl	8003724 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800

080030e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030e8:	e7fe      	b.n	80030e8 <NMI_Handler+0x4>

080030ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ee:	e7fe      	b.n	80030ee <HardFault_Handler+0x4>

080030f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <MemManage_Handler+0x4>

080030f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <BusFault_Handler+0x4>

080030fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <UsageFault_Handler+0x4>

08003102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003130:	f000 f9e4 	bl	80034fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <USART1_IRQHandler+0x10>)
 800313e:	f002 ffbf 	bl	80060c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000204 	.word	0x20000204

0800314c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <USART2_IRQHandler+0x10>)
 8003152:	f002 ffb5 	bl	80060c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000248 	.word	0x20000248

08003160 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <OTG_FS_IRQHandler+0x10>)
 8003166:	f001 f864 	bl	8004232 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20001790 	.word	0x20001790

08003174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <_sbrk+0x5c>)
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <_sbrk+0x60>)
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d102      	bne.n	8003196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <_sbrk+0x64>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <_sbrk+0x68>)
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <_sbrk+0x64>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d207      	bcs.n	80031b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a4:	f007 fff4 	bl	800b190 <__errno>
 80031a8:	4603      	mov	r3, r0
 80031aa:	220c      	movs	r2, #12
 80031ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b2:	e009      	b.n	80031c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <_sbrk+0x64>)
 80031c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031c6:	68fb      	ldr	r3, [r7, #12]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20020000 	.word	0x20020000
 80031d4:	00000400 	.word	0x00000400
 80031d8:	20000200 	.word	0x20000200
 80031dc:	20001ed0 	.word	0x20001ed0

080031e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <SystemInit+0x20>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <SystemInit+0x20>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <MX_USART1_UART_Init+0x50>)
 800320c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 8003210:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 800322a:	220c      	movs	r2, #12
 800322c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_USART1_UART_Init+0x4c>)
 800323c:	f002 fdbe 	bl	8005dbc <HAL_UART_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003246:	f7ff ff1f 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000204 	.word	0x20000204
 8003254:	40011000 	.word	0x40011000

08003258 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <MX_USART2_UART_Init+0x50>)
 8003260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003264:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800327e:	220c      	movs	r2, #12
 8003280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003284:	2200      	movs	r2, #0
 8003286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 800328a:	2200      	movs	r2, #0
 800328c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800328e:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_USART2_UART_Init+0x4c>)
 8003290:	f002 fd94 	bl	8005dbc <HAL_UART_Init>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800329a:	f7ff fef5 	bl	8003088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000248 	.word	0x20000248
 80032a8:	40004400 	.word	0x40004400

080032ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08c      	sub	sp, #48	; 0x30
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a49      	ldr	r2, [pc, #292]	; (80033f0 <HAL_UART_MspInit+0x144>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d153      	bne.n	8003376 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
 80032d2:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a47      	ldr	r2, [pc, #284]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b45      	ldr	r3, [pc, #276]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_UART_MspInit+0x148>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_UART_MspInit+0x148>)
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <HAL_UART_MspInit+0x148>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003334:	2307      	movs	r3, #7
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	4619      	mov	r1, r3
 800333e:	482e      	ldr	r0, [pc, #184]	; (80033f8 <HAL_UART_MspInit+0x14c>)
 8003340:	f000 fc8a 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003354:	2307      	movs	r3, #7
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f107 031c 	add.w	r3, r7, #28
 800335c:	4619      	mov	r1, r3
 800335e:	4827      	ldr	r0, [pc, #156]	; (80033fc <HAL_UART_MspInit+0x150>)
 8003360:	f000 fc7a 	bl	8003c58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2100      	movs	r1, #0
 8003368:	2025      	movs	r0, #37	; 0x25
 800336a:	f000 f9e6 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336e:	2025      	movs	r0, #37	; 0x25
 8003370:	f000 f9ff 	bl	8003772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003374:	e038      	b.n	80033e8 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a21      	ldr	r2, [pc, #132]	; (8003400 <HAL_UART_MspInit+0x154>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d133      	bne.n	80033e8 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_UART_MspInit+0x148>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_UART_MspInit+0x148>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	6413      	str	r3, [r2, #64]	; 0x40
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_UART_MspInit+0x148>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6313      	str	r3, [r2, #48]	; 0x30
 80033ac:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_UART_MspInit+0x148>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033b8:	230c      	movs	r3, #12
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c8:	2307      	movs	r3, #7
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	4619      	mov	r1, r3
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <HAL_UART_MspInit+0x14c>)
 80033d4:	f000 fc40 	bl	8003c58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2026      	movs	r0, #38	; 0x26
 80033de:	f000 f9ac 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033e2:	2026      	movs	r0, #38	; 0x26
 80033e4:	f000 f9c5 	bl	8003772 <HAL_NVIC_EnableIRQ>
}
 80033e8:	bf00      	nop
 80033ea:	3730      	adds	r7, #48	; 0x30
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40011000 	.word	0x40011000
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40004400 	.word	0x40004400

08003404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800343c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800340a:	490e      	ldr	r1, [pc, #56]	; (8003444 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003410:	e002      	b.n	8003418 <LoopCopyDataInit>

08003412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003416:	3304      	adds	r3, #4

08003418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800341c:	d3f9      	bcc.n	8003412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341e:	4a0b      	ldr	r2, [pc, #44]	; (800344c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003420:	4c0b      	ldr	r4, [pc, #44]	; (8003450 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003424:	e001      	b.n	800342a <LoopFillZerobss>

08003426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003428:	3204      	adds	r2, #4

0800342a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800342c:	d3fb      	bcc.n	8003426 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800342e:	f7ff fed7 	bl	80031e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003432:	f007 feb3 	bl	800b19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003436:	f7fe ff2d 	bl	8002294 <main>
  bx  lr    
 800343a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800343c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003444:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003448:	0800ca74 	.word	0x0800ca74
  ldr r2, =_sbss
 800344c:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003450:	20001ecc 	.word	0x20001ecc

08003454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003454:	e7fe      	b.n	8003454 <ADC_IRQHandler>
	...

08003458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_Init+0x40>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_Init+0x40>)
 8003462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_Init+0x40>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_Init+0x40>)
 800346e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_Init+0x40>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a07      	ldr	r2, [pc, #28]	; (8003498 <HAL_Init+0x40>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003480:	2003      	movs	r0, #3
 8003482:	f000 f94f 	bl	8003724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003486:	2000      	movs	r0, #0
 8003488:	f000 f808 	bl	800349c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800348c:	f7ff fe02 	bl	8003094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023c00 	.word	0x40023c00

0800349c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_InitTick+0x54>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <HAL_InitTick+0x58>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4619      	mov	r1, r3
 80034ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f967 	bl	800378e <HAL_SYSTICK_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00e      	b.n	80034e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b0f      	cmp	r3, #15
 80034ce:	d80a      	bhi.n	80034e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034d0:	2200      	movs	r2, #0
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034d8:	f000 f92f 	bl	800373a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034dc:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <HAL_InitTick+0x5c>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	2000000c 	.word	0x2000000c
 80034f4:	20000014 	.word	0x20000014
 80034f8:	20000010 	.word	0x20000010

080034fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003500:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_IncTick+0x20>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_IncTick+0x24>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4413      	add	r3, r2
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <HAL_IncTick+0x24>)
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000014 	.word	0x20000014
 8003520:	2000028c 	.word	0x2000028c

08003524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return uwTick;
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_GetTick+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	2000028c 	.word	0x2000028c

0800353c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff ffee 	bl	8003524 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003554:	d005      	beq.n	8003562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003556:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_Delay+0x44>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003562:	bf00      	nop
 8003564:	f7ff ffde 	bl	8003524 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d8f7      	bhi.n	8003564 <HAL_Delay+0x28>
  {
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000014 	.word	0x20000014

08003584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	60d3      	str	r3, [r2, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_GetPriorityGrouping+0x18>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0307 	and.w	r3, r3, #7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4907      	ldr	r1, [pc, #28]	; (8003620 <__NVIC_EnableIRQ+0x38>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e100 	.word	0xe000e100

08003624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db0a      	blt.n	800364e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	490c      	ldr	r1, [pc, #48]	; (8003670 <__NVIC_SetPriority+0x4c>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	0112      	lsls	r2, r2, #4
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	440b      	add	r3, r1
 8003648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800364c:	e00a      	b.n	8003664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <__NVIC_SetPriority+0x50>)
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3b04      	subs	r3, #4
 800365c:	0112      	lsls	r2, r2, #4
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	440b      	add	r3, r1
 8003662:	761a      	strb	r2, [r3, #24]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f1c3 0307 	rsb	r3, r3, #7
 8003692:	2b04      	cmp	r3, #4
 8003694:	bf28      	it	cs
 8003696:	2304      	movcs	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3304      	adds	r3, #4
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d902      	bls.n	80036a8 <NVIC_EncodePriority+0x30>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3b03      	subs	r3, #3
 80036a6:	e000      	b.n	80036aa <NVIC_EncodePriority+0x32>
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	401a      	ands	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43d9      	mvns	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	4313      	orrs	r3, r2
         );
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d301      	bcc.n	80036f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <SysTick_Config+0x40>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fe:	210f      	movs	r1, #15
 8003700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003704:	f7ff ff8e 	bl	8003624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SysTick_Config+0x40>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <SysTick_Config+0x40>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff29 	bl	8003584 <__NVIC_SetPriorityGrouping>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800374c:	f7ff ff3e 	bl	80035cc <__NVIC_GetPriorityGrouping>
 8003750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	f7ff ff8e 	bl	8003678 <NVIC_EncodePriority>
 800375c:	4602      	mov	r2, r0
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff5d 	bl	8003624 <__NVIC_SetPriority>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff31 	bl	80035e8 <__NVIC_EnableIRQ>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ffa2 	bl	80036e0 <SysTick_Config>
 800379c:	4603      	mov	r3, r0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff feb6 	bl	8003524 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d008      	beq.n	80037d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e052      	b.n	800387e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0216 	bic.w	r2, r2, #22
 80037e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695a      	ldr	r2, [r3, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <HAL_DMA_Abort+0x62>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0208 	bic.w	r2, r2, #8
 8003816:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003828:	e013      	b.n	8003852 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800382a:	f7ff fe7b 	bl	8003524 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b05      	cmp	r3, #5
 8003836:	d90c      	bls.n	8003852 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2203      	movs	r2, #3
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e015      	b.n	800387e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e4      	bne.n	800382a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	223f      	movs	r2, #63	; 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d004      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e00c      	b.n	80038be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2205      	movs	r2, #5
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_FLASH_Program+0xa0>)
 80038e0:	7e1b      	ldrb	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_FLASH_Program+0x1e>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e03b      	b.n	8003962 <HAL_FLASH_Program+0x96>
 80038ea:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_FLASH_Program+0xa0>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f4:	f000 f870 	bl	80039d8 <FLASH_WaitForLastOperation>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d12b      	bne.n	800395a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003908:	783b      	ldrb	r3, [r7, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f000 f91b 	bl	8003b48 <FLASH_Program_Byte>
 8003912:	e016      	b.n	8003942 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d105      	bne.n	8003926 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800391a:	883b      	ldrh	r3, [r7, #0]
 800391c:	4619      	mov	r1, r3
 800391e:	68b8      	ldr	r0, [r7, #8]
 8003920:	f000 f8ee 	bl	8003b00 <FLASH_Program_HalfWord>
 8003924:	e00d      	b.n	8003942 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d105      	bne.n	8003938 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4619      	mov	r1, r3
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f000 f8c3 	bl	8003abc <FLASH_Program_Word>
 8003936:	e004      	b.n	8003942 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800393c:	68b8      	ldr	r0, [r7, #8]
 800393e:	f000 f88b 	bl	8003a58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003942:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003946:	f000 f847 	bl	80039d8 <FLASH_WaitForLastOperation>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <HAL_FLASH_Program+0xa4>)
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <HAL_FLASH_Program+0xa4>)
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <HAL_FLASH_Program+0xa0>)
 800395c:	2200      	movs	r2, #0
 800395e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000290 	.word	0x20000290
 8003970:	40023c00 	.word	0x40023c00

08003974 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800397e:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_FLASH_Unlock+0x38>)
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0b      	bge.n	800399e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <HAL_FLASH_Unlock+0x38>)
 8003988:	4a09      	ldr	r2, [pc, #36]	; (80039b0 <HAL_FLASH_Unlock+0x3c>)
 800398a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_FLASH_Unlock+0x38>)
 800398e:	4a09      	ldr	r2, [pc, #36]	; (80039b4 <HAL_FLASH_Unlock+0x40>)
 8003990:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003992:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_FLASH_Unlock+0x38>)
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	da01      	bge.n	800399e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800399e:	79fb      	ldrb	r3, [r7, #7]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40023c00 	.word	0x40023c00
 80039b0:	45670123 	.word	0x45670123
 80039b4:	cdef89ab 	.word	0xcdef89ab

080039b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039e4:	4b1a      	ldr	r3, [pc, #104]	; (8003a50 <FLASH_WaitForLastOperation+0x78>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80039ea:	f7ff fd9b 	bl	8003524 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80039f0:	e010      	b.n	8003a14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f8:	d00c      	beq.n	8003a14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <FLASH_WaitForLastOperation+0x38>
 8003a00:	f7ff fd90 	bl	8003524 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d201      	bcs.n	8003a14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e019      	b.n	8003a48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003a14:	4b0f      	ldr	r3, [pc, #60]	; (8003a54 <FLASH_WaitForLastOperation+0x7c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e8      	bne.n	80039f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003a20:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <FLASH_WaitForLastOperation+0x7c>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <FLASH_WaitForLastOperation+0x7c>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <FLASH_WaitForLastOperation+0x7c>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a3e:	f000 f8a5 	bl	8003b8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
  
}  
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000290 	.word	0x20000290
 8003a54:	40023c00 	.word	0x40023c00

08003a58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003a7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	4a0d      	ldr	r2, [pc, #52]	; (8003ab8 <FLASH_Program_DoubleWord+0x60>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003a8e:	f3bf 8f6f 	isb	sy
}
 8003a92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	000a      	movs	r2, r1
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	3104      	adds	r1, #4
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40023c00 	.word	0x40023c00

08003abc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <FLASH_Program_Word+0x40>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <FLASH_Program_Word+0x40>)
 8003acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <FLASH_Program_Word+0x40>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <FLASH_Program_Word+0x40>)
 8003ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003adc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ade:	4b07      	ldr	r3, [pc, #28]	; (8003afc <FLASH_Program_Word+0x40>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a06      	ldr	r2, [pc, #24]	; (8003afc <FLASH_Program_Word+0x40>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	601a      	str	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4a06      	ldr	r2, [pc, #24]	; (8003b44 <FLASH_Program_HalfWord+0x44>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	801a      	strh	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00

08003b48 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <FLASH_Program_Byte+0x40>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	701a      	strb	r2, [r3, #0]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00

08003b8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003b90:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b9c:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f043 0310 	orr.w	r3, r3, #16
 8003ba4:	4a2b      	ldr	r2, [pc, #172]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003ba6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003baa:	2210      	movs	r2, #16
 8003bac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f043 0308 	orr.w	r3, r3, #8
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003bc4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003bc8:	2220      	movs	r2, #32
 8003bca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f043 0304 	orr.w	r3, r3, #4
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003be2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003bf6:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f043 0302 	orr.w	r3, r3, #2
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003c00:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003c04:	2280      	movs	r2, #128	; 0x80
 8003c06:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	4a0d      	ldr	r2, [pc, #52]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003c1e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c26:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f043 0320 	orr.w	r3, r3, #32
 8003c3c:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <FLASH_SetErrorCode+0xc8>)
 8003c3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <FLASH_SetErrorCode+0xc4>)
 8003c42:	2202      	movs	r2, #2
 8003c44:	60da      	str	r2, [r3, #12]
  }
}
 8003c46:	bf00      	nop
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40023c00 	.word	0x40023c00
 8003c54:	20000290 	.word	0x20000290

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e159      	b.n	8003f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 8148 	bne.w	8003f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d005      	beq.n	8003caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d017      	beq.n	8003d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d123      	bne.n	8003d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a2 	beq.w	8003f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b57      	ldr	r3, [pc, #348]	; (8003f40 <HAL_GPIO_Init+0x2e8>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	4a56      	ldr	r2, [pc, #344]	; (8003f40 <HAL_GPIO_Init+0x2e8>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dec:	6453      	str	r3, [r2, #68]	; 0x44
 8003dee:	4b54      	ldr	r3, [pc, #336]	; (8003f40 <HAL_GPIO_Init+0x2e8>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfa:	4a52      	ldr	r2, [pc, #328]	; (8003f44 <HAL_GPIO_Init+0x2ec>)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	3302      	adds	r3, #2
 8003e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	220f      	movs	r2, #15
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a49      	ldr	r2, [pc, #292]	; (8003f48 <HAL_GPIO_Init+0x2f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d019      	beq.n	8003e5a <HAL_GPIO_Init+0x202>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a48      	ldr	r2, [pc, #288]	; (8003f4c <HAL_GPIO_Init+0x2f4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_GPIO_Init+0x1fe>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a47      	ldr	r2, [pc, #284]	; (8003f50 <HAL_GPIO_Init+0x2f8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00d      	beq.n	8003e52 <HAL_GPIO_Init+0x1fa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a46      	ldr	r2, [pc, #280]	; (8003f54 <HAL_GPIO_Init+0x2fc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <HAL_GPIO_Init+0x1f6>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a45      	ldr	r2, [pc, #276]	; (8003f58 <HAL_GPIO_Init+0x300>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_GPIO_Init+0x1f2>
 8003e46:	2304      	movs	r3, #4
 8003e48:	e008      	b.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e4a:	2307      	movs	r3, #7
 8003e4c:	e006      	b.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e004      	b.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e002      	b.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_GPIO_Init+0x204>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f002 0203 	and.w	r2, r2, #3
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	4093      	lsls	r3, r2
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e6c:	4935      	ldr	r1, [pc, #212]	; (8003f44 <HAL_GPIO_Init+0x2ec>)
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9e:	4a2f      	ldr	r2, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec8:	4a24      	ldr	r2, [pc, #144]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ef8:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f1c:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <HAL_GPIO_Init+0x304>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3301      	adds	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b0f      	cmp	r3, #15
 8003f2c:	f67f aea2 	bls.w	8003c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40013800 	.word	0x40013800
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	40020400 	.word	0x40020400
 8003f50:	40020800 	.word	0x40020800
 8003f54:	40020c00 	.word	0x40020c00
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40013c00 	.word	0x40013c00

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f7c:	e003      	b.n	8003f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	041a      	lsls	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f94:	b08f      	sub	sp, #60	; 0x3c
 8003f96:	af0a      	add	r7, sp, #40	; 0x28
 8003f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e10f      	b.n	80041c4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f006 fdce 	bl	800ab60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 f8b5 	bl	8007152 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	687e      	ldr	r6, [r7, #4]
 8003ff0:	466d      	mov	r5, sp
 8003ff2:	f106 0410 	add.w	r4, r6, #16
 8003ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004002:	e885 0003 	stmia.w	r5, {r0, r1}
 8004006:	1d33      	adds	r3, r6, #4
 8004008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800400a:	6838      	ldr	r0, [r7, #0]
 800400c:	f002 ff8c 	bl	8006f28 <USB_CoreInit>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e0d0      	b.n	80041c4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f003 f8a3 	bl	8007174 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402e:	2300      	movs	r3, #0
 8004030:	73fb      	strb	r3, [r7, #15]
 8004032:	e04a      	b.n	80040ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	333d      	adds	r3, #61	; 0x3d
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	333c      	adds	r3, #60	; 0x3c
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	b298      	uxth	r0, r3
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	3344      	adds	r3, #68	; 0x44
 8004070:	4602      	mov	r2, r0
 8004072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004074:	7bfa      	ldrb	r2, [r7, #15]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	3340      	adds	r3, #64	; 0x40
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	3348      	adds	r3, #72	; 0x48
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334c      	adds	r3, #76	; 0x4c
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040b0:	7bfa      	ldrb	r2, [r7, #15]
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	4613      	mov	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	3354      	adds	r3, #84	; 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	3301      	adds	r3, #1
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3af      	bcc.n	8004034 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e044      	b.n	8004164 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040f0:	7bfa      	ldrb	r2, [r7, #15]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800411c:	7bfa      	ldrb	r2, [r7, #15]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004148:	7bfa      	ldrb	r2, [r7, #15]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	3301      	adds	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d3b5      	bcc.n	80040da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	687e      	ldr	r6, [r7, #4]
 8004176:	466d      	mov	r5, sp
 8004178:	f106 0410 	add.w	r4, r6, #16
 800417c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800417e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004184:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004188:	e885 0003 	stmia.w	r5, {r0, r1}
 800418c:	1d33      	adds	r3, r6, #4
 800418e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004190:	6838      	ldr	r0, [r7, #0]
 8004192:	f003 f83b 	bl	800720c <USB_DevInit>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e00d      	b.n	80041c4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 f98a 	bl	80084d6 <USB_DevDisconnect>

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_PCD_Start+0x1c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e020      	b.n	800422a <HAL_PCD_Start+0x5e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d109      	bne.n	800420c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d005      	beq.n	800420c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f002 ff8d 	bl	8007130 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f004 f93a 	bl	8008494 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004232:	b590      	push	{r4, r7, lr}
 8004234:	b08d      	sub	sp, #52	; 0x34
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f004 f9f8 	bl	800863e <USB_GetMode>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 848a 	bne.w	8004b6a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f004 f95c 	bl	8008518 <USB_ReadInterrupts>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8480 	beq.w	8004b68 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f004 f949 	bl	8008518 <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b02      	cmp	r3, #2
 800428e:	d107      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f002 0202 	and.w	r2, r2, #2
 800429e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f004 f937 	bl	8008518 <USB_ReadInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d161      	bne.n	8004378 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0210 	bic.w	r2, r2, #16
 80042c2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f003 020f 	and.w	r2, r3, #15
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	3304      	adds	r3, #4
 80042e2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	0c5b      	lsrs	r3, r3, #17
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d124      	bne.n	800433a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d035      	beq.n	8004368 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800430a:	b29b      	uxth	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	6a38      	ldr	r0, [r7, #32]
 8004310:	f003 ff6e 	bl	80081f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	091b      	lsrs	r3, r3, #4
 800431c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004320:	441a      	add	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004332:	441a      	add	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	621a      	str	r2, [r3, #32]
 8004338:	e016      	b.n	8004368 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	0c5b      	lsrs	r3, r3, #17
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	2b06      	cmp	r3, #6
 8004344:	d110      	bne.n	8004368 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800434c:	2208      	movs	r2, #8
 800434e:	4619      	mov	r1, r3
 8004350:	6a38      	ldr	r0, [r7, #32]
 8004352:	f003 ff4d 	bl	80081f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004362:	441a      	add	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0210 	orr.w	r2, r2, #16
 8004376:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f004 f8cb 	bl	8008518 <USB_ReadInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004388:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800438c:	f040 80a7 	bne.w	80044de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f004 f8d0 	bl	800853e <USB_ReadDevAllOutEpInterrupt>
 800439e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80043a0:	e099      	b.n	80044d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 808e 	beq.w	80044ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f004 f8f4 	bl	80085a6 <USB_ReadDevOutEPInterrupt>
 80043be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00c      	beq.n	80043e4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	461a      	mov	r2, r3
 80043d8:	2301      	movs	r3, #1
 80043da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80043dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fec2 	bl	8005168 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	461a      	mov	r2, r3
 80043fc:	2308      	movs	r3, #8
 80043fe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 ff98 	bl	8005338 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f003 0310 	and.w	r3, r3, #16
 800440e:	2b00      	cmp	r3, #0
 8004410:	d008      	beq.n	8004424 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2310      	movs	r3, #16
 8004422:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d030      	beq.n	8004490 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b80      	cmp	r3, #128	; 0x80
 8004438:	d109      	bne.n	800444e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	4613      	mov	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	78db      	ldrb	r3, [r3, #3]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d108      	bne.n	800447e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2200      	movs	r2, #0
 8004470:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f006 fc7b 	bl	800ad74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2302      	movs	r3, #2
 800448e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	461a      	mov	r2, r3
 80044a8:	2320      	movs	r3, #32
 80044aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	461a      	mov	r2, r3
 80044c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	3301      	adds	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f47f af62 	bne.w	80043a2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f004 f818 	bl	8008518 <USB_ReadInterrupts>
 80044e8:	4603      	mov	r3, r0
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044f2:	f040 80db 	bne.w	80046ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f004 f839 	bl	8008572 <USB_ReadDevAllInEpInterrupt>
 8004500:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004506:	e0cd      	b.n	80046a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80c2 	beq.w	8004698 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f004 f85f 	bl	80085e2 <USB_ReadDevInEPInterrupt>
 8004524:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d057      	beq.n	80045e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	2201      	movs	r2, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	43db      	mvns	r3, r3
 800454a:	69f9      	ldr	r1, [r7, #28]
 800454c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004550:	4013      	ands	r3, r2
 8004552:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004560:	461a      	mov	r2, r3
 8004562:	2301      	movs	r3, #1
 8004564:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d132      	bne.n	80045d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	334c      	adds	r3, #76	; 0x4c
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4403      	add	r3, r0
 800458e:	3348      	adds	r3, #72	; 0x48
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4419      	add	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4403      	add	r3, r0
 80045a2:	334c      	adds	r3, #76	; 0x4c
 80045a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d113      	bne.n	80045d4 <HAL_PCD_IRQHandler+0x3a2>
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	4613      	mov	r3, r2
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3354      	adds	r3, #84	; 0x54
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045cc:	461a      	mov	r2, r3
 80045ce:	2101      	movs	r1, #1
 80045d0:	f004 f866 	bl	80086a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f006 fb4f 	bl	800ac7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f6:	461a      	mov	r2, r3
 80045f8:	2308      	movs	r3, #8
 80045fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	2310      	movs	r3, #16
 8004616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462e:	461a      	mov	r2, r3
 8004630:	2340      	movs	r3, #64	; 0x40
 8004632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d023      	beq.n	8004686 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800463e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004640:	6a38      	ldr	r0, [r7, #32]
 8004642:	f002 ff47 	bl	80074d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	4613      	mov	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	3338      	adds	r3, #56	; 0x38
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	4413      	add	r3, r2
 8004656:	3304      	adds	r3, #4
 8004658:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	78db      	ldrb	r3, [r3, #3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d108      	bne.n	8004674 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f006 fb92 	bl	800ad98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	461a      	mov	r2, r3
 8004682:	2302      	movs	r3, #2
 8004684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fcdb 	bl	800504e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	3301      	adds	r3, #1
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	085b      	lsrs	r3, r3, #1
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f47f af2e 	bne.w	8004508 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f003 ff31 	bl	8008518 <USB_ReadInterrupts>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c0:	d122      	bne.n	8004708 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d108      	bne.n	80046f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046e8:	2100      	movs	r1, #0
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fec2 	bl	8005474 <HAL_PCDEx_LPM_Callback>
 80046f0:	e002      	b.n	80046f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f006 fb30 	bl	800ad58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f003 ff03 	bl	8008518 <USB_ReadInterrupts>
 8004712:	4603      	mov	r3, r0
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471c:	d112      	bne.n	8004744 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d102      	bne.n	8004734 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f006 faec 	bl	800ad0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004742:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fee5 	bl	8008518 <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	f040 80b7 	bne.w	80048ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2110      	movs	r1, #16
 8004776:	4618      	mov	r0, r3
 8004778:	f002 feac 	bl	80074d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477c:	2300      	movs	r3, #0
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004780:	e046      	b.n	8004810 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	461a      	mov	r2, r3
 8004790:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004794:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a6:	0151      	lsls	r1, r2, #5
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	440a      	add	r2, r1
 80047ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004808:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	3301      	adds	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004816:	429a      	cmp	r2, r3
 8004818:	d3b3      	bcc.n	8004782 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004828:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800482c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f043 030b 	orr.w	r3, r3, #11
 800484a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	69fa      	ldr	r2, [r7, #28]
 8004858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800485c:	f043 030b 	orr.w	r3, r3, #11
 8004860:	6453      	str	r3, [r2, #68]	; 0x44
 8004862:	e015      	b.n	8004890 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	69fa      	ldr	r2, [r7, #28]
 800486e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004872:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004876:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800487a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488a:	f043 030b 	orr.w	r3, r3, #11
 800488e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048b4:	461a      	mov	r2, r3
 80048b6:	f003 fef3 	bl	80086a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695a      	ldr	r2, [r3, #20]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 fe22 	bl	8008518 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048de:	d124      	bne.n	800492a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f003 feb8 	bl	800865a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 fe6d 	bl	80075ce <USB_GetDevSpeed>
 80048f4:	4603      	mov	r3, r0
 80048f6:	461a      	mov	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681c      	ldr	r4, [r3, #0]
 8004900:	f001 fa28 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8004904:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	4620      	mov	r0, r4
 8004910:	f002 fb6c 	bl	8006fec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f006 f9da 	bl	800acce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004928:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f003 fdf2 	bl	8008518 <USB_ReadInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d10a      	bne.n	8004954 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f006 f9b7 	bl	800acb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f002 0208 	and.w	r2, r2, #8
 8004952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f003 fddd 	bl	8008518 <USB_ReadInterrupts>
 800495e:	4603      	mov	r3, r0
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b80      	cmp	r3, #128	; 0x80
 8004966:	d122      	bne.n	80049ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004974:	2301      	movs	r3, #1
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	e014      	b.n	80049a4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d105      	bne.n	800499e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	b2db      	uxtb	r3, r3
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fb27 	bl	8004fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3e5      	bcc.n	800497a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 fdb0 	bl	8008518 <USB_ReadInterrupts>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c2:	d13b      	bne.n	8004a3c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049c4:	2301      	movs	r3, #1
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
 80049c8:	e02b      	b.n	8004a22 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3340      	adds	r3, #64	; 0x40
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d115      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80049f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	da12      	bge.n	8004a1c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	333f      	adds	r3, #63	; 0x3f
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fae8 	bl	8004fec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	3301      	adds	r3, #1
 8004a20:	627b      	str	r3, [r7, #36]	; 0x24
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3ce      	bcc.n	80049ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 fd69 	bl	8008518 <USB_ReadInterrupts>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a50:	d155      	bne.n	8004afe <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a52:	2301      	movs	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	e045      	b.n	8004ae4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d12e      	bne.n	8004ade <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da2b      	bge.n	8004ade <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d121      	bne.n	8004ade <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ada:	6053      	str	r3, [r2, #4]
            break;
 8004adc:	e007      	b.n	8004aee <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3b4      	bcc.n	8004a58 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 fd08 	bl	8008518 <USB_ReadInterrupts>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d10a      	bne.n	8004b2a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f006 f951 	bl	800adbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fcf2 	bl	8008518 <USB_ReadInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d115      	bne.n	8004b6a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f006 f941 	bl	800add8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e000      	b.n	8004b6a <HAL_PCD_IRQHandler+0x938>
      return;
 8004b68:	bf00      	nop
    }
  }
}
 8004b6a:	3734      	adds	r7, #52	; 0x34
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd90      	pop	{r4, r7, pc}

08004b70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_PCD_SetAddress+0x1a>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e013      	b.n	8004bb2 <HAL_PCD_SetAddress+0x42>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f003 fc50 	bl	8008448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	4608      	mov	r0, r1
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4603      	mov	r3, r0
 8004bca:	70fb      	strb	r3, [r7, #3]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	803b      	strh	r3, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da0f      	bge.n	8004c00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	f003 020f 	and.w	r2, r3, #15
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3338      	adds	r3, #56	; 0x38
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	705a      	strb	r2, [r3, #1]
 8004bfe:	e00f      	b.n	8004c20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	f003 020f 	and.w	r2, r3, #15
 8004c06:	4613      	mov	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c2c:	883a      	ldrh	r2, [r7, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	78ba      	ldrb	r2, [r7, #2]
 8004c36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c4a:	78bb      	ldrb	r3, [r7, #2]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d102      	bne.n	8004c56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_PCD_EP_Open+0xaa>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e00e      	b.n	8004c82 <HAL_PCD_EP_Open+0xc8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 fcd0 	bl	8007618 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c80:	7afb      	ldrb	r3, [r7, #11]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da0f      	bge.n	8004cbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 020f 	and.w	r2, r3, #15
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	3338      	adds	r3, #56	; 0x38
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	705a      	strb	r2, [r3, #1]
 8004cbc:	e00f      	b.n	8004cde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d101      	bne.n	8004cf8 <HAL_PCD_EP_Close+0x6e>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	e00e      	b.n	8004d16 <HAL_PCD_EP_Close+0x8c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f002 fd0e 	bl	8007728 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b086      	sub	sp, #24
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d2e:	7afb      	ldrb	r3, [r7, #11]
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	4613      	mov	r3, r2
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2200      	movs	r2, #0
 8004d58:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d102      	bne.n	8004d7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d7a:	7afb      	ldrb	r3, [r7, #11]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d109      	bne.n	8004d98 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	f002 ffed 	bl	8007d70 <USB_EP0StartXfer>
 8004d96:	e008      	b.n	8004daa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	6979      	ldr	r1, [r7, #20]
 8004da6:	f002 fd9b 	bl	80078e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 020f 	and.w	r2, r3, #15
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	460b      	mov	r3, r1
 8004df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	f003 020f 	and.w	r2, r3, #15
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	3338      	adds	r3, #56	; 0x38
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	3304      	adds	r3, #4
 8004e0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2201      	movs	r2, #1
 8004e22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e24:	7afb      	ldrb	r3, [r7, #11]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d102      	bne.n	8004e3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	461a      	mov	r2, r3
 8004e54:	6979      	ldr	r1, [r7, #20]
 8004e56:	f002 ff8b 	bl	8007d70 <USB_EP0StartXfer>
 8004e5a:	e008      	b.n	8004e6e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	6979      	ldr	r1, [r7, #20]
 8004e6a:	f002 fd39 	bl	80078e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d901      	bls.n	8004e96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e050      	b.n	8004f38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	da0f      	bge.n	8004ebe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	f003 020f 	and.w	r2, r3, #15
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	3338      	adds	r3, #56	; 0x38
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	705a      	strb	r2, [r3, #1]
 8004ebc:	e00d      	b.n	8004eda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4413      	add	r3, r2
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_PCD_EP_SetStall+0x82>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e01e      	b.n	8004f38 <HAL_PCD_EP_SetStall+0xc0>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68f9      	ldr	r1, [r7, #12]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f003 f9c9 	bl	80082a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	b2d9      	uxtb	r1, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f003 fbb9 	bl	80086a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	f003 020f 	and.w	r2, r3, #15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d901      	bls.n	8004f5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e042      	b.n	8004fe4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	da0f      	bge.n	8004f86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	3338      	adds	r3, #56	; 0x38
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	705a      	strb	r2, [r3, #1]
 8004f84:	e00f      	b.n	8004fa6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_PCD_EP_ClrStall+0x86>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e00e      	b.n	8004fe4 <HAL_PCD_EP_ClrStall+0xa4>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f003 f9d1 	bl	800837c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da0c      	bge.n	800501a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	f003 020f 	and.w	r2, r3, #15
 8005006:	4613      	mov	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	3338      	adds	r3, #56	; 0x38
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e00c      	b.n	8005034 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	f003 020f 	and.w	r2, r3, #15
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	3304      	adds	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	4618      	mov	r0, r3
 800503c:	f002 fff0 	bl	8008020 <USB_EPStopXfer>
 8005040:	4603      	mov	r3, r0
 8005042:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005044:	7afb      	ldrb	r3, [r7, #11]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08a      	sub	sp, #40	; 0x28
 8005052:	af02      	add	r7, sp, #8
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	3338      	adds	r3, #56	; 0x38
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	3304      	adds	r3, #4
 8005074:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	429a      	cmp	r2, r3
 8005080:	d901      	bls.n	8005086 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06c      	b.n	8005160 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3303      	adds	r3, #3
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050aa:	e02b      	b.n	8005104 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d902      	bls.n	80050c8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3303      	adds	r3, #3
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6919      	ldr	r1, [r3, #16]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	4603      	mov	r3, r0
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f003 f844 	bl	8008174 <USB_WritePacket>

    ep->xfer_buff  += len;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	441a      	add	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	b29b      	uxth	r3, r3
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	429a      	cmp	r2, r3
 8005118:	d809      	bhi.n	800512e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1a      	ldr	r2, [r3, #32]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005122:	429a      	cmp	r2, r3
 8005124:	d203      	bcs.n	800512e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1be      	bne.n	80050ac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699a      	ldr	r2, [r3, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	429a      	cmp	r2, r3
 8005138:	d811      	bhi.n	800515e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	2201      	movs	r2, #1
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	43db      	mvns	r3, r3
 8005154:	6939      	ldr	r1, [r7, #16]
 8005156:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515a:	4013      	ands	r3, r2
 800515c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	333c      	adds	r3, #60	; 0x3c
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d17b      	bne.n	8005296 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	4a61      	ldr	r2, [pc, #388]	; (8005330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	f240 80b9 	bls.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80b3 	beq.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	461a      	mov	r2, r3
 80051cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d0:	6093      	str	r3, [r2, #8]
 80051d2:	e0a7      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	2320      	movs	r3, #32
 80051ee:	6093      	str	r3, [r2, #8]
 80051f0:	e098      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f040 8093 	bne.w	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4a4b      	ldr	r2, [pc, #300]	; (8005330 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d90f      	bls.n	8005226 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	461a      	mov	r2, r3
 800521e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005222:	6093      	str	r3, [r2, #8]
 8005224:	e07e      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	0159      	lsls	r1, r3, #5
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	440b      	add	r3, r1
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d114      	bne.n	8005288 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005270:	461a      	mov	r2, r3
 8005272:	2101      	movs	r1, #1
 8005274:	f003 fa14 	bl	80086a0 <USB_EP0_OutStart>
 8005278:	e006      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	441a      	add	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f005 fcda 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
 8005294:	e046      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d124      	bne.n	80052e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	461a      	mov	r2, r3
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	6093      	str	r3, [r2, #8]
 80052bc:	e032      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	2320      	movs	r3, #32
 80052d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f005 fcb1 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
 80052e6:	e01d      	b.n	8005324 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d114      	bne.n	8005318 <PCD_EP_OutXfrComplete_int+0x1b0>
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d108      	bne.n	8005318 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005310:	461a      	mov	r2, r3
 8005312:	2100      	movs	r1, #0
 8005314:	f003 f9c4 	bl	80086a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f005 fc92 	bl	800ac48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3720      	adds	r7, #32
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	4f54300a 	.word	0x4f54300a
 8005334:	4f54310a 	.word	0x4f54310a

08005338 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	333c      	adds	r3, #60	; 0x3c
 8005350:	3304      	adds	r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d90e      	bls.n	800538c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005384:	461a      	mov	r2, r3
 8005386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800538a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f005 fc49 	bl	800ac24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d90c      	bls.n	80053b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d108      	bne.n	80053b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053ac:	461a      	mov	r2, r3
 80053ae:	2101      	movs	r1, #1
 80053b0:	f003 f976 	bl	80086a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	4f54300a 	.word	0x4f54300a

080053c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d107      	bne.n	80053f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053e2:	883b      	ldrh	r3, [r7, #0]
 80053e4:	0419      	lsls	r1, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28
 80053f0:	e028      	b.n	8005444 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	0c1b      	lsrs	r3, r3, #16
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	4413      	add	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e00d      	b.n	8005422 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3340      	adds	r3, #64	; 0x40
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	0c1b      	lsrs	r3, r3, #16
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4413      	add	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	3301      	adds	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	7bfa      	ldrb	r2, [r7, #15]
 8005424:	78fb      	ldrb	r3, [r7, #3]
 8005426:	3b01      	subs	r3, #1
 8005428:	429a      	cmp	r2, r3
 800542a:	d3ec      	bcc.n	8005406 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800542c:	883b      	ldrh	r3, [r7, #0]
 800542e:	0418      	lsls	r0, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	3b01      	subs	r3, #1
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	4302      	orrs	r2, r0
 800543c:	3340      	adds	r3, #64	; 0x40
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	460b      	mov	r3, r1
 800545c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054aa:	4b88      	ldr	r3, [pc, #544]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fd ffee 	bl	8003524 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd ffea 	bl	8003524 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	; 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fd ffda 	bl	8003524 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005574:	f7fd ffd6 	bl	8003524 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	; 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055a2:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fd ff8f 	bl	8003524 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fd ff8b 	bl	8003524 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fd ff6e 	bl	8003524 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800564c:	f7fd ff6a 	bl	8003524 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fd ff4e 	bl	8003524 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fd ff4a 	bl	8003524 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fd ff37 	bl	8003524 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fd ff33 	bl	8003524 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	; 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fd fef3 	bl	8003524 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fd feef 	bl	8003524 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	; 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	; 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	; 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	; 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd feb4 	bl	8003524 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fd feb0 	bl	8003524 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fd fe9e 	bl	8003524 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fd fe9a 	bl	8003524 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fd fe6e 	bl	8003524 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584c:	f7fd fe6a 	bl	8003524 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fd fe43 	bl	8003524 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fd fe3f 	bl	8003524 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fe2c 	bl	8003524 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fd fe28 	bl	8003524 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	; (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fd fd5a 	bl	8003524 <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fd fd56 	bl	8003524 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	; (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	; (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd fcba 	bl	800349c <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800ca18 	.word	0x0800ca18
 8005b40:	2000000c 	.word	0x2000000c
 8005b44:	20000010 	.word	0x20000010

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b094      	sub	sp, #80	; 0x50
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	647b      	str	r3, [r7, #68]	; 0x44
 8005b54:	2300      	movs	r3, #0
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	2300      	movs	r3, #0
 8005b5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b79      	ldr	r3, [pc, #484]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80e1 	bhi.w	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e0db      	b.n	8005d34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b73      	ldr	r3, [pc, #460]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b80:	e0db      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b73      	ldr	r3, [pc, #460]	; (8005d50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b86:	e0d8      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b6d      	ldr	r3, [pc, #436]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d063      	beq.n	8005c66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b6a      	ldr	r3, [pc, #424]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	0159      	lsls	r1, r3, #5
 8005bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bcc:	0150      	lsls	r0, r2, #5
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	1a51      	subs	r1, r2, r1
 8005bd6:	6139      	str	r1, [r7, #16]
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb63 0301 	sbc.w	r3, r3, r1
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bec:	4659      	mov	r1, fp
 8005bee:	018b      	lsls	r3, r1, #6
 8005bf0:	4651      	mov	r1, sl
 8005bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	018a      	lsls	r2, r1, #6
 8005bfa:	4651      	mov	r1, sl
 8005bfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005c00:	4659      	mov	r1, fp
 8005c02:	eb63 0901 	sbc.w	r9, r3, r1
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c1a:	4690      	mov	r8, r2
 8005c1c:	4699      	mov	r9, r3
 8005c1e:	4623      	mov	r3, r4
 8005c20:	eb18 0303 	adds.w	r3, r8, r3
 8005c24:	60bb      	str	r3, [r7, #8]
 8005c26:	462b      	mov	r3, r5
 8005c28:	eb49 0303 	adc.w	r3, r9, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	024b      	lsls	r3, r1, #9
 8005c3e:	4621      	mov	r1, r4
 8005c40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c44:	4621      	mov	r1, r4
 8005c46:	024a      	lsls	r2, r1, #9
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c58:	f7fa fb1a 	bl	8000290 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c64:	e058      	b.n	8005d18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c66:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	4611      	mov	r1, r2
 8005c72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c76:	623b      	str	r3, [r7, #32]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c80:	4642      	mov	r2, r8
 8005c82:	464b      	mov	r3, r9
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f04f 0100 	mov.w	r1, #0
 8005c8c:	0159      	lsls	r1, r3, #5
 8005c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c92:	0150      	lsls	r0, r2, #5
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4641      	mov	r1, r8
 8005c9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005cbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	00eb      	lsls	r3, r5, #3
 8005cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cce:	00e2      	lsls	r2, r4, #3
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	18e3      	adds	r3, r4, r3
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cee:	4629      	mov	r1, r5
 8005cf0:	028b      	lsls	r3, r1, #10
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	028a      	lsls	r2, r1, #10
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d02:	2200      	movs	r2, #0
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	61fa      	str	r2, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	f7fa fac0 	bl	8000290 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4613      	mov	r3, r2
 8005d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d18:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3750      	adds	r7, #80	; 0x50
 8005d40:	46bd      	mov	sp, r7
 8005d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d46:	bf00      	nop
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200

08005d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d70:	f7ff fff0 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0a9b      	lsrs	r3, r3, #10
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	; (8005d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800ca28 	.word	0x0800ca28

08005d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d98:	f7ff ffdc 	bl	8005d54 <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0b5b      	lsrs	r3, r3, #13
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	; (8005db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	0800ca28 	.word	0x0800ca28

08005dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e03f      	b.n	8005e4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fd fa62 	bl	80032ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2224      	movs	r2, #36	; 0x24
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68da      	ldr	r2, [r3, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fe1d 	bl	8006a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2220      	movs	r2, #32
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b08a      	sub	sp, #40	; 0x28
 8005e5a:	af02      	add	r7, sp, #8
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d17c      	bne.n	8005f70 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_UART_Transmit+0x2c>
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e075      	b.n	8005f72 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_UART_Transmit+0x3e>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e06e      	b.n	8005f72 <HAL_UART_Transmit+0x11c>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2221      	movs	r2, #33	; 0x21
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eaa:	f7fd fb3b 	bl	8003524 <HAL_GetTick>
 8005eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d108      	bne.n	8005ed8 <HAL_UART_Transmit+0x82>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	61bb      	str	r3, [r7, #24]
 8005ed6:	e003      	b.n	8005ee0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ee8:	e02a      	b.n	8005f40 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fb9b 	bl	8006630 <UART_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e036      	b.n	8005f72 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	3302      	adds	r3, #2
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e007      	b.n	8005f32 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1cf      	bne.n	8005eea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2140      	movs	r1, #64	; 0x40
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fb6b 	bl	8006630 <UART_WaitOnFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e006      	b.n	8005f72 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e000      	b.n	8005f72 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f70:	2302      	movs	r3, #2
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3720      	adds	r7, #32
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b08a      	sub	sp, #40	; 0x28
 8005f7e:	af02      	add	r7, sp, #8
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	603b      	str	r3, [r7, #0]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	f040 808c 	bne.w	80060b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_UART_Receive+0x2e>
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e084      	b.n	80060b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Receive+0x40>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e07d      	b.n	80060b6 <HAL_UART_Receive+0x13c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2222      	movs	r2, #34	; 0x22
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fd faa5 	bl	8003524 <HAL_GetTick>
 8005fda:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	88fa      	ldrh	r2, [r7, #6]
 8005fe0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	88fa      	ldrh	r2, [r7, #6]
 8005fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff0:	d108      	bne.n	8006004 <HAL_UART_Receive+0x8a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d104      	bne.n	8006004 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	61bb      	str	r3, [r7, #24]
 8006002:	e003      	b.n	800600c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006008:	2300      	movs	r3, #0
 800600a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006014:	e043      	b.n	800609e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2200      	movs	r2, #0
 800601e:	2120      	movs	r1, #32
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fb05 	bl	8006630 <UART_WaitOnFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e042      	b.n	80060b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	b29a      	uxth	r2, r3
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	3302      	adds	r3, #2
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e01f      	b.n	8006090 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d007      	beq.n	800606a <HAL_UART_Receive+0xf0>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <HAL_UART_Receive+0xfe>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d106      	bne.n	8006078 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	b2da      	uxtb	r2, r3
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	e008      	b.n	800608a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006084:	b2da      	uxtb	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	3301      	adds	r3, #1
 800608e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1b6      	bne.n	8006016 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b0ba      	sub	sp, #232	; 0xe8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <HAL_UART_IRQHandler+0x66>
 8006112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fbd3 	bl	80068ca <UART_Receive_IT>
      return;
 8006124:	e256      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 80de 	beq.w	80062ec <HAL_UART_IRQHandler+0x22c>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d106      	bne.n	800614a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800613c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006140:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80d1 	beq.w	80062ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800614a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_UART_IRQHandler+0xae>
 8006156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d005      	beq.n	800616e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	f003 0304 	and.w	r3, r3, #4
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <HAL_UART_IRQHandler+0xd2>
 800617a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f043 0202 	orr.w	r2, r3, #2
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <HAL_UART_IRQHandler+0xf6>
 800619e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f043 0204 	orr.w	r2, r3, #4
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <HAL_UART_IRQHandler+0x126>
 80061c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 81ed 	beq.w	80065ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_UART_IRQHandler+0x14e>
 80061fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fb5e 	bl	80068ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	bf0c      	ite	eq
 800621c:	2301      	moveq	r3, #1
 800621e:	2300      	movne	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <HAL_UART_IRQHandler+0x17a>
 8006232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d04f      	beq.n	80062da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa66 	bl	800670c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d141      	bne.n	80062d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3314      	adds	r3, #20
 8006254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800625c:	e853 3f00 	ldrex	r3, [r3]
 8006260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3314      	adds	r3, #20
 8006276:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800627a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800627e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006286:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800628a:	e841 2300 	strex	r3, r2, [r1]
 800628e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1d9      	bne.n	800624e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d013      	beq.n	80062ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	4a7d      	ldr	r2, [pc, #500]	; (800649c <HAL_UART_IRQHandler+0x3dc>)
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd fae9 	bl	8003886 <HAL_DMA_Abort_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d016      	beq.n	80062e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062c4:	4610      	mov	r0, r2
 80062c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00e      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f99a 	bl	8006604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e00a      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f996 	bl	8006604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d8:	e006      	b.n	80062e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f992 	bl	8006604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062e6:	e170      	b.n	80065ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	bf00      	nop
    return;
 80062ea:	e16e      	b.n	80065ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f040 814a 	bne.w	800658a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 8143 	beq.w	800658a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 813c 	beq.w	800658a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006312:	2300      	movs	r3, #0
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	f040 80b4 	bne.w	80064a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006344:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8140 	beq.w	80065ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006356:	429a      	cmp	r2, r3
 8006358:	f080 8139 	bcs.w	80065ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006362:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636e:	f000 8088 	beq.w	8006482 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800638c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	330c      	adds	r3, #12
 800639a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1d9      	bne.n	8006372 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e1      	bne.n	80063be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3314      	adds	r3, #20
 8006400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800640a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3314      	adds	r3, #20
 800641a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800641e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800642c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e3      	bne.n	80063fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	e853 3f00 	ldrex	r3, [r3]
 800644e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006452:	f023 0310 	bic.w	r3, r3, #16
 8006456:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	330c      	adds	r3, #12
 8006460:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006464:	65ba      	str	r2, [r7, #88]	; 0x58
 8006466:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800646a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e3      	bne.n	8006440 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	4618      	mov	r0, r3
 800647e:	f7fd f992 	bl	80037a6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800648a:	b29b      	uxth	r3, r3
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	b29b      	uxth	r3, r3
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f8c0 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006498:	e099      	b.n	80065ce <HAL_UART_IRQHandler+0x50e>
 800649a:	bf00      	nop
 800649c:	080067d3 	.word	0x080067d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f000 808b 	beq.w	80065d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8086 	beq.w	80065d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d0:	e853 3f00 	ldrex	r3, [r3]
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064ea:	647a      	str	r2, [r7, #68]	; 0x44
 80064ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e3      	bne.n	80064c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	623b      	str	r3, [r7, #32]
   return(result);
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006522:	633a      	str	r2, [r7, #48]	; 0x30
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e3      	bne.n	80064fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	60fb      	str	r3, [r7, #12]
   return(result);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0310 	bic.w	r3, r3, #16
 800655a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	330c      	adds	r3, #12
 8006564:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006568:	61fa      	str	r2, [r7, #28]
 800656a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69b9      	ldr	r1, [r7, #24]
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	617b      	str	r3, [r7, #20]
   return(result);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e3      	bne.n	8006544 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800657c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006580:	4619      	mov	r1, r3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f848 	bl	8006618 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006588:	e023      	b.n	80065d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_UART_IRQHandler+0x4ea>
 8006596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800659a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f929 	bl	80067fa <UART_Transmit_IT>
    return;
 80065a8:	e014      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00e      	beq.n	80065d4 <HAL_UART_IRQHandler+0x514>
 80065b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d008      	beq.n	80065d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f969 	bl	800689a <UART_EndTransmit_IT>
    return;
 80065c8:	e004      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
    return;
 80065ca:	bf00      	nop
 80065cc:	e002      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
      return;
 80065ce:	bf00      	nop
 80065d0:	e000      	b.n	80065d4 <HAL_UART_IRQHandler+0x514>
      return;
 80065d2:	bf00      	nop
  }
}
 80065d4:	37e8      	adds	r7, #232	; 0xe8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop

080065dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b090      	sub	sp, #64	; 0x40
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4613      	mov	r3, r2
 800663e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006640:	e050      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006648:	d04c      	beq.n	80066e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800664a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664c:	2b00      	cmp	r3, #0
 800664e:	d007      	beq.n	8006660 <UART_WaitOnFlagUntilTimeout+0x30>
 8006650:	f7fc ff68 	bl	8003524 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665c:	429a      	cmp	r2, r3
 800665e:	d241      	bcs.n	80066e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006680:	637a      	str	r2, [r7, #52]	; 0x34
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800668e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	e853 3f00 	ldrex	r3, [r3]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 0301 	bic.w	r3, r3, #1
 80066aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3314      	adds	r3, #20
 80066b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b4:	623a      	str	r2, [r7, #32]
 80066b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	69f9      	ldr	r1, [r7, #28]
 80066ba:	6a3a      	ldr	r2, [r7, #32]
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e5      	bne.n	8006694 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e00f      	b.n	8006704 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	4013      	ands	r3, r2
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	461a      	mov	r2, r3
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d09f      	beq.n	8006642 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3740      	adds	r7, #64	; 0x40
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b095      	sub	sp, #84	; 0x54
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	330c      	adds	r3, #12
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006734:	643a      	str	r2, [r7, #64]	; 0x40
 8006736:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e5      	bne.n	8006714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3314      	adds	r3, #20
 800674e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	61fb      	str	r3, [r7, #28]
   return(result);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f023 0301 	bic.w	r3, r3, #1
 800675e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e5      	bne.n	8006748 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	2b01      	cmp	r3, #1
 8006782:	d119      	bne.n	80067b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60bb      	str	r3, [r7, #8]
   return(result);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	647b      	str	r3, [r7, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	330c      	adds	r3, #12
 80067a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067a4:	61ba      	str	r2, [r7, #24]
 80067a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	613b      	str	r3, [r7, #16]
   return(result);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e5      	bne.n	8006784 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067c6:	bf00      	nop
 80067c8:	3754      	adds	r7, #84	; 0x54
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff ff09 	bl	8006604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b21      	cmp	r3, #33	; 0x21
 800680c:	d13e      	bne.n	800688c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d114      	bne.n	8006842 <UART_Transmit_IT+0x48>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d110      	bne.n	8006842 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006834:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	1c9a      	adds	r2, r3, #2
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	621a      	str	r2, [r3, #32]
 8006840:	e008      	b.n	8006854 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6211      	str	r1, [r2, #32]
 800684c:	781a      	ldrb	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29b      	uxth	r3, r3
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4619      	mov	r1, r3
 8006862:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10f      	bne.n	8006888 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006876:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006886:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	e000      	b.n	800688e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800688c:	2302      	movs	r3, #2
  }
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff fe8e 	bl	80065dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3708      	adds	r7, #8
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08c      	sub	sp, #48	; 0x30
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b22      	cmp	r3, #34	; 0x22
 80068dc:	f040 80ab 	bne.w	8006a36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d117      	bne.n	800691a <UART_Receive_IT+0x50>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d113      	bne.n	800691a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006908:	b29a      	uxth	r2, r3
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	1c9a      	adds	r2, r3, #2
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
 8006918:	e026      	b.n	8006968 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d007      	beq.n	800693e <UART_Receive_IT+0x74>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <UART_Receive_IT+0x82>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e008      	b.n	800695e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006958:	b2da      	uxtb	r2, r3
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29b      	uxth	r3, r3
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	4619      	mov	r1, r3
 8006976:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006978:	2b00      	cmp	r3, #0
 800697a:	d15a      	bne.n	8006a32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0220 	bic.w	r2, r2, #32
 800698a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d135      	bne.n	8006a28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	613b      	str	r3, [r7, #16]
   return(result);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f023 0310 	bic.w	r3, r3, #16
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	330c      	adds	r3, #12
 80069e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e2:	623a      	str	r2, [r7, #32]
 80069e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	69f9      	ldr	r1, [r7, #28]
 80069e8:	6a3a      	ldr	r2, [r7, #32]
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e5      	bne.n	80069c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d10a      	bne.n	8006a1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fdf9 	bl	8006618 <HAL_UARTEx_RxEventCallback>
 8006a26:	e002      	b.n	8006a2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff fde1 	bl	80065f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e002      	b.n	8006a38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3730      	adds	r7, #48	; 0x30
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a44:	b0c0      	sub	sp, #256	; 0x100
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	68d9      	ldr	r1, [r3, #12]
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	ea40 0301 	orr.w	r3, r0, r1
 8006a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	431a      	orrs	r2, r3
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a98:	f021 010c 	bic.w	r1, r1, #12
 8006a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	6999      	ldr	r1, [r3, #24]
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	ea40 0301 	orr.w	r3, r0, r1
 8006ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	4b8f      	ldr	r3, [pc, #572]	; (8006d0c <UART_SetConfig+0x2cc>)
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d005      	beq.n	8006ae0 <UART_SetConfig+0xa0>
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b8d      	ldr	r3, [pc, #564]	; (8006d10 <UART_SetConfig+0x2d0>)
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d104      	bne.n	8006aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7ff f958 	bl	8005d94 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ae8:	e003      	b.n	8006af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aea:	f7ff f93f 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8006aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006afc:	f040 810c 	bne.w	8006d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006b12:	4622      	mov	r2, r4
 8006b14:	462b      	mov	r3, r5
 8006b16:	1891      	adds	r1, r2, r2
 8006b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b1a:	415b      	adcs	r3, r3
 8006b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006b22:	4621      	mov	r1, r4
 8006b24:	eb12 0801 	adds.w	r8, r2, r1
 8006b28:	4629      	mov	r1, r5
 8006b2a:	eb43 0901 	adc.w	r9, r3, r1
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b42:	4690      	mov	r8, r2
 8006b44:	4699      	mov	r9, r3
 8006b46:	4623      	mov	r3, r4
 8006b48:	eb18 0303 	adds.w	r3, r8, r3
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b50:	462b      	mov	r3, r5
 8006b52:	eb49 0303 	adc.w	r3, r9, r3
 8006b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b6e:	460b      	mov	r3, r1
 8006b70:	18db      	adds	r3, r3, r3
 8006b72:	653b      	str	r3, [r7, #80]	; 0x50
 8006b74:	4613      	mov	r3, r2
 8006b76:	eb42 0303 	adc.w	r3, r2, r3
 8006b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b84:	f7f9 fb84 	bl	8000290 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4b61      	ldr	r3, [pc, #388]	; (8006d14 <UART_SetConfig+0x2d4>)
 8006b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	011c      	lsls	r4, r3, #4
 8006b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ba8:	4642      	mov	r2, r8
 8006baa:	464b      	mov	r3, r9
 8006bac:	1891      	adds	r1, r2, r2
 8006bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006bb0:	415b      	adcs	r3, r3
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bb8:	4641      	mov	r1, r8
 8006bba:	eb12 0a01 	adds.w	sl, r2, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bd8:	4692      	mov	sl, r2
 8006bda:	469b      	mov	fp, r3
 8006bdc:	4643      	mov	r3, r8
 8006bde:	eb1a 0303 	adds.w	r3, sl, r3
 8006be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006be6:	464b      	mov	r3, r9
 8006be8:	eb4b 0303 	adc.w	r3, fp, r3
 8006bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c04:	460b      	mov	r3, r1
 8006c06:	18db      	adds	r3, r3, r3
 8006c08:	643b      	str	r3, [r7, #64]	; 0x40
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	eb42 0303 	adc.w	r3, r2, r3
 8006c10:	647b      	str	r3, [r7, #68]	; 0x44
 8006c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006c1a:	f7f9 fb39 	bl	8000290 <__aeabi_uldivmod>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	4b3b      	ldr	r3, [pc, #236]	; (8006d14 <UART_SetConfig+0x2d4>)
 8006c26:	fba3 2301 	umull	r2, r3, r3, r1
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	2264      	movs	r2, #100	; 0x64
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
 8006c32:	1acb      	subs	r3, r1, r3
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006c3a:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <UART_SetConfig+0x2d4>)
 8006c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c48:	441c      	add	r4, r3
 8006c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	464b      	mov	r3, r9
 8006c60:	1891      	adds	r1, r2, r2
 8006c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c64:	415b      	adcs	r3, r3
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	1851      	adds	r1, r2, r1
 8006c70:	6339      	str	r1, [r7, #48]	; 0x30
 8006c72:	4649      	mov	r1, r9
 8006c74:	414b      	adcs	r3, r1
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c84:	4659      	mov	r1, fp
 8006c86:	00cb      	lsls	r3, r1, #3
 8006c88:	4651      	mov	r1, sl
 8006c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c8e:	4651      	mov	r1, sl
 8006c90:	00ca      	lsls	r2, r1, #3
 8006c92:	4610      	mov	r0, r2
 8006c94:	4619      	mov	r1, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	4642      	mov	r2, r8
 8006c9a:	189b      	adds	r3, r3, r2
 8006c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	eb42 0303 	adc.w	r3, r2, r3
 8006ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	18db      	adds	r3, r3, r3
 8006cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	eb42 0303 	adc.w	r3, r2, r3
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006cd6:	f7f9 fadb 	bl	8000290 <__aeabi_uldivmod>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <UART_SetConfig+0x2d4>)
 8006ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	2164      	movs	r1, #100	; 0x64
 8006ce8:	fb01 f303 	mul.w	r3, r1, r3
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	3332      	adds	r3, #50	; 0x32
 8006cf2:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <UART_SetConfig+0x2d4>)
 8006cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf8:	095b      	lsrs	r3, r3, #5
 8006cfa:	f003 0207 	and.w	r2, r3, #7
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4422      	add	r2, r4
 8006d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d08:	e105      	b.n	8006f16 <UART_SetConfig+0x4d6>
 8006d0a:	bf00      	nop
 8006d0c:	40011000 	.word	0x40011000
 8006d10:	40011400 	.word	0x40011400
 8006d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	1891      	adds	r1, r2, r2
 8006d30:	6239      	str	r1, [r7, #32]
 8006d32:	415b      	adcs	r3, r3
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
 8006d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d3a:	4641      	mov	r1, r8
 8006d3c:	1854      	adds	r4, r2, r1
 8006d3e:	4649      	mov	r1, r9
 8006d40:	eb43 0501 	adc.w	r5, r3, r1
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	00eb      	lsls	r3, r5, #3
 8006d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d52:	00e2      	lsls	r2, r4, #3
 8006d54:	4614      	mov	r4, r2
 8006d56:	461d      	mov	r5, r3
 8006d58:	4643      	mov	r3, r8
 8006d5a:	18e3      	adds	r3, r4, r3
 8006d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d60:	464b      	mov	r3, r9
 8006d62:	eb45 0303 	adc.w	r3, r5, r3
 8006d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d7a:	f04f 0200 	mov.w	r2, #0
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d86:	4629      	mov	r1, r5
 8006d88:	008b      	lsls	r3, r1, #2
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d90:	4621      	mov	r1, r4
 8006d92:	008a      	lsls	r2, r1, #2
 8006d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d98:	f7f9 fa7a 	bl	8000290 <__aeabi_uldivmod>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4b60      	ldr	r3, [pc, #384]	; (8006f24 <UART_SetConfig+0x4e4>)
 8006da2:	fba3 2302 	umull	r2, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	011c      	lsls	r4, r3, #4
 8006daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	1891      	adds	r1, r2, r2
 8006dc2:	61b9      	str	r1, [r7, #24]
 8006dc4:	415b      	adcs	r3, r3
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dcc:	4641      	mov	r1, r8
 8006dce:	1851      	adds	r1, r2, r1
 8006dd0:	6139      	str	r1, [r7, #16]
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	414b      	adcs	r3, r1
 8006dd6:	617b      	str	r3, [r7, #20]
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006de4:	4659      	mov	r1, fp
 8006de6:	00cb      	lsls	r3, r1, #3
 8006de8:	4651      	mov	r1, sl
 8006dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dee:	4651      	mov	r1, sl
 8006df0:	00ca      	lsls	r2, r1, #3
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	4642      	mov	r2, r8
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e00:	464b      	mov	r3, r9
 8006e02:	460a      	mov	r2, r1
 8006e04:	eb42 0303 	adc.w	r3, r2, r3
 8006e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006e24:	4649      	mov	r1, r9
 8006e26:	008b      	lsls	r3, r1, #2
 8006e28:	4641      	mov	r1, r8
 8006e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e2e:	4641      	mov	r1, r8
 8006e30:	008a      	lsls	r2, r1, #2
 8006e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006e36:	f7f9 fa2b 	bl	8000290 <__aeabi_uldivmod>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <UART_SetConfig+0x4e4>)
 8006e40:	fba3 1302 	umull	r1, r3, r3, r2
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	2164      	movs	r1, #100	; 0x64
 8006e48:	fb01 f303 	mul.w	r3, r1, r3
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	3332      	adds	r3, #50	; 0x32
 8006e52:	4a34      	ldr	r2, [pc, #208]	; (8006f24 <UART_SetConfig+0x4e4>)
 8006e54:	fba2 2303 	umull	r2, r3, r2, r3
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e5e:	441c      	add	r4, r3
 8006e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e64:	2200      	movs	r2, #0
 8006e66:	673b      	str	r3, [r7, #112]	; 0x70
 8006e68:	677a      	str	r2, [r7, #116]	; 0x74
 8006e6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e6e:	4642      	mov	r2, r8
 8006e70:	464b      	mov	r3, r9
 8006e72:	1891      	adds	r1, r2, r2
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	415b      	adcs	r3, r3
 8006e78:	60fb      	str	r3, [r7, #12]
 8006e7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e7e:	4641      	mov	r1, r8
 8006e80:	1851      	adds	r1, r2, r1
 8006e82:	6039      	str	r1, [r7, #0]
 8006e84:	4649      	mov	r1, r9
 8006e86:	414b      	adcs	r3, r1
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e96:	4659      	mov	r1, fp
 8006e98:	00cb      	lsls	r3, r1, #3
 8006e9a:	4651      	mov	r1, sl
 8006e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ea0:	4651      	mov	r1, sl
 8006ea2:	00ca      	lsls	r2, r1, #3
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4642      	mov	r2, r8
 8006eac:	189b      	adds	r3, r3, r2
 8006eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	eb42 0303 	adc.w	r3, r2, r3
 8006eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ec4:	667a      	str	r2, [r7, #100]	; 0x64
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	008b      	lsls	r3, r1, #2
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006edc:	4641      	mov	r1, r8
 8006ede:	008a      	lsls	r2, r1, #2
 8006ee0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ee4:	f7f9 f9d4 	bl	8000290 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <UART_SetConfig+0x4e4>)
 8006eee:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	2164      	movs	r1, #100	; 0x64
 8006ef6:	fb01 f303 	mul.w	r3, r1, r3
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	011b      	lsls	r3, r3, #4
 8006efe:	3332      	adds	r3, #50	; 0x32
 8006f00:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <UART_SetConfig+0x4e4>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	f003 020f 	and.w	r2, r3, #15
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4422      	add	r2, r4
 8006f14:	609a      	str	r2, [r3, #8]
}
 8006f16:	bf00      	nop
 8006f18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f22:	bf00      	nop
 8006f24:	51eb851f 	.word	0x51eb851f

08006f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f28:	b084      	sub	sp, #16
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	f107 001c 	add.w	r0, r7, #28
 8006f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d122      	bne.n	8006f86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d105      	bne.n	8006f7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 fbee 	bl	800875c <USB_CoreReset>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	e01a      	b.n	8006fbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fbe2 	bl	800875c <USB_CoreReset>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	639a      	str	r2, [r3, #56]	; 0x38
 8006fae:	e005      	b.n	8006fbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d10b      	bne.n	8006fda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f043 0206 	orr.w	r2, r3, #6
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe6:	b004      	add	sp, #16
 8006fe8:	4770      	bx	lr
	...

08006fec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d165      	bne.n	80070cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4a41      	ldr	r2, [pc, #260]	; (8007108 <USB_SetTurnaroundTime+0x11c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d906      	bls.n	8007016 <USB_SetTurnaroundTime+0x2a>
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <USB_SetTurnaroundTime+0x120>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d202      	bcs.n	8007016 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007010:	230f      	movs	r3, #15
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e062      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4a3c      	ldr	r2, [pc, #240]	; (800710c <USB_SetTurnaroundTime+0x120>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d306      	bcc.n	800702c <USB_SetTurnaroundTime+0x40>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4a3b      	ldr	r2, [pc, #236]	; (8007110 <USB_SetTurnaroundTime+0x124>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d202      	bcs.n	800702c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007026:	230e      	movs	r3, #14
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e057      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4a38      	ldr	r2, [pc, #224]	; (8007110 <USB_SetTurnaroundTime+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d306      	bcc.n	8007042 <USB_SetTurnaroundTime+0x56>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4a37      	ldr	r2, [pc, #220]	; (8007114 <USB_SetTurnaroundTime+0x128>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d202      	bcs.n	8007042 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800703c:	230d      	movs	r3, #13
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	e04c      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4a33      	ldr	r2, [pc, #204]	; (8007114 <USB_SetTurnaroundTime+0x128>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d306      	bcc.n	8007058 <USB_SetTurnaroundTime+0x6c>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4a32      	ldr	r2, [pc, #200]	; (8007118 <USB_SetTurnaroundTime+0x12c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d802      	bhi.n	8007058 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007052:	230c      	movs	r3, #12
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e041      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <USB_SetTurnaroundTime+0x12c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d906      	bls.n	800706e <USB_SetTurnaroundTime+0x82>
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4a2e      	ldr	r2, [pc, #184]	; (800711c <USB_SetTurnaroundTime+0x130>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d802      	bhi.n	800706e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007068:	230b      	movs	r3, #11
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	e036      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <USB_SetTurnaroundTime+0x130>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d906      	bls.n	8007084 <USB_SetTurnaroundTime+0x98>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <USB_SetTurnaroundTime+0x134>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d802      	bhi.n	8007084 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800707e:	230a      	movs	r3, #10
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e02b      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4a26      	ldr	r2, [pc, #152]	; (8007120 <USB_SetTurnaroundTime+0x134>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d906      	bls.n	800709a <USB_SetTurnaroundTime+0xae>
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a25      	ldr	r2, [pc, #148]	; (8007124 <USB_SetTurnaroundTime+0x138>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d202      	bcs.n	800709a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007094:	2309      	movs	r3, #9
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e020      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	4a21      	ldr	r2, [pc, #132]	; (8007124 <USB_SetTurnaroundTime+0x138>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d306      	bcc.n	80070b0 <USB_SetTurnaroundTime+0xc4>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4a20      	ldr	r2, [pc, #128]	; (8007128 <USB_SetTurnaroundTime+0x13c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d802      	bhi.n	80070b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070aa:	2308      	movs	r3, #8
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e015      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <USB_SetTurnaroundTime+0x13c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d906      	bls.n	80070c6 <USB_SetTurnaroundTime+0xda>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4a1c      	ldr	r2, [pc, #112]	; (800712c <USB_SetTurnaroundTime+0x140>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d202      	bcs.n	80070c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070c0:	2307      	movs	r3, #7
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	e00a      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070c6:	2306      	movs	r3, #6
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e007      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070d2:	2309      	movs	r3, #9
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	e001      	b.n	80070dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070d8:	2309      	movs	r3, #9
 80070da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80070f4:	431a      	orrs	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	00d8acbf 	.word	0x00d8acbf
 800710c:	00e4e1c0 	.word	0x00e4e1c0
 8007110:	00f42400 	.word	0x00f42400
 8007114:	01067380 	.word	0x01067380
 8007118:	011a499f 	.word	0x011a499f
 800711c:	01312cff 	.word	0x01312cff
 8007120:	014ca43f 	.word	0x014ca43f
 8007124:	016e3600 	.word	0x016e3600
 8007128:	01a6ab1f 	.word	0x01a6ab1f
 800712c:	01e84800 	.word	0x01e84800

08007130 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f043 0201 	orr.w	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f023 0201 	bic.w	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d115      	bne.n	80071c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071a2:	2001      	movs	r0, #1
 80071a4:	f7fc f9ca 	bl	800353c <HAL_Delay>
      ms++;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3301      	adds	r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fa45 	bl	800863e <USB_GetMode>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d01e      	beq.n	80071f8 <USB_SetCurrentMode+0x84>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b31      	cmp	r3, #49	; 0x31
 80071be:	d9f0      	bls.n	80071a2 <USB_SetCurrentMode+0x2e>
 80071c0:	e01a      	b.n	80071f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d115      	bne.n	80071f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071d4:	2001      	movs	r0, #1
 80071d6:	f7fc f9b1 	bl	800353c <HAL_Delay>
      ms++;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3301      	adds	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fa2c 	bl	800863e <USB_GetMode>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <USB_SetCurrentMode+0x84>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b31      	cmp	r3, #49	; 0x31
 80071f0:	d9f0      	bls.n	80071d4 <USB_SetCurrentMode+0x60>
 80071f2:	e001      	b.n	80071f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e005      	b.n	8007204 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b32      	cmp	r3, #50	; 0x32
 80071fc:	d101      	bne.n	8007202 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800720c:	b084      	sub	sp, #16
 800720e:	b580      	push	{r7, lr}
 8007210:	b086      	sub	sp, #24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800721a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e009      	b.n	8007240 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3340      	adds	r3, #64	; 0x40
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	2200      	movs	r2, #0
 8007238:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	3301      	adds	r3, #1
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b0e      	cmp	r3, #14
 8007244:	d9f2      	bls.n	800722c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d11c      	bne.n	8007286 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725a:	f043 0302 	orr.w	r3, r3, #2
 800725e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	639a      	str	r2, [r3, #56]	; 0x38
 8007284:	e00b      	b.n	800729e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072a4:	461a      	mov	r2, r3
 80072a6:	2300      	movs	r3, #0
 80072a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b0:	4619      	mov	r1, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b8:	461a      	mov	r2, r3
 80072ba:	680b      	ldr	r3, [r1, #0]
 80072bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d10c      	bne.n	80072de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072ca:	2100      	movs	r1, #0
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f965 	bl	800759c <USB_SetDevSpeed>
 80072d2:	e008      	b.n	80072e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f960 	bl	800759c <USB_SetDevSpeed>
 80072dc:	e003      	b.n	80072e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072de:	2103      	movs	r1, #3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f95b 	bl	800759c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072e6:	2110      	movs	r1, #16
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8f3 	bl	80074d4 <USB_FlushTxFifo>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f91f 	bl	800753c <USB_FlushRxFifo>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	461a      	mov	r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800731a:	461a      	mov	r2, r3
 800731c:	2300      	movs	r3, #0
 800731e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007326:	461a      	mov	r2, r3
 8007328:	2300      	movs	r3, #0
 800732a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	e043      	b.n	80073ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007348:	d118      	bne.n	800737c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10a      	bne.n	8007366 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735c:	461a      	mov	r2, r3
 800735e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	e013      	b.n	800738e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	461a      	mov	r2, r3
 8007374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e008      	b.n	800738e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	461a      	mov	r2, r3
 800738a:	2300      	movs	r3, #0
 800738c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739a:	461a      	mov	r2, r3
 800739c:	2300      	movs	r3, #0
 800739e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	461a      	mov	r2, r3
 80073ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3301      	adds	r3, #1
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3b7      	bcc.n	8007332 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	e043      	b.n	8007450 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073de:	d118      	bne.n	8007412 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10a      	bne.n	80073fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	461a      	mov	r2, r3
 80073f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	e013      	b.n	8007424 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	461a      	mov	r2, r3
 800740a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	e008      	b.n	8007424 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741e:	461a      	mov	r2, r3
 8007420:	2300      	movs	r3, #0
 8007422:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007430:	461a      	mov	r2, r3
 8007432:	2300      	movs	r3, #0
 8007434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007442:	461a      	mov	r2, r3
 8007444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007448:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	3301      	adds	r3, #1
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	429a      	cmp	r2, r3
 8007456:	d3b7      	bcc.n	80073c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800746a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007478:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f043 0210 	orr.w	r2, r3, #16
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699a      	ldr	r2, [r3, #24]
 8007490:	4b0f      	ldr	r3, [pc, #60]	; (80074d0 <USB_DevInit+0x2c4>)
 8007492:	4313      	orrs	r3, r2
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d005      	beq.n	80074aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	f043 0208 	orr.w	r2, r3, #8
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80074aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d107      	bne.n	80074c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074b8:	f043 0304 	orr.w	r3, r3, #4
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074cc:	b004      	add	sp, #16
 80074ce:	4770      	bx	lr
 80074d0:	803c3800 	.word	0x803c3800

080074d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4a13      	ldr	r2, [pc, #76]	; (8007538 <USB_FlushTxFifo+0x64>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d901      	bls.n	80074f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e01b      	b.n	800752c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	daf2      	bge.n	80074e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	019b      	lsls	r3, r3, #6
 8007504:	f043 0220 	orr.w	r2, r3, #32
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a08      	ldr	r2, [pc, #32]	; (8007538 <USB_FlushTxFifo+0x64>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e006      	b.n	800752c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0320 	and.w	r3, r3, #32
 8007526:	2b20      	cmp	r3, #32
 8007528:	d0f0      	beq.n	800750c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	00030d40 	.word	0x00030d40

0800753c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a11      	ldr	r2, [pc, #68]	; (8007598 <USB_FlushRxFifo+0x5c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d901      	bls.n	800755a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e018      	b.n	800758c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	daf2      	bge.n	8007548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2210      	movs	r2, #16
 800756a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4a08      	ldr	r2, [pc, #32]	; (8007598 <USB_FlushRxFifo+0x5c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d901      	bls.n	800757e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e006      	b.n	800758c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	2b10      	cmp	r3, #16
 8007588:	d0f0      	beq.n	800756c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	00030d40 	.word	0x00030d40

0800759c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075bc:	4313      	orrs	r3, r2
 80075be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3714      	adds	r7, #20
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b087      	sub	sp, #28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 0306 	and.w	r3, r3, #6
 80075e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
 80075f2:	e00a      	b.n	800760a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d002      	beq.n	8007600 <USB_GetDevSpeed+0x32>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	d102      	bne.n	8007606 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007600:	2302      	movs	r3, #2
 8007602:	75fb      	strb	r3, [r7, #23]
 8007604:	e001      	b.n	800760a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007606:	230f      	movs	r3, #15
 8007608:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d13a      	bne.n	80076aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	69da      	ldr	r2, [r3, #28]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	2101      	movs	r1, #1
 8007646:	fa01 f303 	lsl.w	r3, r1, r3
 800764a:	b29b      	uxth	r3, r3
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007652:	4313      	orrs	r3, r2
 8007654:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d155      	bne.n	8007718 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	791b      	ldrb	r3, [r3, #4]
 8007686:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007688:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	059b      	lsls	r3, r3, #22
 800768e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007690:	4313      	orrs	r3, r2
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	e036      	b.n	8007718 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	2101      	movs	r1, #1
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076c8:	4313      	orrs	r3, r2
 80076ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d11a      	bne.n	8007718 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	015a      	lsls	r2, r3, #5
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	791b      	ldrb	r3, [r3, #4]
 80076fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076fe:	430b      	orrs	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007716:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d161      	bne.n	8007808 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775a:	d11f      	bne.n	800779c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007776:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	0151      	lsls	r1, r2, #5
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	440a      	add	r2, r1
 8007792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	2101      	movs	r1, #1
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	43db      	mvns	r3, r3
 80077b6:	68f9      	ldr	r1, [r7, #12]
 80077b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077bc:	4013      	ands	r3, r2
 80077be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	2101      	movs	r1, #1
 80077d2:	fa01 f303 	lsl.w	r3, r1, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	43db      	mvns	r3, r3
 80077da:	68f9      	ldr	r1, [r7, #12]
 80077dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e0:	4013      	ands	r3, r2
 80077e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	0159      	lsls	r1, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	440b      	add	r3, r1
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	4619      	mov	r1, r3
 8007800:	4b35      	ldr	r3, [pc, #212]	; (80078d8 <USB_DeactivateEndpoint+0x1b0>)
 8007802:	4013      	ands	r3, r2
 8007804:	600b      	str	r3, [r1, #0]
 8007806:	e060      	b.n	80078ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800781a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800781e:	d11f      	bne.n	8007860 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800783e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800785e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 030f 	and.w	r3, r3, #15
 8007870:	2101      	movs	r1, #1
 8007872:	fa01 f303 	lsl.w	r3, r1, r3
 8007876:	041b      	lsls	r3, r3, #16
 8007878:	43db      	mvns	r3, r3
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007880:	4013      	ands	r3, r2
 8007882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	69da      	ldr	r2, [r3, #28]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	2101      	movs	r1, #1
 8007896:	fa01 f303 	lsl.w	r3, r1, r3
 800789a:	041b      	lsls	r3, r3, #16
 800789c:	43db      	mvns	r3, r3
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a4:	4013      	ands	r3, r2
 80078a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	0159      	lsls	r1, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	440b      	add	r3, r1
 80078be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c2:	4619      	mov	r1, r3
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <USB_DeactivateEndpoint+0x1b4>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	ec337800 	.word	0xec337800
 80078dc:	eff37800 	.word	0xeff37800

080078e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08a      	sub	sp, #40	; 0x28
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	785b      	ldrb	r3, [r3, #1]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	f040 815c 	bne.w	8007bba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d132      	bne.n	8007970 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007924:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007928:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800792c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	0151      	lsls	r1, r2, #5
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	440a      	add	r2, r1
 8007944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800794c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	0151      	lsls	r1, r2, #5
 8007960:	69fa      	ldr	r2, [r7, #28]
 8007962:	440a      	add	r2, r1
 8007964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007968:	0cdb      	lsrs	r3, r3, #19
 800796a:	04db      	lsls	r3, r3, #19
 800796c:	6113      	str	r3, [r2, #16]
 800796e:	e074      	b.n	8007a5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	0151      	lsls	r1, r2, #5
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	440a      	add	r2, r1
 8007986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798a:	0cdb      	lsrs	r3, r3, #19
 800798c:	04db      	lsls	r3, r3, #19
 800798e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	69ba      	ldr	r2, [r7, #24]
 80079a0:	0151      	lsls	r1, r2, #5
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	440a      	add	r2, r1
 80079a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6999      	ldr	r1, [r3, #24]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	440b      	add	r3, r1
 80079cc:	1e59      	subs	r1, r3, #1
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80079d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079d8:	4b9d      	ldr	r3, [pc, #628]	; (8007c50 <USB_EPStartXfer+0x370>)
 80079da:	400b      	ands	r3, r1
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	0148      	lsls	r0, r1, #5
 80079e0:	69f9      	ldr	r1, [r7, #28]
 80079e2:	4401      	add	r1, r0
 80079e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079e8:	4313      	orrs	r3, r2
 80079ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a02:	69b9      	ldr	r1, [r7, #24]
 8007a04:	0148      	lsls	r0, r1, #5
 8007a06:	69f9      	ldr	r1, [r7, #28]
 8007a08:	4401      	add	r1, r0
 8007a0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d11f      	bne.n	8007a5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d14b      	bne.n	8007af8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d009      	beq.n	8007a7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a74:	461a      	mov	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	791b      	ldrb	r3, [r3, #4]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d128      	bne.n	8007ad6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d110      	bne.n	8007ab6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	e00f      	b.n	8007ad6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	e133      	b.n	8007d60 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	0151      	lsls	r1, r2, #5
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	440a      	add	r2, r1
 8007b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	791b      	ldrb	r3, [r3, #4]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d015      	beq.n	8007b4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 811b 	beq.w	8007d60 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b40:	69f9      	ldr	r1, [r7, #28]
 8007b42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b46:	4313      	orrs	r3, r2
 8007b48:	634b      	str	r3, [r1, #52]	; 0x34
 8007b4a:	e109      	b.n	8007d60 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d110      	bne.n	8007b7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	e00f      	b.n	8007b9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6919      	ldr	r1, [r3, #16]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	b298      	uxth	r0, r3
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fade 	bl	8008174 <USB_WritePacket>
 8007bb8:	e0d2      	b.n	8007d60 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	0151      	lsls	r1, r2, #5
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	440a      	add	r2, r1
 8007bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd4:	0cdb      	lsrs	r3, r3, #19
 8007bd6:	04db      	lsls	r3, r3, #19
 8007bd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bfc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d126      	bne.n	8007c54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c1c:	69b9      	ldr	r1, [r7, #24]
 8007c1e:	0148      	lsls	r0, r1, #5
 8007c20:	69f9      	ldr	r1, [r7, #28]
 8007c22:	4401      	add	r1, r0
 8007c24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c4a:	6113      	str	r3, [r2, #16]
 8007c4c:	e03a      	b.n	8007cc4 <USB_EPStartXfer+0x3e4>
 8007c4e:	bf00      	nop
 8007c50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c68:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	8afa      	ldrh	r2, [r7, #22]
 8007c70:	fb03 f202 	mul.w	r2, r3, r2
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	691a      	ldr	r2, [r3, #16]
 8007c86:	8afb      	ldrh	r3, [r7, #22]
 8007c88:	04d9      	lsls	r1, r3, #19
 8007c8a:	4b38      	ldr	r3, [pc, #224]	; (8007d6c <USB_EPStartXfer+0x48c>)
 8007c8c:	400b      	ands	r3, r1
 8007c8e:	69b9      	ldr	r1, [r7, #24]
 8007c90:	0148      	lsls	r0, r1, #5
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	4401      	add	r1, r0
 8007c96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	0148      	lsls	r0, r1, #5
 8007cb8:	69f9      	ldr	r1, [r7, #28]
 8007cba:	4401      	add	r1, r0
 8007cbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10d      	bne.n	8007ce6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6919      	ldr	r1, [r3, #16]
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	791b      	ldrb	r3, [r3, #4]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d128      	bne.n	8007d40 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d110      	bne.n	8007d20 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	69fa      	ldr	r2, [r7, #28]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	e00f      	b.n	8007d40 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	1ff80000 	.word	0x1ff80000

08007d70 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	f040 80ce 	bne.w	8007f2e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d132      	bne.n	8007e00 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df8:	0cdb      	lsrs	r3, r3, #19
 8007dfa:	04db      	lsls	r3, r3, #19
 8007dfc:	6113      	str	r3, [r2, #16]
 8007dfe:	e04e      	b.n	8007e9e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1a:	0cdb      	lsrs	r3, r3, #19
 8007e1c:	04db      	lsls	r3, r3, #19
 8007e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e42:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	699a      	ldr	r2, [r3, #24]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d903      	bls.n	8007e58 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	015a      	lsls	r2, r3, #5
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	0151      	lsls	r1, r2, #5
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	440a      	add	r2, r1
 8007e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	015a      	lsls	r2, r3, #5
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e8e:	6939      	ldr	r1, [r7, #16]
 8007e90:	0148      	lsls	r0, r1, #5
 8007e92:	6979      	ldr	r1, [r7, #20]
 8007e94:	4401      	add	r1, r0
 8007e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d11e      	bne.n	8007ee2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	e097      	b.n	8008012 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	0151      	lsls	r1, r2, #5
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	440a      	add	r2, r1
 8007ef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007efc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f00:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8083 	beq.w	8008012 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f22:	6979      	ldr	r1, [r7, #20]
 8007f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	634b      	str	r3, [r1, #52]	; 0x34
 8007f2c:	e071      	b.n	8008012 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f48:	0cdb      	lsrs	r3, r3, #19
 8007f4a:	04db      	lsls	r3, r3, #19
 8007f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	0151      	lsls	r1, r2, #5
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	440a      	add	r2, r1
 8007fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fc0:	6939      	ldr	r1, [r7, #16]
 8007fc2:	0148      	lsls	r0, r1, #5
 8007fc4:	6979      	ldr	r1, [r7, #20]
 8007fc6:	4401      	add	r1, r0
 8007fc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10d      	bne.n	8007ff2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6919      	ldr	r1, [r3, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fee:	460a      	mov	r2, r1
 8007ff0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008010:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d14a      	bne.n	80080d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008056:	f040 8086 	bne.w	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800807c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d902      	bls.n	80080b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
          break;
 80080b6:	e056      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d0:	d0e7      	beq.n	80080a2 <USB_EPStopXfer+0x82>
 80080d2:	e048      	b.n	8008166 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ec:	d13b      	bne.n	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800810c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008110:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008142:	4293      	cmp	r3, r2
 8008144:	d902      	bls.n	800814c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
          break;
 800814a:	e00c      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d0e7      	beq.n	8008136 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008174:	b480      	push	{r7}
 8008176:	b089      	sub	sp, #36	; 0x24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4611      	mov	r1, r2
 8008180:	461a      	mov	r2, r3
 8008182:	460b      	mov	r3, r1
 8008184:	71fb      	strb	r3, [r7, #7]
 8008186:	4613      	mov	r3, r2
 8008188:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d123      	bne.n	80081e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800819a:	88bb      	ldrh	r3, [r7, #4]
 800819c:	3303      	adds	r3, #3
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e018      	b.n	80081da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	031a      	lsls	r2, r3, #12
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	461a      	mov	r2, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	3301      	adds	r3, #1
 80081c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	3301      	adds	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3e2      	bcc.n	80081a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3724      	adds	r7, #36	; 0x24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b08b      	sub	sp, #44	; 0x2c
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	b29b      	uxth	r3, r3
 800820c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	e014      	b.n	8008246 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	601a      	str	r2, [r3, #0]
    pDest++;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	3301      	adds	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	3301      	adds	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	3301      	adds	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	3301      	adds	r3, #1
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	3301      	adds	r3, #1
 8008244:	623b      	str	r3, [r7, #32]
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	429a      	cmp	r2, r3
 800824c:	d3e6      	bcc.n	800821c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800824e:	8bfb      	ldrh	r3, [r7, #30]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01e      	beq.n	8008292 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825e:	461a      	mov	r2, r3
 8008260:	f107 0310 	add.w	r3, r7, #16
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	701a      	strb	r2, [r3, #0]
      i++;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	3301      	adds	r3, #1
 800827e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008286:	8bfb      	ldrh	r3, [r7, #30]
 8008288:	3b01      	subs	r3, #1
 800828a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800828c:	8bfb      	ldrh	r3, [r7, #30]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ea      	bne.n	8008268 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008294:	4618      	mov	r0, r3
 8008296:	372c      	adds	r7, #44	; 0x2c
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d12c      	bne.n	8008316 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	db12      	blt.n	80082f4 <USB_EPSetStall+0x54>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00f      	beq.n	80082f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	e02b      	b.n	800836e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	db12      	blt.n	800834e <USB_EPSetStall+0xae>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00f      	beq.n	800834e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800834c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800836c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d128      	bne.n	80083ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d003      	beq.n	80083c8 <USB_EPClearStall+0x4c>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d138      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e027      	b.n	800843a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d003      	beq.n	800841a <USB_EPClearStall+0x9e>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d10f      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008466:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800846a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f023 0302 	bic.w	r3, r3, #2
 80084c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4013      	ands	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008530:	68fb      	ldr	r3, [r7, #12]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	4013      	ands	r3, r2
 8008560:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0c1b      	lsrs	r3, r3, #16
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4013      	ands	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	b29b      	uxth	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	4013      	ands	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085d4:	68bb      	ldr	r3, [r7, #8]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b087      	sub	sp, #28
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4013      	ands	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008630:	68bb      	ldr	r3, [r7, #8]
}
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008674:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008678:	f023 0307 	bic.w	r3, r3, #7
 800867c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	460b      	mov	r3, r1
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	333c      	adds	r3, #60	; 0x3c
 80086b6:	3304      	adds	r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4a26      	ldr	r2, [pc, #152]	; (8008758 <USB_EP0_OutStart+0xb8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d90a      	bls.n	80086da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086d4:	d101      	bne.n	80086da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e037      	b.n	800874a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e0:	461a      	mov	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008708:	f043 0318 	orr.w	r3, r3, #24
 800870c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800871c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008720:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d10f      	bne.n	8008748 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008742:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008746:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	4f54300a 	.word	0x4f54300a

0800875c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3301      	adds	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	4a13      	ldr	r2, [pc, #76]	; (80087c0 <USB_CoreReset+0x64>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d901      	bls.n	800877a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e01b      	b.n	80087b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	2b00      	cmp	r3, #0
 8008780:	daf2      	bge.n	8008768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f043 0201 	orr.w	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3301      	adds	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a09      	ldr	r2, [pc, #36]	; (80087c0 <USB_CoreReset+0x64>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d901      	bls.n	80087a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e006      	b.n	80087b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d0f0      	beq.n	8008792 <USB_CoreReset+0x36>

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	00030d40 	.word	0x00030d40

080087c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087d4:	f002 fc98 	bl	800b108 <USBD_static_malloc>
 80087d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d109      	bne.n	80087f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	32b0      	adds	r2, #176	; 0xb0
 80087ea:	2100      	movs	r1, #0
 80087ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e0d4      	b.n	800899e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80087f8:	2100      	movs	r1, #0
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f002 fd00 	bl	800b200 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	32b0      	adds	r2, #176	; 0xb0
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32b0      	adds	r2, #176	; 0xb0
 800881a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	7c1b      	ldrb	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d138      	bne.n	800889e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800882c:	4b5e      	ldr	r3, [pc, #376]	; (80089a8 <USBD_CDC_Init+0x1e4>)
 800882e:	7819      	ldrb	r1, [r3, #0]
 8008830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008834:	2202      	movs	r2, #2
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f002 fb43 	bl	800aec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800883c:	4b5a      	ldr	r3, [pc, #360]	; (80089a8 <USBD_CDC_Init+0x1e4>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	f003 020f 	and.w	r2, r3, #15
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	3324      	adds	r3, #36	; 0x24
 8008852:	2201      	movs	r2, #1
 8008854:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008856:	4b55      	ldr	r3, [pc, #340]	; (80089ac <USBD_CDC_Init+0x1e8>)
 8008858:	7819      	ldrb	r1, [r3, #0]
 800885a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800885e:	2202      	movs	r2, #2
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 fb2e 	bl	800aec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008866:	4b51      	ldr	r3, [pc, #324]	; (80089ac <USBD_CDC_Init+0x1e8>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 020f 	and.w	r2, r3, #15
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800887e:	2201      	movs	r2, #1
 8008880:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008882:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <USBD_CDC_Init+0x1ec>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 020f 	and.w	r2, r3, #15
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	3326      	adds	r3, #38	; 0x26
 8008898:	2210      	movs	r2, #16
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	e035      	b.n	800890a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800889e:	4b42      	ldr	r3, [pc, #264]	; (80089a8 <USBD_CDC_Init+0x1e4>)
 80088a0:	7819      	ldrb	r1, [r3, #0]
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	2202      	movs	r2, #2
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f002 fb0b 	bl	800aec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088ac:	4b3e      	ldr	r3, [pc, #248]	; (80089a8 <USBD_CDC_Init+0x1e4>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	f003 020f 	and.w	r2, r3, #15
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	3324      	adds	r3, #36	; 0x24
 80088c2:	2201      	movs	r2, #1
 80088c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <USBD_CDC_Init+0x1e8>)
 80088c8:	7819      	ldrb	r1, [r3, #0]
 80088ca:	2340      	movs	r3, #64	; 0x40
 80088cc:	2202      	movs	r2, #2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f002 faf7 	bl	800aec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088d4:	4b35      	ldr	r3, [pc, #212]	; (80089ac <USBD_CDC_Init+0x1e8>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088ec:	2201      	movs	r2, #1
 80088ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088f0:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <USBD_CDC_Init+0x1ec>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 020f 	and.w	r2, r3, #15
 80088f8:	6879      	ldr	r1, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	4413      	add	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	440b      	add	r3, r1
 8008904:	3326      	adds	r3, #38	; 0x26
 8008906:	2210      	movs	r2, #16
 8008908:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800890a:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <USBD_CDC_Init+0x1ec>)
 800890c:	7819      	ldrb	r1, [r3, #0]
 800890e:	2308      	movs	r3, #8
 8008910:	2203      	movs	r2, #3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 fad5 	bl	800aec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <USBD_CDC_Init+0x1ec>)
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	f003 020f 	and.w	r2, r3, #15
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	4613      	mov	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	440b      	add	r3, r1
 800892c:	3324      	adds	r3, #36	; 0x24
 800892e:	2201      	movs	r2, #1
 8008930:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	33b0      	adds	r3, #176	; 0xb0
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008968:	2302      	movs	r3, #2
 800896a:	e018      	b.n	800899e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	7c1b      	ldrb	r3, [r3, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008974:	4b0d      	ldr	r3, [pc, #52]	; (80089ac <USBD_CDC_Init+0x1e8>)
 8008976:	7819      	ldrb	r1, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800897e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f002 fb8c 	bl	800b0a0 <USBD_LL_PrepareReceive>
 8008988:	e008      	b.n	800899c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <USBD_CDC_Init+0x1e8>)
 800898c:	7819      	ldrb	r1, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 fb82 	bl	800b0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	2000009f 	.word	0x2000009f
 80089ac:	200000a0 	.word	0x200000a0
 80089b0:	200000a1 	.word	0x200000a1

080089b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80089c0:	4b3a      	ldr	r3, [pc, #232]	; (8008aac <USBD_CDC_DeInit+0xf8>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 faa1 	bl	800af0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80089cc:	4b37      	ldr	r3, [pc, #220]	; (8008aac <USBD_CDC_DeInit+0xf8>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3324      	adds	r3, #36	; 0x24
 80089e2:	2200      	movs	r2, #0
 80089e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089e6:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <USBD_CDC_DeInit+0xfc>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f002 fa8e 	bl	800af0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089f2:	4b2f      	ldr	r3, [pc, #188]	; (8008ab0 <USBD_CDC_DeInit+0xfc>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 020f 	and.w	r2, r3, #15
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a0e:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <USBD_CDC_DeInit+0x100>)
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	4619      	mov	r1, r3
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f002 fa7a 	bl	800af0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a1a:	4b26      	ldr	r3, [pc, #152]	; (8008ab4 <USBD_CDC_DeInit+0x100>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	f003 020f 	and.w	r2, r3, #15
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	3324      	adds	r3, #36	; 0x24
 8008a30:	2200      	movs	r2, #0
 8008a32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <USBD_CDC_DeInit+0x100>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	3326      	adds	r3, #38	; 0x26
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	32b0      	adds	r2, #176	; 0xb0
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d01f      	beq.n	8008aa0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	33b0      	adds	r3, #176	; 0xb0
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	32b0      	adds	r2, #176	; 0xb0
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 fb4e 	bl	800b124 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	32b0      	adds	r2, #176	; 0xb0
 8008a92:	2100      	movs	r1, #0
 8008a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2000009f 	.word	0x2000009f
 8008ab0:	200000a0 	.word	0x200000a0
 8008ab4:	200000a1 	.word	0x200000a1

08008ab8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	32b0      	adds	r2, #176	; 0xb0
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e0bf      	b.n	8008c68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d050      	beq.n	8008b96 <USBD_CDC_Setup+0xde>
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	f040 80af 	bne.w	8008c58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	88db      	ldrh	r3, [r3, #6]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d03a      	beq.n	8008b78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b25b      	sxtb	r3, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	da1b      	bge.n	8008b44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	33b0      	adds	r3, #176	; 0xb0
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	88d2      	ldrh	r2, [r2, #6]
 8008b28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	88db      	ldrh	r3, [r3, #6]
 8008b2e:	2b07      	cmp	r3, #7
 8008b30:	bf28      	it	cs
 8008b32:	2307      	movcs	r3, #7
 8008b34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	89fa      	ldrh	r2, [r7, #14]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fd89 	bl	800a654 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b42:	e090      	b.n	8008c66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	785a      	ldrb	r2, [r3, #1]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b3f      	cmp	r3, #63	; 0x3f
 8008b54:	d803      	bhi.n	8008b5e <USBD_CDC_Setup+0xa6>
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	88db      	ldrh	r3, [r3, #6]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	e000      	b.n	8008b60 <USBD_CDC_Setup+0xa8>
 8008b5e:	2240      	movs	r2, #64	; 0x40
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b66:	6939      	ldr	r1, [r7, #16]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 fd9b 	bl	800a6ac <USBD_CtlPrepareRx>
      break;
 8008b76:	e076      	b.n	8008c66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	33b0      	adds	r3, #176	; 0xb0
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	7850      	ldrb	r0, [r2, #1]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	4798      	blx	r3
      break;
 8008b94:	e067      	b.n	8008c66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	785b      	ldrb	r3, [r3, #1]
 8008b9a:	2b0b      	cmp	r3, #11
 8008b9c:	d851      	bhi.n	8008c42 <USBD_CDC_Setup+0x18a>
 8008b9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBD_CDC_Setup+0xec>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bd5 	.word	0x08008bd5
 8008ba8:	08008c51 	.word	0x08008c51
 8008bac:	08008c43 	.word	0x08008c43
 8008bb0:	08008c43 	.word	0x08008c43
 8008bb4:	08008c43 	.word	0x08008c43
 8008bb8:	08008c43 	.word	0x08008c43
 8008bbc:	08008c43 	.word	0x08008c43
 8008bc0:	08008c43 	.word	0x08008c43
 8008bc4:	08008c43 	.word	0x08008c43
 8008bc8:	08008c43 	.word	0x08008c43
 8008bcc:	08008bff 	.word	0x08008bff
 8008bd0:	08008c29 	.word	0x08008c29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d107      	bne.n	8008bf0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008be0:	f107 030a 	add.w	r3, r7, #10
 8008be4:	2202      	movs	r2, #2
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fd33 	bl	800a654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bee:	e032      	b.n	8008c56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 fcbd 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	75fb      	strb	r3, [r7, #23]
          break;
 8008bfc:	e02b      	b.n	8008c56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d107      	bne.n	8008c1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c0a:	f107 030d 	add.w	r3, r7, #13
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4619      	mov	r1, r3
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f001 fd1e 	bl	800a654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c18:	e01d      	b.n	8008c56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fca8 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c22:	2303      	movs	r3, #3
 8008c24:	75fb      	strb	r3, [r7, #23]
          break;
 8008c26:	e016      	b.n	8008c56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d00f      	beq.n	8008c54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 fc9b 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c40:	e008      	b.n	8008c54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 fc94 	bl	800a572 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c4e:	e002      	b.n	8008c56 <USBD_CDC_Setup+0x19e>
          break;
 8008c50:	bf00      	nop
 8008c52:	e008      	b.n	8008c66 <USBD_CDC_Setup+0x1ae>
          break;
 8008c54:	bf00      	nop
      }
      break;
 8008c56:	e006      	b.n	8008c66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 fc89 	bl	800a572 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c60:	2303      	movs	r3, #3
 8008c62:	75fb      	strb	r3, [r7, #23]
      break;
 8008c64:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	32b0      	adds	r2, #176	; 0xb0
 8008c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e065      	b.n	8008d66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	32b0      	adds	r2, #176	; 0xb0
 8008ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3318      	adds	r3, #24
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02f      	beq.n	8008d24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	f003 020f 	and.w	r2, r3, #15
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	3318      	adds	r3, #24
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	f003 010f 	and.w	r1, r3, #15
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	440b      	add	r3, r1
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4403      	add	r3, r0
 8008cec:	3348      	adds	r3, #72	; 0x48
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d112      	bne.n	8008d24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	f003 020f 	and.w	r2, r3, #15
 8008d04:	6879      	ldr	r1, [r7, #4]
 8008d06:	4613      	mov	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	3318      	adds	r3, #24
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d16:	78f9      	ldrb	r1, [r7, #3]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f002 f99e 	bl	800b05e <USBD_LL_Transmit>
 8008d22:	e01f      	b.n	8008d64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	33b0      	adds	r3, #176	; 0xb0
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d010      	beq.n	8008d64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	33b0      	adds	r3, #176	; 0xb0
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	32b0      	adds	r2, #176	; 0xb0
 8008d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	32b0      	adds	r2, #176	; 0xb0
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e01a      	b.n	8008dd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f002 f99c 	bl	800b0e2 <USBD_LL_GetRxDataSize>
 8008daa:	4602      	mov	r2, r0
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	33b0      	adds	r3, #176	; 0xb0
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	32b0      	adds	r2, #176	; 0xb0
 8008df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e025      	b.n	8008e4c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	33b0      	adds	r3, #176	; 0xb0
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01a      	beq.n	8008e4a <USBD_CDC_EP0_RxReady+0x6c>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e1a:	2bff      	cmp	r3, #255	; 0xff
 8008e1c:	d015      	beq.n	8008e4a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	33b0      	adds	r3, #176	; 0xb0
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4413      	add	r3, r2
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e36:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e3e:	b292      	uxth	r2, r2
 8008e40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	22ff      	movs	r2, #255	; 0xff
 8008e46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e5c:	2182      	movs	r1, #130	; 0x82
 8008e5e:	4818      	ldr	r0, [pc, #96]	; (8008ec0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e60:	f000 fd4f 	bl	8009902 <USBD_GetEpDesc>
 8008e64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e66:	2101      	movs	r1, #1
 8008e68:	4815      	ldr	r0, [pc, #84]	; (8008ec0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e6a:	f000 fd4a 	bl	8009902 <USBD_GetEpDesc>
 8008e6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e70:	2181      	movs	r1, #129	; 0x81
 8008e72:	4813      	ldr	r0, [pc, #76]	; (8008ec0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e74:	f000 fd45 	bl	8009902 <USBD_GetEpDesc>
 8008e78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2210      	movs	r2, #16
 8008e84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d006      	beq.n	8008e9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e94:	711a      	strb	r2, [r3, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d006      	beq.n	8008eae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea8:	711a      	strb	r2, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2243      	movs	r2, #67	; 0x43
 8008eb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	2000005c 	.word	0x2000005c

08008ec4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ecc:	2182      	movs	r1, #130	; 0x82
 8008ece:	4818      	ldr	r0, [pc, #96]	; (8008f30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ed0:	f000 fd17 	bl	8009902 <USBD_GetEpDesc>
 8008ed4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	4815      	ldr	r0, [pc, #84]	; (8008f30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008eda:	f000 fd12 	bl	8009902 <USBD_GetEpDesc>
 8008ede:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ee0:	2181      	movs	r1, #129	; 0x81
 8008ee2:	4813      	ldr	r0, [pc, #76]	; (8008f30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ee4:	f000 fd0d 	bl	8009902 <USBD_GetEpDesc>
 8008ee8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	2200      	movs	r2, #0
 8008f00:	711a      	strb	r2, [r3, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f042 0202 	orr.w	r2, r2, #2
 8008f08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	711a      	strb	r2, [r3, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f042 0202 	orr.w	r2, r2, #2
 8008f1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2243      	movs	r2, #67	; 0x43
 8008f22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3718      	adds	r7, #24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000005c 	.word	0x2000005c

08008f34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f3c:	2182      	movs	r1, #130	; 0x82
 8008f3e:	4818      	ldr	r0, [pc, #96]	; (8008fa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f40:	f000 fcdf 	bl	8009902 <USBD_GetEpDesc>
 8008f44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f46:	2101      	movs	r1, #1
 8008f48:	4815      	ldr	r0, [pc, #84]	; (8008fa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f4a:	f000 fcda 	bl	8009902 <USBD_GetEpDesc>
 8008f4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f50:	2181      	movs	r1, #129	; 0x81
 8008f52:	4813      	ldr	r0, [pc, #76]	; (8008fa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f54:	f000 fcd5 	bl	8009902 <USBD_GetEpDesc>
 8008f58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2210      	movs	r2, #16
 8008f64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d006      	beq.n	8008f7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f74:	711a      	strb	r2, [r3, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f88:	711a      	strb	r2, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2243      	movs	r2, #67	; 0x43
 8008f92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	2000005c 	.word	0x2000005c

08008fa4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	220a      	movs	r2, #10
 8008fb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008fb2:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	20000018 	.word	0x20000018

08008fc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e009      	b.n	8008fec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	33b0      	adds	r3, #176	; 0xb0
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	32b0      	adds	r2, #176	; 0xb0
 800900e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009012:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800901a:	2303      	movs	r3, #3
 800901c:	e008      	b.n	8009030 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	32b0      	adds	r2, #176	; 0xb0
 8009050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009054:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	e004      	b.n	800906a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	32b0      	adds	r2, #176	; 0xb0
 800908a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800908e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	32b0      	adds	r2, #176	; 0xb0
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e025      	b.n	80090f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d11f      	bne.n	80090f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80090bc:	4b10      	ldr	r3, [pc, #64]	; (8009100 <USBD_CDC_TransmitPacket+0x88>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 020f 	and.w	r2, r3, #15
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4403      	add	r3, r0
 80090d6:	3318      	adds	r3, #24
 80090d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <USBD_CDC_TransmitPacket+0x88>)
 80090dc:	7819      	ldrb	r1, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 ffb7 	bl	800b05e <USBD_LL_Transmit>

    ret = USBD_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	2000009f 	.word	0x2000009f

08009104 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	32b0      	adds	r2, #176	; 0xb0
 8009116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	32b0      	adds	r2, #176	; 0xb0
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800912e:	2303      	movs	r3, #3
 8009130:	e018      	b.n	8009164 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7c1b      	ldrb	r3, [r3, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10a      	bne.n	8009150 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800913a:	4b0c      	ldr	r3, [pc, #48]	; (800916c <USBD_CDC_ReceivePacket+0x68>)
 800913c:	7819      	ldrb	r1, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 ffa9 	bl	800b0a0 <USBD_LL_PrepareReceive>
 800914e:	e008      	b.n	8009162 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009150:	4b06      	ldr	r3, [pc, #24]	; (800916c <USBD_CDC_ReceivePacket+0x68>)
 8009152:	7819      	ldrb	r1, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 ff9f 	bl	800b0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3710      	adds	r7, #16
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	200000a0 	.word	0x200000a0

08009170 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	e01f      	b.n	80091c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	79fa      	ldrb	r2, [r7, #7]
 80091ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f001 fe19 	bl	800adf4 <USBD_LL_Init>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091da:	2300      	movs	r3, #0
 80091dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e025      	b.n	8009234 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	32ae      	adds	r2, #174	; 0xae
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00f      	beq.n	8009224 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	; 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009214:	f107 020e 	add.w	r2, r7, #14
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	4602      	mov	r2, r0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009232:	2300      	movs	r3, #0
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fe21 	bl	800ae8c <USBD_LL_Start>
 800924a:	4603      	mov	r3, r0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800925c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800925e:	4618      	mov	r0, r3
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	78fa      	ldrb	r2, [r7, #3]
 800928e:	4611      	mov	r1, r2
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
 80092aa:	460b      	mov	r3, r1
 80092ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	4611      	mov	r1, r2
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	4798      	blx	r3
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c8:	2303      	movs	r3, #3
 80092ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092e6:	6839      	ldr	r1, [r7, #0]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 f908 	bl	800a4fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800930a:	f003 031f 	and.w	r3, r3, #31
 800930e:	2b02      	cmp	r3, #2
 8009310:	d01a      	beq.n	8009348 <USBD_LL_SetupStage+0x72>
 8009312:	2b02      	cmp	r3, #2
 8009314:	d822      	bhi.n	800935c <USBD_LL_SetupStage+0x86>
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <USBD_LL_SetupStage+0x4a>
 800931a:	2b01      	cmp	r3, #1
 800931c:	d00a      	beq.n	8009334 <USBD_LL_SetupStage+0x5e>
 800931e:	e01d      	b.n	800935c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb5f 	bl	80099ec <USBD_StdDevReq>
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
      break;
 8009332:	e020      	b.n	8009376 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fbc7 	bl	8009ad0 <USBD_StdItfReq>
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
      break;
 8009346:	e016      	b.n	8009376 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fc29 	bl	8009ba8 <USBD_StdEPReq>
 8009356:	4603      	mov	r3, r0
 8009358:	73fb      	strb	r3, [r7, #15]
      break;
 800935a:	e00c      	b.n	8009376 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009362:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fdee 	bl	800af4c <USBD_LL_StallEP>
 8009370:	4603      	mov	r3, r0
 8009372:	73fb      	strb	r3, [r7, #15]
      break;
 8009374:	bf00      	nop
  }

  return ret;
 8009376:	7bfb      	ldrb	r3, [r7, #15]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	460b      	mov	r3, r1
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009392:	7afb      	ldrb	r3, [r7, #11]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d16e      	bne.n	8009476 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800939e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	f040 8098 	bne.w	80094dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d913      	bls.n	80093e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	1ad2      	subs	r2, r2, r3
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	4293      	cmp	r3, r2
 80093d0:	bf28      	it	cs
 80093d2:	4613      	movcs	r3, r2
 80093d4:	461a      	mov	r2, r3
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f001 f984 	bl	800a6e6 <USBD_CtlContinueRx>
 80093de:	e07d      	b.n	80094dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093e6:	f003 031f 	and.w	r3, r3, #31
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d014      	beq.n	8009418 <USBD_LL_DataOutStage+0x98>
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d81d      	bhi.n	800942e <USBD_LL_DataOutStage+0xae>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d002      	beq.n	80093fc <USBD_LL_DataOutStage+0x7c>
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d003      	beq.n	8009402 <USBD_LL_DataOutStage+0x82>
 80093fa:	e018      	b.n	800942e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	75bb      	strb	r3, [r7, #22]
            break;
 8009400:	e018      	b.n	8009434 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009408:	b2db      	uxtb	r3, r3
 800940a:	4619      	mov	r1, r3
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 fa5e 	bl	80098ce <USBD_CoreFindIF>
 8009412:	4603      	mov	r3, r0
 8009414:	75bb      	strb	r3, [r7, #22]
            break;
 8009416:	e00d      	b.n	8009434 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800941e:	b2db      	uxtb	r3, r3
 8009420:	4619      	mov	r1, r3
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fa60 	bl	80098e8 <USBD_CoreFindEP>
 8009428:	4603      	mov	r3, r0
 800942a:	75bb      	strb	r3, [r7, #22]
            break;
 800942c:	e002      	b.n	8009434 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	75bb      	strb	r3, [r7, #22]
            break;
 8009432:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009434:	7dbb      	ldrb	r3, [r7, #22]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d119      	bne.n	800946e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b03      	cmp	r3, #3
 8009444:	d113      	bne.n	800946e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009446:	7dba      	ldrb	r2, [r7, #22]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	32ae      	adds	r2, #174	; 0xae
 800944c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00b      	beq.n	800946e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800945e:	7dba      	ldrb	r2, [r7, #22]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	32ae      	adds	r2, #174	; 0xae
 8009464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f001 f94a 	bl	800a708 <USBD_CtlSendStatus>
 8009474:	e032      	b.n	80094dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947c:	b2db      	uxtb	r3, r3
 800947e:	4619      	mov	r1, r3
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 fa31 	bl	80098e8 <USBD_CoreFindEP>
 8009486:	4603      	mov	r3, r0
 8009488:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800948a:	7dbb      	ldrb	r3, [r7, #22]
 800948c:	2bff      	cmp	r3, #255	; 0xff
 800948e:	d025      	beq.n	80094dc <USBD_LL_DataOutStage+0x15c>
 8009490:	7dbb      	ldrb	r3, [r7, #22]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d122      	bne.n	80094dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d117      	bne.n	80094d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094a2:	7dba      	ldrb	r2, [r7, #22]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	32ae      	adds	r2, #174	; 0xae
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00f      	beq.n	80094d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094ba:	7dba      	ldrb	r2, [r7, #22]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	32ae      	adds	r2, #174	; 0xae
 80094c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	7afa      	ldrb	r2, [r7, #11]
 80094c8:	4611      	mov	r1, r2
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	4798      	blx	r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094d2:	7dfb      	ldrb	r3, [r7, #23]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	e000      	b.n	80094de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	460b      	mov	r3, r1
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d16f      	bne.n	80095da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3314      	adds	r3, #20
 80094fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009506:	2b02      	cmp	r3, #2
 8009508:	d15a      	bne.n	80095c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	429a      	cmp	r2, r3
 8009514:	d914      	bls.n	8009540 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	461a      	mov	r2, r3
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f001 f8ac 	bl	800a68a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009532:	2300      	movs	r3, #0
 8009534:	2200      	movs	r2, #0
 8009536:	2100      	movs	r1, #0
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f001 fdb1 	bl	800b0a0 <USBD_LL_PrepareReceive>
 800953e:	e03f      	b.n	80095c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	68da      	ldr	r2, [r3, #12]
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	d11c      	bne.n	8009586 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009554:	429a      	cmp	r2, r3
 8009556:	d316      	bcc.n	8009586 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009562:	429a      	cmp	r2, r3
 8009564:	d20f      	bcs.n	8009586 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009566:	2200      	movs	r2, #0
 8009568:	2100      	movs	r1, #0
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f001 f88d 	bl	800a68a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009578:	2300      	movs	r3, #0
 800957a:	2200      	movs	r2, #0
 800957c:	2100      	movs	r1, #0
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f001 fd8e 	bl	800b0a0 <USBD_LL_PrepareReceive>
 8009584:	e01c      	b.n	80095c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b03      	cmp	r3, #3
 8009590:	d10f      	bne.n	80095b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d009      	beq.n	80095b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095b2:	2180      	movs	r1, #128	; 0x80
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f001 fcc9 	bl	800af4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f001 f8b7 	bl	800a72e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d03a      	beq.n	8009640 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fe42 	bl	8009254 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095d8:	e032      	b.n	8009640 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095da:	7afb      	ldrb	r3, [r7, #11]
 80095dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	4619      	mov	r1, r3
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f97f 	bl	80098e8 <USBD_CoreFindEP>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	2bff      	cmp	r3, #255	; 0xff
 80095f2:	d025      	beq.n	8009640 <USBD_LL_DataInStage+0x15a>
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d122      	bne.n	8009640 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b03      	cmp	r3, #3
 8009604:	d11c      	bne.n	8009640 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009606:	7dfa      	ldrb	r2, [r7, #23]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	32ae      	adds	r2, #174	; 0xae
 800960c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d014      	beq.n	8009640 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009616:	7dfa      	ldrb	r2, [r7, #23]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800961e:	7dfa      	ldrb	r2, [r7, #23]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	32ae      	adds	r2, #174	; 0xae
 8009624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	7afa      	ldrb	r2, [r7, #11]
 800962c:	4611      	mov	r1, r2
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	4798      	blx	r3
 8009632:	4603      	mov	r3, r0
 8009634:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009636:	7dbb      	ldrb	r3, [r7, #22]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d001      	beq.n	8009640 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800963c:	7dbb      	ldrb	r3, [r7, #22]
 800963e:	e000      	b.n	8009642 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3718      	adds	r7, #24
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d014      	beq.n	80096b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00e      	beq.n	80096b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	6852      	ldr	r2, [r2, #4]
 800969e:	b2d2      	uxtb	r2, r2
 80096a0:	4611      	mov	r1, r2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096b0:	2340      	movs	r3, #64	; 0x40
 80096b2:	2200      	movs	r2, #0
 80096b4:	2100      	movs	r1, #0
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fc03 	bl	800aec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2240      	movs	r2, #64	; 0x40
 80096c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	2200      	movs	r2, #0
 80096d0:	2180      	movs	r1, #128	; 0x80
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 fbf5 	bl	800aec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2240      	movs	r2, #64	; 0x40
 80096e2:	621a      	str	r2, [r3, #32]

  return ret;
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	78fa      	ldrb	r2, [r7, #3]
 80096fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971c:	b2da      	uxtb	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2204      	movs	r2, #4
 8009728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b04      	cmp	r3, #4
 800974c:	d106      	bne.n	800975c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b03      	cmp	r3, #3
 800977c:	d110      	bne.n	80097a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800978e:	69db      	ldr	r3, [r3, #28]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b082      	sub	sp, #8
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	460b      	mov	r3, r1
 80097b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	32ae      	adds	r2, #174	; 0xae
 80097c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e01c      	b.n	8009806 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d115      	bne.n	8009804 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	32ae      	adds	r2, #174	; 0xae
 80097e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	32ae      	adds	r2, #174	; 0xae
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	78fa      	ldrb	r2, [r7, #3]
 80097fe:	4611      	mov	r1, r2
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	32ae      	adds	r2, #174	; 0xae
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800982c:	2303      	movs	r3, #3
 800982e:	e01c      	b.n	800986a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b03      	cmp	r3, #3
 800983a:	d115      	bne.n	8009868 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	32ae      	adds	r2, #174	; 0xae
 8009846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	32ae      	adds	r2, #174	; 0xae
 800985a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	4611      	mov	r1, r2
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00e      	beq.n	80098c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6852      	ldr	r2, [r2, #4]
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	4611      	mov	r1, r2
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	4798      	blx	r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098c0:	2303      	movs	r3, #3
 80098c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	885b      	ldrh	r3, [r3, #2]
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	b29b      	uxth	r3, r3
 8009926:	429a      	cmp	r2, r3
 8009928:	d920      	bls.n	800996c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009932:	e013      	b.n	800995c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009934:	f107 030a 	add.w	r3, r7, #10
 8009938:	4619      	mov	r1, r3
 800993a:	6978      	ldr	r0, [r7, #20]
 800993c:	f000 f81b 	bl	8009976 <USBD_GetNextDesc>
 8009940:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b05      	cmp	r3, #5
 8009948:	d108      	bne.n	800995c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	789b      	ldrb	r3, [r3, #2]
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	429a      	cmp	r2, r3
 8009956:	d008      	beq.n	800996a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	885b      	ldrh	r3, [r3, #2]
 8009960:	b29a      	uxth	r2, r3
 8009962:	897b      	ldrh	r3, [r7, #10]
 8009964:	429a      	cmp	r2, r3
 8009966:	d8e5      	bhi.n	8009934 <USBD_GetEpDesc+0x32>
 8009968:	e000      	b.n	800996c <USBD_GetEpDesc+0x6a>
          break;
 800996a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800996c:	693b      	ldr	r3, [r7, #16]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	881a      	ldrh	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	4413      	add	r3, r2
 8009990:	b29a      	uxth	r2, r3
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4413      	add	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099a2:	68fb      	ldr	r3, [r7, #12]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	3301      	adds	r3, #1
 80099c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099ce:	8a3b      	ldrh	r3, [r7, #16]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	b21a      	sxth	r2, r3
 80099d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099d8:	4313      	orrs	r3, r2
 80099da:	b21b      	sxth	r3, r3
 80099dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099de:	89fb      	ldrh	r3, [r7, #14]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	371c      	adds	r7, #28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a02:	2b40      	cmp	r3, #64	; 0x40
 8009a04:	d005      	beq.n	8009a12 <USBD_StdDevReq+0x26>
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d857      	bhi.n	8009aba <USBD_StdDevReq+0xce>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00f      	beq.n	8009a2e <USBD_StdDevReq+0x42>
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d153      	bne.n	8009aba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	32ae      	adds	r2, #174	; 0xae
 8009a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2c:	e04a      	b.n	8009ac4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b09      	cmp	r3, #9
 8009a34:	d83b      	bhi.n	8009aae <USBD_StdDevReq+0xc2>
 8009a36:	a201      	add	r2, pc, #4	; (adr r2, 8009a3c <USBD_StdDevReq+0x50>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	08009aa5 	.word	0x08009aa5
 8009a44:	08009aaf 	.word	0x08009aaf
 8009a48:	08009a9b 	.word	0x08009a9b
 8009a4c:	08009aaf 	.word	0x08009aaf
 8009a50:	08009a6f 	.word	0x08009a6f
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009aaf 	.word	0x08009aaf
 8009a5c:	08009a87 	.word	0x08009a87
 8009a60:	08009a79 	.word	0x08009a79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa3c 	bl	8009ee4 <USBD_GetDescriptor>
          break;
 8009a6c:	e024      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fba1 	bl	800a1b8 <USBD_SetAddress>
          break;
 8009a76:	e01f      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fbe0 	bl	800a240 <USBD_SetConfig>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
          break;
 8009a84:	e018      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fc83 	bl	800a394 <USBD_GetConfig>
          break;
 8009a8e:	e013      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fcb4 	bl	800a400 <USBD_GetStatus>
          break;
 8009a98:	e00e      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fce3 	bl	800a468 <USBD_SetFeature>
          break;
 8009aa2:	e009      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fd07 	bl	800a4ba <USBD_ClrFeature>
          break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fd5e 	bl	800a572 <USBD_CtlError>
          break;
 8009ab6:	bf00      	nop
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fd58 	bl	800a572 <USBD_CtlError>
      break;
 8009ac2:	bf00      	nop
  }

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop

08009ad0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d005      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d852      	bhi.n	8009b94 <USBD_StdItfReq+0xc4>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d14e      	bne.n	8009b94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d840      	bhi.n	8009b86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	889b      	ldrh	r3, [r3, #4]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d836      	bhi.n	8009b7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	889b      	ldrh	r3, [r3, #4]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fed9 	bl	80098ce <USBD_CoreFindIF>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2bff      	cmp	r3, #255	; 0xff
 8009b24:	d01d      	beq.n	8009b62 <USBD_StdItfReq+0x92>
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11a      	bne.n	8009b62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b2c:	7bba      	ldrb	r2, [r7, #14]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	32ae      	adds	r2, #174	; 0xae
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00f      	beq.n	8009b5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b44:	7bba      	ldrb	r2, [r7, #14]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32ae      	adds	r2, #174	; 0xae
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b5a:	e004      	b.n	8009b66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b60:	e001      	b.n	8009b66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b62:	2303      	movs	r3, #3
 8009b64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d110      	bne.n	8009b90 <USBD_StdItfReq+0xc0>
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10d      	bne.n	8009b90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fdc7 	bl	800a708 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b7a:	e009      	b.n	8009b90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fcf7 	bl	800a572 <USBD_CtlError>
          break;
 8009b84:	e004      	b.n	8009b90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fcf2 	bl	800a572 <USBD_CtlError>
          break;
 8009b8e:	e000      	b.n	8009b92 <USBD_StdItfReq+0xc2>
          break;
 8009b90:	bf00      	nop
      }
      break;
 8009b92:	e004      	b.n	8009b9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fceb 	bl	800a572 <USBD_CtlError>
      break;
 8009b9c:	bf00      	nop
  }

  return ret;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	889b      	ldrh	r3, [r3, #4]
 8009bba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc4:	2b40      	cmp	r3, #64	; 0x40
 8009bc6:	d007      	beq.n	8009bd8 <USBD_StdEPReq+0x30>
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	f200 817f 	bhi.w	8009ecc <USBD_StdEPReq+0x324>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d02a      	beq.n	8009c28 <USBD_StdEPReq+0x80>
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	f040 817a 	bne.w	8009ecc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fe83 	bl	80098e8 <USBD_CoreFindEP>
 8009be2:	4603      	mov	r3, r0
 8009be4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2bff      	cmp	r3, #255	; 0xff
 8009bea:	f000 8174 	beq.w	8009ed6 <USBD_StdEPReq+0x32e>
 8009bee:	7b7b      	ldrb	r3, [r7, #13]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f040 8170 	bne.w	8009ed6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bfe:	7b7a      	ldrb	r2, [r7, #13]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	32ae      	adds	r2, #174	; 0xae
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8163 	beq.w	8009ed6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c10:	7b7a      	ldrb	r2, [r7, #13]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	32ae      	adds	r2, #174	; 0xae
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c26:	e156      	b.n	8009ed6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d008      	beq.n	8009c42 <USBD_StdEPReq+0x9a>
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	f300 8145 	bgt.w	8009ec0 <USBD_StdEPReq+0x318>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 809b 	beq.w	8009d72 <USBD_StdEPReq+0x1ca>
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d03c      	beq.n	8009cba <USBD_StdEPReq+0x112>
 8009c40:	e13e      	b.n	8009ec0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d002      	beq.n	8009c54 <USBD_StdEPReq+0xac>
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d016      	beq.n	8009c80 <USBD_StdEPReq+0xd8>
 8009c52:	e02c      	b.n	8009cae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <USBD_StdEPReq+0xce>
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b80      	cmp	r3, #128	; 0x80
 8009c5e:	d00a      	beq.n	8009c76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 f971 	bl	800af4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 f96d 	bl	800af4c <USBD_LL_StallEP>
 8009c72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c74:	e020      	b.n	8009cb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fc7a 	bl	800a572 <USBD_CtlError>
              break;
 8009c7e:	e01b      	b.n	8009cb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	885b      	ldrh	r3, [r3, #2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10e      	bne.n	8009ca6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <USBD_StdEPReq+0xfe>
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b80      	cmp	r3, #128	; 0x80
 8009c92:	d008      	beq.n	8009ca6 <USBD_StdEPReq+0xfe>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 f953 	bl	800af4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fd2e 	bl	800a708 <USBD_CtlSendStatus>

              break;
 8009cac:	e004      	b.n	8009cb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc5e 	bl	800a572 <USBD_CtlError>
              break;
 8009cb6:	bf00      	nop
          }
          break;
 8009cb8:	e107      	b.n	8009eca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d002      	beq.n	8009ccc <USBD_StdEPReq+0x124>
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d016      	beq.n	8009cf8 <USBD_StdEPReq+0x150>
 8009cca:	e04b      	b.n	8009d64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <USBD_StdEPReq+0x146>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d00a      	beq.n	8009cee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f935 	bl	800af4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce2:	2180      	movs	r1, #128	; 0x80
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f931 	bl	800af4c <USBD_LL_StallEP>
 8009cea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cec:	e040      	b.n	8009d70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc3e 	bl	800a572 <USBD_CtlError>
              break;
 8009cf6:	e03b      	b.n	8009d70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d136      	bne.n	8009d6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 f93b 	bl	800af8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fcf7 	bl	800a708 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fde2 	bl	80098e8 <USBD_CoreFindEP>
 8009d24:	4603      	mov	r3, r0
 8009d26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d28:	7b7b      	ldrb	r3, [r7, #13]
 8009d2a:	2bff      	cmp	r3, #255	; 0xff
 8009d2c:	d01f      	beq.n	8009d6e <USBD_StdEPReq+0x1c6>
 8009d2e:	7b7b      	ldrb	r3, [r7, #13]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11c      	bne.n	8009d6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d3c:	7b7a      	ldrb	r2, [r7, #13]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32ae      	adds	r2, #174	; 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d010      	beq.n	8009d6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d4c:	7b7a      	ldrb	r2, [r7, #13]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32ae      	adds	r2, #174	; 0xae
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d62:	e004      	b.n	8009d6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fc03 	bl	800a572 <USBD_CtlError>
              break;
 8009d6c:	e000      	b.n	8009d70 <USBD_StdEPReq+0x1c8>
              break;
 8009d6e:	bf00      	nop
          }
          break;
 8009d70:	e0ab      	b.n	8009eca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d002      	beq.n	8009d84 <USBD_StdEPReq+0x1dc>
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d032      	beq.n	8009de8 <USBD_StdEPReq+0x240>
 8009d82:	e097      	b.n	8009eb4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <USBD_StdEPReq+0x1f2>
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b80      	cmp	r3, #128	; 0x80
 8009d8e:	d004      	beq.n	8009d9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fbed 	bl	800a572 <USBD_CtlError>
                break;
 8009d98:	e091      	b.n	8009ebe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da0b      	bge.n	8009dba <USBD_StdEPReq+0x212>
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	3310      	adds	r3, #16
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	3304      	adds	r3, #4
 8009db8:	e00b      	b.n	8009dd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4413      	add	r3, r2
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc37 	bl	800a654 <USBD_CtlSendData>
              break;
 8009de6:	e06a      	b.n	8009ebe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da11      	bge.n	8009e14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	f003 020f 	and.w	r2, r3, #15
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	3324      	adds	r3, #36	; 0x24
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d117      	bne.n	8009e3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fbb0 	bl	800a572 <USBD_CtlError>
                  break;
 8009e12:	e054      	b.n	8009ebe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	f003 020f 	and.w	r2, r3, #15
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fb9d 	bl	800a572 <USBD_CtlError>
                  break;
 8009e38:	e041      	b.n	8009ebe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da0b      	bge.n	8009e5a <USBD_StdEPReq+0x2b2>
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	3310      	adds	r3, #16
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	3304      	adds	r3, #4
 8009e58:	e00b      	b.n	8009e72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	4413      	add	r3, r2
 8009e70:	3304      	adds	r3, #4
 8009e72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <USBD_StdEPReq+0x2d8>
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	2b80      	cmp	r3, #128	; 0x80
 8009e7e:	d103      	bne.n	8009e88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e00e      	b.n	8009ea6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f89b 	bl	800afc8 <USBD_LL_IsStallEP>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e002      	b.n	8009ea6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fbd1 	bl	800a654 <USBD_CtlSendData>
              break;
 8009eb2:	e004      	b.n	8009ebe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fb5b 	bl	800a572 <USBD_CtlError>
              break;
 8009ebc:	bf00      	nop
          }
          break;
 8009ebe:	e004      	b.n	8009eca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb55 	bl	800a572 <USBD_CtlError>
          break;
 8009ec8:	bf00      	nop
      }
      break;
 8009eca:	e005      	b.n	8009ed8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fb4f 	bl	800a572 <USBD_CtlError>
      break;
 8009ed4:	e000      	b.n	8009ed8 <USBD_StdEPReq+0x330>
      break;
 8009ed6:	bf00      	nop
  }

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	f200 8128 	bhi.w	800a15a <USBD_GetDescriptor+0x276>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <USBD_GetDescriptor+0x2c>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f2d 	.word	0x08009f2d
 8009f14:	08009f45 	.word	0x08009f45
 8009f18:	08009f85 	.word	0x08009f85
 8009f1c:	0800a15b 	.word	0x0800a15b
 8009f20:	0800a15b 	.word	0x0800a15b
 8009f24:	0800a0fb 	.word	0x0800a0fb
 8009f28:	0800a127 	.word	0x0800a127
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	7c12      	ldrb	r2, [r2, #16]
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	60f8      	str	r0, [r7, #12]
      break;
 8009f42:	e112      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	7c1b      	ldrb	r3, [r3, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f107 0208 	add.w	r2, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	2202      	movs	r2, #2
 8009f64:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f66:	e100      	b.n	800a16a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f70:	f107 0208 	add.w	r2, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
      break;
 8009f82:	e0f2      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	885b      	ldrh	r3, [r3, #2]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	f200 80ac 	bhi.w	800a0e8 <USBD_GetDescriptor+0x204>
 8009f90:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <USBD_GetDescriptor+0xb4>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009fb1 	.word	0x08009fb1
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	0800a019 	.word	0x0800a019
 8009fa4:	0800a04d 	.word	0x0800a04d
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	0800a0b5 	.word	0x0800a0b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00b      	beq.n	8009fd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7c12      	ldrb	r2, [r2, #16]
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd2:	e091      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 facb 	bl	800a572 <USBD_CtlError>
            err++;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe2:	e089      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7c12      	ldrb	r2, [r2, #16]
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a006:	e077      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fab1 	bl	800a572 <USBD_CtlError>
            err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
          break;
 800a016:	e06f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00b      	beq.n	800a03c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	7c12      	ldrb	r2, [r2, #16]
 800a030:	f107 0108 	add.w	r1, r7, #8
 800a034:	4610      	mov	r0, r2
 800a036:	4798      	blx	r3
 800a038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a03a:	e05d      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa97 	bl	800a572 <USBD_CtlError>
            err++;
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	3301      	adds	r3, #1
 800a048:	72fb      	strb	r3, [r7, #11]
          break;
 800a04a:	e055      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	7c12      	ldrb	r2, [r2, #16]
 800a064:	f107 0108 	add.w	r1, r7, #8
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
 800a06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06e:	e043      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa7d 	bl	800a572 <USBD_CtlError>
            err++;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	3301      	adds	r3, #1
 800a07c:	72fb      	strb	r3, [r7, #11]
          break;
 800a07e:	e03b      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e029      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa63 	bl	800a572 <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e021      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e00f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa49 	bl	800a572 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e007      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa41 	bl	800a572 <USBD_CtlError>
          err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0f6:	bf00      	nop
      }
      break;
 800a0f8:	e037      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7c1b      	ldrb	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	4610      	mov	r0, r2
 800a110:	4798      	blx	r3
 800a112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a114:	e029      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fa2a 	bl	800a572 <USBD_CtlError>
        err++;
 800a11e:	7afb      	ldrb	r3, [r7, #11]
 800a120:	3301      	adds	r3, #1
 800a122:	72fb      	strb	r3, [r7, #11]
      break;
 800a124:	e021      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7c1b      	ldrb	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10d      	bne.n	800a14a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	4610      	mov	r0, r2
 800a13c:	4798      	blx	r3
 800a13e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3301      	adds	r3, #1
 800a144:	2207      	movs	r2, #7
 800a146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a148:	e00f      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fa10 	bl	800a572 <USBD_CtlError>
        err++;
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	3301      	adds	r3, #1
 800a156:	72fb      	strb	r3, [r7, #11]
      break;
 800a158:	e007      	b.n	800a16a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa08 	bl	800a572 <USBD_CtlError>
      err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	bf00      	nop
  }

  if (err != 0U)
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d11e      	bne.n	800a1ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	88db      	ldrh	r3, [r3, #6]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d016      	beq.n	800a1a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a178:	893b      	ldrh	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00e      	beq.n	800a19c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	88da      	ldrh	r2, [r3, #6]
 800a182:	893b      	ldrh	r3, [r7, #8]
 800a184:	4293      	cmp	r3, r2
 800a186:	bf28      	it	cs
 800a188:	4613      	movcs	r3, r2
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	461a      	mov	r2, r3
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa5d 	bl	800a654 <USBD_CtlSendData>
 800a19a:	e009      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9e7 	bl	800a572 <USBD_CtlError>
 800a1a4:	e004      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 faae 	bl	800a708 <USBD_CtlSendStatus>
 800a1ac:	e000      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    return;
 800a1ae:	bf00      	nop
  }
}
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop

0800a1b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d131      	bne.n	800a22e <USBD_SetAddress+0x76>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88db      	ldrh	r3, [r3, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d12d      	bne.n	800a22e <USBD_SetAddress+0x76>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d8:	d829      	bhi.n	800a22e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	885b      	ldrh	r3, [r3, #2]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d104      	bne.n	800a1fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f9bc 	bl	800a572 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	e01d      	b.n	800a238 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7bfa      	ldrb	r2, [r7, #15]
 800a200:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 ff09 	bl	800b020 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa7a 	bl	800a708 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a222:	e009      	b.n	800a238 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22c:	e004      	b.n	800a238 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f99e 	bl	800a572 <USBD_CtlError>
  }
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	b2da      	uxtb	r2, r3
 800a254:	4b4e      	ldr	r3, [pc, #312]	; (800a390 <USBD_SetConfig+0x150>)
 800a256:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a258:	4b4d      	ldr	r3, [pc, #308]	; (800a390 <USBD_SetConfig+0x150>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d905      	bls.n	800a26c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f985 	bl	800a572 <USBD_CtlError>
    return USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e08c      	b.n	800a386 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d002      	beq.n	800a27e <USBD_SetConfig+0x3e>
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d029      	beq.n	800a2d0 <USBD_SetConfig+0x90>
 800a27c:	e075      	b.n	800a36a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a27e:	4b44      	ldr	r3, [pc, #272]	; (800a390 <USBD_SetConfig+0x150>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d020      	beq.n	800a2c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a286:	4b42      	ldr	r3, [pc, #264]	; (800a390 <USBD_SetConfig+0x150>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a290:	4b3f      	ldr	r3, [pc, #252]	; (800a390 <USBD_SetConfig+0x150>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fe ffe7 	bl	800926a <USBD_SetClassConfig>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f962 	bl	800a572 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2b6:	e065      	b.n	800a384 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa25 	bl	800a708 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2c6:	e05d      	b.n	800a384 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa1d 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a2ce:	e059      	b.n	800a384 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2d0:	4b2f      	ldr	r3, [pc, #188]	; (800a390 <USBD_SetConfig+0x150>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d112      	bne.n	800a2fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2e0:	4b2b      	ldr	r3, [pc, #172]	; (800a390 <USBD_SetConfig+0x150>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ea:	4b29      	ldr	r3, [pc, #164]	; (800a390 <USBD_SetConfig+0x150>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7fe ffd6 	bl	80092a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa06 	bl	800a708 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2fc:	e042      	b.n	800a384 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2fe:	4b24      	ldr	r3, [pc, #144]	; (800a390 <USBD_SetConfig+0x150>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d02a      	beq.n	800a362 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7fe ffc4 	bl	80092a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a31a:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <USBD_SetConfig+0x150>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a324:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe ff9d 	bl	800926a <USBD_SetClassConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00f      	beq.n	800a35a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f918 	bl	800a572 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7fe ffa9 	bl	80092a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a358:	e014      	b.n	800a384 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9d4 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a360:	e010      	b.n	800a384 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f9d0 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a368:	e00c      	b.n	800a384 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f900 	bl	800a572 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <USBD_SetConfig+0x150>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7fe ff92 	bl	80092a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	73fb      	strb	r3, [r7, #15]
      break;
 800a382:	bf00      	nop
  }

  return ret;
 800a384:	7bfb      	ldrb	r3, [r7, #15]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	200002b0 	.word	0x200002b0

0800a394 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	88db      	ldrh	r3, [r3, #6]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d004      	beq.n	800a3b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f8e2 	bl	800a572 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ae:	e023      	b.n	800a3f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	dc02      	bgt.n	800a3c2 <USBD_GetConfig+0x2e>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dc03      	bgt.n	800a3c8 <USBD_GetConfig+0x34>
 800a3c0:	e015      	b.n	800a3ee <USBD_GetConfig+0x5a>
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d00b      	beq.n	800a3de <USBD_GetConfig+0x4a>
 800a3c6:	e012      	b.n	800a3ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f93c 	bl	800a654 <USBD_CtlSendData>
        break;
 800a3dc:	e00c      	b.n	800a3f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f934 	bl	800a654 <USBD_CtlSendData>
        break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f8be 	bl	800a572 <USBD_CtlError>
        break;
 800a3f6:	bf00      	nop
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a410:	b2db      	uxtb	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	2b02      	cmp	r3, #2
 800a416:	d81e      	bhi.n	800a456 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	88db      	ldrh	r3, [r3, #6]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d004      	beq.n	800a42a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8a5 	bl	800a572 <USBD_CtlError>
        break;
 800a428:	e01a      	b.n	800a460 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f043 0202 	orr.w	r2, r3, #2
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	330c      	adds	r3, #12
 800a44a:	2202      	movs	r2, #2
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f900 	bl	800a654 <USBD_CtlSendData>
      break;
 800a454:	e004      	b.n	800a460 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f88a 	bl	800a572 <USBD_CtlError>
      break;
 800a45e:	bf00      	nop
  }
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	885b      	ldrh	r3, [r3, #2]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d107      	bne.n	800a48a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f940 	bl	800a708 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a488:	e013      	b.n	800a4b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d10b      	bne.n	800a4aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	889b      	ldrh	r3, [r3, #4]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	b29b      	uxth	r3, r3
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f930 	bl	800a708 <USBD_CtlSendStatus>
}
 800a4a8:	e003      	b.n	800a4b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f860 	bl	800a572 <USBD_CtlError>
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d80b      	bhi.n	800a4ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10c      	bne.n	800a4f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f910 	bl	800a708 <USBD_CtlSendStatus>
      }
      break;
 800a4e8:	e004      	b.n	800a4f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f840 	bl	800a572 <USBD_CtlError>
      break;
 800a4f2:	e000      	b.n	800a4f6 <USBD_ClrFeature+0x3c>
      break;
 800a4f4:	bf00      	nop
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3301      	adds	r3, #1
 800a518:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fa41 	bl	80099b0 <SWAPBYTE>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3301      	adds	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff fa34 	bl	80099b0 <SWAPBYTE>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
 800a554:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff fa27 	bl	80099b0 <SWAPBYTE>
 800a562:	4603      	mov	r3, r0
 800a564:	461a      	mov	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	80da      	strh	r2, [r3, #6]
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a57c:	2180      	movs	r1, #128	; 0x80
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fce4 	bl	800af4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a584:	2100      	movs	r1, #0
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fce0 	bl	800af4c <USBD_LL_StallEP>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d036      	beq.n	800a618 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f000 f836 	bl	800a620 <USBD_GetLen>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4413      	add	r3, r2
 800a5da:	2203      	movs	r2, #3
 800a5dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5e4:	e013      	b.n	800a60e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	4413      	add	r3, r2
 800a604:	2200      	movs	r2, #0
 800a606:	701a      	strb	r2, [r3, #0]
    idx++;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	3301      	adds	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e7      	bne.n	800a5e6 <USBD_GetString+0x52>
 800a616:	e000      	b.n	800a61a <USBD_GetString+0x86>
    return;
 800a618:	bf00      	nop
  }
}
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a630:	e005      	b.n	800a63e <USBD_GetLen+0x1e>
  {
    len++;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	3301      	adds	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f5      	bne.n	800a632 <USBD_GetLen+0x12>
  }

  return len;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2202      	movs	r2, #2
 800a664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 fcef 	bl	800b05e <USBD_LL_Transmit>

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	2100      	movs	r1, #0
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 fcde 	bl	800b05e <USBD_LL_Transmit>

  return USBD_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fce2 	bl	800b0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 fcd1 	bl	800b0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2204      	movs	r2, #4
 800a714:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a718:	2300      	movs	r3, #0
 800a71a:	2200      	movs	r2, #0
 800a71c:	2100      	movs	r1, #0
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 fc9d 	bl	800b05e <USBD_LL_Transmit>

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2205      	movs	r2, #5
 800a73a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a73e:	2300      	movs	r3, #0
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fcab 	bl	800b0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a758:	2200      	movs	r2, #0
 800a75a:	4912      	ldr	r1, [pc, #72]	; (800a7a4 <MX_USB_DEVICE_Init+0x50>)
 800a75c:	4812      	ldr	r0, [pc, #72]	; (800a7a8 <MX_USB_DEVICE_Init+0x54>)
 800a75e:	f7fe fd07 	bl	8009170 <USBD_Init>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a768:	f7f8 fc8e 	bl	8003088 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a76c:	490f      	ldr	r1, [pc, #60]	; (800a7ac <MX_USB_DEVICE_Init+0x58>)
 800a76e:	480e      	ldr	r0, [pc, #56]	; (800a7a8 <MX_USB_DEVICE_Init+0x54>)
 800a770:	f7fe fd2e 	bl	80091d0 <USBD_RegisterClass>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a77a:	f7f8 fc85 	bl	8003088 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a77e:	490c      	ldr	r1, [pc, #48]	; (800a7b0 <MX_USB_DEVICE_Init+0x5c>)
 800a780:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <MX_USB_DEVICE_Init+0x54>)
 800a782:	f7fe fc1f 	bl	8008fc4 <USBD_CDC_RegisterInterface>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a78c:	f7f8 fc7c 	bl	8003088 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a790:	4805      	ldr	r0, [pc, #20]	; (800a7a8 <MX_USB_DEVICE_Init+0x54>)
 800a792:	f7fe fd53 	bl	800923c <USBD_Start>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a79c:	f7f8 fc74 	bl	8003088 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7a0:	bf00      	nop
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	200000b8 	.word	0x200000b8
 800a7a8:	200002b4 	.word	0x200002b4
 800a7ac:	20000024 	.word	0x20000024
 800a7b0:	200000a4 	.word	0x200000a4

0800a7b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	4905      	ldr	r1, [pc, #20]	; (800a7d0 <CDC_Init_FS+0x1c>)
 800a7bc:	4805      	ldr	r0, [pc, #20]	; (800a7d4 <CDC_Init_FS+0x20>)
 800a7be:	f7fe fc1b 	bl	8008ff8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7c2:	4905      	ldr	r1, [pc, #20]	; (800a7d8 <CDC_Init_FS+0x24>)
 800a7c4:	4803      	ldr	r0, [pc, #12]	; (800a7d4 <CDC_Init_FS+0x20>)
 800a7c6:	f7fe fc39 	bl	800903c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000d90 	.word	0x20000d90
 800a7d4:	200002b4 	.word	0x200002b4
 800a7d8:	20000590 	.word	0x20000590

0800a7dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	6039      	str	r1, [r7, #0]
 800a7f6:	71fb      	strb	r3, [r7, #7]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	2b23      	cmp	r3, #35	; 0x23
 800a800:	d84a      	bhi.n	800a898 <CDC_Control_FS+0xac>
 800a802:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <CDC_Control_FS+0x1c>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a899 	.word	0x0800a899
 800a80c:	0800a899 	.word	0x0800a899
 800a810:	0800a899 	.word	0x0800a899
 800a814:	0800a899 	.word	0x0800a899
 800a818:	0800a899 	.word	0x0800a899
 800a81c:	0800a899 	.word	0x0800a899
 800a820:	0800a899 	.word	0x0800a899
 800a824:	0800a899 	.word	0x0800a899
 800a828:	0800a899 	.word	0x0800a899
 800a82c:	0800a899 	.word	0x0800a899
 800a830:	0800a899 	.word	0x0800a899
 800a834:	0800a899 	.word	0x0800a899
 800a838:	0800a899 	.word	0x0800a899
 800a83c:	0800a899 	.word	0x0800a899
 800a840:	0800a899 	.word	0x0800a899
 800a844:	0800a899 	.word	0x0800a899
 800a848:	0800a899 	.word	0x0800a899
 800a84c:	0800a899 	.word	0x0800a899
 800a850:	0800a899 	.word	0x0800a899
 800a854:	0800a899 	.word	0x0800a899
 800a858:	0800a899 	.word	0x0800a899
 800a85c:	0800a899 	.word	0x0800a899
 800a860:	0800a899 	.word	0x0800a899
 800a864:	0800a899 	.word	0x0800a899
 800a868:	0800a899 	.word	0x0800a899
 800a86c:	0800a899 	.word	0x0800a899
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a899 	.word	0x0800a899
 800a87c:	0800a899 	.word	0x0800a899
 800a880:	0800a899 	.word	0x0800a899
 800a884:	0800a899 	.word	0x0800a899
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a899 	.word	0x0800a899
 800a890:	0800a899 	.word	0x0800a899
 800a894:	0800a899 	.word	0x0800a899
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a898:	bf00      	nop
  }

  return (USBD_OK);
 800a89a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
 int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4805      	ldr	r0, [pc, #20]	; (800a8cc <CDC_Receive_FS+0x24>)
 800a8b6:	f7fe fbc1 	bl	800903c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8ba:	4804      	ldr	r0, [pc, #16]	; (800a8cc <CDC_Receive_FS+0x24>)
 800a8bc:	f7fe fc22 	bl	8009104 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	200002b4 	.word	0x200002b4

0800a8d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8e0:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <CDC_Transmit_FS+0x48>)
 800a8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e00b      	b.n	800a90e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8f6:	887b      	ldrh	r3, [r7, #2]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	6879      	ldr	r1, [r7, #4]
 800a8fc:	4806      	ldr	r0, [pc, #24]	; (800a918 <CDC_Transmit_FS+0x48>)
 800a8fe:	f7fe fb7b 	bl	8008ff8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a902:	4805      	ldr	r0, [pc, #20]	; (800a918 <CDC_Transmit_FS+0x48>)
 800a904:	f7fe fbb8 	bl	8009078 <USBD_CDC_TransmitPacket>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200002b4 	.word	0x200002b4

0800a91c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	4613      	mov	r3, r2
 800a928:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a92e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a932:	4618      	mov	r0, r3
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2212      	movs	r2, #18
 800a950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a952:	4b03      	ldr	r3, [pc, #12]	; (800a960 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a954:	4618      	mov	r0, r3
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	200000d4 	.word	0x200000d4

0800a964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4603      	mov	r3, r0
 800a96c:	6039      	str	r1, [r7, #0]
 800a96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	2204      	movs	r2, #4
 800a974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a976:	4b03      	ldr	r3, [pc, #12]	; (800a984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a978:	4618      	mov	r0, r3
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	200000e8 	.word	0x200000e8

0800a988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	6039      	str	r1, [r7, #0]
 800a992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d105      	bne.n	800a9a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	4907      	ldr	r1, [pc, #28]	; (800a9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a99e:	4808      	ldr	r0, [pc, #32]	; (800a9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9a0:	f7ff fdf8 	bl	800a594 <USBD_GetString>
 800a9a4:	e004      	b.n	800a9b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4904      	ldr	r1, [pc, #16]	; (800a9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a9aa:	4805      	ldr	r0, [pc, #20]	; (800a9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9ac:	f7ff fdf2 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9b0:	4b02      	ldr	r3, [pc, #8]	; (800a9bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20001590 	.word	0x20001590
 800a9c0:	0800c9c0 	.word	0x0800c9c0

0800a9c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	6039      	str	r1, [r7, #0]
 800a9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	4904      	ldr	r1, [pc, #16]	; (800a9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9d4:	4804      	ldr	r0, [pc, #16]	; (800a9e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9d6:	f7ff fddd 	bl	800a594 <USBD_GetString>
  return USBD_StrDesc;
 800a9da:	4b02      	ldr	r3, [pc, #8]	; (800a9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20001590 	.word	0x20001590
 800a9e8:	0800c9d8 	.word	0x0800c9d8

0800a9ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	6039      	str	r1, [r7, #0]
 800a9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	221a      	movs	r2, #26
 800a9fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9fe:	f000 f843 	bl	800aa88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa02:	4b02      	ldr	r3, [pc, #8]	; (800aa0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	200000ec 	.word	0x200000ec

0800aa10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	4907      	ldr	r1, [pc, #28]	; (800aa44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa26:	4808      	ldr	r0, [pc, #32]	; (800aa48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa28:	f7ff fdb4 	bl	800a594 <USBD_GetString>
 800aa2c:	e004      	b.n	800aa38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4904      	ldr	r1, [pc, #16]	; (800aa44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa32:	4805      	ldr	r0, [pc, #20]	; (800aa48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa34:	f7ff fdae 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20001590 	.word	0x20001590
 800aa48:	0800c9ec 	.word	0x0800c9ec

0800aa4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	6039      	str	r1, [r7, #0]
 800aa56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d105      	bne.n	800aa6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	4907      	ldr	r1, [pc, #28]	; (800aa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa62:	4808      	ldr	r0, [pc, #32]	; (800aa84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa64:	f7ff fd96 	bl	800a594 <USBD_GetString>
 800aa68:	e004      	b.n	800aa74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa6e:	4805      	ldr	r0, [pc, #20]	; (800aa84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa70:	f7ff fd90 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa74:	4b02      	ldr	r3, [pc, #8]	; (800aa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20001590 	.word	0x20001590
 800aa84:	0800c9f8 	.word	0x0800c9f8

0800aa88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa8e:	4b0f      	ldr	r3, [pc, #60]	; (800aacc <Get_SerialNum+0x44>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa94:	4b0e      	ldr	r3, [pc, #56]	; (800aad0 <Get_SerialNum+0x48>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa9a:	4b0e      	ldr	r3, [pc, #56]	; (800aad4 <Get_SerialNum+0x4c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d009      	beq.n	800aac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaae:	2208      	movs	r2, #8
 800aab0:	4909      	ldr	r1, [pc, #36]	; (800aad8 <Get_SerialNum+0x50>)
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 f814 	bl	800aae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aab8:	2204      	movs	r2, #4
 800aaba:	4908      	ldr	r1, [pc, #32]	; (800aadc <Get_SerialNum+0x54>)
 800aabc:	68b8      	ldr	r0, [r7, #8]
 800aabe:	f000 f80f 	bl	800aae0 <IntToUnicode>
  }
}
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	1fff7a10 	.word	0x1fff7a10
 800aad0:	1fff7a14 	.word	0x1fff7a14
 800aad4:	1fff7a18 	.word	0x1fff7a18
 800aad8:	200000ee 	.word	0x200000ee
 800aadc:	200000fe 	.word	0x200000fe

0800aae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	4613      	mov	r3, r2
 800aaec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	75fb      	strb	r3, [r7, #23]
 800aaf6:	e027      	b.n	800ab48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	0f1b      	lsrs	r3, r3, #28
 800aafc:	2b09      	cmp	r3, #9
 800aafe:	d80b      	bhi.n	800ab18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	0f1b      	lsrs	r3, r3, #28
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	7dfb      	ldrb	r3, [r7, #23]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	440b      	add	r3, r1
 800ab10:	3230      	adds	r2, #48	; 0x30
 800ab12:	b2d2      	uxtb	r2, r2
 800ab14:	701a      	strb	r2, [r3, #0]
 800ab16:	e00a      	b.n	800ab2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	0f1b      	lsrs	r3, r3, #28
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	4619      	mov	r1, r3
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	440b      	add	r3, r1
 800ab28:	3237      	adds	r2, #55	; 0x37
 800ab2a:	b2d2      	uxtb	r2, r2
 800ab2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	011b      	lsls	r3, r3, #4
 800ab32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	3301      	adds	r3, #1
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	3301      	adds	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]
 800ab48:	7dfa      	ldrb	r2, [r7, #23]
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d3d3      	bcc.n	800aaf8 <IntToUnicode+0x18>
  }
}
 800ab50:	bf00      	nop
 800ab52:	bf00      	nop
 800ab54:	371c      	adds	r7, #28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	; 0x28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab68:	f107 0314 	add.w	r3, r7, #20
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
 800ab70:	605a      	str	r2, [r3, #4]
 800ab72:	609a      	str	r2, [r3, #8]
 800ab74:	60da      	str	r2, [r3, #12]
 800ab76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab80:	d147      	bne.n	800ac12 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab82:	2300      	movs	r3, #0
 800ab84:	613b      	str	r3, [r7, #16]
 800ab86:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	4a24      	ldr	r2, [pc, #144]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	6313      	str	r3, [r2, #48]	; 0x30
 800ab92:	4b22      	ldr	r3, [pc, #136]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	613b      	str	r3, [r7, #16]
 800ab9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ab9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba8:	2300      	movs	r3, #0
 800abaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800abac:	f107 0314 	add.w	r3, r7, #20
 800abb0:	4619      	mov	r1, r3
 800abb2:	481b      	ldr	r0, [pc, #108]	; (800ac20 <HAL_PCD_MspInit+0xc0>)
 800abb4:	f7f9 f850 	bl	8003c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800abb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800abbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abbe:	2302      	movs	r3, #2
 800abc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abc6:	2303      	movs	r3, #3
 800abc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abca:	230a      	movs	r3, #10
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	4619      	mov	r1, r3
 800abd4:	4812      	ldr	r0, [pc, #72]	; (800ac20 <HAL_PCD_MspInit+0xc0>)
 800abd6:	f7f9 f83f 	bl	8003c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abda:	4b10      	ldr	r3, [pc, #64]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800abdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abde:	4a0f      	ldr	r2, [pc, #60]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe4:	6353      	str	r3, [r2, #52]	; 0x34
 800abe6:	2300      	movs	r3, #0
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	4b0c      	ldr	r3, [pc, #48]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	4a0b      	ldr	r2, [pc, #44]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800abf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abf4:	6453      	str	r3, [r2, #68]	; 0x44
 800abf6:	4b09      	ldr	r3, [pc, #36]	; (800ac1c <HAL_PCD_MspInit+0xbc>)
 800abf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac02:	2200      	movs	r2, #0
 800ac04:	2100      	movs	r1, #0
 800ac06:	2043      	movs	r0, #67	; 0x43
 800ac08:	f7f8 fd97 	bl	800373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac0c:	2043      	movs	r0, #67	; 0x43
 800ac0e:	f7f8 fdb0 	bl	8003772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac12:	bf00      	nop
 800ac14:	3728      	adds	r7, #40	; 0x28
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40023800 	.word	0x40023800
 800ac20:	40020000 	.word	0x40020000

0800ac24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	f7fe fb4b 	bl	80092d6 <USBD_LL_SetupStage>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	6879      	ldr	r1, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	78fb      	ldrb	r3, [r7, #3]
 800ac70:	4619      	mov	r1, r3
 800ac72:	f7fe fb85 	bl	8009380 <USBD_LL_DataOutStage>
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac90:	78fa      	ldrb	r2, [r7, #3]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	334c      	adds	r3, #76	; 0x4c
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7fe fc1e 	bl	80094e6 <USBD_LL_DataInStage>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fe fd52 	bl	800976a <USBD_LL_SOF>
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d001      	beq.n	800ace6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ace2:	f7f8 f9d1 	bl	8003088 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acec:	7bfa      	ldrb	r2, [r7, #15]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7fe fcfc 	bl	80096ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7fe fca4 	bl	800964a <USBD_LL_Reset>
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fcf7 	bl	800970e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	6812      	ldr	r2, [r2, #0]
 800ad2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad32:	f043 0301 	orr.w	r3, r3, #1
 800ad36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad40:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <HAL_PCD_SuspendCallback+0x48>)
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	4a03      	ldr	r2, [pc, #12]	; (800ad54 <HAL_PCD_SuspendCallback+0x48>)
 800ad46:	f043 0306 	orr.w	r3, r3, #6
 800ad4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	e000ed00 	.word	0xe000ed00

0800ad58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fce7 	bl	800973a <USBD_LL_Resume>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad86:	78fa      	ldrb	r2, [r7, #3]
 800ad88:	4611      	mov	r1, r2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe fd3f 	bl	800980e <USBD_LL_IsoOUTIncomplete>
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adaa:	78fa      	ldrb	r2, [r7, #3]
 800adac:	4611      	mov	r1, r2
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fcfb 	bl	80097aa <USBD_LL_IsoINIncomplete>
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fd51 	bl	8009872 <USBD_LL_DevConnected>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fd4e 	bl	8009888 <USBD_LL_DevDisconnected>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d13c      	bne.n	800ae7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae04:	4a20      	ldr	r2, [pc, #128]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae10:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae14:	4b1c      	ldr	r3, [pc, #112]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae1c:	4b1a      	ldr	r3, [pc, #104]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae1e:	2204      	movs	r2, #4
 800ae20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae22:	4b19      	ldr	r3, [pc, #100]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae24:	2202      	movs	r2, #2
 800ae26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae28:	4b17      	ldr	r3, [pc, #92]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae2e:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae30:	2202      	movs	r2, #2
 800ae32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae34:	4b14      	ldr	r3, [pc, #80]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae36:	2200      	movs	r2, #0
 800ae38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae3a:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae40:	4b11      	ldr	r3, [pc, #68]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae46:	4b10      	ldr	r3, [pc, #64]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae4c:	4b0e      	ldr	r3, [pc, #56]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae52:	480d      	ldr	r0, [pc, #52]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae54:	f7f9 f89d 	bl	8003f92 <HAL_PCD_Init>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae5e:	f7f8 f913 	bl	8003088 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae62:	2180      	movs	r1, #128	; 0x80
 800ae64:	4808      	ldr	r0, [pc, #32]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae66:	f7fa faf4 	bl	8005452 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae6a:	2240      	movs	r2, #64	; 0x40
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4806      	ldr	r0, [pc, #24]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae70:	f7fa faa8 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae74:	2280      	movs	r2, #128	; 0x80
 800ae76:	2101      	movs	r1, #1
 800ae78:	4803      	ldr	r0, [pc, #12]	; (800ae88 <USBD_LL_Init+0x94>)
 800ae7a:	f7fa faa3 	bl	80053c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20001790 	.word	0x20001790

0800ae8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f9 f992 	bl	80041cc <HAL_PCD_Start>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 f942 	bl	800b138 <USBD_Get_USB_Status>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	461a      	mov	r2, r3
 800aed0:	4603      	mov	r3, r0
 800aed2:	70fb      	strb	r3, [r7, #3]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70bb      	strb	r3, [r7, #2]
 800aed8:	4613      	mov	r3, r2
 800aeda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aeea:	78bb      	ldrb	r3, [r7, #2]
 800aeec:	883a      	ldrh	r2, [r7, #0]
 800aeee:	78f9      	ldrb	r1, [r7, #3]
 800aef0:	f7f9 fe63 	bl	8004bba <HAL_PCD_EP_Open>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f91c 	bl	800b138 <USBD_Get_USB_Status>
 800af00:	4603      	mov	r3, r0
 800af02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af04:	7bbb      	ldrb	r3, [r7, #14]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af28:	78fa      	ldrb	r2, [r7, #3]
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7f9 feac 	bl	8004c8a <HAL_PCD_EP_Close>
 800af32:	4603      	mov	r3, r0
 800af34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f8fd 	bl	800b138 <USBD_Get_USB_Status>
 800af3e:	4603      	mov	r3, r0
 800af40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af42:	7bbb      	ldrb	r3, [r7, #14]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af66:	78fa      	ldrb	r2, [r7, #3]
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7f9 ff84 	bl	8004e78 <HAL_PCD_EP_SetStall>
 800af70:	4603      	mov	r3, r0
 800af72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af74:	7bfb      	ldrb	r3, [r7, #15]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 f8de 	bl	800b138 <USBD_Get_USB_Status>
 800af7c:	4603      	mov	r3, r0
 800af7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af80:	7bbb      	ldrb	r3, [r7, #14]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	460b      	mov	r3, r1
 800af94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	4611      	mov	r1, r2
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f9 ffc9 	bl	8004f40 <HAL_PCD_EP_ClrStall>
 800afae:	4603      	mov	r3, r0
 800afb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f8bf 	bl	800b138 <USBD_Get_USB_Status>
 800afba:	4603      	mov	r3, r0
 800afbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800afdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da0b      	bge.n	800affc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800afe4:	78fb      	ldrb	r3, [r7, #3]
 800afe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afea:	68f9      	ldr	r1, [r7, #12]
 800afec:	4613      	mov	r3, r2
 800afee:	00db      	lsls	r3, r3, #3
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	440b      	add	r3, r1
 800aff6:	333e      	adds	r3, #62	; 0x3e
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	e00b      	b.n	800b014 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	4613      	mov	r3, r2
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b012:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b03a:	78fa      	ldrb	r2, [r7, #3]
 800b03c:	4611      	mov	r1, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f9 fd96 	bl	8004b70 <HAL_PCD_SetAddress>
 800b044:	4603      	mov	r3, r0
 800b046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b048:	7bfb      	ldrb	r3, [r7, #15]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f874 	bl	800b138 <USBD_Get_USB_Status>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b054:	7bbb      	ldrb	r3, [r7, #14]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b086      	sub	sp, #24
 800b062:	af00      	add	r7, sp, #0
 800b064:	60f8      	str	r0, [r7, #12]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
 800b06a:	460b      	mov	r3, r1
 800b06c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b07c:	7af9      	ldrb	r1, [r7, #11]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	f7f9 feaf 	bl	8004de4 <HAL_PCD_EP_Transmit>
 800b086:	4603      	mov	r3, r0
 800b088:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f853 	bl	800b138 <USBD_Get_USB_Status>
 800b092:	4603      	mov	r3, r0
 800b094:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b096:	7dbb      	ldrb	r3, [r7, #22]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3718      	adds	r7, #24
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b086      	sub	sp, #24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0be:	7af9      	ldrb	r1, [r7, #11]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	f7f9 fe2b 	bl	8004d1e <HAL_PCD_EP_Receive>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f832 	bl	800b138 <USBD_Get_USB_Status>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b082      	sub	sp, #8
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0f4:	78fa      	ldrb	r2, [r7, #3]
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7f9 fe5b 	bl	8004db4 <HAL_PCD_EP_GetRxCount>
 800b0fe:	4603      	mov	r3, r0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b110:	4b03      	ldr	r3, [pc, #12]	; (800b120 <USBD_static_malloc+0x18>)
}
 800b112:	4618      	mov	r0, r3
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20001c9c 	.word	0x20001c9c

0800b124 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]

}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b142:	2300      	movs	r3, #0
 800b144:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d817      	bhi.n	800b17c <USBD_Get_USB_Status+0x44>
 800b14c:	a201      	add	r2, pc, #4	; (adr r2, 800b154 <USBD_Get_USB_Status+0x1c>)
 800b14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b165 	.word	0x0800b165
 800b158:	0800b16b 	.word	0x0800b16b
 800b15c:	0800b171 	.word	0x0800b171
 800b160:	0800b177 	.word	0x0800b177
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
    break;
 800b168:	e00b      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b16a:	2303      	movs	r3, #3
 800b16c:	73fb      	strb	r3, [r7, #15]
    break;
 800b16e:	e008      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b170:	2301      	movs	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
    break;
 800b174:	e005      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	73fb      	strb	r3, [r7, #15]
    break;
 800b17a:	e002      	b.n	800b182 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	73fb      	strb	r3, [r7, #15]
    break;
 800b180:	bf00      	nop
  }
  return usb_status;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <__errno>:
 800b190:	4b01      	ldr	r3, [pc, #4]	; (800b198 <__errno+0x8>)
 800b192:	6818      	ldr	r0, [r3, #0]
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	20000108 	.word	0x20000108

0800b19c <__libc_init_array>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	4d0d      	ldr	r5, [pc, #52]	; (800b1d4 <__libc_init_array+0x38>)
 800b1a0:	4c0d      	ldr	r4, [pc, #52]	; (800b1d8 <__libc_init_array+0x3c>)
 800b1a2:	1b64      	subs	r4, r4, r5
 800b1a4:	10a4      	asrs	r4, r4, #2
 800b1a6:	2600      	movs	r6, #0
 800b1a8:	42a6      	cmp	r6, r4
 800b1aa:	d109      	bne.n	800b1c0 <__libc_init_array+0x24>
 800b1ac:	4d0b      	ldr	r5, [pc, #44]	; (800b1dc <__libc_init_array+0x40>)
 800b1ae:	4c0c      	ldr	r4, [pc, #48]	; (800b1e0 <__libc_init_array+0x44>)
 800b1b0:	f000 fc8e 	bl	800bad0 <_init>
 800b1b4:	1b64      	subs	r4, r4, r5
 800b1b6:	10a4      	asrs	r4, r4, #2
 800b1b8:	2600      	movs	r6, #0
 800b1ba:	42a6      	cmp	r6, r4
 800b1bc:	d105      	bne.n	800b1ca <__libc_init_array+0x2e>
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c4:	4798      	blx	r3
 800b1c6:	3601      	adds	r6, #1
 800b1c8:	e7ee      	b.n	800b1a8 <__libc_init_array+0xc>
 800b1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ce:	4798      	blx	r3
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	e7f2      	b.n	800b1ba <__libc_init_array+0x1e>
 800b1d4:	0800ca6c 	.word	0x0800ca6c
 800b1d8:	0800ca6c 	.word	0x0800ca6c
 800b1dc:	0800ca6c 	.word	0x0800ca6c
 800b1e0:	0800ca70 	.word	0x0800ca70

0800b1e4 <memcpy>:
 800b1e4:	440a      	add	r2, r1
 800b1e6:	4291      	cmp	r1, r2
 800b1e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1ec:	d100      	bne.n	800b1f0 <memcpy+0xc>
 800b1ee:	4770      	bx	lr
 800b1f0:	b510      	push	{r4, lr}
 800b1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	d1f9      	bne.n	800b1f2 <memcpy+0xe>
 800b1fe:	bd10      	pop	{r4, pc}

0800b200 <memset>:
 800b200:	4402      	add	r2, r0
 800b202:	4603      	mov	r3, r0
 800b204:	4293      	cmp	r3, r2
 800b206:	d100      	bne.n	800b20a <memset+0xa>
 800b208:	4770      	bx	lr
 800b20a:	f803 1b01 	strb.w	r1, [r3], #1
 800b20e:	e7f9      	b.n	800b204 <memset+0x4>

0800b210 <siprintf>:
 800b210:	b40e      	push	{r1, r2, r3}
 800b212:	b500      	push	{lr}
 800b214:	b09c      	sub	sp, #112	; 0x70
 800b216:	ab1d      	add	r3, sp, #116	; 0x74
 800b218:	9002      	str	r0, [sp, #8]
 800b21a:	9006      	str	r0, [sp, #24]
 800b21c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b220:	4809      	ldr	r0, [pc, #36]	; (800b248 <siprintf+0x38>)
 800b222:	9107      	str	r1, [sp, #28]
 800b224:	9104      	str	r1, [sp, #16]
 800b226:	4909      	ldr	r1, [pc, #36]	; (800b24c <siprintf+0x3c>)
 800b228:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22c:	9105      	str	r1, [sp, #20]
 800b22e:	6800      	ldr	r0, [r0, #0]
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	a902      	add	r1, sp, #8
 800b234:	f000 f868 	bl	800b308 <_svfiprintf_r>
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	2200      	movs	r2, #0
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	b01c      	add	sp, #112	; 0x70
 800b240:	f85d eb04 	ldr.w	lr, [sp], #4
 800b244:	b003      	add	sp, #12
 800b246:	4770      	bx	lr
 800b248:	20000108 	.word	0x20000108
 800b24c:	ffff0208 	.word	0xffff0208

0800b250 <__ssputs_r>:
 800b250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b254:	688e      	ldr	r6, [r1, #8]
 800b256:	429e      	cmp	r6, r3
 800b258:	4682      	mov	sl, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	4690      	mov	r8, r2
 800b25e:	461f      	mov	r7, r3
 800b260:	d838      	bhi.n	800b2d4 <__ssputs_r+0x84>
 800b262:	898a      	ldrh	r2, [r1, #12]
 800b264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b268:	d032      	beq.n	800b2d0 <__ssputs_r+0x80>
 800b26a:	6825      	ldr	r5, [r4, #0]
 800b26c:	6909      	ldr	r1, [r1, #16]
 800b26e:	eba5 0901 	sub.w	r9, r5, r1
 800b272:	6965      	ldr	r5, [r4, #20]
 800b274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b27c:	3301      	adds	r3, #1
 800b27e:	444b      	add	r3, r9
 800b280:	106d      	asrs	r5, r5, #1
 800b282:	429d      	cmp	r5, r3
 800b284:	bf38      	it	cc
 800b286:	461d      	movcc	r5, r3
 800b288:	0553      	lsls	r3, r2, #21
 800b28a:	d531      	bpl.n	800b2f0 <__ssputs_r+0xa0>
 800b28c:	4629      	mov	r1, r5
 800b28e:	f000 fb55 	bl	800b93c <_malloc_r>
 800b292:	4606      	mov	r6, r0
 800b294:	b950      	cbnz	r0, 800b2ac <__ssputs_r+0x5c>
 800b296:	230c      	movs	r3, #12
 800b298:	f8ca 3000 	str.w	r3, [sl]
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ac:	6921      	ldr	r1, [r4, #16]
 800b2ae:	464a      	mov	r2, r9
 800b2b0:	f7ff ff98 	bl	800b1e4 <memcpy>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	6126      	str	r6, [r4, #16]
 800b2c2:	6165      	str	r5, [r4, #20]
 800b2c4:	444e      	add	r6, r9
 800b2c6:	eba5 0509 	sub.w	r5, r5, r9
 800b2ca:	6026      	str	r6, [r4, #0]
 800b2cc:	60a5      	str	r5, [r4, #8]
 800b2ce:	463e      	mov	r6, r7
 800b2d0:	42be      	cmp	r6, r7
 800b2d2:	d900      	bls.n	800b2d6 <__ssputs_r+0x86>
 800b2d4:	463e      	mov	r6, r7
 800b2d6:	6820      	ldr	r0, [r4, #0]
 800b2d8:	4632      	mov	r2, r6
 800b2da:	4641      	mov	r1, r8
 800b2dc:	f000 faa8 	bl	800b830 <memmove>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	1b9b      	subs	r3, r3, r6
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	4433      	add	r3, r6
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e7db      	b.n	800b2a8 <__ssputs_r+0x58>
 800b2f0:	462a      	mov	r2, r5
 800b2f2:	f000 fb97 	bl	800ba24 <_realloc_r>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1e1      	bne.n	800b2c0 <__ssputs_r+0x70>
 800b2fc:	6921      	ldr	r1, [r4, #16]
 800b2fe:	4650      	mov	r0, sl
 800b300:	f000 fab0 	bl	800b864 <_free_r>
 800b304:	e7c7      	b.n	800b296 <__ssputs_r+0x46>
	...

0800b308 <_svfiprintf_r>:
 800b308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	4698      	mov	r8, r3
 800b30e:	898b      	ldrh	r3, [r1, #12]
 800b310:	061b      	lsls	r3, r3, #24
 800b312:	b09d      	sub	sp, #116	; 0x74
 800b314:	4607      	mov	r7, r0
 800b316:	460d      	mov	r5, r1
 800b318:	4614      	mov	r4, r2
 800b31a:	d50e      	bpl.n	800b33a <_svfiprintf_r+0x32>
 800b31c:	690b      	ldr	r3, [r1, #16]
 800b31e:	b963      	cbnz	r3, 800b33a <_svfiprintf_r+0x32>
 800b320:	2140      	movs	r1, #64	; 0x40
 800b322:	f000 fb0b 	bl	800b93c <_malloc_r>
 800b326:	6028      	str	r0, [r5, #0]
 800b328:	6128      	str	r0, [r5, #16]
 800b32a:	b920      	cbnz	r0, 800b336 <_svfiprintf_r+0x2e>
 800b32c:	230c      	movs	r3, #12
 800b32e:	603b      	str	r3, [r7, #0]
 800b330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b334:	e0d1      	b.n	800b4da <_svfiprintf_r+0x1d2>
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	616b      	str	r3, [r5, #20]
 800b33a:	2300      	movs	r3, #0
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	2320      	movs	r3, #32
 800b340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b344:	f8cd 800c 	str.w	r8, [sp, #12]
 800b348:	2330      	movs	r3, #48	; 0x30
 800b34a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4f4 <_svfiprintf_r+0x1ec>
 800b34e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b352:	f04f 0901 	mov.w	r9, #1
 800b356:	4623      	mov	r3, r4
 800b358:	469a      	mov	sl, r3
 800b35a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b35e:	b10a      	cbz	r2, 800b364 <_svfiprintf_r+0x5c>
 800b360:	2a25      	cmp	r2, #37	; 0x25
 800b362:	d1f9      	bne.n	800b358 <_svfiprintf_r+0x50>
 800b364:	ebba 0b04 	subs.w	fp, sl, r4
 800b368:	d00b      	beq.n	800b382 <_svfiprintf_r+0x7a>
 800b36a:	465b      	mov	r3, fp
 800b36c:	4622      	mov	r2, r4
 800b36e:	4629      	mov	r1, r5
 800b370:	4638      	mov	r0, r7
 800b372:	f7ff ff6d 	bl	800b250 <__ssputs_r>
 800b376:	3001      	adds	r0, #1
 800b378:	f000 80aa 	beq.w	800b4d0 <_svfiprintf_r+0x1c8>
 800b37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b37e:	445a      	add	r2, fp
 800b380:	9209      	str	r2, [sp, #36]	; 0x24
 800b382:	f89a 3000 	ldrb.w	r3, [sl]
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 80a2 	beq.w	800b4d0 <_svfiprintf_r+0x1c8>
 800b38c:	2300      	movs	r3, #0
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b396:	f10a 0a01 	add.w	sl, sl, #1
 800b39a:	9304      	str	r3, [sp, #16]
 800b39c:	9307      	str	r3, [sp, #28]
 800b39e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b3a4:	4654      	mov	r4, sl
 800b3a6:	2205      	movs	r2, #5
 800b3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ac:	4851      	ldr	r0, [pc, #324]	; (800b4f4 <_svfiprintf_r+0x1ec>)
 800b3ae:	f7f4 ff1f 	bl	80001f0 <memchr>
 800b3b2:	9a04      	ldr	r2, [sp, #16]
 800b3b4:	b9d8      	cbnz	r0, 800b3ee <_svfiprintf_r+0xe6>
 800b3b6:	06d0      	lsls	r0, r2, #27
 800b3b8:	bf44      	itt	mi
 800b3ba:	2320      	movmi	r3, #32
 800b3bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3c0:	0711      	lsls	r1, r2, #28
 800b3c2:	bf44      	itt	mi
 800b3c4:	232b      	movmi	r3, #43	; 0x2b
 800b3c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d0:	d015      	beq.n	800b3fe <_svfiprintf_r+0xf6>
 800b3d2:	9a07      	ldr	r2, [sp, #28]
 800b3d4:	4654      	mov	r4, sl
 800b3d6:	2000      	movs	r0, #0
 800b3d8:	f04f 0c0a 	mov.w	ip, #10
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3e2:	3b30      	subs	r3, #48	; 0x30
 800b3e4:	2b09      	cmp	r3, #9
 800b3e6:	d94e      	bls.n	800b486 <_svfiprintf_r+0x17e>
 800b3e8:	b1b0      	cbz	r0, 800b418 <_svfiprintf_r+0x110>
 800b3ea:	9207      	str	r2, [sp, #28]
 800b3ec:	e014      	b.n	800b418 <_svfiprintf_r+0x110>
 800b3ee:	eba0 0308 	sub.w	r3, r0, r8
 800b3f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	46a2      	mov	sl, r4
 800b3fc:	e7d2      	b.n	800b3a4 <_svfiprintf_r+0x9c>
 800b3fe:	9b03      	ldr	r3, [sp, #12]
 800b400:	1d19      	adds	r1, r3, #4
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	9103      	str	r1, [sp, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfbb      	ittet	lt
 800b40a:	425b      	neglt	r3, r3
 800b40c:	f042 0202 	orrlt.w	r2, r2, #2
 800b410:	9307      	strge	r3, [sp, #28]
 800b412:	9307      	strlt	r3, [sp, #28]
 800b414:	bfb8      	it	lt
 800b416:	9204      	strlt	r2, [sp, #16]
 800b418:	7823      	ldrb	r3, [r4, #0]
 800b41a:	2b2e      	cmp	r3, #46	; 0x2e
 800b41c:	d10c      	bne.n	800b438 <_svfiprintf_r+0x130>
 800b41e:	7863      	ldrb	r3, [r4, #1]
 800b420:	2b2a      	cmp	r3, #42	; 0x2a
 800b422:	d135      	bne.n	800b490 <_svfiprintf_r+0x188>
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	1d1a      	adds	r2, r3, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	9203      	str	r2, [sp, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	bfb8      	it	lt
 800b430:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b434:	3402      	adds	r4, #2
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b504 <_svfiprintf_r+0x1fc>
 800b43c:	7821      	ldrb	r1, [r4, #0]
 800b43e:	2203      	movs	r2, #3
 800b440:	4650      	mov	r0, sl
 800b442:	f7f4 fed5 	bl	80001f0 <memchr>
 800b446:	b140      	cbz	r0, 800b45a <_svfiprintf_r+0x152>
 800b448:	2340      	movs	r3, #64	; 0x40
 800b44a:	eba0 000a 	sub.w	r0, r0, sl
 800b44e:	fa03 f000 	lsl.w	r0, r3, r0
 800b452:	9b04      	ldr	r3, [sp, #16]
 800b454:	4303      	orrs	r3, r0
 800b456:	3401      	adds	r4, #1
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45e:	4826      	ldr	r0, [pc, #152]	; (800b4f8 <_svfiprintf_r+0x1f0>)
 800b460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b464:	2206      	movs	r2, #6
 800b466:	f7f4 fec3 	bl	80001f0 <memchr>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d038      	beq.n	800b4e0 <_svfiprintf_r+0x1d8>
 800b46e:	4b23      	ldr	r3, [pc, #140]	; (800b4fc <_svfiprintf_r+0x1f4>)
 800b470:	bb1b      	cbnz	r3, 800b4ba <_svfiprintf_r+0x1b2>
 800b472:	9b03      	ldr	r3, [sp, #12]
 800b474:	3307      	adds	r3, #7
 800b476:	f023 0307 	bic.w	r3, r3, #7
 800b47a:	3308      	adds	r3, #8
 800b47c:	9303      	str	r3, [sp, #12]
 800b47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b480:	4433      	add	r3, r6
 800b482:	9309      	str	r3, [sp, #36]	; 0x24
 800b484:	e767      	b.n	800b356 <_svfiprintf_r+0x4e>
 800b486:	fb0c 3202 	mla	r2, ip, r2, r3
 800b48a:	460c      	mov	r4, r1
 800b48c:	2001      	movs	r0, #1
 800b48e:	e7a5      	b.n	800b3dc <_svfiprintf_r+0xd4>
 800b490:	2300      	movs	r3, #0
 800b492:	3401      	adds	r4, #1
 800b494:	9305      	str	r3, [sp, #20]
 800b496:	4619      	mov	r1, r3
 800b498:	f04f 0c0a 	mov.w	ip, #10
 800b49c:	4620      	mov	r0, r4
 800b49e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a2:	3a30      	subs	r2, #48	; 0x30
 800b4a4:	2a09      	cmp	r2, #9
 800b4a6:	d903      	bls.n	800b4b0 <_svfiprintf_r+0x1a8>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0c5      	beq.n	800b438 <_svfiprintf_r+0x130>
 800b4ac:	9105      	str	r1, [sp, #20]
 800b4ae:	e7c3      	b.n	800b438 <_svfiprintf_r+0x130>
 800b4b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e7f0      	b.n	800b49c <_svfiprintf_r+0x194>
 800b4ba:	ab03      	add	r3, sp, #12
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4b0f      	ldr	r3, [pc, #60]	; (800b500 <_svfiprintf_r+0x1f8>)
 800b4c2:	a904      	add	r1, sp, #16
 800b4c4:	4638      	mov	r0, r7
 800b4c6:	f3af 8000 	nop.w
 800b4ca:	1c42      	adds	r2, r0, #1
 800b4cc:	4606      	mov	r6, r0
 800b4ce:	d1d6      	bne.n	800b47e <_svfiprintf_r+0x176>
 800b4d0:	89ab      	ldrh	r3, [r5, #12]
 800b4d2:	065b      	lsls	r3, r3, #25
 800b4d4:	f53f af2c 	bmi.w	800b330 <_svfiprintf_r+0x28>
 800b4d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4da:	b01d      	add	sp, #116	; 0x74
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	ab03      	add	r3, sp, #12
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	462a      	mov	r2, r5
 800b4e6:	4b06      	ldr	r3, [pc, #24]	; (800b500 <_svfiprintf_r+0x1f8>)
 800b4e8:	a904      	add	r1, sp, #16
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	f000 f87a 	bl	800b5e4 <_printf_i>
 800b4f0:	e7eb      	b.n	800b4ca <_svfiprintf_r+0x1c2>
 800b4f2:	bf00      	nop
 800b4f4:	0800ca30 	.word	0x0800ca30
 800b4f8:	0800ca3a 	.word	0x0800ca3a
 800b4fc:	00000000 	.word	0x00000000
 800b500:	0800b251 	.word	0x0800b251
 800b504:	0800ca36 	.word	0x0800ca36

0800b508 <_printf_common>:
 800b508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	4616      	mov	r6, r2
 800b50e:	4699      	mov	r9, r3
 800b510:	688a      	ldr	r2, [r1, #8]
 800b512:	690b      	ldr	r3, [r1, #16]
 800b514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b518:	4293      	cmp	r3, r2
 800b51a:	bfb8      	it	lt
 800b51c:	4613      	movlt	r3, r2
 800b51e:	6033      	str	r3, [r6, #0]
 800b520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b524:	4607      	mov	r7, r0
 800b526:	460c      	mov	r4, r1
 800b528:	b10a      	cbz	r2, 800b52e <_printf_common+0x26>
 800b52a:	3301      	adds	r3, #1
 800b52c:	6033      	str	r3, [r6, #0]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	0699      	lsls	r1, r3, #26
 800b532:	bf42      	ittt	mi
 800b534:	6833      	ldrmi	r3, [r6, #0]
 800b536:	3302      	addmi	r3, #2
 800b538:	6033      	strmi	r3, [r6, #0]
 800b53a:	6825      	ldr	r5, [r4, #0]
 800b53c:	f015 0506 	ands.w	r5, r5, #6
 800b540:	d106      	bne.n	800b550 <_printf_common+0x48>
 800b542:	f104 0a19 	add.w	sl, r4, #25
 800b546:	68e3      	ldr	r3, [r4, #12]
 800b548:	6832      	ldr	r2, [r6, #0]
 800b54a:	1a9b      	subs	r3, r3, r2
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	dc26      	bgt.n	800b59e <_printf_common+0x96>
 800b550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b554:	1e13      	subs	r3, r2, #0
 800b556:	6822      	ldr	r2, [r4, #0]
 800b558:	bf18      	it	ne
 800b55a:	2301      	movne	r3, #1
 800b55c:	0692      	lsls	r2, r2, #26
 800b55e:	d42b      	bmi.n	800b5b8 <_printf_common+0xb0>
 800b560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b564:	4649      	mov	r1, r9
 800b566:	4638      	mov	r0, r7
 800b568:	47c0      	blx	r8
 800b56a:	3001      	adds	r0, #1
 800b56c:	d01e      	beq.n	800b5ac <_printf_common+0xa4>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	68e5      	ldr	r5, [r4, #12]
 800b572:	6832      	ldr	r2, [r6, #0]
 800b574:	f003 0306 	and.w	r3, r3, #6
 800b578:	2b04      	cmp	r3, #4
 800b57a:	bf08      	it	eq
 800b57c:	1aad      	subeq	r5, r5, r2
 800b57e:	68a3      	ldr	r3, [r4, #8]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	bf0c      	ite	eq
 800b584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b588:	2500      	movne	r5, #0
 800b58a:	4293      	cmp	r3, r2
 800b58c:	bfc4      	itt	gt
 800b58e:	1a9b      	subgt	r3, r3, r2
 800b590:	18ed      	addgt	r5, r5, r3
 800b592:	2600      	movs	r6, #0
 800b594:	341a      	adds	r4, #26
 800b596:	42b5      	cmp	r5, r6
 800b598:	d11a      	bne.n	800b5d0 <_printf_common+0xc8>
 800b59a:	2000      	movs	r0, #0
 800b59c:	e008      	b.n	800b5b0 <_printf_common+0xa8>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	47c0      	blx	r8
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d103      	bne.n	800b5b4 <_printf_common+0xac>
 800b5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b4:	3501      	adds	r5, #1
 800b5b6:	e7c6      	b.n	800b546 <_printf_common+0x3e>
 800b5b8:	18e1      	adds	r1, r4, r3
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	2030      	movs	r0, #48	; 0x30
 800b5be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5c2:	4422      	add	r2, r4
 800b5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	e7c7      	b.n	800b560 <_printf_common+0x58>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4622      	mov	r2, r4
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c0      	blx	r8
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d0e6      	beq.n	800b5ac <_printf_common+0xa4>
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7d9      	b.n	800b596 <_printf_common+0x8e>
	...

0800b5e4 <_printf_i>:
 800b5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	7e0f      	ldrb	r7, [r1, #24]
 800b5ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5ec:	2f78      	cmp	r7, #120	; 0x78
 800b5ee:	4691      	mov	r9, r2
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	469a      	mov	sl, r3
 800b5f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5fa:	d807      	bhi.n	800b60c <_printf_i+0x28>
 800b5fc:	2f62      	cmp	r7, #98	; 0x62
 800b5fe:	d80a      	bhi.n	800b616 <_printf_i+0x32>
 800b600:	2f00      	cmp	r7, #0
 800b602:	f000 80d8 	beq.w	800b7b6 <_printf_i+0x1d2>
 800b606:	2f58      	cmp	r7, #88	; 0x58
 800b608:	f000 80a3 	beq.w	800b752 <_printf_i+0x16e>
 800b60c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b614:	e03a      	b.n	800b68c <_printf_i+0xa8>
 800b616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b61a:	2b15      	cmp	r3, #21
 800b61c:	d8f6      	bhi.n	800b60c <_printf_i+0x28>
 800b61e:	a101      	add	r1, pc, #4	; (adr r1, 800b624 <_printf_i+0x40>)
 800b620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b624:	0800b67d 	.word	0x0800b67d
 800b628:	0800b691 	.word	0x0800b691
 800b62c:	0800b60d 	.word	0x0800b60d
 800b630:	0800b60d 	.word	0x0800b60d
 800b634:	0800b60d 	.word	0x0800b60d
 800b638:	0800b60d 	.word	0x0800b60d
 800b63c:	0800b691 	.word	0x0800b691
 800b640:	0800b60d 	.word	0x0800b60d
 800b644:	0800b60d 	.word	0x0800b60d
 800b648:	0800b60d 	.word	0x0800b60d
 800b64c:	0800b60d 	.word	0x0800b60d
 800b650:	0800b79d 	.word	0x0800b79d
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b77f 	.word	0x0800b77f
 800b65c:	0800b60d 	.word	0x0800b60d
 800b660:	0800b60d 	.word	0x0800b60d
 800b664:	0800b7bf 	.word	0x0800b7bf
 800b668:	0800b60d 	.word	0x0800b60d
 800b66c:	0800b6c1 	.word	0x0800b6c1
 800b670:	0800b60d 	.word	0x0800b60d
 800b674:	0800b60d 	.word	0x0800b60d
 800b678:	0800b787 	.word	0x0800b787
 800b67c:	682b      	ldr	r3, [r5, #0]
 800b67e:	1d1a      	adds	r2, r3, #4
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	602a      	str	r2, [r5, #0]
 800b684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b68c:	2301      	movs	r3, #1
 800b68e:	e0a3      	b.n	800b7d8 <_printf_i+0x1f4>
 800b690:	6820      	ldr	r0, [r4, #0]
 800b692:	6829      	ldr	r1, [r5, #0]
 800b694:	0606      	lsls	r6, r0, #24
 800b696:	f101 0304 	add.w	r3, r1, #4
 800b69a:	d50a      	bpl.n	800b6b2 <_printf_i+0xce>
 800b69c:	680e      	ldr	r6, [r1, #0]
 800b69e:	602b      	str	r3, [r5, #0]
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	da03      	bge.n	800b6ac <_printf_i+0xc8>
 800b6a4:	232d      	movs	r3, #45	; 0x2d
 800b6a6:	4276      	negs	r6, r6
 800b6a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ac:	485e      	ldr	r0, [pc, #376]	; (800b828 <_printf_i+0x244>)
 800b6ae:	230a      	movs	r3, #10
 800b6b0:	e019      	b.n	800b6e6 <_printf_i+0x102>
 800b6b2:	680e      	ldr	r6, [r1, #0]
 800b6b4:	602b      	str	r3, [r5, #0]
 800b6b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6ba:	bf18      	it	ne
 800b6bc:	b236      	sxthne	r6, r6
 800b6be:	e7ef      	b.n	800b6a0 <_printf_i+0xbc>
 800b6c0:	682b      	ldr	r3, [r5, #0]
 800b6c2:	6820      	ldr	r0, [r4, #0]
 800b6c4:	1d19      	adds	r1, r3, #4
 800b6c6:	6029      	str	r1, [r5, #0]
 800b6c8:	0601      	lsls	r1, r0, #24
 800b6ca:	d501      	bpl.n	800b6d0 <_printf_i+0xec>
 800b6cc:	681e      	ldr	r6, [r3, #0]
 800b6ce:	e002      	b.n	800b6d6 <_printf_i+0xf2>
 800b6d0:	0646      	lsls	r6, r0, #25
 800b6d2:	d5fb      	bpl.n	800b6cc <_printf_i+0xe8>
 800b6d4:	881e      	ldrh	r6, [r3, #0]
 800b6d6:	4854      	ldr	r0, [pc, #336]	; (800b828 <_printf_i+0x244>)
 800b6d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b6da:	bf0c      	ite	eq
 800b6dc:	2308      	moveq	r3, #8
 800b6de:	230a      	movne	r3, #10
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6e6:	6865      	ldr	r5, [r4, #4]
 800b6e8:	60a5      	str	r5, [r4, #8]
 800b6ea:	2d00      	cmp	r5, #0
 800b6ec:	bfa2      	ittt	ge
 800b6ee:	6821      	ldrge	r1, [r4, #0]
 800b6f0:	f021 0104 	bicge.w	r1, r1, #4
 800b6f4:	6021      	strge	r1, [r4, #0]
 800b6f6:	b90e      	cbnz	r6, 800b6fc <_printf_i+0x118>
 800b6f8:	2d00      	cmp	r5, #0
 800b6fa:	d04d      	beq.n	800b798 <_printf_i+0x1b4>
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b702:	fb03 6711 	mls	r7, r3, r1, r6
 800b706:	5dc7      	ldrb	r7, [r0, r7]
 800b708:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b70c:	4637      	mov	r7, r6
 800b70e:	42bb      	cmp	r3, r7
 800b710:	460e      	mov	r6, r1
 800b712:	d9f4      	bls.n	800b6fe <_printf_i+0x11a>
 800b714:	2b08      	cmp	r3, #8
 800b716:	d10b      	bne.n	800b730 <_printf_i+0x14c>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	07de      	lsls	r6, r3, #31
 800b71c:	d508      	bpl.n	800b730 <_printf_i+0x14c>
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	6861      	ldr	r1, [r4, #4]
 800b722:	4299      	cmp	r1, r3
 800b724:	bfde      	ittt	le
 800b726:	2330      	movle	r3, #48	; 0x30
 800b728:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b72c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b730:	1b52      	subs	r2, r2, r5
 800b732:	6122      	str	r2, [r4, #16]
 800b734:	f8cd a000 	str.w	sl, [sp]
 800b738:	464b      	mov	r3, r9
 800b73a:	aa03      	add	r2, sp, #12
 800b73c:	4621      	mov	r1, r4
 800b73e:	4640      	mov	r0, r8
 800b740:	f7ff fee2 	bl	800b508 <_printf_common>
 800b744:	3001      	adds	r0, #1
 800b746:	d14c      	bne.n	800b7e2 <_printf_i+0x1fe>
 800b748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b74c:	b004      	add	sp, #16
 800b74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b752:	4835      	ldr	r0, [pc, #212]	; (800b828 <_printf_i+0x244>)
 800b754:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b758:	6829      	ldr	r1, [r5, #0]
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b760:	6029      	str	r1, [r5, #0]
 800b762:	061d      	lsls	r5, r3, #24
 800b764:	d514      	bpl.n	800b790 <_printf_i+0x1ac>
 800b766:	07df      	lsls	r7, r3, #31
 800b768:	bf44      	itt	mi
 800b76a:	f043 0320 	orrmi.w	r3, r3, #32
 800b76e:	6023      	strmi	r3, [r4, #0]
 800b770:	b91e      	cbnz	r6, 800b77a <_printf_i+0x196>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	f023 0320 	bic.w	r3, r3, #32
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	2310      	movs	r3, #16
 800b77c:	e7b0      	b.n	800b6e0 <_printf_i+0xfc>
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	f043 0320 	orr.w	r3, r3, #32
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	2378      	movs	r3, #120	; 0x78
 800b788:	4828      	ldr	r0, [pc, #160]	; (800b82c <_printf_i+0x248>)
 800b78a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b78e:	e7e3      	b.n	800b758 <_printf_i+0x174>
 800b790:	0659      	lsls	r1, r3, #25
 800b792:	bf48      	it	mi
 800b794:	b2b6      	uxthmi	r6, r6
 800b796:	e7e6      	b.n	800b766 <_printf_i+0x182>
 800b798:	4615      	mov	r5, r2
 800b79a:	e7bb      	b.n	800b714 <_printf_i+0x130>
 800b79c:	682b      	ldr	r3, [r5, #0]
 800b79e:	6826      	ldr	r6, [r4, #0]
 800b7a0:	6961      	ldr	r1, [r4, #20]
 800b7a2:	1d18      	adds	r0, r3, #4
 800b7a4:	6028      	str	r0, [r5, #0]
 800b7a6:	0635      	lsls	r5, r6, #24
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	d501      	bpl.n	800b7b0 <_printf_i+0x1cc>
 800b7ac:	6019      	str	r1, [r3, #0]
 800b7ae:	e002      	b.n	800b7b6 <_printf_i+0x1d2>
 800b7b0:	0670      	lsls	r0, r6, #25
 800b7b2:	d5fb      	bpl.n	800b7ac <_printf_i+0x1c8>
 800b7b4:	8019      	strh	r1, [r3, #0]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	6123      	str	r3, [r4, #16]
 800b7ba:	4615      	mov	r5, r2
 800b7bc:	e7ba      	b.n	800b734 <_printf_i+0x150>
 800b7be:	682b      	ldr	r3, [r5, #0]
 800b7c0:	1d1a      	adds	r2, r3, #4
 800b7c2:	602a      	str	r2, [r5, #0]
 800b7c4:	681d      	ldr	r5, [r3, #0]
 800b7c6:	6862      	ldr	r2, [r4, #4]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	f7f4 fd10 	bl	80001f0 <memchr>
 800b7d0:	b108      	cbz	r0, 800b7d6 <_printf_i+0x1f2>
 800b7d2:	1b40      	subs	r0, r0, r5
 800b7d4:	6060      	str	r0, [r4, #4]
 800b7d6:	6863      	ldr	r3, [r4, #4]
 800b7d8:	6123      	str	r3, [r4, #16]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e0:	e7a8      	b.n	800b734 <_printf_i+0x150>
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	462a      	mov	r2, r5
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	47d0      	blx	sl
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d0ab      	beq.n	800b748 <_printf_i+0x164>
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	079b      	lsls	r3, r3, #30
 800b7f4:	d413      	bmi.n	800b81e <_printf_i+0x23a>
 800b7f6:	68e0      	ldr	r0, [r4, #12]
 800b7f8:	9b03      	ldr	r3, [sp, #12]
 800b7fa:	4298      	cmp	r0, r3
 800b7fc:	bfb8      	it	lt
 800b7fe:	4618      	movlt	r0, r3
 800b800:	e7a4      	b.n	800b74c <_printf_i+0x168>
 800b802:	2301      	movs	r3, #1
 800b804:	4632      	mov	r2, r6
 800b806:	4649      	mov	r1, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	47d0      	blx	sl
 800b80c:	3001      	adds	r0, #1
 800b80e:	d09b      	beq.n	800b748 <_printf_i+0x164>
 800b810:	3501      	adds	r5, #1
 800b812:	68e3      	ldr	r3, [r4, #12]
 800b814:	9903      	ldr	r1, [sp, #12]
 800b816:	1a5b      	subs	r3, r3, r1
 800b818:	42ab      	cmp	r3, r5
 800b81a:	dcf2      	bgt.n	800b802 <_printf_i+0x21e>
 800b81c:	e7eb      	b.n	800b7f6 <_printf_i+0x212>
 800b81e:	2500      	movs	r5, #0
 800b820:	f104 0619 	add.w	r6, r4, #25
 800b824:	e7f5      	b.n	800b812 <_printf_i+0x22e>
 800b826:	bf00      	nop
 800b828:	0800ca41 	.word	0x0800ca41
 800b82c:	0800ca52 	.word	0x0800ca52

0800b830 <memmove>:
 800b830:	4288      	cmp	r0, r1
 800b832:	b510      	push	{r4, lr}
 800b834:	eb01 0402 	add.w	r4, r1, r2
 800b838:	d902      	bls.n	800b840 <memmove+0x10>
 800b83a:	4284      	cmp	r4, r0
 800b83c:	4623      	mov	r3, r4
 800b83e:	d807      	bhi.n	800b850 <memmove+0x20>
 800b840:	1e43      	subs	r3, r0, #1
 800b842:	42a1      	cmp	r1, r4
 800b844:	d008      	beq.n	800b858 <memmove+0x28>
 800b846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b84a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b84e:	e7f8      	b.n	800b842 <memmove+0x12>
 800b850:	4402      	add	r2, r0
 800b852:	4601      	mov	r1, r0
 800b854:	428a      	cmp	r2, r1
 800b856:	d100      	bne.n	800b85a <memmove+0x2a>
 800b858:	bd10      	pop	{r4, pc}
 800b85a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b85e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b862:	e7f7      	b.n	800b854 <memmove+0x24>

0800b864 <_free_r>:
 800b864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b866:	2900      	cmp	r1, #0
 800b868:	d044      	beq.n	800b8f4 <_free_r+0x90>
 800b86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b86e:	9001      	str	r0, [sp, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	f1a1 0404 	sub.w	r4, r1, #4
 800b876:	bfb8      	it	lt
 800b878:	18e4      	addlt	r4, r4, r3
 800b87a:	f000 f913 	bl	800baa4 <__malloc_lock>
 800b87e:	4a1e      	ldr	r2, [pc, #120]	; (800b8f8 <_free_r+0x94>)
 800b880:	9801      	ldr	r0, [sp, #4]
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	b933      	cbnz	r3, 800b894 <_free_r+0x30>
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6014      	str	r4, [r2, #0]
 800b88a:	b003      	add	sp, #12
 800b88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b890:	f000 b90e 	b.w	800bab0 <__malloc_unlock>
 800b894:	42a3      	cmp	r3, r4
 800b896:	d908      	bls.n	800b8aa <_free_r+0x46>
 800b898:	6825      	ldr	r5, [r4, #0]
 800b89a:	1961      	adds	r1, r4, r5
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf01      	itttt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	1949      	addeq	r1, r1, r5
 800b8a6:	6021      	streq	r1, [r4, #0]
 800b8a8:	e7ed      	b.n	800b886 <_free_r+0x22>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x50>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x46>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1855      	adds	r5, r2, r1
 800b8b8:	42a5      	cmp	r5, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x70>
 800b8bc:	6824      	ldr	r4, [r4, #0]
 800b8be:	4421      	add	r1, r4
 800b8c0:	1854      	adds	r4, r2, r1
 800b8c2:	42a3      	cmp	r3, r4
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1e0      	bne.n	800b88a <_free_r+0x26>
 800b8c8:	681c      	ldr	r4, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4421      	add	r1, r4
 800b8d0:	6011      	str	r1, [r2, #0]
 800b8d2:	e7da      	b.n	800b88a <_free_r+0x26>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x78>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	e7d6      	b.n	800b88a <_free_r+0x26>
 800b8dc:	6825      	ldr	r5, [r4, #0]
 800b8de:	1961      	adds	r1, r4, r5
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1949      	addeq	r1, r1, r5
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7ca      	b.n	800b88a <_free_r+0x26>
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bd30      	pop	{r4, r5, pc}
 800b8f8:	20001ebc 	.word	0x20001ebc

0800b8fc <sbrk_aligned>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4e0e      	ldr	r6, [pc, #56]	; (800b938 <sbrk_aligned+0x3c>)
 800b900:	460c      	mov	r4, r1
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	b911      	cbnz	r1, 800b90e <sbrk_aligned+0x12>
 800b908:	f000 f8bc 	bl	800ba84 <_sbrk_r>
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 f8b7 	bl	800ba84 <_sbrk_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d00a      	beq.n	800b930 <sbrk_aligned+0x34>
 800b91a:	1cc4      	adds	r4, r0, #3
 800b91c:	f024 0403 	bic.w	r4, r4, #3
 800b920:	42a0      	cmp	r0, r4
 800b922:	d007      	beq.n	800b934 <sbrk_aligned+0x38>
 800b924:	1a21      	subs	r1, r4, r0
 800b926:	4628      	mov	r0, r5
 800b928:	f000 f8ac 	bl	800ba84 <_sbrk_r>
 800b92c:	3001      	adds	r0, #1
 800b92e:	d101      	bne.n	800b934 <sbrk_aligned+0x38>
 800b930:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b934:	4620      	mov	r0, r4
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	20001ec0 	.word	0x20001ec0

0800b93c <_malloc_r>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	1ccd      	adds	r5, r1, #3
 800b942:	f025 0503 	bic.w	r5, r5, #3
 800b946:	3508      	adds	r5, #8
 800b948:	2d0c      	cmp	r5, #12
 800b94a:	bf38      	it	cc
 800b94c:	250c      	movcc	r5, #12
 800b94e:	2d00      	cmp	r5, #0
 800b950:	4607      	mov	r7, r0
 800b952:	db01      	blt.n	800b958 <_malloc_r+0x1c>
 800b954:	42a9      	cmp	r1, r5
 800b956:	d905      	bls.n	800b964 <_malloc_r+0x28>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	2600      	movs	r6, #0
 800b95e:	4630      	mov	r0, r6
 800b960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b964:	4e2e      	ldr	r6, [pc, #184]	; (800ba20 <_malloc_r+0xe4>)
 800b966:	f000 f89d 	bl	800baa4 <__malloc_lock>
 800b96a:	6833      	ldr	r3, [r6, #0]
 800b96c:	461c      	mov	r4, r3
 800b96e:	bb34      	cbnz	r4, 800b9be <_malloc_r+0x82>
 800b970:	4629      	mov	r1, r5
 800b972:	4638      	mov	r0, r7
 800b974:	f7ff ffc2 	bl	800b8fc <sbrk_aligned>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	4604      	mov	r4, r0
 800b97c:	d14d      	bne.n	800ba1a <_malloc_r+0xde>
 800b97e:	6834      	ldr	r4, [r6, #0]
 800b980:	4626      	mov	r6, r4
 800b982:	2e00      	cmp	r6, #0
 800b984:	d140      	bne.n	800ba08 <_malloc_r+0xcc>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	4631      	mov	r1, r6
 800b98a:	4638      	mov	r0, r7
 800b98c:	eb04 0803 	add.w	r8, r4, r3
 800b990:	f000 f878 	bl	800ba84 <_sbrk_r>
 800b994:	4580      	cmp	r8, r0
 800b996:	d13a      	bne.n	800ba0e <_malloc_r+0xd2>
 800b998:	6821      	ldr	r1, [r4, #0]
 800b99a:	3503      	adds	r5, #3
 800b99c:	1a6d      	subs	r5, r5, r1
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f7ff ffa5 	bl	800b8fc <sbrk_aligned>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d02b      	beq.n	800ba0e <_malloc_r+0xd2>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	442b      	add	r3, r5
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	e00e      	b.n	800b9dc <_malloc_r+0xa0>
 800b9be:	6822      	ldr	r2, [r4, #0]
 800b9c0:	1b52      	subs	r2, r2, r5
 800b9c2:	d41e      	bmi.n	800ba02 <_malloc_r+0xc6>
 800b9c4:	2a0b      	cmp	r2, #11
 800b9c6:	d916      	bls.n	800b9f6 <_malloc_r+0xba>
 800b9c8:	1961      	adds	r1, r4, r5
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	6025      	str	r5, [r4, #0]
 800b9ce:	bf18      	it	ne
 800b9d0:	6059      	strne	r1, [r3, #4]
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	bf08      	it	eq
 800b9d6:	6031      	streq	r1, [r6, #0]
 800b9d8:	5162      	str	r2, [r4, r5]
 800b9da:	604b      	str	r3, [r1, #4]
 800b9dc:	4638      	mov	r0, r7
 800b9de:	f104 060b 	add.w	r6, r4, #11
 800b9e2:	f000 f865 	bl	800bab0 <__malloc_unlock>
 800b9e6:	f026 0607 	bic.w	r6, r6, #7
 800b9ea:	1d23      	adds	r3, r4, #4
 800b9ec:	1af2      	subs	r2, r6, r3
 800b9ee:	d0b6      	beq.n	800b95e <_malloc_r+0x22>
 800b9f0:	1b9b      	subs	r3, r3, r6
 800b9f2:	50a3      	str	r3, [r4, r2]
 800b9f4:	e7b3      	b.n	800b95e <_malloc_r+0x22>
 800b9f6:	6862      	ldr	r2, [r4, #4]
 800b9f8:	42a3      	cmp	r3, r4
 800b9fa:	bf0c      	ite	eq
 800b9fc:	6032      	streq	r2, [r6, #0]
 800b9fe:	605a      	strne	r2, [r3, #4]
 800ba00:	e7ec      	b.n	800b9dc <_malloc_r+0xa0>
 800ba02:	4623      	mov	r3, r4
 800ba04:	6864      	ldr	r4, [r4, #4]
 800ba06:	e7b2      	b.n	800b96e <_malloc_r+0x32>
 800ba08:	4634      	mov	r4, r6
 800ba0a:	6876      	ldr	r6, [r6, #4]
 800ba0c:	e7b9      	b.n	800b982 <_malloc_r+0x46>
 800ba0e:	230c      	movs	r3, #12
 800ba10:	603b      	str	r3, [r7, #0]
 800ba12:	4638      	mov	r0, r7
 800ba14:	f000 f84c 	bl	800bab0 <__malloc_unlock>
 800ba18:	e7a1      	b.n	800b95e <_malloc_r+0x22>
 800ba1a:	6025      	str	r5, [r4, #0]
 800ba1c:	e7de      	b.n	800b9dc <_malloc_r+0xa0>
 800ba1e:	bf00      	nop
 800ba20:	20001ebc 	.word	0x20001ebc

0800ba24 <_realloc_r>:
 800ba24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba28:	4680      	mov	r8, r0
 800ba2a:	4614      	mov	r4, r2
 800ba2c:	460e      	mov	r6, r1
 800ba2e:	b921      	cbnz	r1, 800ba3a <_realloc_r+0x16>
 800ba30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	4611      	mov	r1, r2
 800ba36:	f7ff bf81 	b.w	800b93c <_malloc_r>
 800ba3a:	b92a      	cbnz	r2, 800ba48 <_realloc_r+0x24>
 800ba3c:	f7ff ff12 	bl	800b864 <_free_r>
 800ba40:	4625      	mov	r5, r4
 800ba42:	4628      	mov	r0, r5
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	f000 f838 	bl	800babc <_malloc_usable_size_r>
 800ba4c:	4284      	cmp	r4, r0
 800ba4e:	4607      	mov	r7, r0
 800ba50:	d802      	bhi.n	800ba58 <_realloc_r+0x34>
 800ba52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba56:	d812      	bhi.n	800ba7e <_realloc_r+0x5a>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4640      	mov	r0, r8
 800ba5c:	f7ff ff6e 	bl	800b93c <_malloc_r>
 800ba60:	4605      	mov	r5, r0
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0ed      	beq.n	800ba42 <_realloc_r+0x1e>
 800ba66:	42bc      	cmp	r4, r7
 800ba68:	4622      	mov	r2, r4
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	bf28      	it	cs
 800ba6e:	463a      	movcs	r2, r7
 800ba70:	f7ff fbb8 	bl	800b1e4 <memcpy>
 800ba74:	4631      	mov	r1, r6
 800ba76:	4640      	mov	r0, r8
 800ba78:	f7ff fef4 	bl	800b864 <_free_r>
 800ba7c:	e7e1      	b.n	800ba42 <_realloc_r+0x1e>
 800ba7e:	4635      	mov	r5, r6
 800ba80:	e7df      	b.n	800ba42 <_realloc_r+0x1e>
	...

0800ba84 <_sbrk_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d06      	ldr	r5, [pc, #24]	; (800baa0 <_sbrk_r+0x1c>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	602b      	str	r3, [r5, #0]
 800ba90:	f7f7 fb70 	bl	8003174 <_sbrk>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_sbrk_r+0x1a>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_sbrk_r+0x1a>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	20001ec4 	.word	0x20001ec4

0800baa4 <__malloc_lock>:
 800baa4:	4801      	ldr	r0, [pc, #4]	; (800baac <__malloc_lock+0x8>)
 800baa6:	f000 b811 	b.w	800bacc <__retarget_lock_acquire_recursive>
 800baaa:	bf00      	nop
 800baac:	20001ec8 	.word	0x20001ec8

0800bab0 <__malloc_unlock>:
 800bab0:	4801      	ldr	r0, [pc, #4]	; (800bab8 <__malloc_unlock+0x8>)
 800bab2:	f000 b80c 	b.w	800bace <__retarget_lock_release_recursive>
 800bab6:	bf00      	nop
 800bab8:	20001ec8 	.word	0x20001ec8

0800babc <_malloc_usable_size_r>:
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f18      	subs	r0, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfbc      	itt	lt
 800bac6:	580b      	ldrlt	r3, [r1, r0]
 800bac8:	18c0      	addlt	r0, r0, r3
 800baca:	4770      	bx	lr

0800bacc <__retarget_lock_acquire_recursive>:
 800bacc:	4770      	bx	lr

0800bace <__retarget_lock_release_recursive>:
 800bace:	4770      	bx	lr

0800bad0 <_init>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr

0800badc <_fini>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr
