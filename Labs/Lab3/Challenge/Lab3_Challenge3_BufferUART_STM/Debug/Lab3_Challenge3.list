
Lab3_Challenge3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f9c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002744  08002744  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002744  08002744  00012744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800274c  0800274c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800274c  0800274c  0001274c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002774  20000070  080027c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027e4  080027c4  000227e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044c9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001176  00000000  00000000  00024569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  000256e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00025ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163cd  00000000  00000000  00025fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006231  00000000  00000000  0003c385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084399  00000000  00000000  000425b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c694f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001768  00000000  00000000  000c69a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800211c 	.word	0x0800211c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800211c 	.word	0x0800211c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	db0b      	blt.n	8000506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	f003 021f 	and.w	r2, r3, #31
 80004f4:	4907      	ldr	r1, [pc, #28]	; (8000514 <__NVIC_EnableIRQ+0x38>)
 80004f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fa:	095b      	lsrs	r3, r3, #5
 80004fc:	2001      	movs	r0, #1
 80004fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000e100 	.word	0xe000e100

08000518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	6039      	str	r1, [r7, #0]
 8000522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	db0a      	blt.n	8000542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2da      	uxtb	r2, r3
 8000530:	490c      	ldr	r1, [pc, #48]	; (8000564 <__NVIC_SetPriority+0x4c>)
 8000532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000536:	0112      	lsls	r2, r2, #4
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	440b      	add	r3, r1
 800053c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000540:	e00a      	b.n	8000558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4908      	ldr	r1, [pc, #32]	; (8000568 <__NVIC_SetPriority+0x50>)
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 030f 	and.w	r3, r3, #15
 800054e:	3b04      	subs	r3, #4
 8000550:	0112      	lsls	r2, r2, #4
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	440b      	add	r3, r1
 8000556:	761a      	strb	r2, [r3, #24]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e100 	.word	0xe000e100
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <UART_Init>:
 * @brief  Initializes UART2 peripheral and GPIO pins for communication
 * @note   Uses GPIOA Pin 2 (TX) and Pin 3 (RX) for communication
 * @param  None
 * @retval None
 */
void UART_Init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
    // Enable clock for USART2 and GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <UART_Init+0x7c>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <UART_Init+0x7c>)
 8000576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <UART_Init+0x7c>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <UART_Init+0x7c>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure GPIOA pins for USART2 TX/RX
    GPIOA->AFR[0] |= (0x7 << GPIO_AFRL_AFSEL2_Pos) | (0x7 << GPIO_AFRL_AFSEL3_Pos);
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <UART_Init+0x80>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <UART_Init+0x80>)
 800058e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000592:	6213      	str	r3, [r2, #32]
    GPIOA->MODER |= (0x2 << GPIO_MODER_MODE2_Pos) | (0x2 << GPIO_MODER_MODE3_Pos);
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <UART_Init+0x80>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <UART_Init+0x80>)
 800059a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800059e:	6013      	str	r3, [r2, #0]

    // Enable USART2 and set baud rate
    USART2->BRR = SystemCoreClock / 19200;
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <UART_Init+0x84>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <UART_Init+0x88>)
 80005a6:	4914      	ldr	r1, [pc, #80]	; (80005f8 <UART_Init+0x8c>)
 80005a8:	fba1 1303 	umull	r1, r3, r1, r3
 80005ac:	0adb      	lsrs	r3, r3, #11
 80005ae:	6093      	str	r3, [r2, #8]
    USART2->CR1 |= USART_CR1_UE;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <UART_Init+0x88>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a0f      	ldr	r2, [pc, #60]	; (80005f4 <UART_Init+0x88>)
 80005b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005ba:	60d3      	str	r3, [r2, #12]

    // Enable RXNE interrupt
    USART2->CR1 |= USART_CR1_RXNEIE;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <UART_Init+0x88>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <UART_Init+0x88>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	60d3      	str	r3, [r2, #12]

    // Enable NVIC interrupt
    NVIC_SetPriority(USART2_IRQn, 0);
 80005c8:	2100      	movs	r1, #0
 80005ca:	2026      	movs	r0, #38	; 0x26
 80005cc:	f7ff ffa4 	bl	8000518 <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);
 80005d0:	2026      	movs	r0, #38	; 0x26
 80005d2:	f7ff ff83 	bl	80004dc <__NVIC_EnableIRQ>

    // Enable transmitter and receiver
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <UART_Init+0x88>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <UART_Init+0x88>)
 80005dc:	f043 030c 	orr.w	r3, r3, #12
 80005e0:	60d3      	str	r3, [r2, #12]
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	20000000 	.word	0x20000000
 80005f4:	40004400 	.word	0x40004400
 80005f8:	1b4e81b5 	.word	0x1b4e81b5

080005fc <Clock_Init>:
#include "clock.h"

/**
 * @brief Initializes clock and enables the MAIN PLL.
 */
void Clock_Init(void) {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
    // Enable HSI and wait for HSI ready
    RCC->CR |= RCC_CR_HSION;
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <Clock_Init+0x48>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <Clock_Init+0x48>)
 8000606:	f043 0301 	orr.w	r3, r3, #1
 800060a:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_HSIRDY) != RCC_CR_HSIRDY);
 800060c:	bf00      	nop
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <Clock_Init+0x48>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b02      	cmp	r3, #2
 8000618:	d1f9      	bne.n	800060e <Clock_Init+0x12>

    // Enable PLL and wait for PLL ready
    RCC->CR |= RCC_CR_PLLON;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <Clock_Init+0x48>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <Clock_Init+0x48>)
 8000620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000624:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY);
 8000626:	bf00      	nop
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <Clock_Init+0x48>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000634:	d1f8      	bne.n	8000628 <Clock_Init+0x2c>
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 faba 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f844 	bl	80006dc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  Clock_Init();
 8000654:	f7ff ffd2 	bl	80005fc <Clock_Init>
  UART_Init();
 8000658:	f7ff ff88 	bl	800056c <UART_Init>

  printf("*******************************************************\r\n");
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <main+0x64>)
 800065e:	f001 f8cd 	bl	80017fc <puts>
  printf("              Firmware Program Information             \r\n");
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0x68>)
 8000664:	f001 f8ca 	bl	80017fc <puts>
  printf("*******************************************************\r\n\r\n");
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <main+0x6c>)
 800066a:	f001 f8c7 	bl	80017fc <puts>
  printf("This firmware program is designed for a microcontroller and enables communication between the microcontroller and another device by setting up the USART2 module.\r\n\r\n");
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <main+0x70>)
 8000670:	f001 f8c4 	bl	80017fc <puts>
  printf("In addition to setting up the communication module, the program also initializes the UART and the green LED. It sets up the system clock and includes an interrupt handler for receiving and transmitting data.\r\n\r\n");
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0x74>)
 8000676:	f001 f8c1 	bl	80017fc <puts>
  printf("Here's a brief breakdown of what the main function and other functions in the program do:\r\n\r\n");
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0x78>)
 800067c:	f001 f8be 	bl	80017fc <puts>
  printf("  - main function: initializes the UART and the green LED, then enters an infinite loop.\r\n");
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <main+0x7c>)
 8000682:	f001 f8bb 	bl	80017fc <puts>
  printf("  - init_UART function: initializes the USART2 module and sets up the GPIO pins for transmitting and receiving data.\r\n");
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <main+0x80>)
 8000688:	f001 f8b8 	bl	80017fc <puts>
  printf("  - CLock_Init function: sets up the system clock.\r\n");
 800068c:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0x84>)
 800068e:	f001 f8b5 	bl	80017fc <puts>
  printf("  - USART2_IRQHandler function: interrupt handler for receiving and transmitting data.\r\n\r\n");
 8000692:	480f      	ldr	r0, [pc, #60]	; (80006d0 <main+0x88>)
 8000694:	f001 f8b2 	bl	80017fc <puts>
  printf("The program uses two buffers of size 128 bytes each for transmitting and receiving data, and the variables rx_head and tx_head are used to keep track of the next available location in the receive and transmit buffers, respectively. The rx_tail and tx_tail variables are used to keep track of the next location to be read from the receive and transmit buffers.\r\n\r\n");
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <main+0x8c>)
 800069a:	f001 f8af 	bl	80017fc <puts>
  printf("********************************************************\r\n");
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <main+0x90>)
 80006a0:	f001 f8ac 	bl	80017fc <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	print_received_chars();
 80006a4:	f000 f942 	bl	800092c <print_received_chars>
 80006a8:	e7fc      	b.n	80006a4 <main+0x5c>
 80006aa:	bf00      	nop
 80006ac:	08002134 	.word	0x08002134
 80006b0:	08002170 	.word	0x08002170
 80006b4:	080021ac 	.word	0x080021ac
 80006b8:	080021e8 	.word	0x080021e8
 80006bc:	08002290 	.word	0x08002290
 80006c0:	08002364 	.word	0x08002364
 80006c4:	080023c4 	.word	0x080023c4
 80006c8:	08002420 	.word	0x08002420
 80006cc:	08002498 	.word	0x08002498
 80006d0:	080024cc 	.word	0x080024cc
 80006d4:	08002528 	.word	0x08002528
 80006d8:	08002694 	.word	0x08002694

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f810 	bl	8001710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xb4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xb4>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xb4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemClock_Config+0xb8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <SystemClock_Config+0xb8>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemClock_Config+0xb8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000744:	2300      	movs	r3, #0
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fb91 	bl	8000e74 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000758:	f000 f918 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fdf4 	bl	8001364 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000782:	f000 f903 	bl	800098c <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <USART2_IRQHandler>:
 * @note   Receives and transmits data using the USART2 peripheral
 * @param  None
 * @retval None
 */

void USART2_IRQHandler(void) {
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
    uint32_t interrupt_flags = USART2->SR; 			// read status register to get interrupt flags
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <USART2_IRQHandler+0xa4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	607b      	str	r3, [r7, #4]

    // while there are still interrupts to handle
    while (interrupt_flags & (USART_SR_RXNE | USART_SR_TXE)) {
 80007a4:	e03d      	b.n	8000822 <USART2_IRQHandler+0x8a>
        if (interrupt_flags & USART_SR_RXNE) { 		// if interrupt is for receive buffer not empty
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f003 0320 	and.w	r3, r3, #32
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d013      	beq.n	80007d8 <USART2_IRQHandler+0x40>
            if (rx_data_head < BUFFER_SIZE) { 		// if there is still space in receive buffer
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <USART2_IRQHandler+0xa8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f241 3297 	movw	r2, #5015	; 0x1397
 80007b8:	4293      	cmp	r3, r2
 80007ba:	dc09      	bgt.n	80007d0 <USART2_IRQHandler+0x38>
                rx_data[rx_data_head++] = USART2->DR; // read data register and store received character in receive buffer
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <USART2_IRQHandler+0xa4>)
 80007be:	6858      	ldr	r0, [r3, #4]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <USART2_IRQHandler+0xa8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1c5a      	adds	r2, r3, #1
 80007c6:	491e      	ldr	r1, [pc, #120]	; (8000840 <USART2_IRQHandler+0xa8>)
 80007c8:	600a      	str	r2, [r1, #0]
 80007ca:	b2c1      	uxtb	r1, r0
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <USART2_IRQHandler+0xac>)
 80007ce:	54d1      	strb	r1, [r2, r3]
            }
            interrupt_flags &= ~USART_SR_RXNE; 		// clear receive interrupt flag
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f023 0320 	bic.w	r3, r3, #32
 80007d6:	607b      	str	r3, [r7, #4]
        }

        if (interrupt_flags & USART_SR_TXE) { 		// if interrupt is for transmit buffer empty
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01f      	beq.n	8000822 <USART2_IRQHandler+0x8a>
            if (tx_data_tail < tx_data_head) { 		// if there is still data to send
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <USART2_IRQHandler+0xb0>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <USART2_IRQHandler+0xb4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	da0a      	bge.n	8000804 <USART2_IRQHandler+0x6c>
                USART2->DR = tx_data[tx_data_tail++]; // write data from transmit buffer to data register
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <USART2_IRQHandler+0xb0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	4914      	ldr	r1, [pc, #80]	; (8000848 <USART2_IRQHandler+0xb0>)
 80007f6:	600a      	str	r2, [r1, #0]
 80007f8:	4a15      	ldr	r2, [pc, #84]	; (8000850 <USART2_IRQHandler+0xb8>)
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <USART2_IRQHandler+0xa4>)
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	e00a      	b.n	800081a <USART2_IRQHandler+0x82>
            } else { 								// otherwise, all data has been sent
                tx_data_tail = tx_data_head = 0; 	// reset transmit buffer pointers
 8000804:	2300      	movs	r3, #0
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <USART2_IRQHandler+0xb4>)
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <USART2_IRQHandler+0xb0>)
 800080c:	6013      	str	r3, [r2, #0]
                USART2->CR1 &= ~USART_CR1_TXEIE; 	// disable transmit interrupt
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <USART2_IRQHandler+0xa4>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <USART2_IRQHandler+0xa4>)
 8000814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000818:	60d3      	str	r3, [r2, #12]
            }
            interrupt_flags &= ~USART_SR_TXE; 		// clear transmit interrupt flag
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000820:	607b      	str	r3, [r7, #4]
    while (interrupt_flags & (USART_SR_RXNE | USART_SR_TXE)) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1bc      	bne.n	80007a6 <USART2_IRQHandler+0xe>
        }
    }
}
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40004400 	.word	0x40004400
 8000840:	200027bc 	.word	0x200027bc
 8000844:	2000008c 	.word	0x2000008c
 8000848:	200027c4 	.word	0x200027c4
 800084c:	200027c8 	.word	0x200027c8
 8000850:	20001424 	.word	0x20001424

08000854 <putchar>:
 * @note   If buffer is full, returns EOF
 * @param  ch: character to send
 * @retval Character sent or EOF if buffer full
 */

int putchar(int ch) {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    if (tx_data_head >= BUFFER_SIZE) {
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <putchar+0x58>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f241 3297 	movw	r2, #5015	; 0x1397
 8000864:	4293      	cmp	r3, r2
 8000866:	dd02      	ble.n	800086e <putchar+0x1a>
        return EOF; 						// Buffer full, cannot put character
 8000868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800086c:	e017      	b.n	800089e <putchar+0x4a>
    }

    tx_data[tx_data_head] = ch; 			// add character to transmit buffer
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <putchar+0x58>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d1      	uxtb	r1, r2
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <putchar+0x5c>)
 8000878:	54d1      	strb	r1, [r2, r3]
    tx_data_head++; 						// increment buffer head pointer
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <putchar+0x58>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <putchar+0x58>)
 8000882:	6013      	str	r3, [r2, #0]

    if (!(USART2->CR1 & USART_CR1_TXEIE)) { // if transmit interrupt is not enabled
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <putchar+0x60>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088c:	2b00      	cmp	r3, #0
 800088e:	d105      	bne.n	800089c <putchar+0x48>
        USART2->CR1 |= USART_CR1_TXEIE; 	// enable transmit interrupt
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <putchar+0x60>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <putchar+0x60>)
 8000896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089a:	60d3      	str	r3, [r2, #12]
    }

    return ch; // return character
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200027c8 	.word	0x200027c8
 80008b0:	20001424 	.word	0x20001424
 80008b4:	40004400 	.word	0x40004400

080008b8 <_write>:
 * @param  data: pointer to data buffer
 * @param  len: length of data buffer
 * @retval Number of bytes written to buffer
 */

int _write(int file, char *data, int len) {
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
    int i = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

    while (i < len && tx_data_head < BUFFER_SIZE) { // while there is still data to send and buffer is not full
 80008c8:	e00d      	b.n	80008e6 <_write+0x2e>
        tx_data[tx_data_head++] = data[i++]; 		// add character to transmit buffer
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	617a      	str	r2, [r7, #20]
 80008d0:	461a      	mov	r2, r3
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	441a      	add	r2, r3
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <_write+0x68>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1c59      	adds	r1, r3, #1
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <_write+0x68>)
 80008de:	6001      	str	r1, [r0, #0]
 80008e0:	7811      	ldrb	r1, [r2, #0]
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <_write+0x6c>)
 80008e4:	54d1      	strb	r1, [r2, r3]
    while (i < len && tx_data_head < BUFFER_SIZE) { // while there is still data to send and buffer is not full
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	da05      	bge.n	80008fa <_write+0x42>
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <_write+0x68>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f241 3297 	movw	r2, #5015	; 0x1397
 80008f6:	4293      	cmp	r3, r2
 80008f8:	dde7      	ble.n	80008ca <_write+0x12>
    }

    if (!(USART2->CR1 & USART_CR1_TXEIE)) { 		// if transmit interrupt is not enabled
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <_write+0x70>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	2b00      	cmp	r3, #0
 8000904:	d105      	bne.n	8000912 <_write+0x5a>
        USART2->CR1 |= USART_CR1_TXEIE; 			// enable transmit interrupt
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_write+0x70>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <_write+0x70>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	60d3      	str	r3, [r2, #12]
    }

    return i; // return number of characters written
 8000912:	697b      	ldr	r3, [r7, #20]
}
 8000914:	4618      	mov	r0, r3
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	200027c8 	.word	0x200027c8
 8000924:	20001424 	.word	0x20001424
 8000928:	40004400 	.word	0x40004400

0800092c <print_received_chars>:
 * @note   Disables interrupts to prevent race conditions
 * @param  None
 * @retval None
 */

void print_received_chars() {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000932:	b672      	cpsid	i
}
 8000934:	bf00      	nop
    // Disable interrupts to prevent race conditions
    __disable_irq();

    // Print any new characters in the buffer
    while (rx_data_tail < rx_data_head) { 			// while there is still data in the receive buffer
 8000936:	e00b      	b.n	8000950 <print_received_chars+0x24>
        char input_char = rx_data[rx_data_tail++]; 	// read character from receive buffer
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <print_received_chars+0x54>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1c5a      	adds	r2, r3, #1
 800093e:	4910      	ldr	r1, [pc, #64]	; (8000980 <print_received_chars+0x54>)
 8000940:	600a      	str	r2, [r1, #0]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <print_received_chars+0x58>)
 8000944:	5cd3      	ldrb	r3, [r2, r3]
 8000946:	71fb      	strb	r3, [r7, #7]
        putchar(input_char); 						// print character to console
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff82 	bl	8000854 <putchar>
    while (rx_data_tail < rx_data_head) { 			// while there is still data in the receive buffer
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <print_received_chars+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <print_received_chars+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbed      	blt.n	8000938 <print_received_chars+0xc>
    }

    // Reset buffer if tail caught up with head
    if (rx_data_tail == rx_data_head) { 			// if buffer tail pointer has caught up with buffer head pointer
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <print_received_chars+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <print_received_chars+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	429a      	cmp	r2, r3
 8000966:	d104      	bne.n	8000972 <print_received_chars+0x46>
        rx_data_tail = rx_data_head = 0; 			// reset buffer pointers
 8000968:	2300      	movs	r3, #0
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <print_received_chars+0x5c>)
 800096c:	6013      	str	r3, [r2, #0]
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <print_received_chars+0x54>)
 8000970:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000972:	b662      	cpsie	i
}
 8000974:	bf00      	nop
    }

    // Re-enable interrupts
    __enable_irq();
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200027c0 	.word	0x200027c0
 8000984:	2000008c 	.word	0x2000008c
 8000988:	200027bc 	.word	0x200027bc

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f918 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
	}

return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f000 fdd4 	bl	80016bc <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20020000 	.word	0x20020000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200027cc 	.word	0x200027cc
 8000b48:	200027e8 	.word	0x200027e8

08000b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b76:	490e      	ldr	r1, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b8c:	4c0b      	ldr	r4, [pc, #44]	; (8000bbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9a:	f7ff ffd7 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f000 fd93 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ba2:	f7ff fd51 	bl	8000648 <main>
  bx  lr    
 8000ba6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bb4:	08002754 	.word	0x08002754
  ldr r2, =_sbss
 8000bb8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bbc:	200027e4 	.word	0x200027e4

08000bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <HAL_Init+0x40>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_Init+0x40>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <HAL_Init+0x40>)
 8000bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x40>)
 8000be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f90d 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fece 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023c00 	.word	0x40023c00

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f917 	bl	8000e5a <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f000 f8ed 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x20>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x24>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_IncTick+0x24>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200027d0 	.word	0x200027d0

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_GetTick+0x14>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	200027d0 	.word	0x200027d0

08000ca8 <__NVIC_SetPriorityGrouping>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x44>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_GetPriorityGrouping>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	f003 0307 	and.w	r3, r3, #7
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_SetPriority>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f7ff ff8e 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff47 	bl	8000ca8 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff5c 	bl	8000cf0 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff8e 	bl	8000d60 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5d 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffb0 	bl	8000dc8 <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e267      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d075      	beq.n	8000f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e92:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d00c      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e9e:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d112      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000eaa:	4b82      	ldr	r3, [pc, #520]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000eb6:	d10b      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	4b7e      	ldr	r3, [pc, #504]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d05b      	beq.n	8000f7c <HAL_RCC_OscConfig+0x108>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d157      	bne.n	8000f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e242      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d106      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x74>
 8000eda:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a75      	ldr	r2, [pc, #468]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e01d      	b.n	8000f24 <HAL_RCC_OscConfig+0xb0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x98>
 8000ef2:	4b70      	ldr	r3, [pc, #448]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6f      	ldr	r2, [pc, #444]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6d      	ldr	r3, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a6c      	ldr	r2, [pc, #432]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0xb0>
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a68      	ldr	r2, [pc, #416]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a65      	ldr	r2, [pc, #404]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff feb0 	bl	8000c90 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff feac 	bl	8000c90 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e207      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	4b5b      	ldr	r3, [pc, #364]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0f0      	beq.n	8000f34 <HAL_RCC_OscConfig+0xc0>
 8000f52:	e014      	b.n	8000f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fe9c 	bl	8000c90 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fe98 	bl	8000c90 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1f3      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f0      	bne.n	8000f5c <HAL_RCC_OscConfig+0xe8>
 8000f7a:	e000      	b.n	8000f7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d063      	beq.n	8001052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f8a:	4b4a      	ldr	r3, [pc, #296]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d11c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fa2:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d116      	bne.n	8000fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x152>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d001      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e1c7      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4937      	ldr	r1, [pc, #220]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fda:	e03a      	b.n	8001052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d020      	beq.n	8001026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fe4:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_RCC_OscConfig+0x244>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fe51 	bl	8000c90 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fe4d 	bl	8000c90 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e1a8      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4925      	ldr	r1, [pc, #148]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001020:	4313      	orrs	r3, r2
 8001022:	600b      	str	r3, [r1, #0]
 8001024:	e015      	b.n	8001052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_RCC_OscConfig+0x244>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102c:	f7ff fe30 	bl	8000c90 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001034:	f7ff fe2c 	bl	8000c90 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e187      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d036      	beq.n	80010cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d016      	beq.n	8001094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_RCC_OscConfig+0x248>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fe10 	bl	8000c90 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001074:	f7ff fe0c 	bl	8000c90 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e167      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x240>)
 8001088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0x200>
 8001092:	e01b      	b.n	80010cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_OscConfig+0x248>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fdf9 	bl	8000c90 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a0:	e00e      	b.n	80010c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010a2:	f7ff fdf5 	bl	8000c90 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d907      	bls.n	80010c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e150      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
 80010b4:	40023800 	.word	0x40023800
 80010b8:	42470000 	.word	0x42470000
 80010bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c0:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ea      	bne.n	80010a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8097 	beq.w	8001208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010de:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b7d      	ldr	r3, [pc, #500]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	4a7c      	ldr	r2, [pc, #496]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f8:	6413      	str	r3, [r2, #64]	; 0x40
 80010fa:	4b7a      	ldr	r3, [pc, #488]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110a:	4b77      	ldr	r3, [pc, #476]	; (80012e8 <HAL_RCC_OscConfig+0x474>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001116:	4b74      	ldr	r3, [pc, #464]	; (80012e8 <HAL_RCC_OscConfig+0x474>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a73      	ldr	r2, [pc, #460]	; (80012e8 <HAL_RCC_OscConfig+0x474>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fdb5 	bl	8000c90 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fdb1 	bl	8000c90 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e10c      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	4b6a      	ldr	r3, [pc, #424]	; (80012e8 <HAL_RCC_OscConfig+0x474>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <HAL_RCC_OscConfig+0x2ea>
 8001150:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001154:	4a63      	ldr	r2, [pc, #396]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6713      	str	r3, [r2, #112]	; 0x70
 800115c:	e01c      	b.n	8001198 <HAL_RCC_OscConfig+0x324>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b05      	cmp	r3, #5
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0x30c>
 8001166:	4b5f      	ldr	r3, [pc, #380]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800116a:	4a5e      	ldr	r2, [pc, #376]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6713      	str	r3, [r2, #112]	; 0x70
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001176:	4a5b      	ldr	r2, [pc, #364]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6713      	str	r3, [r2, #112]	; 0x70
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0x324>
 8001180:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	6713      	str	r3, [r2, #112]	; 0x70
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001192:	f023 0304 	bic.w	r3, r3, #4
 8001196:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d015      	beq.n	80011cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a0:	f7ff fd76 	bl	8000c90 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	e00a      	b.n	80011be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff fd72 	bl	8000c90 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e0cb      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0ee      	beq.n	80011a8 <HAL_RCC_OscConfig+0x334>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fd60 	bl	8000c90 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d2:	e00a      	b.n	80011ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d4:	f7ff fd5c 	bl	8000c90 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e0b5      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ee      	bne.n	80011d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011f6:	7dfb      	ldrb	r3, [r7, #23]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fc:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	4a38      	ldr	r2, [pc, #224]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001206:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a1 	beq.w	8001354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001212:	4b34      	ldr	r3, [pc, #208]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d05c      	beq.n	80012d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d141      	bne.n	80012aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <HAL_RCC_OscConfig+0x478>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fd30 	bl	8000c90 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fd2c 	bl	8000c90 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e087      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69da      	ldr	r2, [r3, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	019b      	lsls	r3, r3, #6
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	3b01      	subs	r3, #1
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	431a      	orrs	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	491b      	ldr	r1, [pc, #108]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <HAL_RCC_OscConfig+0x478>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fd05 	bl	8000c90 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fd01 	bl	8000c90 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e05c      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f0      	beq.n	800128a <HAL_RCC_OscConfig+0x416>
 80012a8:	e054      	b.n	8001354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_RCC_OscConfig+0x478>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcee 	bl	8000c90 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff fcea 	bl	8000c90 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e045      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_RCC_OscConfig+0x470>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x444>
 80012d6:	e03d      	b.n	8001354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d107      	bne.n	80012f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e038      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000
 80012ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <HAL_RCC_OscConfig+0x4ec>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d028      	beq.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001308:	429a      	cmp	r2, r3
 800130a:	d121      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d11a      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001320:	4013      	ands	r3, r2
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001328:	4293      	cmp	r3, r2
 800132a:	d111      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d107      	bne.n	8001350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0cc      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d90c      	bls.n	80013a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b65      	ldr	r3, [pc, #404]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138e:	4b63      	ldr	r3, [pc, #396]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0b8      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d005      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013d0:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a52      	ldr	r2, [pc, #328]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013dc:	4b50      	ldr	r3, [pc, #320]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	494d      	ldr	r1, [pc, #308]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d044      	beq.n	8001484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d107      	bne.n	8001412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d119      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e07f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d003      	beq.n	8001422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800141e:	2b03      	cmp	r3, #3
 8001420:	d107      	bne.n	8001432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e06f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e067      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f023 0203 	bic.w	r2, r3, #3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4934      	ldr	r1, [pc, #208]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001450:	4313      	orrs	r3, r2
 8001452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001454:	f7ff fc1c 	bl	8000c90 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145a:	e00a      	b.n	8001472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800145c:	f7ff fc18 	bl	8000c90 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	; 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e04f      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 020c 	and.w	r2, r3, #12
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	429a      	cmp	r2, r3
 8001482:	d1eb      	bne.n	800145c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d20c      	bcs.n	80014ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e032      	b.n	8001512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4916      	ldr	r1, [pc, #88]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d009      	beq.n	80014ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014ea:	f000 f821 	bl	8001530 <HAL_RCC_GetSysClockFreq>
 80014ee:	4602      	mov	r2, r0
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <HAL_RCC_ClockConfig+0x1c0>)
 80014fc:	5ccb      	ldrb	r3, [r1, r3]
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_ClockConfig+0x1c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb7c 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023c00 	.word	0x40023c00
 8001520:	40023800 	.word	0x40023800
 8001524:	080026d0 	.word	0x080026d0
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b090      	sub	sp, #64	; 0x40
 8001536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
 800153c:	2300      	movs	r3, #0
 800153e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d00d      	beq.n	8001570 <HAL_RCC_GetSysClockFreq+0x40>
 8001554:	2b08      	cmp	r3, #8
 8001556:	f200 80a1 	bhi.w	800169c <HAL_RCC_GetSysClockFreq+0x16c>
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x34>
 800155e:	2b04      	cmp	r3, #4
 8001560:	d003      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x3a>
 8001562:	e09b      	b.n	800169c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b53      	ldr	r3, [pc, #332]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001568:	e09b      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800156e:	e098      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001570:	4b4f      	ldr	r3, [pc, #316]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800157a:	4b4d      	ldr	r3, [pc, #308]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d028      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	099b      	lsrs	r3, r3, #6
 800158c:	2200      	movs	r2, #0
 800158e:	623b      	str	r3, [r7, #32]
 8001590:	627a      	str	r2, [r7, #36]	; 0x24
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001598:	2100      	movs	r1, #0
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800159c:	fb03 f201 	mul.w	r2, r3, r1
 80015a0:	2300      	movs	r3, #0
 80015a2:	fb00 f303 	mul.w	r3, r0, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	4a43      	ldr	r2, [pc, #268]	; (80016b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80015aa:	fba0 1202 	umull	r1, r2, r0, r2
 80015ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015b0:	460a      	mov	r2, r1
 80015b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80015b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b6:	4413      	add	r3, r2
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	2200      	movs	r2, #0
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	61fa      	str	r2, [r7, #28]
 80015c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015ca:	f7fe fe05 	bl	80001d8 <__aeabi_uldivmod>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4613      	mov	r3, r2
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d6:	e053      	b.n	8001680 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	2200      	movs	r2, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	617a      	str	r2, [r7, #20]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015ea:	f04f 0b00 	mov.w	fp, #0
 80015ee:	4652      	mov	r2, sl
 80015f0:	465b      	mov	r3, fp
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	0159      	lsls	r1, r3, #5
 80015fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001600:	0150      	lsls	r0, r2, #5
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	ebb2 080a 	subs.w	r8, r2, sl
 800160a:	eb63 090b 	sbc.w	r9, r3, fp
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800161a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800161e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001622:	ebb2 0408 	subs.w	r4, r2, r8
 8001626:	eb63 0509 	sbc.w	r5, r3, r9
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	00eb      	lsls	r3, r5, #3
 8001634:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001638:	00e2      	lsls	r2, r4, #3
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	eb14 030a 	adds.w	r3, r4, sl
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	eb45 030b 	adc.w	r3, r5, fp
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001656:	4629      	mov	r1, r5
 8001658:	028b      	lsls	r3, r1, #10
 800165a:	4621      	mov	r1, r4
 800165c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001660:	4621      	mov	r1, r4
 8001662:	028a      	lsls	r2, r1, #10
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	2200      	movs	r2, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	60fa      	str	r2, [r7, #12]
 8001670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001674:	f7fe fdb0 	bl	80001d8 <__aeabi_uldivmod>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4613      	mov	r3, r2
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	3301      	adds	r3, #1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800169a:	e002      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3740      	adds	r7, #64	; 0x40
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	00f42400 	.word	0x00f42400
 80016b8:	017d7840 	.word	0x017d7840

080016bc <__errno>:
 80016bc:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <__errno+0x8>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	2000000c 	.word	0x2000000c

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	4d0d      	ldr	r5, [pc, #52]	; (8001700 <__libc_init_array+0x38>)
 80016cc:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <__libc_init_array+0x3c>)
 80016ce:	1b64      	subs	r4, r4, r5
 80016d0:	10a4      	asrs	r4, r4, #2
 80016d2:	2600      	movs	r6, #0
 80016d4:	42a6      	cmp	r6, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	4d0b      	ldr	r5, [pc, #44]	; (8001708 <__libc_init_array+0x40>)
 80016da:	4c0c      	ldr	r4, [pc, #48]	; (800170c <__libc_init_array+0x44>)
 80016dc:	f000 fd1e 	bl	800211c <_init>
 80016e0:	1b64      	subs	r4, r4, r5
 80016e2:	10a4      	asrs	r4, r4, #2
 80016e4:	2600      	movs	r6, #0
 80016e6:	42a6      	cmp	r6, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f0:	4798      	blx	r3
 80016f2:	3601      	adds	r6, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fa:	4798      	blx	r3
 80016fc:	3601      	adds	r6, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	0800274c 	.word	0x0800274c
 8001704:	0800274c 	.word	0x0800274c
 8001708:	0800274c 	.word	0x0800274c
 800170c:	08002750 	.word	0x08002750

08001710 <memset>:
 8001710:	4402      	add	r2, r0
 8001712:	4603      	mov	r3, r0
 8001714:	4293      	cmp	r3, r2
 8001716:	d100      	bne.n	800171a <memset+0xa>
 8001718:	4770      	bx	lr
 800171a:	f803 1b01 	strb.w	r1, [r3], #1
 800171e:	e7f9      	b.n	8001714 <memset+0x4>

08001720 <_puts_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	460e      	mov	r6, r1
 8001724:	4605      	mov	r5, r0
 8001726:	b118      	cbz	r0, 8001730 <_puts_r+0x10>
 8001728:	6983      	ldr	r3, [r0, #24]
 800172a:	b90b      	cbnz	r3, 8001730 <_puts_r+0x10>
 800172c:	f000 fa48 	bl	8001bc0 <__sinit>
 8001730:	69ab      	ldr	r3, [r5, #24]
 8001732:	68ac      	ldr	r4, [r5, #8]
 8001734:	b913      	cbnz	r3, 800173c <_puts_r+0x1c>
 8001736:	4628      	mov	r0, r5
 8001738:	f000 fa42 	bl	8001bc0 <__sinit>
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <_puts_r+0xd0>)
 800173e:	429c      	cmp	r4, r3
 8001740:	d120      	bne.n	8001784 <_puts_r+0x64>
 8001742:	686c      	ldr	r4, [r5, #4]
 8001744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001746:	07db      	lsls	r3, r3, #31
 8001748:	d405      	bmi.n	8001756 <_puts_r+0x36>
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	0598      	lsls	r0, r3, #22
 800174e:	d402      	bmi.n	8001756 <_puts_r+0x36>
 8001750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001752:	f000 fad3 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001756:	89a3      	ldrh	r3, [r4, #12]
 8001758:	0719      	lsls	r1, r3, #28
 800175a:	d51d      	bpl.n	8001798 <_puts_r+0x78>
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	b1db      	cbz	r3, 8001798 <_puts_r+0x78>
 8001760:	3e01      	subs	r6, #1
 8001762:	68a3      	ldr	r3, [r4, #8]
 8001764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001768:	3b01      	subs	r3, #1
 800176a:	60a3      	str	r3, [r4, #8]
 800176c:	bb39      	cbnz	r1, 80017be <_puts_r+0x9e>
 800176e:	2b00      	cmp	r3, #0
 8001770:	da38      	bge.n	80017e4 <_puts_r+0xc4>
 8001772:	4622      	mov	r2, r4
 8001774:	210a      	movs	r1, #10
 8001776:	4628      	mov	r0, r5
 8001778:	f000 f848 	bl	800180c <__swbuf_r>
 800177c:	3001      	adds	r0, #1
 800177e:	d011      	beq.n	80017a4 <_puts_r+0x84>
 8001780:	250a      	movs	r5, #10
 8001782:	e011      	b.n	80017a8 <_puts_r+0x88>
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <_puts_r+0xd4>)
 8001786:	429c      	cmp	r4, r3
 8001788:	d101      	bne.n	800178e <_puts_r+0x6e>
 800178a:	68ac      	ldr	r4, [r5, #8]
 800178c:	e7da      	b.n	8001744 <_puts_r+0x24>
 800178e:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <_puts_r+0xd8>)
 8001790:	429c      	cmp	r4, r3
 8001792:	bf08      	it	eq
 8001794:	68ec      	ldreq	r4, [r5, #12]
 8001796:	e7d5      	b.n	8001744 <_puts_r+0x24>
 8001798:	4621      	mov	r1, r4
 800179a:	4628      	mov	r0, r5
 800179c:	f000 f888 	bl	80018b0 <__swsetup_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	d0dd      	beq.n	8001760 <_puts_r+0x40>
 80017a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80017a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d405      	bmi.n	80017ba <_puts_r+0x9a>
 80017ae:	89a3      	ldrh	r3, [r4, #12]
 80017b0:	059b      	lsls	r3, r3, #22
 80017b2:	d402      	bmi.n	80017ba <_puts_r+0x9a>
 80017b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017b6:	f000 faa2 	bl	8001cfe <__retarget_lock_release_recursive>
 80017ba:	4628      	mov	r0, r5
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da04      	bge.n	80017cc <_puts_r+0xac>
 80017c2:	69a2      	ldr	r2, [r4, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dc06      	bgt.n	80017d6 <_puts_r+0xb6>
 80017c8:	290a      	cmp	r1, #10
 80017ca:	d004      	beq.n	80017d6 <_puts_r+0xb6>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	6022      	str	r2, [r4, #0]
 80017d2:	7019      	strb	r1, [r3, #0]
 80017d4:	e7c5      	b.n	8001762 <_puts_r+0x42>
 80017d6:	4622      	mov	r2, r4
 80017d8:	4628      	mov	r0, r5
 80017da:	f000 f817 	bl	800180c <__swbuf_r>
 80017de:	3001      	adds	r0, #1
 80017e0:	d1bf      	bne.n	8001762 <_puts_r+0x42>
 80017e2:	e7df      	b.n	80017a4 <_puts_r+0x84>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	250a      	movs	r5, #10
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	6022      	str	r2, [r4, #0]
 80017ec:	701d      	strb	r5, [r3, #0]
 80017ee:	e7db      	b.n	80017a8 <_puts_r+0x88>
 80017f0:	08002704 	.word	0x08002704
 80017f4:	08002724 	.word	0x08002724
 80017f8:	080026e4 	.word	0x080026e4

080017fc <puts>:
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <puts+0xc>)
 80017fe:	4601      	mov	r1, r0
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	f7ff bf8d 	b.w	8001720 <_puts_r>
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c

0800180c <__swbuf_r>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	460e      	mov	r6, r1
 8001810:	4614      	mov	r4, r2
 8001812:	4605      	mov	r5, r0
 8001814:	b118      	cbz	r0, 800181e <__swbuf_r+0x12>
 8001816:	6983      	ldr	r3, [r0, #24]
 8001818:	b90b      	cbnz	r3, 800181e <__swbuf_r+0x12>
 800181a:	f000 f9d1 	bl	8001bc0 <__sinit>
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <__swbuf_r+0x98>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d12b      	bne.n	800187c <__swbuf_r+0x70>
 8001824:	686c      	ldr	r4, [r5, #4]
 8001826:	69a3      	ldr	r3, [r4, #24]
 8001828:	60a3      	str	r3, [r4, #8]
 800182a:	89a3      	ldrh	r3, [r4, #12]
 800182c:	071a      	lsls	r2, r3, #28
 800182e:	d52f      	bpl.n	8001890 <__swbuf_r+0x84>
 8001830:	6923      	ldr	r3, [r4, #16]
 8001832:	b36b      	cbz	r3, 8001890 <__swbuf_r+0x84>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	1ac0      	subs	r0, r0, r3
 800183a:	6963      	ldr	r3, [r4, #20]
 800183c:	b2f6      	uxtb	r6, r6
 800183e:	4283      	cmp	r3, r0
 8001840:	4637      	mov	r7, r6
 8001842:	dc04      	bgt.n	800184e <__swbuf_r+0x42>
 8001844:	4621      	mov	r1, r4
 8001846:	4628      	mov	r0, r5
 8001848:	f000 f926 	bl	8001a98 <_fflush_r>
 800184c:	bb30      	cbnz	r0, 800189c <__swbuf_r+0x90>
 800184e:	68a3      	ldr	r3, [r4, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60a3      	str	r3, [r4, #8]
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	6022      	str	r2, [r4, #0]
 800185a:	701e      	strb	r6, [r3, #0]
 800185c:	6963      	ldr	r3, [r4, #20]
 800185e:	3001      	adds	r0, #1
 8001860:	4283      	cmp	r3, r0
 8001862:	d004      	beq.n	800186e <__swbuf_r+0x62>
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	07db      	lsls	r3, r3, #31
 8001868:	d506      	bpl.n	8001878 <__swbuf_r+0x6c>
 800186a:	2e0a      	cmp	r6, #10
 800186c:	d104      	bne.n	8001878 <__swbuf_r+0x6c>
 800186e:	4621      	mov	r1, r4
 8001870:	4628      	mov	r0, r5
 8001872:	f000 f911 	bl	8001a98 <_fflush_r>
 8001876:	b988      	cbnz	r0, 800189c <__swbuf_r+0x90>
 8001878:	4638      	mov	r0, r7
 800187a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800187c:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <__swbuf_r+0x9c>)
 800187e:	429c      	cmp	r4, r3
 8001880:	d101      	bne.n	8001886 <__swbuf_r+0x7a>
 8001882:	68ac      	ldr	r4, [r5, #8]
 8001884:	e7cf      	b.n	8001826 <__swbuf_r+0x1a>
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <__swbuf_r+0xa0>)
 8001888:	429c      	cmp	r4, r3
 800188a:	bf08      	it	eq
 800188c:	68ec      	ldreq	r4, [r5, #12]
 800188e:	e7ca      	b.n	8001826 <__swbuf_r+0x1a>
 8001890:	4621      	mov	r1, r4
 8001892:	4628      	mov	r0, r5
 8001894:	f000 f80c 	bl	80018b0 <__swsetup_r>
 8001898:	2800      	cmp	r0, #0
 800189a:	d0cb      	beq.n	8001834 <__swbuf_r+0x28>
 800189c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018a0:	e7ea      	b.n	8001878 <__swbuf_r+0x6c>
 80018a2:	bf00      	nop
 80018a4:	08002704 	.word	0x08002704
 80018a8:	08002724 	.word	0x08002724
 80018ac:	080026e4 	.word	0x080026e4

080018b0 <__swsetup_r>:
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <__swsetup_r+0xcc>)
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	681d      	ldr	r5, [r3, #0]
 80018b6:	4606      	mov	r6, r0
 80018b8:	460c      	mov	r4, r1
 80018ba:	b125      	cbz	r5, 80018c6 <__swsetup_r+0x16>
 80018bc:	69ab      	ldr	r3, [r5, #24]
 80018be:	b913      	cbnz	r3, 80018c6 <__swsetup_r+0x16>
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 f97d 	bl	8001bc0 <__sinit>
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <__swsetup_r+0xd0>)
 80018c8:	429c      	cmp	r4, r3
 80018ca:	d10f      	bne.n	80018ec <__swsetup_r+0x3c>
 80018cc:	686c      	ldr	r4, [r5, #4]
 80018ce:	89a3      	ldrh	r3, [r4, #12]
 80018d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018d4:	0719      	lsls	r1, r3, #28
 80018d6:	d42c      	bmi.n	8001932 <__swsetup_r+0x82>
 80018d8:	06dd      	lsls	r5, r3, #27
 80018da:	d411      	bmi.n	8001900 <__swsetup_r+0x50>
 80018dc:	2309      	movs	r3, #9
 80018de:	6033      	str	r3, [r6, #0]
 80018e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018e4:	81a3      	strh	r3, [r4, #12]
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ea:	e03e      	b.n	800196a <__swsetup_r+0xba>
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <__swsetup_r+0xd4>)
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d101      	bne.n	80018f6 <__swsetup_r+0x46>
 80018f2:	68ac      	ldr	r4, [r5, #8]
 80018f4:	e7eb      	b.n	80018ce <__swsetup_r+0x1e>
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <__swsetup_r+0xd8>)
 80018f8:	429c      	cmp	r4, r3
 80018fa:	bf08      	it	eq
 80018fc:	68ec      	ldreq	r4, [r5, #12]
 80018fe:	e7e6      	b.n	80018ce <__swsetup_r+0x1e>
 8001900:	0758      	lsls	r0, r3, #29
 8001902:	d512      	bpl.n	800192a <__swsetup_r+0x7a>
 8001904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001906:	b141      	cbz	r1, 800191a <__swsetup_r+0x6a>
 8001908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800190c:	4299      	cmp	r1, r3
 800190e:	d002      	beq.n	8001916 <__swsetup_r+0x66>
 8001910:	4630      	mov	r0, r6
 8001912:	f000 fa5b 	bl	8001dcc <_free_r>
 8001916:	2300      	movs	r3, #0
 8001918:	6363      	str	r3, [r4, #52]	; 0x34
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	6063      	str	r3, [r4, #4]
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	b94b      	cbnz	r3, 800194a <__swsetup_r+0x9a>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800193c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001940:	d003      	beq.n	800194a <__swsetup_r+0x9a>
 8001942:	4621      	mov	r1, r4
 8001944:	4630      	mov	r0, r6
 8001946:	f000 fa01 	bl	8001d4c <__smakebuf_r>
 800194a:	89a0      	ldrh	r0, [r4, #12]
 800194c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001950:	f010 0301 	ands.w	r3, r0, #1
 8001954:	d00a      	beq.n	800196c <__swsetup_r+0xbc>
 8001956:	2300      	movs	r3, #0
 8001958:	60a3      	str	r3, [r4, #8]
 800195a:	6963      	ldr	r3, [r4, #20]
 800195c:	425b      	negs	r3, r3
 800195e:	61a3      	str	r3, [r4, #24]
 8001960:	6923      	ldr	r3, [r4, #16]
 8001962:	b943      	cbnz	r3, 8001976 <__swsetup_r+0xc6>
 8001964:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001968:	d1ba      	bne.n	80018e0 <__swsetup_r+0x30>
 800196a:	bd70      	pop	{r4, r5, r6, pc}
 800196c:	0781      	lsls	r1, r0, #30
 800196e:	bf58      	it	pl
 8001970:	6963      	ldrpl	r3, [r4, #20]
 8001972:	60a3      	str	r3, [r4, #8]
 8001974:	e7f4      	b.n	8001960 <__swsetup_r+0xb0>
 8001976:	2000      	movs	r0, #0
 8001978:	e7f7      	b.n	800196a <__swsetup_r+0xba>
 800197a:	bf00      	nop
 800197c:	2000000c 	.word	0x2000000c
 8001980:	08002704 	.word	0x08002704
 8001984:	08002724 	.word	0x08002724
 8001988:	080026e4 	.word	0x080026e4

0800198c <__sflush_r>:
 800198c:	898a      	ldrh	r2, [r1, #12]
 800198e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001992:	4605      	mov	r5, r0
 8001994:	0710      	lsls	r0, r2, #28
 8001996:	460c      	mov	r4, r1
 8001998:	d458      	bmi.n	8001a4c <__sflush_r+0xc0>
 800199a:	684b      	ldr	r3, [r1, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dc05      	bgt.n	80019ac <__sflush_r+0x20>
 80019a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dc02      	bgt.n	80019ac <__sflush_r+0x20>
 80019a6:	2000      	movs	r0, #0
 80019a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d0f9      	beq.n	80019a6 <__sflush_r+0x1a>
 80019b2:	2300      	movs	r3, #0
 80019b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80019b8:	682f      	ldr	r7, [r5, #0]
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	d032      	beq.n	8001a24 <__sflush_r+0x98>
 80019be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	075a      	lsls	r2, r3, #29
 80019c4:	d505      	bpl.n	80019d2 <__sflush_r+0x46>
 80019c6:	6863      	ldr	r3, [r4, #4]
 80019c8:	1ac0      	subs	r0, r0, r3
 80019ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80019cc:	b10b      	cbz	r3, 80019d2 <__sflush_r+0x46>
 80019ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	4602      	mov	r2, r0
 80019d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80019d8:	6a21      	ldr	r1, [r4, #32]
 80019da:	4628      	mov	r0, r5
 80019dc:	47b0      	blx	r6
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	d106      	bne.n	80019f2 <__sflush_r+0x66>
 80019e4:	6829      	ldr	r1, [r5, #0]
 80019e6:	291d      	cmp	r1, #29
 80019e8:	d82c      	bhi.n	8001a44 <__sflush_r+0xb8>
 80019ea:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <__sflush_r+0x108>)
 80019ec:	40ca      	lsrs	r2, r1
 80019ee:	07d6      	lsls	r6, r2, #31
 80019f0:	d528      	bpl.n	8001a44 <__sflush_r+0xb8>
 80019f2:	2200      	movs	r2, #0
 80019f4:	6062      	str	r2, [r4, #4]
 80019f6:	04d9      	lsls	r1, r3, #19
 80019f8:	6922      	ldr	r2, [r4, #16]
 80019fa:	6022      	str	r2, [r4, #0]
 80019fc:	d504      	bpl.n	8001a08 <__sflush_r+0x7c>
 80019fe:	1c42      	adds	r2, r0, #1
 8001a00:	d101      	bne.n	8001a06 <__sflush_r+0x7a>
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	b903      	cbnz	r3, 8001a08 <__sflush_r+0x7c>
 8001a06:	6560      	str	r0, [r4, #84]	; 0x54
 8001a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a0a:	602f      	str	r7, [r5, #0]
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d0ca      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a14:	4299      	cmp	r1, r3
 8001a16:	d002      	beq.n	8001a1e <__sflush_r+0x92>
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f000 f9d7 	bl	8001dcc <_free_r>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	6360      	str	r0, [r4, #52]	; 0x34
 8001a22:	e7c1      	b.n	80019a8 <__sflush_r+0x1c>
 8001a24:	6a21      	ldr	r1, [r4, #32]
 8001a26:	2301      	movs	r3, #1
 8001a28:	4628      	mov	r0, r5
 8001a2a:	47b0      	blx	r6
 8001a2c:	1c41      	adds	r1, r0, #1
 8001a2e:	d1c7      	bne.n	80019c0 <__sflush_r+0x34>
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0c4      	beq.n	80019c0 <__sflush_r+0x34>
 8001a36:	2b1d      	cmp	r3, #29
 8001a38:	d001      	beq.n	8001a3e <__sflush_r+0xb2>
 8001a3a:	2b16      	cmp	r3, #22
 8001a3c:	d101      	bne.n	8001a42 <__sflush_r+0xb6>
 8001a3e:	602f      	str	r7, [r5, #0]
 8001a40:	e7b1      	b.n	80019a6 <__sflush_r+0x1a>
 8001a42:	89a3      	ldrh	r3, [r4, #12]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	e7ad      	b.n	80019a8 <__sflush_r+0x1c>
 8001a4c:	690f      	ldr	r7, [r1, #16]
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d0a9      	beq.n	80019a6 <__sflush_r+0x1a>
 8001a52:	0793      	lsls	r3, r2, #30
 8001a54:	680e      	ldr	r6, [r1, #0]
 8001a56:	bf08      	it	eq
 8001a58:	694b      	ldreq	r3, [r1, #20]
 8001a5a:	600f      	str	r7, [r1, #0]
 8001a5c:	bf18      	it	ne
 8001a5e:	2300      	movne	r3, #0
 8001a60:	eba6 0807 	sub.w	r8, r6, r7
 8001a64:	608b      	str	r3, [r1, #8]
 8001a66:	f1b8 0f00 	cmp.w	r8, #0
 8001a6a:	dd9c      	ble.n	80019a6 <__sflush_r+0x1a>
 8001a6c:	6a21      	ldr	r1, [r4, #32]
 8001a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001a70:	4643      	mov	r3, r8
 8001a72:	463a      	mov	r2, r7
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	dc06      	bgt.n	8001a8a <__sflush_r+0xfe>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a82:	81a3      	strh	r3, [r4, #12]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a88:	e78e      	b.n	80019a8 <__sflush_r+0x1c>
 8001a8a:	4407      	add	r7, r0
 8001a8c:	eba8 0800 	sub.w	r8, r8, r0
 8001a90:	e7e9      	b.n	8001a66 <__sflush_r+0xda>
 8001a92:	bf00      	nop
 8001a94:	20400001 	.word	0x20400001

08001a98 <_fflush_r>:
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	690b      	ldr	r3, [r1, #16]
 8001a9c:	4605      	mov	r5, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	b913      	cbnz	r3, 8001aa8 <_fflush_r+0x10>
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	b118      	cbz	r0, 8001ab2 <_fflush_r+0x1a>
 8001aaa:	6983      	ldr	r3, [r0, #24]
 8001aac:	b90b      	cbnz	r3, 8001ab2 <_fflush_r+0x1a>
 8001aae:	f000 f887 	bl	8001bc0 <__sinit>
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <_fflush_r+0x6c>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d11b      	bne.n	8001af0 <_fflush_r+0x58>
 8001ab8:	686c      	ldr	r4, [r5, #4]
 8001aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <_fflush_r+0xa>
 8001ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ac4:	07d0      	lsls	r0, r2, #31
 8001ac6:	d404      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001ac8:	0599      	lsls	r1, r3, #22
 8001aca:	d402      	bmi.n	8001ad2 <_fflush_r+0x3a>
 8001acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ace:	f000 f915 	bl	8001cfc <__retarget_lock_acquire_recursive>
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f7ff ff59 	bl	800198c <__sflush_r>
 8001ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001adc:	07da      	lsls	r2, r3, #31
 8001ade:	4605      	mov	r5, r0
 8001ae0:	d4e0      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae2:	89a3      	ldrh	r3, [r4, #12]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	d4dd      	bmi.n	8001aa4 <_fflush_r+0xc>
 8001ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001aea:	f000 f908 	bl	8001cfe <__retarget_lock_release_recursive>
 8001aee:	e7d9      	b.n	8001aa4 <_fflush_r+0xc>
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <_fflush_r+0x70>)
 8001af2:	429c      	cmp	r4, r3
 8001af4:	d101      	bne.n	8001afa <_fflush_r+0x62>
 8001af6:	68ac      	ldr	r4, [r5, #8]
 8001af8:	e7df      	b.n	8001aba <_fflush_r+0x22>
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <_fflush_r+0x74>)
 8001afc:	429c      	cmp	r4, r3
 8001afe:	bf08      	it	eq
 8001b00:	68ec      	ldreq	r4, [r5, #12]
 8001b02:	e7da      	b.n	8001aba <_fflush_r+0x22>
 8001b04:	08002704 	.word	0x08002704
 8001b08:	08002724 	.word	0x08002724
 8001b0c:	080026e4 	.word	0x080026e4

08001b10 <std>:
 8001b10:	2300      	movs	r3, #0
 8001b12:	b510      	push	{r4, lr}
 8001b14:	4604      	mov	r4, r0
 8001b16:	e9c0 3300 	strd	r3, r3, [r0]
 8001b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b1e:	6083      	str	r3, [r0, #8]
 8001b20:	8181      	strh	r1, [r0, #12]
 8001b22:	6643      	str	r3, [r0, #100]	; 0x64
 8001b24:	81c2      	strh	r2, [r0, #14]
 8001b26:	6183      	str	r3, [r0, #24]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	305c      	adds	r0, #92	; 0x5c
 8001b2e:	f7ff fdef 	bl	8001710 <memset>
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <std+0x38>)
 8001b34:	6263      	str	r3, [r4, #36]	; 0x24
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <std+0x3c>)
 8001b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <std+0x40>)
 8001b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <std+0x44>)
 8001b40:	6224      	str	r4, [r4, #32]
 8001b42:	6323      	str	r3, [r4, #48]	; 0x30
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop
 8001b48:	08001fad 	.word	0x08001fad
 8001b4c:	08001fcf 	.word	0x08001fcf
 8001b50:	08002007 	.word	0x08002007
 8001b54:	0800202b 	.word	0x0800202b

08001b58 <_cleanup_r>:
 8001b58:	4901      	ldr	r1, [pc, #4]	; (8001b60 <_cleanup_r+0x8>)
 8001b5a:	f000 b8af 	b.w	8001cbc <_fwalk_reent>
 8001b5e:	bf00      	nop
 8001b60:	08001a99 	.word	0x08001a99

08001b64 <__sfmoreglue>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	2268      	movs	r2, #104	; 0x68
 8001b68:	1e4d      	subs	r5, r1, #1
 8001b6a:	4355      	muls	r5, r2
 8001b6c:	460e      	mov	r6, r1
 8001b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b72:	f000 f997 	bl	8001ea4 <_malloc_r>
 8001b76:	4604      	mov	r4, r0
 8001b78:	b140      	cbz	r0, 8001b8c <__sfmoreglue+0x28>
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8001b80:	300c      	adds	r0, #12
 8001b82:	60a0      	str	r0, [r4, #8]
 8001b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001b88:	f7ff fdc2 	bl	8001710 <memset>
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}

08001b90 <__sfp_lock_acquire>:
 8001b90:	4801      	ldr	r0, [pc, #4]	; (8001b98 <__sfp_lock_acquire+0x8>)
 8001b92:	f000 b8b3 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001b96:	bf00      	nop
 8001b98:	200027d5 	.word	0x200027d5

08001b9c <__sfp_lock_release>:
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <__sfp_lock_release+0x8>)
 8001b9e:	f000 b8ae 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001ba2:	bf00      	nop
 8001ba4:	200027d5 	.word	0x200027d5

08001ba8 <__sinit_lock_acquire>:
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <__sinit_lock_acquire+0x8>)
 8001baa:	f000 b8a7 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 8001bae:	bf00      	nop
 8001bb0:	200027d6 	.word	0x200027d6

08001bb4 <__sinit_lock_release>:
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <__sinit_lock_release+0x8>)
 8001bb6:	f000 b8a2 	b.w	8001cfe <__retarget_lock_release_recursive>
 8001bba:	bf00      	nop
 8001bbc:	200027d6 	.word	0x200027d6

08001bc0 <__sinit>:
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	f7ff fff0 	bl	8001ba8 <__sinit_lock_acquire>
 8001bc8:	69a3      	ldr	r3, [r4, #24]
 8001bca:	b11b      	cbz	r3, 8001bd4 <__sinit+0x14>
 8001bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd0:	f7ff bff0 	b.w	8001bb4 <__sinit_lock_release>
 8001bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <__sinit+0x68>)
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <__sinit+0x6c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001be2:	42a3      	cmp	r3, r4
 8001be4:	bf04      	itt	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	61a3      	streq	r3, [r4, #24]
 8001bea:	4620      	mov	r0, r4
 8001bec:	f000 f820 	bl	8001c30 <__sfp>
 8001bf0:	6060      	str	r0, [r4, #4]
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 f81c 	bl	8001c30 <__sfp>
 8001bf8:	60a0      	str	r0, [r4, #8]
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f000 f818 	bl	8001c30 <__sfp>
 8001c00:	2200      	movs	r2, #0
 8001c02:	60e0      	str	r0, [r4, #12]
 8001c04:	2104      	movs	r1, #4
 8001c06:	6860      	ldr	r0, [r4, #4]
 8001c08:	f7ff ff82 	bl	8001b10 <std>
 8001c0c:	68a0      	ldr	r0, [r4, #8]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	2109      	movs	r1, #9
 8001c12:	f7ff ff7d 	bl	8001b10 <std>
 8001c16:	68e0      	ldr	r0, [r4, #12]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	2112      	movs	r1, #18
 8001c1c:	f7ff ff78 	bl	8001b10 <std>
 8001c20:	2301      	movs	r3, #1
 8001c22:	61a3      	str	r3, [r4, #24]
 8001c24:	e7d2      	b.n	8001bcc <__sinit+0xc>
 8001c26:	bf00      	nop
 8001c28:	080026e0 	.word	0x080026e0
 8001c2c:	08001b59 	.word	0x08001b59

08001c30 <__sfp>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	4607      	mov	r7, r0
 8001c34:	f7ff ffac 	bl	8001b90 <__sfp_lock_acquire>
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <__sfp+0x84>)
 8001c3a:	681e      	ldr	r6, [r3, #0]
 8001c3c:	69b3      	ldr	r3, [r6, #24]
 8001c3e:	b913      	cbnz	r3, 8001c46 <__sfp+0x16>
 8001c40:	4630      	mov	r0, r6
 8001c42:	f7ff ffbd 	bl	8001bc0 <__sinit>
 8001c46:	3648      	adds	r6, #72	; 0x48
 8001c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	d503      	bpl.n	8001c58 <__sfp+0x28>
 8001c50:	6833      	ldr	r3, [r6, #0]
 8001c52:	b30b      	cbz	r3, 8001c98 <__sfp+0x68>
 8001c54:	6836      	ldr	r6, [r6, #0]
 8001c56:	e7f7      	b.n	8001c48 <__sfp+0x18>
 8001c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c5c:	b9d5      	cbnz	r5, 8001c94 <__sfp+0x64>
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <__sfp+0x88>)
 8001c60:	60e3      	str	r3, [r4, #12]
 8001c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001c66:	6665      	str	r5, [r4, #100]	; 0x64
 8001c68:	f000 f847 	bl	8001cfa <__retarget_lock_init_recursive>
 8001c6c:	f7ff ff96 	bl	8001b9c <__sfp_lock_release>
 8001c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001c78:	6025      	str	r5, [r4, #0]
 8001c7a:	61a5      	str	r5, [r4, #24]
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c84:	f7ff fd44 	bl	8001710 <memset>
 8001c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001c90:	4620      	mov	r0, r4
 8001c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c94:	3468      	adds	r4, #104	; 0x68
 8001c96:	e7d9      	b.n	8001c4c <__sfp+0x1c>
 8001c98:	2104      	movs	r1, #4
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff ff62 	bl	8001b64 <__sfmoreglue>
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	6030      	str	r0, [r6, #0]
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1d5      	bne.n	8001c54 <__sfp+0x24>
 8001ca8:	f7ff ff78 	bl	8001b9c <__sfp_lock_release>
 8001cac:	230c      	movs	r3, #12
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	e7ee      	b.n	8001c90 <__sfp+0x60>
 8001cb2:	bf00      	nop
 8001cb4:	080026e0 	.word	0x080026e0
 8001cb8:	ffff0001 	.word	0xffff0001

08001cbc <_fwalk_reent>:
 8001cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	4606      	mov	r6, r0
 8001cc2:	4688      	mov	r8, r1
 8001cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001cc8:	2700      	movs	r7, #0
 8001cca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cce:	f1b9 0901 	subs.w	r9, r9, #1
 8001cd2:	d505      	bpl.n	8001ce0 <_fwalk_reent+0x24>
 8001cd4:	6824      	ldr	r4, [r4, #0]
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d1f7      	bne.n	8001cca <_fwalk_reent+0xe>
 8001cda:	4638      	mov	r0, r7
 8001cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ce0:	89ab      	ldrh	r3, [r5, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d907      	bls.n	8001cf6 <_fwalk_reent+0x3a>
 8001ce6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cea:	3301      	adds	r3, #1
 8001cec:	d003      	beq.n	8001cf6 <_fwalk_reent+0x3a>
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	47c0      	blx	r8
 8001cf4:	4307      	orrs	r7, r0
 8001cf6:	3568      	adds	r5, #104	; 0x68
 8001cf8:	e7e9      	b.n	8001cce <_fwalk_reent+0x12>

08001cfa <__retarget_lock_init_recursive>:
 8001cfa:	4770      	bx	lr

08001cfc <__retarget_lock_acquire_recursive>:
 8001cfc:	4770      	bx	lr

08001cfe <__retarget_lock_release_recursive>:
 8001cfe:	4770      	bx	lr

08001d00 <__swhatbuf_r>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	460e      	mov	r6, r1
 8001d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	b096      	sub	sp, #88	; 0x58
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	da08      	bge.n	8001d24 <__swhatbuf_r+0x24>
 8001d12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	602a      	str	r2, [r5, #0]
 8001d1a:	061a      	lsls	r2, r3, #24
 8001d1c:	d410      	bmi.n	8001d40 <__swhatbuf_r+0x40>
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	e00e      	b.n	8001d42 <__swhatbuf_r+0x42>
 8001d24:	466a      	mov	r2, sp
 8001d26:	f000 f9a7 	bl	8002078 <_fstat_r>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	dbf1      	blt.n	8001d12 <__swhatbuf_r+0x12>
 8001d2e:	9a01      	ldr	r2, [sp, #4]
 8001d30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d38:	425a      	negs	r2, r3
 8001d3a:	415a      	adcs	r2, r3
 8001d3c:	602a      	str	r2, [r5, #0]
 8001d3e:	e7ee      	b.n	8001d1e <__swhatbuf_r+0x1e>
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	2000      	movs	r0, #0
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	b016      	add	sp, #88	; 0x58
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d4c <__smakebuf_r>:
 8001d4c:	898b      	ldrh	r3, [r1, #12]
 8001d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d50:	079d      	lsls	r5, r3, #30
 8001d52:	4606      	mov	r6, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	d507      	bpl.n	8001d68 <__smakebuf_r+0x1c>
 8001d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	6123      	str	r3, [r4, #16]
 8001d60:	2301      	movs	r3, #1
 8001d62:	6163      	str	r3, [r4, #20]
 8001d64:	b002      	add	sp, #8
 8001d66:	bd70      	pop	{r4, r5, r6, pc}
 8001d68:	ab01      	add	r3, sp, #4
 8001d6a:	466a      	mov	r2, sp
 8001d6c:	f7ff ffc8 	bl	8001d00 <__swhatbuf_r>
 8001d70:	9900      	ldr	r1, [sp, #0]
 8001d72:	4605      	mov	r5, r0
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 f895 	bl	8001ea4 <_malloc_r>
 8001d7a:	b948      	cbnz	r0, 8001d90 <__smakebuf_r+0x44>
 8001d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d80:	059a      	lsls	r2, r3, #22
 8001d82:	d4ef      	bmi.n	8001d64 <__smakebuf_r+0x18>
 8001d84:	f023 0303 	bic.w	r3, r3, #3
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	81a3      	strh	r3, [r4, #12]
 8001d8e:	e7e3      	b.n	8001d58 <__smakebuf_r+0xc>
 8001d90:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <__smakebuf_r+0x7c>)
 8001d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	6020      	str	r0, [r4, #0]
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	81a3      	strh	r3, [r4, #12]
 8001d9e:	9b00      	ldr	r3, [sp, #0]
 8001da0:	6163      	str	r3, [r4, #20]
 8001da2:	9b01      	ldr	r3, [sp, #4]
 8001da4:	6120      	str	r0, [r4, #16]
 8001da6:	b15b      	cbz	r3, 8001dc0 <__smakebuf_r+0x74>
 8001da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dac:	4630      	mov	r0, r6
 8001dae:	f000 f975 	bl	800209c <_isatty_r>
 8001db2:	b128      	cbz	r0, 8001dc0 <__smakebuf_r+0x74>
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	f023 0303 	bic.w	r3, r3, #3
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	81a3      	strh	r3, [r4, #12]
 8001dc0:	89a0      	ldrh	r0, [r4, #12]
 8001dc2:	4305      	orrs	r5, r0
 8001dc4:	81a5      	strh	r5, [r4, #12]
 8001dc6:	e7cd      	b.n	8001d64 <__smakebuf_r+0x18>
 8001dc8:	08001b59 	.word	0x08001b59

08001dcc <_free_r>:
 8001dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d044      	beq.n	8001e5c <_free_r+0x90>
 8001dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dd6:	9001      	str	r0, [sp, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f1a1 0404 	sub.w	r4, r1, #4
 8001dde:	bfb8      	it	lt
 8001de0:	18e4      	addlt	r4, r4, r3
 8001de2:	f000 f97d 	bl	80020e0 <__malloc_lock>
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <_free_r+0x94>)
 8001de8:	9801      	ldr	r0, [sp, #4]
 8001dea:	6813      	ldr	r3, [r2, #0]
 8001dec:	b933      	cbnz	r3, 8001dfc <_free_r+0x30>
 8001dee:	6063      	str	r3, [r4, #4]
 8001df0:	6014      	str	r4, [r2, #0]
 8001df2:	b003      	add	sp, #12
 8001df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001df8:	f000 b978 	b.w	80020ec <__malloc_unlock>
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	d908      	bls.n	8001e12 <_free_r+0x46>
 8001e00:	6825      	ldr	r5, [r4, #0]
 8001e02:	1961      	adds	r1, r4, r5
 8001e04:	428b      	cmp	r3, r1
 8001e06:	bf01      	itttt	eq
 8001e08:	6819      	ldreq	r1, [r3, #0]
 8001e0a:	685b      	ldreq	r3, [r3, #4]
 8001e0c:	1949      	addeq	r1, r1, r5
 8001e0e:	6021      	streq	r1, [r4, #0]
 8001e10:	e7ed      	b.n	8001dee <_free_r+0x22>
 8001e12:	461a      	mov	r2, r3
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b10b      	cbz	r3, 8001e1c <_free_r+0x50>
 8001e18:	42a3      	cmp	r3, r4
 8001e1a:	d9fa      	bls.n	8001e12 <_free_r+0x46>
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	1855      	adds	r5, r2, r1
 8001e20:	42a5      	cmp	r5, r4
 8001e22:	d10b      	bne.n	8001e3c <_free_r+0x70>
 8001e24:	6824      	ldr	r4, [r4, #0]
 8001e26:	4421      	add	r1, r4
 8001e28:	1854      	adds	r4, r2, r1
 8001e2a:	42a3      	cmp	r3, r4
 8001e2c:	6011      	str	r1, [r2, #0]
 8001e2e:	d1e0      	bne.n	8001df2 <_free_r+0x26>
 8001e30:	681c      	ldr	r4, [r3, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	6053      	str	r3, [r2, #4]
 8001e36:	4421      	add	r1, r4
 8001e38:	6011      	str	r1, [r2, #0]
 8001e3a:	e7da      	b.n	8001df2 <_free_r+0x26>
 8001e3c:	d902      	bls.n	8001e44 <_free_r+0x78>
 8001e3e:	230c      	movs	r3, #12
 8001e40:	6003      	str	r3, [r0, #0]
 8001e42:	e7d6      	b.n	8001df2 <_free_r+0x26>
 8001e44:	6825      	ldr	r5, [r4, #0]
 8001e46:	1961      	adds	r1, r4, r5
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	bf04      	itt	eq
 8001e4c:	6819      	ldreq	r1, [r3, #0]
 8001e4e:	685b      	ldreq	r3, [r3, #4]
 8001e50:	6063      	str	r3, [r4, #4]
 8001e52:	bf04      	itt	eq
 8001e54:	1949      	addeq	r1, r1, r5
 8001e56:	6021      	streq	r1, [r4, #0]
 8001e58:	6054      	str	r4, [r2, #4]
 8001e5a:	e7ca      	b.n	8001df2 <_free_r+0x26>
 8001e5c:	b003      	add	sp, #12
 8001e5e:	bd30      	pop	{r4, r5, pc}
 8001e60:	200027d8 	.word	0x200027d8

08001e64 <sbrk_aligned>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	4e0e      	ldr	r6, [pc, #56]	; (8001ea0 <sbrk_aligned+0x3c>)
 8001e68:	460c      	mov	r4, r1
 8001e6a:	6831      	ldr	r1, [r6, #0]
 8001e6c:	4605      	mov	r5, r0
 8001e6e:	b911      	cbnz	r1, 8001e76 <sbrk_aligned+0x12>
 8001e70:	f000 f88c 	bl	8001f8c <_sbrk_r>
 8001e74:	6030      	str	r0, [r6, #0]
 8001e76:	4621      	mov	r1, r4
 8001e78:	4628      	mov	r0, r5
 8001e7a:	f000 f887 	bl	8001f8c <_sbrk_r>
 8001e7e:	1c43      	adds	r3, r0, #1
 8001e80:	d00a      	beq.n	8001e98 <sbrk_aligned+0x34>
 8001e82:	1cc4      	adds	r4, r0, #3
 8001e84:	f024 0403 	bic.w	r4, r4, #3
 8001e88:	42a0      	cmp	r0, r4
 8001e8a:	d007      	beq.n	8001e9c <sbrk_aligned+0x38>
 8001e8c:	1a21      	subs	r1, r4, r0
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 f87c 	bl	8001f8c <_sbrk_r>
 8001e94:	3001      	adds	r0, #1
 8001e96:	d101      	bne.n	8001e9c <sbrk_aligned+0x38>
 8001e98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ea0:	200027dc 	.word	0x200027dc

08001ea4 <_malloc_r>:
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	1ccd      	adds	r5, r1, #3
 8001eaa:	f025 0503 	bic.w	r5, r5, #3
 8001eae:	3508      	adds	r5, #8
 8001eb0:	2d0c      	cmp	r5, #12
 8001eb2:	bf38      	it	cc
 8001eb4:	250c      	movcc	r5, #12
 8001eb6:	2d00      	cmp	r5, #0
 8001eb8:	4607      	mov	r7, r0
 8001eba:	db01      	blt.n	8001ec0 <_malloc_r+0x1c>
 8001ebc:	42a9      	cmp	r1, r5
 8001ebe:	d905      	bls.n	8001ecc <_malloc_r+0x28>
 8001ec0:	230c      	movs	r3, #12
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	2600      	movs	r6, #0
 8001ec6:	4630      	mov	r0, r6
 8001ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ecc:	4e2e      	ldr	r6, [pc, #184]	; (8001f88 <_malloc_r+0xe4>)
 8001ece:	f000 f907 	bl	80020e0 <__malloc_lock>
 8001ed2:	6833      	ldr	r3, [r6, #0]
 8001ed4:	461c      	mov	r4, r3
 8001ed6:	bb34      	cbnz	r4, 8001f26 <_malloc_r+0x82>
 8001ed8:	4629      	mov	r1, r5
 8001eda:	4638      	mov	r0, r7
 8001edc:	f7ff ffc2 	bl	8001e64 <sbrk_aligned>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	d14d      	bne.n	8001f82 <_malloc_r+0xde>
 8001ee6:	6834      	ldr	r4, [r6, #0]
 8001ee8:	4626      	mov	r6, r4
 8001eea:	2e00      	cmp	r6, #0
 8001eec:	d140      	bne.n	8001f70 <_malloc_r+0xcc>
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	4631      	mov	r1, r6
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	eb04 0803 	add.w	r8, r4, r3
 8001ef8:	f000 f848 	bl	8001f8c <_sbrk_r>
 8001efc:	4580      	cmp	r8, r0
 8001efe:	d13a      	bne.n	8001f76 <_malloc_r+0xd2>
 8001f00:	6821      	ldr	r1, [r4, #0]
 8001f02:	3503      	adds	r5, #3
 8001f04:	1a6d      	subs	r5, r5, r1
 8001f06:	f025 0503 	bic.w	r5, r5, #3
 8001f0a:	3508      	adds	r5, #8
 8001f0c:	2d0c      	cmp	r5, #12
 8001f0e:	bf38      	it	cc
 8001f10:	250c      	movcc	r5, #12
 8001f12:	4629      	mov	r1, r5
 8001f14:	4638      	mov	r0, r7
 8001f16:	f7ff ffa5 	bl	8001e64 <sbrk_aligned>
 8001f1a:	3001      	adds	r0, #1
 8001f1c:	d02b      	beq.n	8001f76 <_malloc_r+0xd2>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	442b      	add	r3, r5
 8001f22:	6023      	str	r3, [r4, #0]
 8001f24:	e00e      	b.n	8001f44 <_malloc_r+0xa0>
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	1b52      	subs	r2, r2, r5
 8001f2a:	d41e      	bmi.n	8001f6a <_malloc_r+0xc6>
 8001f2c:	2a0b      	cmp	r2, #11
 8001f2e:	d916      	bls.n	8001f5e <_malloc_r+0xba>
 8001f30:	1961      	adds	r1, r4, r5
 8001f32:	42a3      	cmp	r3, r4
 8001f34:	6025      	str	r5, [r4, #0]
 8001f36:	bf18      	it	ne
 8001f38:	6059      	strne	r1, [r3, #4]
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	bf08      	it	eq
 8001f3e:	6031      	streq	r1, [r6, #0]
 8001f40:	5162      	str	r2, [r4, r5]
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	4638      	mov	r0, r7
 8001f46:	f104 060b 	add.w	r6, r4, #11
 8001f4a:	f000 f8cf 	bl	80020ec <__malloc_unlock>
 8001f4e:	f026 0607 	bic.w	r6, r6, #7
 8001f52:	1d23      	adds	r3, r4, #4
 8001f54:	1af2      	subs	r2, r6, r3
 8001f56:	d0b6      	beq.n	8001ec6 <_malloc_r+0x22>
 8001f58:	1b9b      	subs	r3, r3, r6
 8001f5a:	50a3      	str	r3, [r4, r2]
 8001f5c:	e7b3      	b.n	8001ec6 <_malloc_r+0x22>
 8001f5e:	6862      	ldr	r2, [r4, #4]
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	bf0c      	ite	eq
 8001f64:	6032      	streq	r2, [r6, #0]
 8001f66:	605a      	strne	r2, [r3, #4]
 8001f68:	e7ec      	b.n	8001f44 <_malloc_r+0xa0>
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	6864      	ldr	r4, [r4, #4]
 8001f6e:	e7b2      	b.n	8001ed6 <_malloc_r+0x32>
 8001f70:	4634      	mov	r4, r6
 8001f72:	6876      	ldr	r6, [r6, #4]
 8001f74:	e7b9      	b.n	8001eea <_malloc_r+0x46>
 8001f76:	230c      	movs	r3, #12
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	f000 f8b6 	bl	80020ec <__malloc_unlock>
 8001f80:	e7a1      	b.n	8001ec6 <_malloc_r+0x22>
 8001f82:	6025      	str	r5, [r4, #0]
 8001f84:	e7de      	b.n	8001f44 <_malloc_r+0xa0>
 8001f86:	bf00      	nop
 8001f88:	200027d8 	.word	0x200027d8

08001f8c <_sbrk_r>:
 8001f8c:	b538      	push	{r3, r4, r5, lr}
 8001f8e:	4d06      	ldr	r5, [pc, #24]	; (8001fa8 <_sbrk_r+0x1c>)
 8001f90:	2300      	movs	r3, #0
 8001f92:	4604      	mov	r4, r0
 8001f94:	4608      	mov	r0, r1
 8001f96:	602b      	str	r3, [r5, #0]
 8001f98:	f7fe fda2 	bl	8000ae0 <_sbrk>
 8001f9c:	1c43      	adds	r3, r0, #1
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk_r+0x1a>
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	b103      	cbz	r3, 8001fa6 <_sbrk_r+0x1a>
 8001fa4:	6023      	str	r3, [r4, #0]
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	200027e0 	.word	0x200027e0

08001fac <__sread>:
 8001fac:	b510      	push	{r4, lr}
 8001fae:	460c      	mov	r4, r1
 8001fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb4:	f000 f8a0 	bl	80020f8 <_read_r>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	bfab      	itete	ge
 8001fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8001fc0:	181b      	addge	r3, r3, r0
 8001fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fc6:	bfac      	ite	ge
 8001fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fca:	81a3      	strhlt	r3, [r4, #12]
 8001fcc:	bd10      	pop	{r4, pc}

08001fce <__swrite>:
 8001fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd2:	461f      	mov	r7, r3
 8001fd4:	898b      	ldrh	r3, [r1, #12]
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	4605      	mov	r5, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4616      	mov	r6, r2
 8001fde:	d505      	bpl.n	8001fec <__swrite+0x1e>
 8001fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f000 f868 	bl	80020bc <_lseek_r>
 8001fec:	89a3      	ldrh	r3, [r4, #12]
 8001fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ff2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ff6:	81a3      	strh	r3, [r4, #12]
 8001ff8:	4632      	mov	r2, r6
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002002:	f000 b817 	b.w	8002034 <_write_r>

08002006 <__sseek>:
 8002006:	b510      	push	{r4, lr}
 8002008:	460c      	mov	r4, r1
 800200a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800200e:	f000 f855 	bl	80020bc <_lseek_r>
 8002012:	1c43      	adds	r3, r0, #1
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	bf15      	itete	ne
 8002018:	6560      	strne	r0, [r4, #84]	; 0x54
 800201a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800201e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002022:	81a3      	strheq	r3, [r4, #12]
 8002024:	bf18      	it	ne
 8002026:	81a3      	strhne	r3, [r4, #12]
 8002028:	bd10      	pop	{r4, pc}

0800202a <__sclose>:
 800202a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800202e:	f000 b813 	b.w	8002058 <_close_r>
	...

08002034 <_write_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4d07      	ldr	r5, [pc, #28]	; (8002054 <_write_r+0x20>)
 8002038:	4604      	mov	r4, r0
 800203a:	4608      	mov	r0, r1
 800203c:	4611      	mov	r1, r2
 800203e:	2200      	movs	r2, #0
 8002040:	602a      	str	r2, [r5, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f7fe fc38 	bl	80008b8 <_write>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_write_r+0x1e>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_write_r+0x1e>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200027e0 	.word	0x200027e0

08002058 <_close_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4d06      	ldr	r5, [pc, #24]	; (8002074 <_close_r+0x1c>)
 800205c:	2300      	movs	r3, #0
 800205e:	4604      	mov	r4, r0
 8002060:	4608      	mov	r0, r1
 8002062:	602b      	str	r3, [r5, #0]
 8002064:	f7fe fd07 	bl	8000a76 <_close>
 8002068:	1c43      	adds	r3, r0, #1
 800206a:	d102      	bne.n	8002072 <_close_r+0x1a>
 800206c:	682b      	ldr	r3, [r5, #0]
 800206e:	b103      	cbz	r3, 8002072 <_close_r+0x1a>
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	bd38      	pop	{r3, r4, r5, pc}
 8002074:	200027e0 	.word	0x200027e0

08002078 <_fstat_r>:
 8002078:	b538      	push	{r3, r4, r5, lr}
 800207a:	4d07      	ldr	r5, [pc, #28]	; (8002098 <_fstat_r+0x20>)
 800207c:	2300      	movs	r3, #0
 800207e:	4604      	mov	r4, r0
 8002080:	4608      	mov	r0, r1
 8002082:	4611      	mov	r1, r2
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	f7fe fd02 	bl	8000a8e <_fstat>
 800208a:	1c43      	adds	r3, r0, #1
 800208c:	d102      	bne.n	8002094 <_fstat_r+0x1c>
 800208e:	682b      	ldr	r3, [r5, #0]
 8002090:	b103      	cbz	r3, 8002094 <_fstat_r+0x1c>
 8002092:	6023      	str	r3, [r4, #0]
 8002094:	bd38      	pop	{r3, r4, r5, pc}
 8002096:	bf00      	nop
 8002098:	200027e0 	.word	0x200027e0

0800209c <_isatty_r>:
 800209c:	b538      	push	{r3, r4, r5, lr}
 800209e:	4d06      	ldr	r5, [pc, #24]	; (80020b8 <_isatty_r+0x1c>)
 80020a0:	2300      	movs	r3, #0
 80020a2:	4604      	mov	r4, r0
 80020a4:	4608      	mov	r0, r1
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	f7fe fd01 	bl	8000aae <_isatty>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	d102      	bne.n	80020b6 <_isatty_r+0x1a>
 80020b0:	682b      	ldr	r3, [r5, #0]
 80020b2:	b103      	cbz	r3, 80020b6 <_isatty_r+0x1a>
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	bd38      	pop	{r3, r4, r5, pc}
 80020b8:	200027e0 	.word	0x200027e0

080020bc <_lseek_r>:
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	4d07      	ldr	r5, [pc, #28]	; (80020dc <_lseek_r+0x20>)
 80020c0:	4604      	mov	r4, r0
 80020c2:	4608      	mov	r0, r1
 80020c4:	4611      	mov	r1, r2
 80020c6:	2200      	movs	r2, #0
 80020c8:	602a      	str	r2, [r5, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7fe fcfa 	bl	8000ac4 <_lseek>
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d102      	bne.n	80020da <_lseek_r+0x1e>
 80020d4:	682b      	ldr	r3, [r5, #0]
 80020d6:	b103      	cbz	r3, 80020da <_lseek_r+0x1e>
 80020d8:	6023      	str	r3, [r4, #0]
 80020da:	bd38      	pop	{r3, r4, r5, pc}
 80020dc:	200027e0 	.word	0x200027e0

080020e0 <__malloc_lock>:
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <__malloc_lock+0x8>)
 80020e2:	f7ff be0b 	b.w	8001cfc <__retarget_lock_acquire_recursive>
 80020e6:	bf00      	nop
 80020e8:	200027d4 	.word	0x200027d4

080020ec <__malloc_unlock>:
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <__malloc_unlock+0x8>)
 80020ee:	f7ff be06 	b.w	8001cfe <__retarget_lock_release_recursive>
 80020f2:	bf00      	nop
 80020f4:	200027d4 	.word	0x200027d4

080020f8 <_read_r>:
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4d07      	ldr	r5, [pc, #28]	; (8002118 <_read_r+0x20>)
 80020fc:	4604      	mov	r4, r0
 80020fe:	4608      	mov	r0, r1
 8002100:	4611      	mov	r1, r2
 8002102:	2200      	movs	r2, #0
 8002104:	602a      	str	r2, [r5, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	f7fe fc98 	bl	8000a3c <_read>
 800210c:	1c43      	adds	r3, r0, #1
 800210e:	d102      	bne.n	8002116 <_read_r+0x1e>
 8002110:	682b      	ldr	r3, [r5, #0]
 8002112:	b103      	cbz	r3, 8002116 <_read_r+0x1e>
 8002114:	6023      	str	r3, [r4, #0]
 8002116:	bd38      	pop	{r3, r4, r5, pc}
 8002118:	200027e0 	.word	0x200027e0

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
