                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module character
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets_
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _atoi
                                     17 	.globl _printf_tiny
                                     18 	.globl _printf
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _TXD0
                                     95 	.globl _RXD0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl _B
                                    154 	.globl _ACC
                                    155 	.globl _PSW
                                    156 	.globl _IP
                                    157 	.globl _P3
                                    158 	.globl _IE
                                    159 	.globl _P2
                                    160 	.globl _SBUF
                                    161 	.globl _SCON
                                    162 	.globl _P1
                                    163 	.globl _TH1
                                    164 	.globl _TH0
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TMOD
                                    168 	.globl _TCON
                                    169 	.globl _PCON
                                    170 	.globl _DPH
                                    171 	.globl _DPL
                                    172 	.globl _SP
                                    173 	.globl _P0
                                    174 	.globl _SBUF0
                                    175 	.globl _DP0L
                                    176 	.globl _DP0H
                                    177 	.globl _EECON
                                    178 	.globl _KBF
                                    179 	.globl _KBE
                                    180 	.globl _KBLS
                                    181 	.globl _BRL
                                    182 	.globl _BDRCON
                                    183 	.globl _T2MOD
                                    184 	.globl _SPDAT
                                    185 	.globl _SPSTA
                                    186 	.globl _SPCON
                                    187 	.globl _SADEN
                                    188 	.globl _SADDR
                                    189 	.globl _WDTPRG
                                    190 	.globl _WDTRST
                                    191 	.globl _P5
                                    192 	.globl _P4
                                    193 	.globl _IPH1
                                    194 	.globl _IPL1
                                    195 	.globl _IPH0
                                    196 	.globl _IPL0
                                    197 	.globl _IEN1
                                    198 	.globl _IEN0
                                    199 	.globl _CMOD
                                    200 	.globl _CL
                                    201 	.globl _CH
                                    202 	.globl _CCON
                                    203 	.globl _CCAPM4
                                    204 	.globl _CCAPM3
                                    205 	.globl _CCAPM2
                                    206 	.globl _CCAPM1
                                    207 	.globl _CCAPM0
                                    208 	.globl _CCAP4L
                                    209 	.globl _CCAP3L
                                    210 	.globl _CCAP2L
                                    211 	.globl _CCAP1L
                                    212 	.globl _CCAP0L
                                    213 	.globl _CCAP4H
                                    214 	.globl _CCAP3H
                                    215 	.globl _CCAP2H
                                    216 	.globl _CCAP1H
                                    217 	.globl _CCAP0H
                                    218 	.globl _CKCON1
                                    219 	.globl _CKCON0
                                    220 	.globl _CKRL
                                    221 	.globl _AUXR1
                                    222 	.globl _AUXR
                                    223 	.globl _TH2
                                    224 	.globl _TL2
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _T2CON
                                    228 	.globl _buffer0and1_size
                                    229 	.globl _buff_not_cleared
                                    230 	.globl _buffer_to_delete
                                    231 	.globl _size
                                    232 	.globl _command_processing_PARM_8
                                    233 	.globl _command_processing_PARM_7
                                    234 	.globl _command_processing_PARM_6
                                    235 	.globl _command_processing_PARM_5
                                    236 	.globl _command_processing_PARM_4
                                    237 	.globl _command_processing_PARM_3
                                    238 	.globl _command_processing_PARM_2
                                    239 	.globl _length
                                    240 	.globl _dataout
                                    241 	.globl _empty_buffer0
                                    242 	.globl _buffer0_hexdump
                                    243 	.globl _command_processing
                                    244 ;--------------------------------------------------------
                                    245 ; special function registers
                                    246 ;--------------------------------------------------------
                                    247 	.area RSEG    (ABS,DATA)
      000000                        248 	.org 0x0000
                           0000C8   249 _T2CON	=	0x00c8
                           0000CA   250 _RCAP2L	=	0x00ca
                           0000CB   251 _RCAP2H	=	0x00cb
                           0000CC   252 _TL2	=	0x00cc
                           0000CD   253 _TH2	=	0x00cd
                           00008E   254 _AUXR	=	0x008e
                           0000A2   255 _AUXR1	=	0x00a2
                           000097   256 _CKRL	=	0x0097
                           00008F   257 _CKCON0	=	0x008f
                           0000AF   258 _CKCON1	=	0x00af
                           0000FA   259 _CCAP0H	=	0x00fa
                           0000FB   260 _CCAP1H	=	0x00fb
                           0000FC   261 _CCAP2H	=	0x00fc
                           0000FD   262 _CCAP3H	=	0x00fd
                           0000FE   263 _CCAP4H	=	0x00fe
                           0000EA   264 _CCAP0L	=	0x00ea
                           0000EB   265 _CCAP1L	=	0x00eb
                           0000EC   266 _CCAP2L	=	0x00ec
                           0000ED   267 _CCAP3L	=	0x00ed
                           0000EE   268 _CCAP4L	=	0x00ee
                           0000DA   269 _CCAPM0	=	0x00da
                           0000DB   270 _CCAPM1	=	0x00db
                           0000DC   271 _CCAPM2	=	0x00dc
                           0000DD   272 _CCAPM3	=	0x00dd
                           0000DE   273 _CCAPM4	=	0x00de
                           0000D8   274 _CCON	=	0x00d8
                           0000F9   275 _CH	=	0x00f9
                           0000E9   276 _CL	=	0x00e9
                           0000D9   277 _CMOD	=	0x00d9
                           0000A8   278 _IEN0	=	0x00a8
                           0000B1   279 _IEN1	=	0x00b1
                           0000B8   280 _IPL0	=	0x00b8
                           0000B7   281 _IPH0	=	0x00b7
                           0000B2   282 _IPL1	=	0x00b2
                           0000B3   283 _IPH1	=	0x00b3
                           0000C0   284 _P4	=	0x00c0
                           0000E8   285 _P5	=	0x00e8
                           0000A6   286 _WDTRST	=	0x00a6
                           0000A7   287 _WDTPRG	=	0x00a7
                           0000A9   288 _SADDR	=	0x00a9
                           0000B9   289 _SADEN	=	0x00b9
                           0000C3   290 _SPCON	=	0x00c3
                           0000C4   291 _SPSTA	=	0x00c4
                           0000C5   292 _SPDAT	=	0x00c5
                           0000C9   293 _T2MOD	=	0x00c9
                           00009B   294 _BDRCON	=	0x009b
                           00009A   295 _BRL	=	0x009a
                           00009C   296 _KBLS	=	0x009c
                           00009D   297 _KBE	=	0x009d
                           00009E   298 _KBF	=	0x009e
                           0000D2   299 _EECON	=	0x00d2
                           000083   300 _DP0H	=	0x0083
                           000082   301 _DP0L	=	0x0082
                           000099   302 _SBUF0	=	0x0099
                           000080   303 _P0	=	0x0080
                           000081   304 _SP	=	0x0081
                           000082   305 _DPL	=	0x0082
                           000083   306 _DPH	=	0x0083
                           000087   307 _PCON	=	0x0087
                           000088   308 _TCON	=	0x0088
                           000089   309 _TMOD	=	0x0089
                           00008A   310 _TL0	=	0x008a
                           00008B   311 _TL1	=	0x008b
                           00008C   312 _TH0	=	0x008c
                           00008D   313 _TH1	=	0x008d
                           000090   314 _P1	=	0x0090
                           000098   315 _SCON	=	0x0098
                           000099   316 _SBUF	=	0x0099
                           0000A0   317 _P2	=	0x00a0
                           0000A8   318 _IE	=	0x00a8
                           0000B0   319 _P3	=	0x00b0
                           0000B8   320 _IP	=	0x00b8
                           0000D0   321 _PSW	=	0x00d0
                           0000E0   322 _ACC	=	0x00e0
                           0000F0   323 _B	=	0x00f0
                                    324 ;--------------------------------------------------------
                                    325 ; special function bits
                                    326 ;--------------------------------------------------------
                                    327 	.area RSEG    (ABS,DATA)
      000000                        328 	.org 0x0000
                           0000AD   329 _ET2	=	0x00ad
                           0000BD   330 _PT2	=	0x00bd
                           0000C8   331 _T2CON_0	=	0x00c8
                           0000C9   332 _T2CON_1	=	0x00c9
                           0000CA   333 _T2CON_2	=	0x00ca
                           0000CB   334 _T2CON_3	=	0x00cb
                           0000CC   335 _T2CON_4	=	0x00cc
                           0000CD   336 _T2CON_5	=	0x00cd
                           0000CE   337 _T2CON_6	=	0x00ce
                           0000CF   338 _T2CON_7	=	0x00cf
                           0000C8   339 _CP_RL2	=	0x00c8
                           0000C9   340 _C_T2	=	0x00c9
                           0000CA   341 _TR2	=	0x00ca
                           0000CB   342 _EXEN2	=	0x00cb
                           0000CC   343 _TCLK	=	0x00cc
                           0000CD   344 _RCLK	=	0x00cd
                           0000CE   345 _EXF2	=	0x00ce
                           0000CF   346 _TF2	=	0x00cf
                           0000DF   347 _CF	=	0x00df
                           0000DE   348 _CR	=	0x00de
                           0000DC   349 _CCF4	=	0x00dc
                           0000DB   350 _CCF3	=	0x00db
                           0000DA   351 _CCF2	=	0x00da
                           0000D9   352 _CCF1	=	0x00d9
                           0000D8   353 _CCF0	=	0x00d8
                           0000AE   354 _EC	=	0x00ae
                           0000BE   355 _PPCL	=	0x00be
                           0000BD   356 _PT2L	=	0x00bd
                           0000BC   357 _PSL	=	0x00bc
                           0000BB   358 _PT1L	=	0x00bb
                           0000BA   359 _PX1L	=	0x00ba
                           0000B9   360 _PT0L	=	0x00b9
                           0000B8   361 _PX0L	=	0x00b8
                           0000C0   362 _P4_0	=	0x00c0
                           0000C1   363 _P4_1	=	0x00c1
                           0000C2   364 _P4_2	=	0x00c2
                           0000C3   365 _P4_3	=	0x00c3
                           0000C4   366 _P4_4	=	0x00c4
                           0000C5   367 _P4_5	=	0x00c5
                           0000C6   368 _P4_6	=	0x00c6
                           0000C7   369 _P4_7	=	0x00c7
                           0000E8   370 _P5_0	=	0x00e8
                           0000E9   371 _P5_1	=	0x00e9
                           0000EA   372 _P5_2	=	0x00ea
                           0000EB   373 _P5_3	=	0x00eb
                           0000EC   374 _P5_4	=	0x00ec
                           0000ED   375 _P5_5	=	0x00ed
                           0000EE   376 _P5_6	=	0x00ee
                           0000EF   377 _P5_7	=	0x00ef
                           0000F0   378 _BREG_F0	=	0x00f0
                           0000F1   379 _BREG_F1	=	0x00f1
                           0000F2   380 _BREG_F2	=	0x00f2
                           0000F3   381 _BREG_F3	=	0x00f3
                           0000F4   382 _BREG_F4	=	0x00f4
                           0000F5   383 _BREG_F5	=	0x00f5
                           0000F6   384 _BREG_F6	=	0x00f6
                           0000F7   385 _BREG_F7	=	0x00f7
                           0000B0   386 _RXD0	=	0x00b0
                           0000B1   387 _TXD0	=	0x00b1
                           000080   388 _P0_0	=	0x0080
                           000081   389 _P0_1	=	0x0081
                           000082   390 _P0_2	=	0x0082
                           000083   391 _P0_3	=	0x0083
                           000084   392 _P0_4	=	0x0084
                           000085   393 _P0_5	=	0x0085
                           000086   394 _P0_6	=	0x0086
                           000087   395 _P0_7	=	0x0087
                           000088   396 _IT0	=	0x0088
                           000089   397 _IE0	=	0x0089
                           00008A   398 _IT1	=	0x008a
                           00008B   399 _IE1	=	0x008b
                           00008C   400 _TR0	=	0x008c
                           00008D   401 _TF0	=	0x008d
                           00008E   402 _TR1	=	0x008e
                           00008F   403 _TF1	=	0x008f
                           000090   404 _P1_0	=	0x0090
                           000091   405 _P1_1	=	0x0091
                           000092   406 _P1_2	=	0x0092
                           000093   407 _P1_3	=	0x0093
                           000094   408 _P1_4	=	0x0094
                           000095   409 _P1_5	=	0x0095
                           000096   410 _P1_6	=	0x0096
                           000097   411 _P1_7	=	0x0097
                           000098   412 _RI	=	0x0098
                           000099   413 _TI	=	0x0099
                           00009A   414 _RB8	=	0x009a
                           00009B   415 _TB8	=	0x009b
                           00009C   416 _REN	=	0x009c
                           00009D   417 _SM2	=	0x009d
                           00009E   418 _SM1	=	0x009e
                           00009F   419 _SM0	=	0x009f
                           0000A0   420 _P2_0	=	0x00a0
                           0000A1   421 _P2_1	=	0x00a1
                           0000A2   422 _P2_2	=	0x00a2
                           0000A3   423 _P2_3	=	0x00a3
                           0000A4   424 _P2_4	=	0x00a4
                           0000A5   425 _P2_5	=	0x00a5
                           0000A6   426 _P2_6	=	0x00a6
                           0000A7   427 _P2_7	=	0x00a7
                           0000A8   428 _EX0	=	0x00a8
                           0000A9   429 _ET0	=	0x00a9
                           0000AA   430 _EX1	=	0x00aa
                           0000AB   431 _ET1	=	0x00ab
                           0000AC   432 _ES	=	0x00ac
                           0000AF   433 _EA	=	0x00af
                           0000B0   434 _P3_0	=	0x00b0
                           0000B1   435 _P3_1	=	0x00b1
                           0000B2   436 _P3_2	=	0x00b2
                           0000B3   437 _P3_3	=	0x00b3
                           0000B4   438 _P3_4	=	0x00b4
                           0000B5   439 _P3_5	=	0x00b5
                           0000B6   440 _P3_6	=	0x00b6
                           0000B7   441 _P3_7	=	0x00b7
                           0000B0   442 _RXD	=	0x00b0
                           0000B1   443 _TXD	=	0x00b1
                           0000B2   444 _INT0	=	0x00b2
                           0000B3   445 _INT1	=	0x00b3
                           0000B4   446 _T0	=	0x00b4
                           0000B5   447 _T1	=	0x00b5
                           0000B6   448 _WR	=	0x00b6
                           0000B7   449 _RD	=	0x00b7
                           0000B8   450 _PX0	=	0x00b8
                           0000B9   451 _PT0	=	0x00b9
                           0000BA   452 _PX1	=	0x00ba
                           0000BB   453 _PT1	=	0x00bb
                           0000BC   454 _PS	=	0x00bc
                           0000D0   455 _P	=	0x00d0
                           0000D1   456 _F1	=	0x00d1
                           0000D2   457 _OV	=	0x00d2
                           0000D3   458 _RS0	=	0x00d3
                           0000D4   459 _RS1	=	0x00d4
                           0000D5   460 _F0	=	0x00d5
                           0000D6   461 _AC	=	0x00d6
                           0000D7   462 _CY	=	0x00d7
                                    463 ;--------------------------------------------------------
                                    464 ; overlayable register banks
                                    465 ;--------------------------------------------------------
                                    466 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        467 	.ds 8
                                    468 ;--------------------------------------------------------
                                    469 ; internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area DSEG    (DATA)
      000000                        472 _buffer0_hexdump_sloc0_1_0:
      000000                        473 	.ds 2
      000002                        474 _buffer0_hexdump_sloc1_1_0:
      000002                        475 	.ds 1
      000003                        476 _buffer0_hexdump_sloc2_1_0:
      000003                        477 	.ds 1
      000004                        478 _command_processing_sloc0_1_0:
      000004                        479 	.ds 2
      000006                        480 _command_processing_sloc1_1_0:
      000006                        481 	.ds 3
      000009                        482 _command_processing_sloc2_1_0:
      000009                        483 	.ds 3
      00000C                        484 _command_processing_sloc3_1_0:
      00000C                        485 	.ds 3
                                    486 ;--------------------------------------------------------
                                    487 ; overlayable items in internal ram
                                    488 ;--------------------------------------------------------
                                    489 ;--------------------------------------------------------
                                    490 ; indirectly addressable internal ram data
                                    491 ;--------------------------------------------------------
                                    492 	.area ISEG    (DATA)
                                    493 ;--------------------------------------------------------
                                    494 ; absolute internal ram data
                                    495 ;--------------------------------------------------------
                                    496 	.area IABS    (ABS,DATA)
                                    497 	.area IABS    (ABS,DATA)
                                    498 ;--------------------------------------------------------
                                    499 ; bit data
                                    500 ;--------------------------------------------------------
                                    501 	.area BSEG    (BIT)
                                    502 ;--------------------------------------------------------
                                    503 ; paged external ram data
                                    504 ;--------------------------------------------------------
                                    505 	.area PSEG    (PAG,XDATA)
                                    506 ;--------------------------------------------------------
                                    507 ; external ram data
                                    508 ;--------------------------------------------------------
                                    509 	.area XSEG    (XDATA)
      000000                        510 _length::
      000000                        511 	.ds 2
      000002                        512 _dataout_x_65536_50:
      000002                        513 	.ds 1
      000003                        514 _buffer0_hexdump_length_65536_56:
      000003                        515 	.ds 2
      000005                        516 _buffer0_hexdump_print_address_65536_57:
      000005                        517 	.ds 1
      000006                        518 _command_processing_PARM_2:
      000006                        519 	.ds 1
      000007                        520 _command_processing_PARM_3:
      000007                        521 	.ds 3
      00000A                        522 _command_processing_PARM_4:
      00000A                        523 	.ds 3
      00000D                        524 _command_processing_PARM_5:
      00000D                        525 	.ds 3
      000010                        526 _command_processing_PARM_6:
      000010                        527 	.ds 3
      000013                        528 _command_processing_PARM_7:
      000013                        529 	.ds 3
      000016                        530 _command_processing_PARM_8:
      000016                        531 	.ds 2
      000018                        532 _command_processing_cmd_detected_65536_65:
      000018                        533 	.ds 2
                                    534 ;--------------------------------------------------------
                                    535 ; absolute external ram data
                                    536 ;--------------------------------------------------------
                                    537 	.area XABS    (ABS,XDATA)
                                    538 ;--------------------------------------------------------
                                    539 ; external initialized ram data
                                    540 ;--------------------------------------------------------
                                    541 	.area XISEG   (XDATA)
      000000                        542 _size::
      000000                        543 	.ds 4
      000004                        544 _buffer_to_delete::
      000004                        545 	.ds 2
      000006                        546 _buff_not_cleared::
      000006                        547 	.ds 200
      0000CE                        548 _buffer0and1_size::
      0000CE                        549 	.ds 2
                                    550 	.area HOME    (CODE)
                                    551 	.area GSINIT0 (CODE)
                                    552 	.area GSINIT1 (CODE)
                                    553 	.area GSINIT2 (CODE)
                                    554 	.area GSINIT3 (CODE)
                                    555 	.area GSINIT4 (CODE)
                                    556 	.area GSINIT5 (CODE)
                                    557 	.area GSINIT  (CODE)
                                    558 	.area GSFINAL (CODE)
                                    559 	.area CSEG    (CODE)
                                    560 ;--------------------------------------------------------
                                    561 ; global & static initialisations
                                    562 ;--------------------------------------------------------
                                    563 	.area HOME    (CODE)
                                    564 	.area GSINIT  (CODE)
                                    565 	.area GSFINAL (CODE)
                                    566 	.area GSINIT  (CODE)
                                    567 ;--------------------------------------------------------
                                    568 ; Home
                                    569 ;--------------------------------------------------------
                                    570 	.area HOME    (CODE)
                                    571 	.area HOME    (CODE)
                                    572 ;--------------------------------------------------------
                                    573 ; code
                                    574 ;--------------------------------------------------------
                                    575 	.area CSEG    (CODE)
                                    576 ;------------------------------------------------------------
                                    577 ;Allocation info for local variables in function 'dataout'
                                    578 ;------------------------------------------------------------
                                    579 ;x                         Allocated with name '_dataout_x_65536_50'
                                    580 ;data                      Allocated with name '_dataout_data_65536_51'
                                    581 ;------------------------------------------------------------
                                    582 ;	character.c:69: void dataout(uint8_t x) {
                                    583 ;	-----------------------------------------
                                    584 ;	 function dataout
                                    585 ;	-----------------------------------------
      000000                        586 _dataout:
                           000007   587 	ar7 = 0x07
                           000006   588 	ar6 = 0x06
                           000005   589 	ar5 = 0x05
                           000004   590 	ar4 = 0x04
                           000003   591 	ar3 = 0x03
                           000002   592 	ar2 = 0x02
                           000001   593 	ar1 = 0x01
                           000000   594 	ar0 = 0x00
      000000 E5 82            [12]  595 	mov	a,dpl
      000002 90r00r02         [24]  596 	mov	dptr,#_dataout_x_65536_50
      000005 F0               [24]  597 	movx	@dptr,a
                                    598 ;	character.c:71: *data = x;
      000006 E0               [24]  599 	movx	a,@dptr
      000007 FF               [12]  600 	mov	r7,a
      000008 90 FF FF         [24]  601 	mov	dptr,#0xffff
      00000B 75 F0 00         [24]  602 	mov	b,#0x00
      00000E EF               [12]  603 	mov	a,r7
                                    604 ;	character.c:72: }
      00000F 02r00r00         [24]  605 	ljmp	__gptrput
                                    606 ;------------------------------------------------------------
                                    607 ;Allocation info for local variables in function 'empty_buffer0'
                                    608 ;------------------------------------------------------------
                                    609 ;buffer0_ptr               Allocated with name '_empty_buffer0_buffer0_ptr_65536_53'
                                    610 ;i                         Allocated with name '_empty_buffer0_i_131072_54'
                                    611 ;------------------------------------------------------------
                                    612 ;	character.c:79: void empty_buffer0(void)
                                    613 ;	-----------------------------------------
                                    614 ;	 function empty_buffer0
                                    615 ;	-----------------------------------------
      000012                        616 _empty_buffer0:
                                    617 ;	character.c:81: char * buffer0_ptr = buffer0;
      000012 90r00r00         [24]  618 	mov	dptr,#_buffer0
      000015 E0               [24]  619 	movx	a,@dptr
      000016 FE               [12]  620 	mov	r6,a
      000017 A3               [24]  621 	inc	dptr
      000018 E0               [24]  622 	movx	a,@dptr
      000019 FD               [12]  623 	mov	r5,a
      00001A 7F 00            [12]  624 	mov	r7,#0x00
                                    625 ;	character.c:82: for (int i = 0; i < buffer_size_arr[0]; i++)
      00001C 7B 00            [12]  626 	mov	r3,#0x00
      00001E 7C 00            [12]  627 	mov	r4,#0x00
      000020                        628 00103$:
      000020 90r00r00         [24]  629 	mov	dptr,#_buffer_size_arr
      000023 E0               [24]  630 	movx	a,@dptr
      000024 F9               [12]  631 	mov	r1,a
      000025 A3               [24]  632 	inc	dptr
      000026 E0               [24]  633 	movx	a,@dptr
      000027 FA               [12]  634 	mov	r2,a
      000028 C3               [12]  635 	clr	c
      000029 EB               [12]  636 	mov	a,r3
      00002A 99               [12]  637 	subb	a,r1
      00002B EC               [12]  638 	mov	a,r4
      00002C 64 80            [12]  639 	xrl	a,#0x80
      00002E 8A F0            [24]  640 	mov	b,r2
      000030 63 F0 80         [24]  641 	xrl	b,#0x80
      000033 95 F0            [12]  642 	subb	a,b
      000035 50 1A            [24]  643 	jnc	00105$
                                    644 ;	character.c:84: buffer0_ptr[i] = '0';
      000037 EB               [12]  645 	mov	a,r3
      000038 2E               [12]  646 	add	a,r6
      000039 F8               [12]  647 	mov	r0,a
      00003A EC               [12]  648 	mov	a,r4
      00003B 3D               [12]  649 	addc	a,r5
      00003C F9               [12]  650 	mov	r1,a
      00003D 8F 02            [24]  651 	mov	ar2,r7
      00003F 88 82            [24]  652 	mov	dpl,r0
      000041 89 83            [24]  653 	mov	dph,r1
      000043 8A F0            [24]  654 	mov	b,r2
      000045 74 30            [12]  655 	mov	a,#0x30
      000047 12r00r00         [24]  656 	lcall	__gptrput
                                    657 ;	character.c:82: for (int i = 0; i < buffer_size_arr[0]; i++)
      00004A 0B               [12]  658 	inc	r3
      00004B BB 00 D2         [24]  659 	cjne	r3,#0x00,00103$
      00004E 0C               [12]  660 	inc	r4
      00004F 80 CF            [24]  661 	sjmp	00103$
      000051                        662 00105$:
                                    663 ;	character.c:86: }
      000051 22               [24]  664 	ret
                                    665 ;------------------------------------------------------------
                                    666 ;Allocation info for local variables in function 'buffer0_hexdump'
                                    667 ;------------------------------------------------------------
                                    668 ;sloc0                     Allocated with name '_buffer0_hexdump_sloc0_1_0'
                                    669 ;sloc1                     Allocated with name '_buffer0_hexdump_sloc1_1_0'
                                    670 ;sloc2                     Allocated with name '_buffer0_hexdump_sloc2_1_0'
                                    671 ;length                    Allocated with name '_buffer0_hexdump_length_65536_56'
                                    672 ;itr                       Allocated with name '_buffer0_hexdump_itr_65536_57'
                                    673 ;print_address             Allocated with name '_buffer0_hexdump_print_address_65536_57'
                                    674 ;buffer0_ptr               Allocated with name '_buffer0_hexdump_buffer0_ptr_65536_57'
                                    675 ;------------------------------------------------------------
                                    676 ;	character.c:95: void buffer0_hexdump(int length) {
                                    677 ;	-----------------------------------------
                                    678 ;	 function buffer0_hexdump
                                    679 ;	-----------------------------------------
      000052                        680 _buffer0_hexdump:
      000052 AF 83            [24]  681 	mov	r7,dph
      000054 E5 82            [12]  682 	mov	a,dpl
      000056 90r00r03         [24]  683 	mov	dptr,#_buffer0_hexdump_length_65536_56
      000059 F0               [24]  684 	movx	@dptr,a
      00005A EF               [12]  685 	mov	a,r7
      00005B A3               [24]  686 	inc	dptr
      00005C F0               [24]  687 	movx	@dptr,a
                                    688 ;	character.c:97: bool print_address = true;
      00005D 90r00r05         [24]  689 	mov	dptr,#_buffer0_hexdump_print_address_65536_57
      000060 74 01            [12]  690 	mov	a,#0x01
      000062 F0               [24]  691 	movx	@dptr,a
                                    692 ;	character.c:99: char * buffer0_ptr = new_buffer_arr[0];
      000063 90r00r00         [24]  693 	mov	dptr,#_new_buffer_arr
      000066 E0               [24]  694 	movx	a,@dptr
      000067 FE               [12]  695 	mov	r6,a
      000068 A3               [24]  696 	inc	dptr
      000069 E0               [24]  697 	movx	a,@dptr
      00006A FD               [12]  698 	mov	r5,a
      00006B 7F 00            [12]  699 	mov	r7,#0x00
                                    700 ;	character.c:102: printf("\033[1;34m\n\r");
      00006D C0 07            [24]  701 	push	ar7
      00006F C0 06            [24]  702 	push	ar6
      000071 C0 05            [24]  703 	push	ar5
      000073 74r00            [12]  704 	mov	a,#___str_0
      000075 C0 E0            [24]  705 	push	acc
      000077 74s00            [12]  706 	mov	a,#(___str_0 >> 8)
      000079 C0 E0            [24]  707 	push	acc
      00007B 74 80            [12]  708 	mov	a,#0x80
      00007D C0 E0            [24]  709 	push	acc
      00007F 12r00r00         [24]  710 	lcall	_printf
      000082 15 81            [12]  711 	dec	sp
      000084 15 81            [12]  712 	dec	sp
      000086 15 81            [12]  713 	dec	sp
      000088 D0 05            [24]  714 	pop	ar5
      00008A D0 06            [24]  715 	pop	ar6
      00008C D0 07            [24]  716 	pop	ar7
                                    717 ;	character.c:104: while (itr < buffer0and1_size)
      00008E 90r00r03         [24]  718 	mov	dptr,#_buffer0_hexdump_length_65536_56
      000091 E0               [24]  719 	movx	a,@dptr
      000092 FB               [12]  720 	mov	r3,a
      000093 A3               [24]  721 	inc	dptr
      000094 E0               [24]  722 	movx	a,@dptr
      000095 FC               [12]  723 	mov	r4,a
      000096 E4               [12]  724 	clr	a
      000097 BB 10 04         [24]  725 	cjne	r3,#0x10,00146$
      00009A BC 00 01         [24]  726 	cjne	r4,#0x00,00146$
      00009D 04               [12]  727 	inc	a
      00009E                        728 00146$:
      00009E F5*02            [12]  729 	mov	_buffer0_hexdump_sloc1_1_0,a
      0000A0 E4               [12]  730 	clr	a
      0000A1 BB 20 04         [24]  731 	cjne	r3,#0x20,00148$
      0000A4 BC 00 01         [24]  732 	cjne	r4,#0x00,00148$
      0000A7 04               [12]  733 	inc	a
      0000A8                        734 00148$:
      0000A8 F9               [12]  735 	mov	r1,a
      0000A9 E4               [12]  736 	clr	a
      0000AA F5*00            [12]  737 	mov	_buffer0_hexdump_sloc0_1_0,a
      0000AC F5*01            [12]  738 	mov	(_buffer0_hexdump_sloc0_1_0 + 1),a
      0000AE                        739 00112$:
      0000AE C0 01            [24]  740 	push	ar1
      0000B0 90r00rCE         [24]  741 	mov	dptr,#_buffer0and1_size
      0000B3 E0               [24]  742 	movx	a,@dptr
      0000B4 F8               [12]  743 	mov	r0,a
      0000B5 A3               [24]  744 	inc	dptr
      0000B6 E0               [24]  745 	movx	a,@dptr
      0000B7 F9               [12]  746 	mov	r1,a
      0000B8 C3               [12]  747 	clr	c
      0000B9 E5*00            [12]  748 	mov	a,_buffer0_hexdump_sloc0_1_0
      0000BB 98               [12]  749 	subb	a,r0
      0000BC E5*01            [12]  750 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0000BE 64 80            [12]  751 	xrl	a,#0x80
      0000C0 89 F0            [24]  752 	mov	b,r1
      0000C2 63 F0 80         [24]  753 	xrl	b,#0x80
      0000C5 95 F0            [12]  754 	subb	a,b
      0000C7 D0 01            [24]  755 	pop	ar1
      0000C9 40 01            [24]  756 	jc	00150$
      0000CB 22               [24]  757 	ret
      0000CC                        758 00150$:
                                    759 ;	character.c:107: if (print_address)
      0000CC 90r00r05         [24]  760 	mov	dptr,#_buffer0_hexdump_print_address_65536_57
      0000CF E0               [24]  761 	movx	a,@dptr
      0000D0 60 46            [24]  762 	jz	00102$
                                    763 ;	character.c:109: printf("\033[1;34m%p :", buffer0_ptr + itr);
      0000D2 C0 01            [24]  764 	push	ar1
      0000D4 E5*00            [12]  765 	mov	a,_buffer0_hexdump_sloc0_1_0
      0000D6 2E               [12]  766 	add	a,r6
      0000D7 F8               [12]  767 	mov	r0,a
      0000D8 E5*01            [12]  768 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0000DA 3D               [12]  769 	addc	a,r5
      0000DB F9               [12]  770 	mov	r1,a
      0000DC 8F 02            [24]  771 	mov	ar2,r7
      0000DE C0 07            [24]  772 	push	ar7
      0000E0 C0 06            [24]  773 	push	ar6
      0000E2 C0 05            [24]  774 	push	ar5
      0000E4 C0 04            [24]  775 	push	ar4
      0000E6 C0 03            [24]  776 	push	ar3
      0000E8 C0 01            [24]  777 	push	ar1
      0000EA C0 00            [24]  778 	push	ar0
      0000EC C0 01            [24]  779 	push	ar1
      0000EE C0 02            [24]  780 	push	ar2
      0000F0 74r0A            [12]  781 	mov	a,#___str_1
      0000F2 C0 E0            [24]  782 	push	acc
      0000F4 74s00            [12]  783 	mov	a,#(___str_1 >> 8)
      0000F6 C0 E0            [24]  784 	push	acc
      0000F8 74 80            [12]  785 	mov	a,#0x80
      0000FA C0 E0            [24]  786 	push	acc
      0000FC 12r00r00         [24]  787 	lcall	_printf
      0000FF E5 81            [12]  788 	mov	a,sp
      000101 24 FA            [12]  789 	add	a,#0xfa
      000103 F5 81            [12]  790 	mov	sp,a
      000105 D0 01            [24]  791 	pop	ar1
      000107 D0 03            [24]  792 	pop	ar3
      000109 D0 04            [24]  793 	pop	ar4
      00010B D0 05            [24]  794 	pop	ar5
      00010D D0 06            [24]  795 	pop	ar6
      00010F D0 07            [24]  796 	pop	ar7
                                    797 ;	character.c:110: print_address = false;
      000111 90r00r05         [24]  798 	mov	dptr,#_buffer0_hexdump_print_address_65536_57
      000114 E4               [12]  799 	clr	a
      000115 F0               [24]  800 	movx	@dptr,a
                                    801 ;	character.c:134: itr++;
      000116 D0 01            [24]  802 	pop	ar1
                                    803 ;	character.c:110: print_address = false;
      000118                        804 00102$:
                                    805 ;	character.c:113: if (buffer0_ptr[itr] == '0')
      000118 C0 01            [24]  806 	push	ar1
      00011A E5*00            [12]  807 	mov	a,_buffer0_hexdump_sloc0_1_0
      00011C 2E               [12]  808 	add	a,r6
      00011D F8               [12]  809 	mov	r0,a
      00011E E5*01            [12]  810 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      000120 3D               [12]  811 	addc	a,r5
      000121 F9               [12]  812 	mov	r1,a
      000122 8F 02            [24]  813 	mov	ar2,r7
      000124 88 82            [24]  814 	mov	dpl,r0
      000126 89 83            [24]  815 	mov	dph,r1
      000128 8A F0            [24]  816 	mov	b,r2
      00012A 12r00r00         [24]  817 	lcall	__gptrget
      00012D F5*03            [12]  818 	mov	_buffer0_hexdump_sloc2_1_0,a
      00012F 74 30            [12]  819 	mov	a,#0x30
      000131 B5*03 02         [24]  820 	cjne	a,_buffer0_hexdump_sloc2_1_0,00152$
      000134 80 04            [24]  821 	sjmp	00153$
      000136                        822 00152$:
      000136 D0 01            [24]  823 	pop	ar1
      000138 80 2C            [24]  824 	sjmp	00108$
      00013A                        825 00153$:
      00013A D0 01            [24]  826 	pop	ar1
                                    827 ;	character.c:115: printf_tiny("\033[1;34m XX");
      00013C C0 07            [24]  828 	push	ar7
      00013E C0 06            [24]  829 	push	ar6
      000140 C0 05            [24]  830 	push	ar5
      000142 C0 04            [24]  831 	push	ar4
      000144 C0 03            [24]  832 	push	ar3
      000146 C0 01            [24]  833 	push	ar1
      000148 74r16            [12]  834 	mov	a,#___str_2
      00014A C0 E0            [24]  835 	push	acc
      00014C 74s00            [12]  836 	mov	a,#(___str_2 >> 8)
      00014E C0 E0            [24]  837 	push	acc
      000150 12r00r00         [24]  838 	lcall	_printf_tiny
      000153 15 81            [12]  839 	dec	sp
      000155 15 81            [12]  840 	dec	sp
      000157 D0 01            [24]  841 	pop	ar1
      000159 D0 03            [24]  842 	pop	ar3
      00015B D0 04            [24]  843 	pop	ar4
      00015D D0 05            [24]  844 	pop	ar5
      00015F D0 06            [24]  845 	pop	ar6
      000161 D0 07            [24]  846 	pop	ar7
      000163 02r01rE5         [24]  847 	ljmp	00109$
      000166                        848 00108$:
                                    849 ;	character.c:119: if (length == 16) {
      000166 E5*02            [12]  850 	mov	a,_buffer0_hexdump_sloc1_1_0
      000168 60 31            [24]  851 	jz	00104$
                                    852 ;	character.c:120: printf_tiny("\033[1;34m %x", buffer0_ptr[itr]);
      00016A A8*03            [24]  853 	mov	r0,_buffer0_hexdump_sloc2_1_0
      00016C 7A 00            [12]  854 	mov	r2,#0x00
      00016E C0 07            [24]  855 	push	ar7
      000170 C0 06            [24]  856 	push	ar6
      000172 C0 05            [24]  857 	push	ar5
      000174 C0 04            [24]  858 	push	ar4
      000176 C0 03            [24]  859 	push	ar3
      000178 C0 01            [24]  860 	push	ar1
      00017A C0 00            [24]  861 	push	ar0
      00017C C0 02            [24]  862 	push	ar2
      00017E 74r21            [12]  863 	mov	a,#___str_3
      000180 C0 E0            [24]  864 	push	acc
      000182 74s00            [12]  865 	mov	a,#(___str_3 >> 8)
      000184 C0 E0            [24]  866 	push	acc
      000186 12r00r00         [24]  867 	lcall	_printf_tiny
      000189 E5 81            [12]  868 	mov	a,sp
      00018B 24 FC            [12]  869 	add	a,#0xfc
      00018D F5 81            [12]  870 	mov	sp,a
      00018F D0 01            [24]  871 	pop	ar1
      000191 D0 03            [24]  872 	pop	ar3
      000193 D0 04            [24]  873 	pop	ar4
      000195 D0 05            [24]  874 	pop	ar5
      000197 D0 06            [24]  875 	pop	ar6
      000199 D0 07            [24]  876 	pop	ar7
      00019B                        877 00104$:
                                    878 ;	character.c:122: if (length == 32)
      00019B E9               [12]  879 	mov	a,r1
      00019C 60 47            [24]  880 	jz	00109$
                                    881 ;	character.c:124: printf_tiny("\033[1;34m %d", buffer0_ptr[itr]);
      00019E C0 01            [24]  882 	push	ar1
      0001A0 E5*00            [12]  883 	mov	a,_buffer0_hexdump_sloc0_1_0
      0001A2 2E               [12]  884 	add	a,r6
      0001A3 F8               [12]  885 	mov	r0,a
      0001A4 E5*01            [12]  886 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0001A6 3D               [12]  887 	addc	a,r5
      0001A7 F9               [12]  888 	mov	r1,a
      0001A8 8F 02            [24]  889 	mov	ar2,r7
      0001AA 88 82            [24]  890 	mov	dpl,r0
      0001AC 89 83            [24]  891 	mov	dph,r1
      0001AE 8A F0            [24]  892 	mov	b,r2
      0001B0 12r00r00         [24]  893 	lcall	__gptrget
      0001B3 F8               [12]  894 	mov	r0,a
      0001B4 7A 00            [12]  895 	mov	r2,#0x00
      0001B6 C0 07            [24]  896 	push	ar7
      0001B8 C0 06            [24]  897 	push	ar6
      0001BA C0 05            [24]  898 	push	ar5
      0001BC C0 04            [24]  899 	push	ar4
      0001BE C0 03            [24]  900 	push	ar3
      0001C0 C0 01            [24]  901 	push	ar1
      0001C2 C0 00            [24]  902 	push	ar0
      0001C4 C0 02            [24]  903 	push	ar2
      0001C6 74r2C            [12]  904 	mov	a,#___str_4
      0001C8 C0 E0            [24]  905 	push	acc
      0001CA 74s00            [12]  906 	mov	a,#(___str_4 >> 8)
      0001CC C0 E0            [24]  907 	push	acc
      0001CE 12r00r00         [24]  908 	lcall	_printf_tiny
      0001D1 E5 81            [12]  909 	mov	a,sp
      0001D3 24 FC            [12]  910 	add	a,#0xfc
      0001D5 F5 81            [12]  911 	mov	sp,a
      0001D7 D0 01            [24]  912 	pop	ar1
      0001D9 D0 03            [24]  913 	pop	ar3
      0001DB D0 04            [24]  914 	pop	ar4
      0001DD D0 05            [24]  915 	pop	ar5
      0001DF D0 06            [24]  916 	pop	ar6
      0001E1 D0 07            [24]  917 	pop	ar7
                                    918 ;	character.c:134: itr++;
      0001E3 D0 01            [24]  919 	pop	ar1
                                    920 ;	character.c:124: printf_tiny("\033[1;34m %d", buffer0_ptr[itr]);
      0001E5                        921 00109$:
                                    922 ;	character.c:128: if ((itr + 1) % length == 0)
      0001E5 74 01            [12]  923 	mov	a,#0x01
      0001E7 25*00            [12]  924 	add	a,_buffer0_hexdump_sloc0_1_0
      0001E9 F8               [12]  925 	mov	r0,a
      0001EA E4               [12]  926 	clr	a
      0001EB 35*01            [12]  927 	addc	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0001ED FA               [12]  928 	mov	r2,a
      0001EE 90r00r00         [24]  929 	mov	dptr,#__modsint_PARM_2
      0001F1 EB               [12]  930 	mov	a,r3
      0001F2 F0               [24]  931 	movx	@dptr,a
      0001F3 EC               [12]  932 	mov	a,r4
      0001F4 A3               [24]  933 	inc	dptr
      0001F5 F0               [24]  934 	movx	@dptr,a
      0001F6 88 82            [24]  935 	mov	dpl,r0
      0001F8 8A 83            [24]  936 	mov	dph,r2
      0001FA C0 07            [24]  937 	push	ar7
      0001FC C0 06            [24]  938 	push	ar6
      0001FE C0 05            [24]  939 	push	ar5
      000200 C0 04            [24]  940 	push	ar4
      000202 C0 03            [24]  941 	push	ar3
      000204 C0 01            [24]  942 	push	ar1
      000206 12r00r00         [24]  943 	lcall	__modsint
      000209 E5 82            [12]  944 	mov	a,dpl
      00020B 85 83 F0         [24]  945 	mov	b,dph
      00020E D0 01            [24]  946 	pop	ar1
      000210 D0 03            [24]  947 	pop	ar3
      000212 D0 04            [24]  948 	pop	ar4
      000214 D0 05            [24]  949 	pop	ar5
      000216 D0 06            [24]  950 	pop	ar6
      000218 D0 07            [24]  951 	pop	ar7
      00021A 45 F0            [12]  952 	orl	a,b
      00021C 70 2D            [24]  953 	jnz	00111$
                                    954 ;	character.c:130: printf_tiny("\033[1;34m\n\r");
      00021E C0 07            [24]  955 	push	ar7
      000220 C0 06            [24]  956 	push	ar6
      000222 C0 05            [24]  957 	push	ar5
      000224 C0 04            [24]  958 	push	ar4
      000226 C0 03            [24]  959 	push	ar3
      000228 C0 01            [24]  960 	push	ar1
      00022A 74r00            [12]  961 	mov	a,#___str_0
      00022C C0 E0            [24]  962 	push	acc
      00022E 74s00            [12]  963 	mov	a,#(___str_0 >> 8)
      000230 C0 E0            [24]  964 	push	acc
      000232 12r00r00         [24]  965 	lcall	_printf_tiny
      000235 15 81            [12]  966 	dec	sp
      000237 15 81            [12]  967 	dec	sp
      000239 D0 01            [24]  968 	pop	ar1
      00023B D0 03            [24]  969 	pop	ar3
      00023D D0 04            [24]  970 	pop	ar4
      00023F D0 05            [24]  971 	pop	ar5
      000241 D0 06            [24]  972 	pop	ar6
      000243 D0 07            [24]  973 	pop	ar7
                                    974 ;	character.c:131: print_address = true;
      000245 90r00r05         [24]  975 	mov	dptr,#_buffer0_hexdump_print_address_65536_57
      000248 74 01            [12]  976 	mov	a,#0x01
      00024A F0               [24]  977 	movx	@dptr,a
      00024B                        978 00111$:
                                    979 ;	character.c:134: itr++;
      00024B 05*00            [12]  980 	inc	_buffer0_hexdump_sloc0_1_0
      00024D E4               [12]  981 	clr	a
      00024E B5*00 02         [24]  982 	cjne	a,_buffer0_hexdump_sloc0_1_0,00157$
      000251 05*01            [12]  983 	inc	(_buffer0_hexdump_sloc0_1_0 + 1)
      000253                        984 00157$:
                                    985 ;	character.c:136: }
      000253 02r00rAE         [24]  986 	ljmp	00112$
                                    987 ;------------------------------------------------------------
                                    988 ;Allocation info for local variables in function 'command_processing'
                                    989 ;------------------------------------------------------------
                                    990 ;sloc0                     Allocated with name '_command_processing_sloc0_1_0'
                                    991 ;sloc1                     Allocated with name '_command_processing_sloc1_1_0'
                                    992 ;sloc2                     Allocated with name '_command_processing_sloc2_1_0'
                                    993 ;sloc3                     Allocated with name '_command_processing_sloc3_1_0'
                                    994 ;ch                        Allocated with name '_command_processing_PARM_2'
                                    995 ;new_buffer_index          Allocated with name '_command_processing_PARM_3'
                                    996 ;free_buffer_count         Allocated with name '_command_processing_PARM_4'
                                    997 ;filled_buffer_count       Allocated with name '_command_processing_PARM_5'
                                    998 ;storage_character_count   Allocated with name '_command_processing_PARM_6'
                                    999 ;total_characters_count    Allocated with name '_command_processing_PARM_7'
                                   1000 ;buffer0_size              Allocated with name '_command_processing_PARM_8'
                                   1001 ;cmd_detected              Allocated with name '_command_processing_cmd_detected_65536_65'
                                   1002 ;buffer_size               Allocated with name '_command_processing_buffer_size_196609_69'
                                   1003 ;buffer_ptr                Allocated with name '_command_processing_buffer_ptr_196610_71'
                                   1004 ;ch                        Allocated with name '_command_processing_ch_196611_73'
                                   1005 ;temp                      Allocated with name '_command_processing_temp_262148_76'
                                   1006 ;i                         Allocated with name '_command_processing_i_262147_82'
                                   1007 ;buffer_to_free            Allocated with name '_command_processing_buffer_to_free_327683_83'
                                   1008 ;i                         Allocated with name '_command_processing_i_262147_86'
                                   1009 ;------------------------------------------------------------
                                   1010 ;	character.c:139: int command_processing(int cmd_detected, char ch, int * new_buffer_index,
                                   1011 ;	-----------------------------------------
                                   1012 ;	 function command_processing
                                   1013 ;	-----------------------------------------
      000256                       1014 _command_processing:
      000256 AF 83            [24] 1015 	mov	r7,dph
      000258 E5 82            [12] 1016 	mov	a,dpl
      00025A 90r00r18         [24] 1017 	mov	dptr,#_command_processing_cmd_detected_65536_65
      00025D F0               [24] 1018 	movx	@dptr,a
      00025E EF               [12] 1019 	mov	a,r7
      00025F A3               [24] 1020 	inc	dptr
      000260 F0               [24] 1021 	movx	@dptr,a
                                   1022 ;	character.c:142: buffer0and1_size = buffer0_size;
      000261 90r00r16         [24] 1023 	mov	dptr,#_command_processing_PARM_8
      000264 E0               [24] 1024 	movx	a,@dptr
      000265 FE               [12] 1025 	mov	r6,a
      000266 A3               [24] 1026 	inc	dptr
      000267 E0               [24] 1027 	movx	a,@dptr
      000268 FF               [12] 1028 	mov	r7,a
      000269 90r00rCE         [24] 1029 	mov	dptr,#_buffer0and1_size
      00026C EE               [12] 1030 	mov	a,r6
      00026D F0               [24] 1031 	movx	@dptr,a
      00026E EF               [12] 1032 	mov	a,r7
      00026F A3               [24] 1033 	inc	dptr
      000270 F0               [24] 1034 	movx	@dptr,a
                                   1035 ;	character.c:143: if(cmd_detected)            // if command detected
      000271 90r00r18         [24] 1036 	mov	dptr,#_command_processing_cmd_detected_65536_65
      000274 E0               [24] 1037 	movx	a,@dptr
      000275 F5 F0            [12] 1038 	mov	b,a
      000277 A3               [24] 1039 	inc	dptr
      000278 E0               [24] 1040 	movx	a,@dptr
      000279 45 F0            [12] 1041 	orl	a,b
      00027B 70 03            [24] 1042 	jnz	00235$
      00027D 02r0CrC2         [24] 1043 	ljmp	00141$
      000280                       1044 00235$:
                                   1045 ;	character.c:145: switch(ch)              // switch based on the input character
      000280 90r00r06         [24] 1046 	mov	dptr,#_command_processing_PARM_2
      000283 E0               [24] 1047 	movx	a,@dptr
      000284 FF               [12] 1048 	mov	r7,a
      000285 BF 2B 02         [24] 1049 	cjne	r7,#0x2b,00236$
      000288 80 1B            [24] 1050 	sjmp	00101$
      00028A                       1051 00236$:
      00028A BF 2D 03         [24] 1052 	cjne	r7,#0x2d,00237$
      00028D 02r05r18         [24] 1053 	ljmp	00107$
      000290                       1054 00237$:
      000290 BF 3D 03         [24] 1055 	cjne	r7,#0x3d,00238$
      000293 02r09rE9         [24] 1056 	ljmp	00130$
      000296                       1057 00238$:
      000296 BF 3F 03         [24] 1058 	cjne	r7,#0x3f,00239$
      000299 02r0Ar07         [24] 1059 	ljmp	00131$
      00029C                       1060 00239$:
      00029C BF 40 03         [24] 1061 	cjne	r7,#0x40,00240$
      00029F 02r08rB2         [24] 1062 	ljmp	00125$
      0002A2                       1063 00240$:
      0002A2 02r0CrBC         [24] 1064 	ljmp	00138$
                                   1065 ;	character.c:147: case '+':               // if input character is '+'
      0002A5                       1066 00101$:
                                   1067 ;	character.c:149: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0002A5 74r37            [12] 1068 	mov	a,#___str_5
      0002A7 C0 E0            [24] 1069 	push	acc
      0002A9 74s00            [12] 1070 	mov	a,#(___str_5 >> 8)
      0002AB C0 E0            [24] 1071 	push	acc
      0002AD 12r00r00         [24] 1072 	lcall	_printf_tiny
      0002B0 15 81            [12] 1073 	dec	sp
      0002B2 15 81            [12] 1074 	dec	sp
                                   1075 ;	character.c:150: printf_tiny("\033[1;33m|************ Processing [+] *******************|\n\r");
      0002B4 74r72            [12] 1076 	mov	a,#___str_6
      0002B6 C0 E0            [24] 1077 	push	acc
      0002B8 74s00            [12] 1078 	mov	a,#(___str_6 >> 8)
      0002BA C0 E0            [24] 1079 	push	acc
      0002BC 12r00r00         [24] 1080 	lcall	_printf_tiny
      0002BF 15 81            [12] 1081 	dec	sp
      0002C1 15 81            [12] 1082 	dec	sp
                                   1083 ;	character.c:151: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0002C3 74r37            [12] 1084 	mov	a,#___str_5
      0002C5 C0 E0            [24] 1085 	push	acc
      0002C7 74s00            [12] 1086 	mov	a,#(___str_5 >> 8)
      0002C9 C0 E0            [24] 1087 	push	acc
      0002CB 12r00r00         [24] 1088 	lcall	_printf_tiny
      0002CE 15 81            [12] 1089 	dec	sp
      0002D0 15 81            [12] 1090 	dec	sp
                                   1091 ;	character.c:153: (*new_buffer_index)++;                      // increment buffer index
      0002D2 90r00r07         [24] 1092 	mov	dptr,#_command_processing_PARM_3
      0002D5 E0               [24] 1093 	movx	a,@dptr
      0002D6 FD               [12] 1094 	mov	r5,a
      0002D7 A3               [24] 1095 	inc	dptr
      0002D8 E0               [24] 1096 	movx	a,@dptr
      0002D9 FE               [12] 1097 	mov	r6,a
      0002DA A3               [24] 1098 	inc	dptr
      0002DB E0               [24] 1099 	movx	a,@dptr
      0002DC FF               [12] 1100 	mov	r7,a
      0002DD 8D 82            [24] 1101 	mov	dpl,r5
      0002DF 8E 83            [24] 1102 	mov	dph,r6
      0002E1 8F F0            [24] 1103 	mov	b,r7
      0002E3 12r00r00         [24] 1104 	lcall	__gptrget
      0002E6 FB               [12] 1105 	mov	r3,a
      0002E7 A3               [24] 1106 	inc	dptr
      0002E8 12r00r00         [24] 1107 	lcall	__gptrget
      0002EB FC               [12] 1108 	mov	r4,a
      0002EC 0B               [12] 1109 	inc	r3
      0002ED BB 00 01         [24] 1110 	cjne	r3,#0x00,00241$
      0002F0 0C               [12] 1111 	inc	r4
      0002F1                       1112 00241$:
      0002F1 8D 82            [24] 1113 	mov	dpl,r5
      0002F3 8E 83            [24] 1114 	mov	dph,r6
      0002F5 8F F0            [24] 1115 	mov	b,r7
      0002F7 EB               [12] 1116 	mov	a,r3
      0002F8 12r00r00         [24] 1117 	lcall	__gptrput
      0002FB A3               [24] 1118 	inc	dptr
      0002FC EC               [12] 1119 	mov	a,r4
      0002FD 12r00r00         [24] 1120 	lcall	__gptrput
                                   1121 ;	character.c:154: printf_tiny("\033[1;36m|***********************************************|\n\r");
      000300 C0 07            [24] 1122 	push	ar7
      000302 C0 06            [24] 1123 	push	ar6
      000304 C0 05            [24] 1124 	push	ar5
      000306 74rAD            [12] 1125 	mov	a,#___str_7
      000308 C0 E0            [24] 1126 	push	acc
      00030A 74s00            [12] 1127 	mov	a,#(___str_7 >> 8)
      00030C C0 E0            [24] 1128 	push	acc
      00030E 12r00r00         [24] 1129 	lcall	_printf_tiny
      000311 15 81            [12] 1130 	dec	sp
      000313 15 81            [12] 1131 	dec	sp
                                   1132 ;	character.c:155: printf_tiny("\033[1;36m|********* Enter size for new bufer ************|\n\r");
      000315 74rE8            [12] 1133 	mov	a,#___str_8
      000317 C0 E0            [24] 1134 	push	acc
      000319 74s00            [12] 1135 	mov	a,#(___str_8 >> 8)
      00031B C0 E0            [24] 1136 	push	acc
      00031D 12r00r00         [24] 1137 	lcall	_printf_tiny
      000320 15 81            [12] 1138 	dec	sp
      000322 15 81            [12] 1139 	dec	sp
                                   1140 ;	character.c:156: printf_tiny("\033[1;36m|***********************************************|\n\r");
      000324 74rAD            [12] 1141 	mov	a,#___str_7
      000326 C0 E0            [24] 1142 	push	acc
      000328 74s00            [12] 1143 	mov	a,#(___str_7 >> 8)
      00032A C0 E0            [24] 1144 	push	acc
      00032C 12r00r00         [24] 1145 	lcall	_printf_tiny
      00032F 15 81            [12] 1146 	dec	sp
      000331 15 81            [12] 1147 	dec	sp
                                   1148 ;	character.c:157: gets_(size);                                // get buffer size
      000333 90r00r00         [24] 1149 	mov	dptr,#_size
      000336 12r00r00         [24] 1150 	lcall	_gets_
                                   1151 ;	character.c:158: int buffer_size = atoi(size);               // convert buffer size to integer
      000339 90r00r00         [24] 1152 	mov	dptr,#_size
      00033C 75 F0 00         [24] 1153 	mov	b,#0x00
      00033F 12r00r00         [24] 1154 	lcall	_atoi
      000342 AB 82            [24] 1155 	mov	r3,dpl
      000344 AC 83            [24] 1156 	mov	r4,dph
      000346 D0 05            [24] 1157 	pop	ar5
      000348 D0 06            [24] 1158 	pop	ar6
      00034A D0 07            [24] 1159 	pop	ar7
                                   1160 ;	character.c:159: if (buffer_size < 30 || buffer_size > 300) { // check if buffer size is within range
      00034C C3               [12] 1161 	clr	c
      00034D EB               [12] 1162 	mov	a,r3
      00034E 94 1E            [12] 1163 	subb	a,#0x1e
      000350 EC               [12] 1164 	mov	a,r4
      000351 64 80            [12] 1165 	xrl	a,#0x80
      000353 94 80            [12] 1166 	subb	a,#0x80
      000355 40 0E            [24] 1167 	jc	00102$
      000357 74 2C            [12] 1168 	mov	a,#0x2c
      000359 9B               [12] 1169 	subb	a,r3
      00035A 74 81            [12] 1170 	mov	a,#(0x01 ^ 0x80)
      00035C 8C F0            [24] 1171 	mov	b,r4
      00035E 63 F0 80         [24] 1172 	xrl	b,#0x80
      000361 95 F0            [12] 1173 	subb	a,b
      000363 50 12            [24] 1174 	jnc	00103$
      000365                       1175 00102$:
                                   1176 ;	character.c:160: printf_tiny("\033[1;31mInvalid Input : The buffer size should be in the range [30, 300]\n\r\n\r");
      000365 74r23            [12] 1177 	mov	a,#___str_9
      000367 C0 E0            [24] 1178 	push	acc
      000369 74s01            [12] 1179 	mov	a,#(___str_9 >> 8)
      00036B C0 E0            [24] 1180 	push	acc
      00036D 12r00r00         [24] 1181 	lcall	_printf_tiny
      000370 15 81            [12] 1182 	dec	sp
      000372 15 81            [12] 1183 	dec	sp
                                   1184 ;	character.c:161: break;                                  // break out of switch
      000374 02r0CrC2         [24] 1185 	ljmp	00141$
      000377                       1186 00103$:
                                   1187 ;	character.c:163: __xdata char* buffer_ptr = (__xdata char*)malloc(buffer_size);  // allocate memory for buffer
      000377 8B 82            [24] 1188 	mov	dpl,r3
      000379 8C 83            [24] 1189 	mov	dph,r4
      00037B C0 07            [24] 1190 	push	ar7
      00037D C0 06            [24] 1191 	push	ar6
      00037F C0 05            [24] 1192 	push	ar5
      000381 C0 04            [24] 1193 	push	ar4
      000383 C0 03            [24] 1194 	push	ar3
      000385 12r00r00         [24] 1195 	lcall	_malloc
      000388 A9 82            [24] 1196 	mov	r1,dpl
      00038A AA 83            [24] 1197 	mov	r2,dph
      00038C D0 03            [24] 1198 	pop	ar3
      00038E D0 04            [24] 1199 	pop	ar4
      000390 D0 05            [24] 1200 	pop	ar5
      000392 D0 06            [24] 1201 	pop	ar6
      000394 D0 07            [24] 1202 	pop	ar7
      000396 89*04            [24] 1203 	mov	_command_processing_sloc0_1_0,r1
      000398 8A*05            [24] 1204 	mov	(_command_processing_sloc0_1_0 + 1),r2
                                   1205 ;	character.c:165: if (buffer_ptr == NULL) {                                       // check if buffer allocation failed
      00039A E5*04            [12] 1206 	mov	a,_command_processing_sloc0_1_0
      00039C 45*05            [12] 1207 	orl	a,(_command_processing_sloc0_1_0 + 1)
      00039E 70 12            [24] 1208 	jnz	00106$
                                   1209 ;	character.c:166: printf_tiny("\033[1;31mInvalid input : Failed to allocate buffer\n\r\n\r");
      0003A0 74r6F            [12] 1210 	mov	a,#___str_10
      0003A2 C0 E0            [24] 1211 	push	acc
      0003A4 74s01            [12] 1212 	mov	a,#(___str_10 >> 8)
      0003A6 C0 E0            [24] 1213 	push	acc
      0003A8 12r00r00         [24] 1214 	lcall	_printf_tiny
      0003AB 15 81            [12] 1215 	dec	sp
      0003AD 15 81            [12] 1216 	dec	sp
                                   1217 ;	character.c:167: break;                                                      // break out of switch
      0003AF 02r0CrC2         [24] 1218 	ljmp	00141$
      0003B2                       1219 00106$:
                                   1220 ;	character.c:170: buffer_size_arr[(*new_buffer_index)-1] = buffer_size;           // store buffer size in array
      0003B2 8D 82            [24] 1221 	mov	dpl,r5
      0003B4 8E 83            [24] 1222 	mov	dph,r6
      0003B6 8F F0            [24] 1223 	mov	b,r7
      0003B8 12r00r00         [24] 1224 	lcall	__gptrget
      0003BB F8               [12] 1225 	mov	r0,a
      0003BC A3               [24] 1226 	inc	dptr
      0003BD 12r00r00         [24] 1227 	lcall	__gptrget
      0003C0 FA               [12] 1228 	mov	r2,a
      0003C1 18               [12] 1229 	dec	r0
      0003C2 B8 FF 01         [24] 1230 	cjne	r0,#0xff,00245$
      0003C5 1A               [12] 1231 	dec	r2
      0003C6                       1232 00245$:
      0003C6 E8               [12] 1233 	mov	a,r0
      0003C7 28               [12] 1234 	add	a,r0
      0003C8 F8               [12] 1235 	mov	r0,a
      0003C9 EA               [12] 1236 	mov	a,r2
      0003CA 33               [12] 1237 	rlc	a
      0003CB FA               [12] 1238 	mov	r2,a
      0003CC E8               [12] 1239 	mov	a,r0
      0003CD 24r00            [12] 1240 	add	a,#_buffer_size_arr
      0003CF F5 82            [12] 1241 	mov	dpl,a
      0003D1 EA               [12] 1242 	mov	a,r2
      0003D2 34s00            [12] 1243 	addc	a,#(_buffer_size_arr >> 8)
      0003D4 F5 83            [12] 1244 	mov	dph,a
      0003D6 EB               [12] 1245 	mov	a,r3
      0003D7 F0               [24] 1246 	movx	@dptr,a
      0003D8 EC               [12] 1247 	mov	a,r4
      0003D9 A3               [24] 1248 	inc	dptr
      0003DA F0               [24] 1249 	movx	@dptr,a
                                   1250 ;	character.c:171: ++(*filled_buffer_count);                                       // increment filled buffer count
      0003DB 90r00r0D         [24] 1251 	mov	dptr,#_command_processing_PARM_5
      0003DE E0               [24] 1252 	movx	a,@dptr
      0003DF FA               [12] 1253 	mov	r2,a
      0003E0 A3               [24] 1254 	inc	dptr
      0003E1 E0               [24] 1255 	movx	a,@dptr
      0003E2 FB               [12] 1256 	mov	r3,a
      0003E3 A3               [24] 1257 	inc	dptr
      0003E4 E0               [24] 1258 	movx	a,@dptr
      0003E5 FC               [12] 1259 	mov	r4,a
      0003E6 8A 82            [24] 1260 	mov	dpl,r2
      0003E8 8B 83            [24] 1261 	mov	dph,r3
      0003EA 8C F0            [24] 1262 	mov	b,r4
      0003EC 12r00r00         [24] 1263 	lcall	__gptrget
      0003EF F8               [12] 1264 	mov	r0,a
      0003F0 A3               [24] 1265 	inc	dptr
      0003F1 12r00r00         [24] 1266 	lcall	__gptrget
      0003F4 F9               [12] 1267 	mov	r1,a
      0003F5 08               [12] 1268 	inc	r0
      0003F6 B8 00 01         [24] 1269 	cjne	r0,#0x00,00246$
      0003F9 09               [12] 1270 	inc	r1
      0003FA                       1271 00246$:
      0003FA 8A 82            [24] 1272 	mov	dpl,r2
      0003FC 8B 83            [24] 1273 	mov	dph,r3
      0003FE 8C F0            [24] 1274 	mov	b,r4
      000400 E8               [12] 1275 	mov	a,r0
      000401 12r00r00         [24] 1276 	lcall	__gptrput
      000404 A3               [24] 1277 	inc	dptr
      000405 E9               [12] 1278 	mov	a,r1
      000406 12r00r00         [24] 1279 	lcall	__gptrput
                                   1280 ;	character.c:173: new_buffer_arr[(*new_buffer_index)-1] = buffer_ptr;             // store buffer pointer in array
      000409 8D 82            [24] 1281 	mov	dpl,r5
      00040B 8E 83            [24] 1282 	mov	dph,r6
      00040D 8F F0            [24] 1283 	mov	b,r7
      00040F 12r00r00         [24] 1284 	lcall	__gptrget
      000412 F8               [12] 1285 	mov	r0,a
      000413 A3               [24] 1286 	inc	dptr
      000414 12r00r00         [24] 1287 	lcall	__gptrget
      000417 F9               [12] 1288 	mov	r1,a
      000418 18               [12] 1289 	dec	r0
      000419 B8 FF 01         [24] 1290 	cjne	r0,#0xff,00247$
      00041C 19               [12] 1291 	dec	r1
      00041D                       1292 00247$:
      00041D E8               [12] 1293 	mov	a,r0
      00041E 28               [12] 1294 	add	a,r0
      00041F F8               [12] 1295 	mov	r0,a
      000420 E9               [12] 1296 	mov	a,r1
      000421 33               [12] 1297 	rlc	a
      000422 F9               [12] 1298 	mov	r1,a
      000423 E8               [12] 1299 	mov	a,r0
      000424 24r00            [12] 1300 	add	a,#_new_buffer_arr
      000426 F5 82            [12] 1301 	mov	dpl,a
      000428 E9               [12] 1302 	mov	a,r1
      000429 34s00            [12] 1303 	addc	a,#(_new_buffer_arr >> 8)
      00042B F5 83            [12] 1304 	mov	dph,a
      00042D E5*04            [12] 1305 	mov	a,_command_processing_sloc0_1_0
      00042F F0               [24] 1306 	movx	@dptr,a
      000430 E5*05            [12] 1307 	mov	a,(_command_processing_sloc0_1_0 + 1)
      000432 A3               [24] 1308 	inc	dptr
      000433 F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	character.c:174: buff_not_cleared[(*new_buffer_index) -1] = 0;                      // set flag to indicate new buffer is created
      000434 8D 82            [24] 1311 	mov	dpl,r5
      000436 8E 83            [24] 1312 	mov	dph,r6
      000438 8F F0            [24] 1313 	mov	b,r7
      00043A 12r00r00         [24] 1314 	lcall	__gptrget
      00043D F8               [12] 1315 	mov	r0,a
      00043E A3               [24] 1316 	inc	dptr
      00043F 12r00r00         [24] 1317 	lcall	__gptrget
      000442 F9               [12] 1318 	mov	r1,a
      000443 18               [12] 1319 	dec	r0
      000444 B8 FF 01         [24] 1320 	cjne	r0,#0xff,00248$
      000447 19               [12] 1321 	dec	r1
      000448                       1322 00248$:
      000448 E8               [12] 1323 	mov	a,r0
      000449 28               [12] 1324 	add	a,r0
      00044A F8               [12] 1325 	mov	r0,a
      00044B E9               [12] 1326 	mov	a,r1
      00044C 33               [12] 1327 	rlc	a
      00044D F9               [12] 1328 	mov	r1,a
      00044E E8               [12] 1329 	mov	a,r0
      00044F 24r06            [12] 1330 	add	a,#_buff_not_cleared
      000451 F5 82            [12] 1331 	mov	dpl,a
      000453 E9               [12] 1332 	mov	a,r1
      000454 34s00            [12] 1333 	addc	a,#(_buff_not_cleared >> 8)
      000456 F5 83            [12] 1334 	mov	dph,a
      000458 E4               [12] 1335 	clr	a
      000459 F0               [24] 1336 	movx	@dptr,a
      00045A A3               [24] 1337 	inc	dptr
      00045B F0               [24] 1338 	movx	@dptr,a
                                   1339 ;	character.c:176: printf_tiny("\033[1;0mNew buffer allocated successfully : Buffer[%d]\n\r", ((*new_buffer_index)-1)); // print successful buffer allocation message
      00045C 8D 82            [24] 1340 	mov	dpl,r5
      00045E 8E 83            [24] 1341 	mov	dph,r6
      000460 8F F0            [24] 1342 	mov	b,r7
      000462 12r00r00         [24] 1343 	lcall	__gptrget
      000465 F8               [12] 1344 	mov	r0,a
      000466 A3               [24] 1345 	inc	dptr
      000467 12r00r00         [24] 1346 	lcall	__gptrget
      00046A F9               [12] 1347 	mov	r1,a
      00046B 18               [12] 1348 	dec	r0
      00046C B8 FF 01         [24] 1349 	cjne	r0,#0xff,00249$
      00046F 19               [12] 1350 	dec	r1
      000470                       1351 00249$:
      000470 C0 07            [24] 1352 	push	ar7
      000472 C0 06            [24] 1353 	push	ar6
      000474 C0 05            [24] 1354 	push	ar5
      000476 C0 04            [24] 1355 	push	ar4
      000478 C0 03            [24] 1356 	push	ar3
      00047A C0 02            [24] 1357 	push	ar2
      00047C C0 00            [24] 1358 	push	ar0
      00047E C0 01            [24] 1359 	push	ar1
      000480 74rA4            [12] 1360 	mov	a,#___str_11
      000482 C0 E0            [24] 1361 	push	acc
      000484 74s01            [12] 1362 	mov	a,#(___str_11 >> 8)
      000486 C0 E0            [24] 1363 	push	acc
      000488 12r00r00         [24] 1364 	lcall	_printf_tiny
      00048B E5 81            [12] 1365 	mov	a,sp
      00048D 24 FC            [12] 1366 	add	a,#0xfc
      00048F F5 81            [12] 1367 	mov	sp,a
      000491 D0 02            [24] 1368 	pop	ar2
      000493 D0 03            [24] 1369 	pop	ar3
      000495 D0 04            [24] 1370 	pop	ar4
      000497 D0 05            [24] 1371 	pop	ar5
      000499 D0 06            [24] 1372 	pop	ar6
      00049B D0 07            [24] 1373 	pop	ar7
                                   1374 ;	character.c:177: printf_tiny("\033[1;0mTotal Number of Buffers including buffer0 & buffer1 = [%d]\n\r",(*new_buffer_index)); // print total number of buffers
      00049D 8D 82            [24] 1375 	mov	dpl,r5
      00049F 8E 83            [24] 1376 	mov	dph,r6
      0004A1 8F F0            [24] 1377 	mov	b,r7
      0004A3 12r00r00         [24] 1378 	lcall	__gptrget
      0004A6 FD               [12] 1379 	mov	r5,a
      0004A7 A3               [24] 1380 	inc	dptr
      0004A8 12r00r00         [24] 1381 	lcall	__gptrget
      0004AB FE               [12] 1382 	mov	r6,a
      0004AC C0 04            [24] 1383 	push	ar4
      0004AE C0 03            [24] 1384 	push	ar3
      0004B0 C0 02            [24] 1385 	push	ar2
      0004B2 C0 05            [24] 1386 	push	ar5
      0004B4 C0 06            [24] 1387 	push	ar6
      0004B6 74rDB            [12] 1388 	mov	a,#___str_12
      0004B8 C0 E0            [24] 1389 	push	acc
      0004BA 74s01            [12] 1390 	mov	a,#(___str_12 >> 8)
      0004BC C0 E0            [24] 1391 	push	acc
      0004BE 12r00r00         [24] 1392 	lcall	_printf_tiny
      0004C1 E5 81            [12] 1393 	mov	a,sp
      0004C3 24 FC            [12] 1394 	add	a,#0xfc
      0004C5 F5 81            [12] 1395 	mov	sp,a
      0004C7 D0 02            [24] 1396 	pop	ar2
      0004C9 D0 03            [24] 1397 	pop	ar3
      0004CB D0 04            [24] 1398 	pop	ar4
                                   1399 ;	character.c:178: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \r\nTotal Empty Buffers = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count)); // print filled and empty buffer count
      0004CD 90r00r0A         [24] 1400 	mov	dptr,#_command_processing_PARM_4
      0004D0 E0               [24] 1401 	movx	a,@dptr
      0004D1 FD               [12] 1402 	mov	r5,a
      0004D2 A3               [24] 1403 	inc	dptr
      0004D3 E0               [24] 1404 	movx	a,@dptr
      0004D4 FE               [12] 1405 	mov	r6,a
      0004D5 A3               [24] 1406 	inc	dptr
      0004D6 E0               [24] 1407 	movx	a,@dptr
      0004D7 FF               [12] 1408 	mov	r7,a
      0004D8 8D 82            [24] 1409 	mov	dpl,r5
      0004DA 8E 83            [24] 1410 	mov	dph,r6
      0004DC 8F F0            [24] 1411 	mov	b,r7
      0004DE 12r00r00         [24] 1412 	lcall	__gptrget
      0004E1 FD               [12] 1413 	mov	r5,a
      0004E2 A3               [24] 1414 	inc	dptr
      0004E3 12r00r00         [24] 1415 	lcall	__gptrget
      0004E6 FE               [12] 1416 	mov	r6,a
      0004E7 8A 82            [24] 1417 	mov	dpl,r2
      0004E9 8B 83            [24] 1418 	mov	dph,r3
      0004EB 8C F0            [24] 1419 	mov	b,r4
      0004ED 12r00r00         [24] 1420 	lcall	__gptrget
      0004F0 FA               [12] 1421 	mov	r2,a
      0004F1 A3               [24] 1422 	inc	dptr
      0004F2 12r00r00         [24] 1423 	lcall	__gptrget
      0004F5 FB               [12] 1424 	mov	r3,a
      0004F6 C0 05            [24] 1425 	push	ar5
      0004F8 C0 06            [24] 1426 	push	ar6
      0004FA C0 02            [24] 1427 	push	ar2
      0004FC C0 03            [24] 1428 	push	ar3
      0004FE 74r1E            [12] 1429 	mov	a,#___str_13
      000500 C0 E0            [24] 1430 	push	acc
      000502 74s02            [12] 1431 	mov	a,#(___str_13 >> 8)
      000504 C0 E0            [24] 1432 	push	acc
      000506 12r00r00         [24] 1433 	lcall	_printf_tiny
      000509 E5 81            [12] 1434 	mov	a,sp
      00050B 24 FA            [12] 1435 	add	a,#0xfa
      00050D F5 81            [12] 1436 	mov	sp,a
                                   1437 ;	character.c:179: DEBUGPORT(0x10);
      00050F 75 82 10         [24] 1438 	mov	dpl,#0x10
      000512 12r00r00         [24] 1439 	lcall	_dataout
                                   1440 ;	character.c:180: break;                                                          // break out of switch
      000515 02r0CrC2         [24] 1441 	ljmp	00141$
                                   1442 ;	character.c:183: case '-':   // if input character is '-'
      000518                       1443 00107$:
                                   1444 ;	character.c:185: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000518 74r37            [12] 1445 	mov	a,#___str_5
      00051A C0 E0            [24] 1446 	push	acc
      00051C 74s00            [12] 1447 	mov	a,#(___str_5 >> 8)
      00051E C0 E0            [24] 1448 	push	acc
      000520 12r00r00         [24] 1449 	lcall	_printf_tiny
      000523 15 81            [12] 1450 	dec	sp
      000525 15 81            [12] 1451 	dec	sp
                                   1452 ;	character.c:186: printf_tiny("\033[1;33m|************ Processing [-] *******************|\n\r");
      000527 74r62            [12] 1453 	mov	a,#___str_14
      000529 C0 E0            [24] 1454 	push	acc
      00052B 74s02            [12] 1455 	mov	a,#(___str_14 >> 8)
      00052D C0 E0            [24] 1456 	push	acc
      00052F 12r00r00         [24] 1457 	lcall	_printf_tiny
      000532 15 81            [12] 1458 	dec	sp
      000534 15 81            [12] 1459 	dec	sp
                                   1460 ;	character.c:187: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000536 74r37            [12] 1461 	mov	a,#___str_5
      000538 C0 E0            [24] 1462 	push	acc
      00053A 74s00            [12] 1463 	mov	a,#(___str_5 >> 8)
      00053C C0 E0            [24] 1464 	push	acc
      00053E 12r00r00         [24] 1465 	lcall	_printf_tiny
      000541 15 81            [12] 1466 	dec	sp
      000543 15 81            [12] 1467 	dec	sp
                                   1468 ;	character.c:190: buffer_to_delete = 0;
      000545 90r00r04         [24] 1469 	mov	dptr,#_buffer_to_delete
      000548 E4               [12] 1470 	clr	a
      000549 F0               [24] 1471 	movx	@dptr,a
      00054A A3               [24] 1472 	inc	dptr
      00054B F0               [24] 1473 	movx	@dptr,a
                                   1474 ;	character.c:193: printf_tiny("\033[1;36m|***********************************************|\n\r");
      00054C 74rAD            [12] 1475 	mov	a,#___str_7
      00054E C0 E0            [24] 1476 	push	acc
      000550 74s00            [12] 1477 	mov	a,#(___str_7 >> 8)
      000552 C0 E0            [24] 1478 	push	acc
      000554 12r00r00         [24] 1479 	lcall	_printf_tiny
      000557 15 81            [12] 1480 	dec	sp
      000559 15 81            [12] 1481 	dec	sp
                                   1482 ;	character.c:194: printf_tiny("\033[1;36m|********* Enter buffer to be deleted **********|\n\r");
      00055B 74r9D            [12] 1483 	mov	a,#___str_15
      00055D C0 E0            [24] 1484 	push	acc
      00055F 74s02            [12] 1485 	mov	a,#(___str_15 >> 8)
      000561 C0 E0            [24] 1486 	push	acc
      000563 12r00r00         [24] 1487 	lcall	_printf_tiny
      000566 15 81            [12] 1488 	dec	sp
      000568 15 81            [12] 1489 	dec	sp
                                   1490 ;	character.c:195: printf_tiny("\033[1;36m|********* Current No of buffers:[%d] ***********|\n\r", *new_buffer_index);
      00056A 90r00r07         [24] 1491 	mov	dptr,#_command_processing_PARM_3
      00056D E0               [24] 1492 	movx	a,@dptr
      00056E FD               [12] 1493 	mov	r5,a
      00056F A3               [24] 1494 	inc	dptr
      000570 E0               [24] 1495 	movx	a,@dptr
      000571 FE               [12] 1496 	mov	r6,a
      000572 A3               [24] 1497 	inc	dptr
      000573 E0               [24] 1498 	movx	a,@dptr
      000574 FF               [12] 1499 	mov	r7,a
      000575 8D 82            [24] 1500 	mov	dpl,r5
      000577 8E 83            [24] 1501 	mov	dph,r6
      000579 8F F0            [24] 1502 	mov	b,r7
      00057B 12r00r00         [24] 1503 	lcall	__gptrget
      00057E FB               [12] 1504 	mov	r3,a
      00057F A3               [24] 1505 	inc	dptr
      000580 12r00r00         [24] 1506 	lcall	__gptrget
      000583 FC               [12] 1507 	mov	r4,a
      000584 C0 07            [24] 1508 	push	ar7
      000586 C0 06            [24] 1509 	push	ar6
      000588 C0 05            [24] 1510 	push	ar5
      00058A C0 03            [24] 1511 	push	ar3
      00058C C0 04            [24] 1512 	push	ar4
      00058E 74rD8            [12] 1513 	mov	a,#___str_16
      000590 C0 E0            [24] 1514 	push	acc
      000592 74s02            [12] 1515 	mov	a,#(___str_16 >> 8)
      000594 C0 E0            [24] 1516 	push	acc
      000596 12r00r00         [24] 1517 	lcall	_printf_tiny
      000599 E5 81            [12] 1518 	mov	a,sp
      00059B 24 FC            [12] 1519 	add	a,#0xfc
      00059D F5 81            [12] 1520 	mov	sp,a
                                   1521 ;	character.c:196: printf_tiny("\033[1;36m|********* Note : Index Starts with 0 **********|\n\r");
      00059F 74r14            [12] 1522 	mov	a,#___str_17
      0005A1 C0 E0            [24] 1523 	push	acc
      0005A3 74s03            [12] 1524 	mov	a,#(___str_17 >> 8)
      0005A5 C0 E0            [24] 1525 	push	acc
      0005A7 12r00r00         [24] 1526 	lcall	_printf_tiny
      0005AA 15 81            [12] 1527 	dec	sp
      0005AC 15 81            [12] 1528 	dec	sp
                                   1529 ;	character.c:197: printf_tiny("\033[1;36m|***********************************************|\n\r");
      0005AE 74rAD            [12] 1530 	mov	a,#___str_7
      0005B0 C0 E0            [24] 1531 	push	acc
      0005B2 74s00            [12] 1532 	mov	a,#(___str_7 >> 8)
      0005B4 C0 E0            [24] 1533 	push	acc
      0005B6 12r00r00         [24] 1534 	lcall	_printf_tiny
      0005B9 15 81            [12] 1535 	dec	sp
      0005BB 15 81            [12] 1536 	dec	sp
      0005BD D0 05            [24] 1537 	pop	ar5
      0005BF D0 06            [24] 1538 	pop	ar6
      0005C1 D0 07            [24] 1539 	pop	ar7
                                   1540 ;	character.c:201: do{
      0005C3                       1541 00111$:
                                   1542 ;	character.c:202: ch = getchar();
      0005C3 C0 07            [24] 1543 	push	ar7
      0005C5 C0 06            [24] 1544 	push	ar6
      0005C7 C0 05            [24] 1545 	push	ar5
      0005C9 12r00r00         [24] 1546 	lcall	_getchar
      0005CC AB 82            [24] 1547 	mov	r3,dpl
                                   1548 ;	character.c:203: putchar(ch);
      0005CE 8B 02            [24] 1549 	mov	ar2,r3
      0005D0 7C 00            [12] 1550 	mov	r4,#0x00
      0005D2 8A 82            [24] 1551 	mov	dpl,r2
      0005D4 8C 83            [24] 1552 	mov	dph,r4
      0005D6 C0 04            [24] 1553 	push	ar4
      0005D8 C0 03            [24] 1554 	push	ar3
      0005DA C0 02            [24] 1555 	push	ar2
      0005DC 12r00r00         [24] 1556 	lcall	_putchar
      0005DF D0 02            [24] 1557 	pop	ar2
      0005E1 D0 03            [24] 1558 	pop	ar3
      0005E3 D0 04            [24] 1559 	pop	ar4
      0005E5 D0 05            [24] 1560 	pop	ar5
      0005E7 D0 06            [24] 1561 	pop	ar6
      0005E9 D0 07            [24] 1562 	pop	ar7
                                   1563 ;	character.c:206: if (ch < '0' || ch > '9') {
      0005EB BB 30 00         [24] 1564 	cjne	r3,#0x30,00250$
      0005EE                       1565 00250$:
      0005EE 40 05            [24] 1566 	jc	00108$
      0005F0 EB               [12] 1567 	mov	a,r3
      0005F1 24 C6            [12] 1568 	add	a,#0xff - 0x39
      0005F3 50 1D            [24] 1569 	jnc	00109$
      0005F5                       1570 00108$:
                                   1571 ;	character.c:207: printf_tiny("\033[1;31mInvalid input : invalid digits entered \n\r\n\r");
      0005F5 C0 07            [24] 1572 	push	ar7
      0005F7 C0 06            [24] 1573 	push	ar6
      0005F9 C0 05            [24] 1574 	push	ar5
      0005FB 74r4F            [12] 1575 	mov	a,#___str_18
      0005FD C0 E0            [24] 1576 	push	acc
      0005FF 74s03            [12] 1577 	mov	a,#(___str_18 >> 8)
      000601 C0 E0            [24] 1578 	push	acc
      000603 12r00r00         [24] 1579 	lcall	_printf_tiny
      000606 15 81            [12] 1580 	dec	sp
      000608 15 81            [12] 1581 	dec	sp
      00060A D0 05            [24] 1582 	pop	ar5
      00060C D0 06            [24] 1583 	pop	ar6
      00060E D0 07            [24] 1584 	pop	ar7
                                   1585 ;	character.c:208: break;
      000610 80 50            [24] 1586 	sjmp	00113$
      000612                       1587 00109$:
                                   1588 ;	character.c:212: int temp = ch - '0';
      000612 EA               [12] 1589 	mov	a,r2
      000613 24 D0            [12] 1590 	add	a,#0xd0
      000615 FA               [12] 1591 	mov	r2,a
      000616 EC               [12] 1592 	mov	a,r4
      000617 34 FF            [12] 1593 	addc	a,#0xff
      000619 FC               [12] 1594 	mov	r4,a
                                   1595 ;	character.c:213: buffer_to_delete = buffer_to_delete * 10 + temp;
      00061A 90r00r04         [24] 1596 	mov	dptr,#_buffer_to_delete
      00061D E0               [24] 1597 	movx	a,@dptr
      00061E F9               [12] 1598 	mov	r1,a
      00061F A3               [24] 1599 	inc	dptr
      000620 E0               [24] 1600 	movx	a,@dptr
      000621 FB               [12] 1601 	mov	r3,a
      000622 90r00r00         [24] 1602 	mov	dptr,#__mulint_PARM_2
      000625 E9               [12] 1603 	mov	a,r1
      000626 F0               [24] 1604 	movx	@dptr,a
      000627 EB               [12] 1605 	mov	a,r3
      000628 A3               [24] 1606 	inc	dptr
      000629 F0               [24] 1607 	movx	@dptr,a
      00062A 90 00 0A         [24] 1608 	mov	dptr,#0x000a
      00062D C0 07            [24] 1609 	push	ar7
      00062F C0 06            [24] 1610 	push	ar6
      000631 C0 05            [24] 1611 	push	ar5
      000633 C0 04            [24] 1612 	push	ar4
      000635 C0 02            [24] 1613 	push	ar2
      000637 12r00r00         [24] 1614 	lcall	__mulint
      00063A E5 82            [12] 1615 	mov	a,dpl
      00063C 85 83 F0         [24] 1616 	mov	b,dph
      00063F D0 02            [24] 1617 	pop	ar2
      000641 D0 04            [24] 1618 	pop	ar4
      000643 90r00r04         [24] 1619 	mov	dptr,#_buffer_to_delete
      000646 2A               [12] 1620 	add	a,r2
      000647 F0               [24] 1621 	movx	@dptr,a
      000648 EC               [12] 1622 	mov	a,r4
      000649 35 F0            [12] 1623 	addc	a,b
      00064B A3               [24] 1624 	inc	dptr
      00064C F0               [24] 1625 	movx	@dptr,a
                                   1626 ;	character.c:215: ch = getchar();
      00064D 12r00r00         [24] 1627 	lcall	_getchar
      000650 AB 82            [24] 1628 	mov	r3,dpl
      000652 AC 83            [24] 1629 	mov	r4,dph
      000654 D0 05            [24] 1630 	pop	ar5
      000656 D0 06            [24] 1631 	pop	ar6
      000658 D0 07            [24] 1632 	pop	ar7
                                   1633 ;	character.c:217: }while(ch != '\r');
      00065A BB 0D 02         [24] 1634 	cjne	r3,#0x0d,00253$
      00065D 80 03            [24] 1635 	sjmp	00254$
      00065F                       1636 00253$:
      00065F 02r05rC3         [24] 1637 	ljmp	00111$
      000662                       1638 00254$:
      000662                       1639 00113$:
                                   1640 ;	character.c:220: if (buffer_to_delete == 0)
      000662 90r00r04         [24] 1641 	mov	dptr,#_buffer_to_delete
      000665 E0               [24] 1642 	movx	a,@dptr
      000666 FB               [12] 1643 	mov	r3,a
      000667 A3               [24] 1644 	inc	dptr
      000668 E0               [24] 1645 	movx	a,@dptr
      000669 FC               [12] 1646 	mov	r4,a
      00066A 4B               [12] 1647 	orl	a,r3
      00066B 70 12            [24] 1648 	jnz	00123$
                                   1649 ;	character.c:222: printf_tiny("\033[1;31mInvalid input : buffer number can't be 0\n\r\n");
      00066D 74r82            [12] 1650 	mov	a,#___str_19
      00066F C0 E0            [24] 1651 	push	acc
      000671 74s03            [12] 1652 	mov	a,#(___str_19 >> 8)
      000673 C0 E0            [24] 1653 	push	acc
      000675 12r00r00         [24] 1654 	lcall	_printf_tiny
      000678 15 81            [12] 1655 	dec	sp
      00067A 15 81            [12] 1656 	dec	sp
                                   1657 ;	character.c:223: break;
      00067C 02r0CrC2         [24] 1658 	ljmp	00141$
      00067F                       1659 00123$:
                                   1660 ;	character.c:225: else if(buff_not_cleared[buffer_to_delete] == 1){
      00067F EB               [12] 1661 	mov	a,r3
      000680 2B               [12] 1662 	add	a,r3
      000681 F9               [12] 1663 	mov	r1,a
      000682 EC               [12] 1664 	mov	a,r4
      000683 33               [12] 1665 	rlc	a
      000684 FA               [12] 1666 	mov	r2,a
      000685 E9               [12] 1667 	mov	a,r1
      000686 24r06            [12] 1668 	add	a,#_buff_not_cleared
      000688 F5 82            [12] 1669 	mov	dpl,a
      00068A EA               [12] 1670 	mov	a,r2
      00068B 34s00            [12] 1671 	addc	a,#(_buff_not_cleared >> 8)
      00068D F5 83            [12] 1672 	mov	dph,a
      00068F E0               [24] 1673 	movx	a,@dptr
      000690 F9               [12] 1674 	mov	r1,a
      000691 A3               [24] 1675 	inc	dptr
      000692 E0               [24] 1676 	movx	a,@dptr
      000693 FA               [12] 1677 	mov	r2,a
      000694 B9 01 1B         [24] 1678 	cjne	r1,#0x01,00120$
      000697 BA 00 18         [24] 1679 	cjne	r2,#0x00,00120$
                                   1680 ;	character.c:226: printf_tiny("\033[1;31mInvalid input : buffer[%d] was already cleared earlier\n\r",buffer_to_delete);
      00069A C0 03            [24] 1681 	push	ar3
      00069C C0 04            [24] 1682 	push	ar4
      00069E 74rB5            [12] 1683 	mov	a,#___str_20
      0006A0 C0 E0            [24] 1684 	push	acc
      0006A2 74s03            [12] 1685 	mov	a,#(___str_20 >> 8)
      0006A4 C0 E0            [24] 1686 	push	acc
      0006A6 12r00r00         [24] 1687 	lcall	_printf_tiny
      0006A9 E5 81            [12] 1688 	mov	a,sp
      0006AB 24 FC            [12] 1689 	add	a,#0xfc
      0006AD F5 81            [12] 1690 	mov	sp,a
                                   1691 ;	character.c:227: break;
      0006AF 02r0CrC2         [24] 1692 	ljmp	00141$
      0006B2                       1693 00120$:
                                   1694 ;	character.c:229: else if ((buffer_to_delete) >= *new_buffer_index) {
      0006B2 8D 82            [24] 1695 	mov	dpl,r5
      0006B4 8E 83            [24] 1696 	mov	dph,r6
      0006B6 8F F0            [24] 1697 	mov	b,r7
      0006B8 12r00r00         [24] 1698 	lcall	__gptrget
      0006BB F9               [12] 1699 	mov	r1,a
      0006BC A3               [24] 1700 	inc	dptr
      0006BD 12r00r00         [24] 1701 	lcall	__gptrget
      0006C0 FA               [12] 1702 	mov	r2,a
      0006C1 C3               [12] 1703 	clr	c
      0006C2 EB               [12] 1704 	mov	a,r3
      0006C3 99               [12] 1705 	subb	a,r1
      0006C4 EC               [12] 1706 	mov	a,r4
      0006C5 64 80            [12] 1707 	xrl	a,#0x80
      0006C7 8A F0            [24] 1708 	mov	b,r2
      0006C9 63 F0 80         [24] 1709 	xrl	b,#0x80
      0006CC 95 F0            [12] 1710 	subb	a,b
      0006CE 40 12            [24] 1711 	jc	00117$
                                   1712 ;	character.c:230: printf_tiny("\033[1;31mInvalid input : buffer number doesn't exist\n\r");
      0006D0 74rF5            [12] 1713 	mov	a,#___str_21
      0006D2 C0 E0            [24] 1714 	push	acc
      0006D4 74s03            [12] 1715 	mov	a,#(___str_21 >> 8)
      0006D6 C0 E0            [24] 1716 	push	acc
      0006D8 12r00r00         [24] 1717 	lcall	_printf_tiny
      0006DB 15 81            [12] 1718 	dec	sp
      0006DD 15 81            [12] 1719 	dec	sp
                                   1720 ;	character.c:231: break;
      0006DF 02r0CrC2         [24] 1721 	ljmp	00141$
      0006E2                       1722 00117$:
                                   1723 ;	character.c:236: printf_tiny("\033[1;0mBuffer [%d] requested to be deleted\n\r", buffer_to_delete);
      0006E2 C0 05            [24] 1724 	push	ar5
      0006E4 C0 06            [24] 1725 	push	ar6
      0006E6 C0 07            [24] 1726 	push	ar7
      0006E8 C0 07            [24] 1727 	push	ar7
      0006EA C0 06            [24] 1728 	push	ar6
      0006EC C0 05            [24] 1729 	push	ar5
      0006EE C0 03            [24] 1730 	push	ar3
      0006F0 C0 04            [24] 1731 	push	ar4
      0006F2 74r2A            [12] 1732 	mov	a,#___str_22
      0006F4 C0 E0            [24] 1733 	push	acc
      0006F6 74s04            [12] 1734 	mov	a,#(___str_22 >> 8)
      0006F8 C0 E0            [24] 1735 	push	acc
      0006FA 12r00r00         [24] 1736 	lcall	_printf_tiny
      0006FD E5 81            [12] 1737 	mov	a,sp
      0006FF 24 FC            [12] 1738 	add	a,#0xfc
      000701 F5 81            [12] 1739 	mov	sp,a
                                   1740 ;	character.c:237: printf("Performing buffer freeing operation\r\n");
      000703 74r56            [12] 1741 	mov	a,#___str_23
      000705 C0 E0            [24] 1742 	push	acc
      000707 74s04            [12] 1743 	mov	a,#(___str_23 >> 8)
      000709 C0 E0            [24] 1744 	push	acc
      00070B 74 80            [12] 1745 	mov	a,#0x80
      00070D C0 E0            [24] 1746 	push	acc
      00070F 12r00r00         [24] 1747 	lcall	_printf
      000712 15 81            [12] 1748 	dec	sp
      000714 15 81            [12] 1749 	dec	sp
      000716 15 81            [12] 1750 	dec	sp
                                   1751 ;	character.c:238: free(new_buffer_arr[buffer_to_delete]);
      000718 90r00r04         [24] 1752 	mov	dptr,#_buffer_to_delete
      00071B E0               [24] 1753 	movx	a,@dptr
      00071C FB               [12] 1754 	mov	r3,a
      00071D A3               [24] 1755 	inc	dptr
      00071E E0               [24] 1756 	movx	a,@dptr
      00071F FC               [12] 1757 	mov	r4,a
      000720 EB               [12] 1758 	mov	a,r3
      000721 2B               [12] 1759 	add	a,r3
      000722 FB               [12] 1760 	mov	r3,a
      000723 EC               [12] 1761 	mov	a,r4
      000724 33               [12] 1762 	rlc	a
      000725 FC               [12] 1763 	mov	r4,a
      000726 EB               [12] 1764 	mov	a,r3
      000727 24r00            [12] 1765 	add	a,#_new_buffer_arr
      000729 F5 82            [12] 1766 	mov	dpl,a
      00072B EC               [12] 1767 	mov	a,r4
      00072C 34s00            [12] 1768 	addc	a,#(_new_buffer_arr >> 8)
      00072E F5 83            [12] 1769 	mov	dph,a
      000730 E0               [24] 1770 	movx	a,@dptr
      000731 FB               [12] 1771 	mov	r3,a
      000732 A3               [24] 1772 	inc	dptr
      000733 E0               [24] 1773 	movx	a,@dptr
      000734 FC               [12] 1774 	mov	r4,a
      000735 7A 00            [12] 1775 	mov	r2,#0x00
      000737 8B 82            [24] 1776 	mov	dpl,r3
      000739 8C 83            [24] 1777 	mov	dph,r4
      00073B 8A F0            [24] 1778 	mov	b,r2
      00073D 12r00r00         [24] 1779 	lcall	_free
      000740 D0 05            [24] 1780 	pop	ar5
      000742 D0 06            [24] 1781 	pop	ar6
      000744 D0 07            [24] 1782 	pop	ar7
                                   1783 ;	character.c:239: new_buffer_arr[buffer_to_delete] = 0;
      000746 90r00r04         [24] 1784 	mov	dptr,#_buffer_to_delete
      000749 E0               [24] 1785 	movx	a,@dptr
      00074A FB               [12] 1786 	mov	r3,a
      00074B A3               [24] 1787 	inc	dptr
      00074C E0               [24] 1788 	movx	a,@dptr
      00074D FC               [12] 1789 	mov	r4,a
      00074E EB               [12] 1790 	mov	a,r3
      00074F 2B               [12] 1791 	add	a,r3
      000750 FB               [12] 1792 	mov	r3,a
      000751 EC               [12] 1793 	mov	a,r4
      000752 33               [12] 1794 	rlc	a
      000753 FC               [12] 1795 	mov	r4,a
      000754 EB               [12] 1796 	mov	a,r3
      000755 24r00            [12] 1797 	add	a,#_new_buffer_arr
      000757 F5 82            [12] 1798 	mov	dpl,a
      000759 EC               [12] 1799 	mov	a,r4
      00075A 34s00            [12] 1800 	addc	a,#(_new_buffer_arr >> 8)
      00075C F5 83            [12] 1801 	mov	dph,a
      00075E E4               [12] 1802 	clr	a
      00075F F0               [24] 1803 	movx	@dptr,a
      000760 A3               [24] 1804 	inc	dptr
      000761 F0               [24] 1805 	movx	@dptr,a
                                   1806 ;	character.c:240: buff_not_cleared[buffer_to_delete] = 1;
      000762 90r00r04         [24] 1807 	mov	dptr,#_buffer_to_delete
      000765 E0               [24] 1808 	movx	a,@dptr
      000766 FB               [12] 1809 	mov	r3,a
      000767 A3               [24] 1810 	inc	dptr
      000768 E0               [24] 1811 	movx	a,@dptr
      000769 FC               [12] 1812 	mov	r4,a
      00076A EB               [12] 1813 	mov	a,r3
      00076B 2B               [12] 1814 	add	a,r3
      00076C FB               [12] 1815 	mov	r3,a
      00076D EC               [12] 1816 	mov	a,r4
      00076E 33               [12] 1817 	rlc	a
      00076F FC               [12] 1818 	mov	r4,a
      000770 EB               [12] 1819 	mov	a,r3
      000771 24r06            [12] 1820 	add	a,#_buff_not_cleared
      000773 F5 82            [12] 1821 	mov	dpl,a
      000775 EC               [12] 1822 	mov	a,r4
      000776 34s00            [12] 1823 	addc	a,#(_buff_not_cleared >> 8)
      000778 F5 83            [12] 1824 	mov	dph,a
      00077A 74 01            [12] 1825 	mov	a,#0x01
      00077C F0               [24] 1826 	movx	@dptr,a
      00077D E4               [12] 1827 	clr	a
      00077E A3               [24] 1828 	inc	dptr
      00077F F0               [24] 1829 	movx	@dptr,a
                                   1830 ;	character.c:241: ++(*free_buffer_count);
      000780 90r00r0A         [24] 1831 	mov	dptr,#_command_processing_PARM_4
      000783 E0               [24] 1832 	movx	a,@dptr
      000784 FA               [12] 1833 	mov	r2,a
      000785 A3               [24] 1834 	inc	dptr
      000786 E0               [24] 1835 	movx	a,@dptr
      000787 FB               [12] 1836 	mov	r3,a
      000788 A3               [24] 1837 	inc	dptr
      000789 E0               [24] 1838 	movx	a,@dptr
      00078A FC               [12] 1839 	mov	r4,a
      00078B 8A 82            [24] 1840 	mov	dpl,r2
      00078D 8B 83            [24] 1841 	mov	dph,r3
      00078F 8C F0            [24] 1842 	mov	b,r4
      000791 12r00r00         [24] 1843 	lcall	__gptrget
      000794 F8               [12] 1844 	mov	r0,a
      000795 A3               [24] 1845 	inc	dptr
      000796 12r00r00         [24] 1846 	lcall	__gptrget
      000799 F9               [12] 1847 	mov	r1,a
      00079A 08               [12] 1848 	inc	r0
      00079B B8 00 01         [24] 1849 	cjne	r0,#0x00,00259$
      00079E 09               [12] 1850 	inc	r1
      00079F                       1851 00259$:
      00079F 8A 82            [24] 1852 	mov	dpl,r2
      0007A1 8B 83            [24] 1853 	mov	dph,r3
      0007A3 8C F0            [24] 1854 	mov	b,r4
      0007A5 E8               [12] 1855 	mov	a,r0
      0007A6 12r00r00         [24] 1856 	lcall	__gptrput
      0007A9 A3               [24] 1857 	inc	dptr
      0007AA E9               [12] 1858 	mov	a,r1
      0007AB 12r00r00         [24] 1859 	lcall	__gptrput
                                   1860 ;	character.c:243: if(new_buffer_arr[buffer_to_delete] == 0)
      0007AE 90r00r04         [24] 1861 	mov	dptr,#_buffer_to_delete
      0007B1 E0               [24] 1862 	movx	a,@dptr
      0007B2 F8               [12] 1863 	mov	r0,a
      0007B3 A3               [24] 1864 	inc	dptr
      0007B4 E0               [24] 1865 	movx	a,@dptr
      0007B5 F9               [12] 1866 	mov	r1,a
      0007B6 E8               [12] 1867 	mov	a,r0
      0007B7 28               [12] 1868 	add	a,r0
      0007B8 FE               [12] 1869 	mov	r6,a
      0007B9 E9               [12] 1870 	mov	a,r1
      0007BA 33               [12] 1871 	rlc	a
      0007BB FF               [12] 1872 	mov	r7,a
      0007BC EE               [12] 1873 	mov	a,r6
      0007BD 24r00            [12] 1874 	add	a,#_new_buffer_arr
      0007BF F5 82            [12] 1875 	mov	dpl,a
      0007C1 EF               [12] 1876 	mov	a,r7
      0007C2 34s00            [12] 1877 	addc	a,#(_new_buffer_arr >> 8)
      0007C4 F5 83            [12] 1878 	mov	dph,a
      0007C6 E0               [24] 1879 	movx	a,@dptr
      0007C7 FE               [12] 1880 	mov	r6,a
      0007C8 A3               [24] 1881 	inc	dptr
      0007C9 E0               [24] 1882 	movx	a,@dptr
      0007CA 4E               [12] 1883 	orl	a,r6
      0007CB D0 07            [24] 1884 	pop	ar7
      0007CD D0 06            [24] 1885 	pop	ar6
      0007CF D0 05            [24] 1886 	pop	ar5
      0007D1 70 31            [24] 1887 	jnz	00115$
                                   1888 ;	character.c:245: printf("***Buffer [%d] is freed****\n\r",buffer_to_delete);
      0007D3 C0 07            [24] 1889 	push	ar7
      0007D5 C0 06            [24] 1890 	push	ar6
      0007D7 C0 05            [24] 1891 	push	ar5
      0007D9 C0 04            [24] 1892 	push	ar4
      0007DB C0 03            [24] 1893 	push	ar3
      0007DD C0 02            [24] 1894 	push	ar2
      0007DF C0 00            [24] 1895 	push	ar0
      0007E1 C0 01            [24] 1896 	push	ar1
      0007E3 74r7C            [12] 1897 	mov	a,#___str_24
      0007E5 C0 E0            [24] 1898 	push	acc
      0007E7 74s04            [12] 1899 	mov	a,#(___str_24 >> 8)
      0007E9 C0 E0            [24] 1900 	push	acc
      0007EB 74 80            [12] 1901 	mov	a,#0x80
      0007ED C0 E0            [24] 1902 	push	acc
      0007EF 12r00r00         [24] 1903 	lcall	_printf
      0007F2 E5 81            [12] 1904 	mov	a,sp
      0007F4 24 FB            [12] 1905 	add	a,#0xfb
      0007F6 F5 81            [12] 1906 	mov	sp,a
      0007F8 D0 02            [24] 1907 	pop	ar2
      0007FA D0 03            [24] 1908 	pop	ar3
      0007FC D0 04            [24] 1909 	pop	ar4
      0007FE D0 05            [24] 1910 	pop	ar5
      000800 D0 06            [24] 1911 	pop	ar6
      000802 D0 07            [24] 1912 	pop	ar7
      000804                       1913 00115$:
                                   1914 ;	character.c:248: printf_tiny("\033[1;0mBuffer[%d] de-allocated successfully  \n\r", buffer_to_delete);
      000804 C0 07            [24] 1915 	push	ar7
      000806 C0 06            [24] 1916 	push	ar6
      000808 C0 05            [24] 1917 	push	ar5
      00080A C0 04            [24] 1918 	push	ar4
      00080C C0 03            [24] 1919 	push	ar3
      00080E C0 02            [24] 1920 	push	ar2
      000810 90r00r04         [24] 1921 	mov	dptr,#_buffer_to_delete
      000813 E0               [24] 1922 	movx	a,@dptr
      000814 C0 E0            [24] 1923 	push	acc
      000816 A3               [24] 1924 	inc	dptr
      000817 E0               [24] 1925 	movx	a,@dptr
      000818 C0 E0            [24] 1926 	push	acc
      00081A 74r9A            [12] 1927 	mov	a,#___str_25
      00081C C0 E0            [24] 1928 	push	acc
      00081E 74s04            [12] 1929 	mov	a,#(___str_25 >> 8)
      000820 C0 E0            [24] 1930 	push	acc
      000822 12r00r00         [24] 1931 	lcall	_printf_tiny
      000825 E5 81            [12] 1932 	mov	a,sp
      000827 24 FC            [12] 1933 	add	a,#0xfc
      000829 F5 81            [12] 1934 	mov	sp,a
      00082B D0 02            [24] 1935 	pop	ar2
      00082D D0 03            [24] 1936 	pop	ar3
      00082F D0 04            [24] 1937 	pop	ar4
      000831 D0 05            [24] 1938 	pop	ar5
      000833 D0 06            [24] 1939 	pop	ar6
      000835 D0 07            [24] 1940 	pop	ar7
                                   1941 ;	character.c:249: printf_tiny("\033[1;0mTotal Number of Buffers after deallocation = [%d]\n\r\n\r",*new_buffer_index);
      000837 8D 82            [24] 1942 	mov	dpl,r5
      000839 8E 83            [24] 1943 	mov	dph,r6
      00083B 8F F0            [24] 1944 	mov	b,r7
      00083D 12r00r00         [24] 1945 	lcall	__gptrget
      000840 FD               [12] 1946 	mov	r5,a
      000841 A3               [24] 1947 	inc	dptr
      000842 12r00r00         [24] 1948 	lcall	__gptrget
      000845 FE               [12] 1949 	mov	r6,a
      000846 C0 04            [24] 1950 	push	ar4
      000848 C0 03            [24] 1951 	push	ar3
      00084A C0 02            [24] 1952 	push	ar2
      00084C C0 05            [24] 1953 	push	ar5
      00084E C0 06            [24] 1954 	push	ar6
      000850 74rC9            [12] 1955 	mov	a,#___str_26
      000852 C0 E0            [24] 1956 	push	acc
      000854 74s04            [12] 1957 	mov	a,#(___str_26 >> 8)
      000856 C0 E0            [24] 1958 	push	acc
      000858 12r00r00         [24] 1959 	lcall	_printf_tiny
      00085B E5 81            [12] 1960 	mov	a,sp
      00085D 24 FC            [12] 1961 	add	a,#0xfc
      00085F F5 81            [12] 1962 	mov	sp,a
      000861 D0 02            [24] 1963 	pop	ar2
      000863 D0 03            [24] 1964 	pop	ar3
      000865 D0 04            [24] 1965 	pop	ar4
                                   1966 ;	character.c:250: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \r\nTotal Empty Buffers  = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count));
      000867 8A 82            [24] 1967 	mov	dpl,r2
      000869 8B 83            [24] 1968 	mov	dph,r3
      00086B 8C F0            [24] 1969 	mov	b,r4
      00086D 12r00r00         [24] 1970 	lcall	__gptrget
      000870 FA               [12] 1971 	mov	r2,a
      000871 A3               [24] 1972 	inc	dptr
      000872 12r00r00         [24] 1973 	lcall	__gptrget
      000875 FB               [12] 1974 	mov	r3,a
      000876 90r00r0D         [24] 1975 	mov	dptr,#_command_processing_PARM_5
      000879 E0               [24] 1976 	movx	a,@dptr
      00087A FD               [12] 1977 	mov	r5,a
      00087B A3               [24] 1978 	inc	dptr
      00087C E0               [24] 1979 	movx	a,@dptr
      00087D FE               [12] 1980 	mov	r6,a
      00087E A3               [24] 1981 	inc	dptr
      00087F E0               [24] 1982 	movx	a,@dptr
      000880 FF               [12] 1983 	mov	r7,a
      000881 8D 82            [24] 1984 	mov	dpl,r5
      000883 8E 83            [24] 1985 	mov	dph,r6
      000885 8F F0            [24] 1986 	mov	b,r7
      000887 12r00r00         [24] 1987 	lcall	__gptrget
      00088A FD               [12] 1988 	mov	r5,a
      00088B A3               [24] 1989 	inc	dptr
      00088C 12r00r00         [24] 1990 	lcall	__gptrget
      00088F FE               [12] 1991 	mov	r6,a
      000890 C0 02            [24] 1992 	push	ar2
      000892 C0 03            [24] 1993 	push	ar3
      000894 C0 05            [24] 1994 	push	ar5
      000896 C0 06            [24] 1995 	push	ar6
      000898 74r05            [12] 1996 	mov	a,#___str_27
      00089A C0 E0            [24] 1997 	push	acc
      00089C 74s05            [12] 1998 	mov	a,#(___str_27 >> 8)
      00089E C0 E0            [24] 1999 	push	acc
      0008A0 12r00r00         [24] 2000 	lcall	_printf_tiny
      0008A3 E5 81            [12] 2001 	mov	a,sp
      0008A5 24 FA            [12] 2002 	add	a,#0xfa
      0008A7 F5 81            [12] 2003 	mov	sp,a
                                   2004 ;	character.c:252: DEBUGPORT(0x20);
      0008A9 75 82 20         [24] 2005 	mov	dpl,#0x20
      0008AC 12r00r00         [24] 2006 	lcall	_dataout
                                   2007 ;	character.c:253: break;
      0008AF 02r0CrC2         [24] 2008 	ljmp	00141$
                                   2009 ;	character.c:256: case '@': // if input character is '@'
      0008B2                       2010 00125$:
                                   2011 ;	character.c:258: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0008B2 74r37            [12] 2012 	mov	a,#___str_5
      0008B4 C0 E0            [24] 2013 	push	acc
      0008B6 74s00            [12] 2014 	mov	a,#(___str_5 >> 8)
      0008B8 C0 E0            [24] 2015 	push	acc
      0008BA 12r00r00         [24] 2016 	lcall	_printf_tiny
      0008BD 15 81            [12] 2017 	dec	sp
      0008BF 15 81            [12] 2018 	dec	sp
                                   2019 ;	character.c:259: printf_tiny("\033[1;33m|************ Processing [@] *******************|\n\r");
      0008C1 74r4A            [12] 2020 	mov	a,#___str_28
      0008C3 C0 E0            [24] 2021 	push	acc
      0008C5 74s05            [12] 2022 	mov	a,#(___str_28 >> 8)
      0008C7 C0 E0            [24] 2023 	push	acc
      0008C9 12r00r00         [24] 2024 	lcall	_printf_tiny
      0008CC 15 81            [12] 2025 	dec	sp
      0008CE 15 81            [12] 2026 	dec	sp
                                   2027 ;	character.c:260: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0008D0 74r37            [12] 2028 	mov	a,#___str_5
      0008D2 C0 E0            [24] 2029 	push	acc
      0008D4 74s00            [12] 2030 	mov	a,#(___str_5 >> 8)
      0008D6 C0 E0            [24] 2031 	push	acc
      0008D8 12r00r00         [24] 2032 	lcall	_printf_tiny
      0008DB 15 81            [12] 2033 	dec	sp
      0008DD 15 81            [12] 2034 	dec	sp
                                   2035 ;	character.c:263: for(int i = 0; i < *new_buffer_index; i++) {
      0008DF 90r00r07         [24] 2036 	mov	dptr,#_command_processing_PARM_3
      0008E2 E0               [24] 2037 	movx	a,@dptr
      0008E3 F5*06            [12] 2038 	mov	_command_processing_sloc1_1_0,a
      0008E5 A3               [24] 2039 	inc	dptr
      0008E6 E0               [24] 2040 	movx	a,@dptr
      0008E7 F5*07            [12] 2041 	mov	(_command_processing_sloc1_1_0 + 1),a
      0008E9 A3               [24] 2042 	inc	dptr
      0008EA E0               [24] 2043 	movx	a,@dptr
      0008EB F5*08            [12] 2044 	mov	(_command_processing_sloc1_1_0 + 2),a
      0008ED 7B 00            [12] 2045 	mov	r3,#0x00
      0008EF 7C 00            [12] 2046 	mov	r4,#0x00
      0008F1                       2047 00143$:
      0008F1 85*06 82         [24] 2048 	mov	dpl,_command_processing_sloc1_1_0
      0008F4 85*07 83         [24] 2049 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      0008F7 85*08 F0         [24] 2050 	mov	b,(_command_processing_sloc1_1_0 + 2)
      0008FA 12r00r00         [24] 2051 	lcall	__gptrget
      0008FD F9               [12] 2052 	mov	r1,a
      0008FE A3               [24] 2053 	inc	dptr
      0008FF 12r00r00         [24] 2054 	lcall	__gptrget
      000902 FA               [12] 2055 	mov	r2,a
      000903 C3               [12] 2056 	clr	c
      000904 EB               [12] 2057 	mov	a,r3
      000905 99               [12] 2058 	subb	a,r1
      000906 EC               [12] 2059 	mov	a,r4
      000907 64 80            [12] 2060 	xrl	a,#0x80
      000909 8A F0            [24] 2061 	mov	b,r2
      00090B 63 F0 80         [24] 2062 	xrl	b,#0x80
      00090E 95 F0            [12] 2063 	subb	a,b
      000910 40 03            [24] 2064 	jc	00261$
      000912 02r09rA2         [24] 2065 	ljmp	00129$
      000915                       2066 00261$:
                                   2067 ;	character.c:264: char* buffer_to_free = new_buffer_arr[i];
      000915 EB               [12] 2068 	mov	a,r3
      000916 2B               [12] 2069 	add	a,r3
      000917 F9               [12] 2070 	mov	r1,a
      000918 EC               [12] 2071 	mov	a,r4
      000919 33               [12] 2072 	rlc	a
      00091A FA               [12] 2073 	mov	r2,a
      00091B E9               [12] 2074 	mov	a,r1
      00091C 24r00            [12] 2075 	add	a,#_new_buffer_arr
      00091E F9               [12] 2076 	mov	r1,a
      00091F EA               [12] 2077 	mov	a,r2
      000920 34s00            [12] 2078 	addc	a,#(_new_buffer_arr >> 8)
      000922 FA               [12] 2079 	mov	r2,a
      000923 89 82            [24] 2080 	mov	dpl,r1
      000925 8A 83            [24] 2081 	mov	dph,r2
      000927 E0               [24] 2082 	movx	a,@dptr
      000928 F8               [12] 2083 	mov	r0,a
      000929 A3               [24] 2084 	inc	dptr
      00092A E0               [24] 2085 	movx	a,@dptr
      00092B FF               [12] 2086 	mov	r7,a
      00092C 88*09            [24] 2087 	mov	_command_processing_sloc2_1_0,r0
      00092E 8F*0A            [24] 2088 	mov	(_command_processing_sloc2_1_0 + 1),r7
      000930 75*0B 00         [24] 2089 	mov	(_command_processing_sloc2_1_0 + 2),#0x00
                                   2090 ;	character.c:265: if(buffer_to_free != NULL) {
      000933 E8               [12] 2091 	mov	a,r0
      000934 4F               [12] 2092 	orl	a,r7
      000935 60 46            [24] 2093 	jz	00127$
                                   2094 ;	character.c:266: free(buffer_to_free);
      000937 AD*09            [24] 2095 	mov	r5,_command_processing_sloc2_1_0
      000939 AE*0A            [24] 2096 	mov	r6,(_command_processing_sloc2_1_0 + 1)
      00093B AF*0B            [24] 2097 	mov	r7,(_command_processing_sloc2_1_0 + 2)
      00093D 8D 82            [24] 2098 	mov	dpl,r5
      00093F 8E 83            [24] 2099 	mov	dph,r6
      000941 8F F0            [24] 2100 	mov	b,r7
      000943 C0 04            [24] 2101 	push	ar4
      000945 C0 03            [24] 2102 	push	ar3
      000947 C0 02            [24] 2103 	push	ar2
      000949 C0 01            [24] 2104 	push	ar1
      00094B 12r00r00         [24] 2105 	lcall	_free
      00094E D0 01            [24] 2106 	pop	ar1
      000950 D0 02            [24] 2107 	pop	ar2
      000952 D0 03            [24] 2108 	pop	ar3
      000954 D0 04            [24] 2109 	pop	ar4
                                   2110 ;	character.c:267: new_buffer_arr[i] = NULL;
      000956 89 82            [24] 2111 	mov	dpl,r1
      000958 8A 83            [24] 2112 	mov	dph,r2
      00095A E4               [12] 2113 	clr	a
      00095B F0               [24] 2114 	movx	@dptr,a
      00095C A3               [24] 2115 	inc	dptr
      00095D F0               [24] 2116 	movx	@dptr,a
                                   2117 ;	character.c:268: printf_tiny("\033[1;0mBuffer[%d] freed\n\r",i);
      00095E C0 04            [24] 2118 	push	ar4
      000960 C0 03            [24] 2119 	push	ar3
      000962 C0 03            [24] 2120 	push	ar3
      000964 C0 04            [24] 2121 	push	ar4
      000966 74r85            [12] 2122 	mov	a,#___str_29
      000968 C0 E0            [24] 2123 	push	acc
      00096A 74s05            [12] 2124 	mov	a,#(___str_29 >> 8)
      00096C C0 E0            [24] 2125 	push	acc
      00096E 12r00r00         [24] 2126 	lcall	_printf_tiny
      000971 E5 81            [12] 2127 	mov	a,sp
      000973 24 FC            [12] 2128 	add	a,#0xfc
      000975 F5 81            [12] 2129 	mov	sp,a
      000977 D0 03            [24] 2130 	pop	ar3
      000979 D0 04            [24] 2131 	pop	ar4
      00097B 80 1D            [24] 2132 	sjmp	00144$
      00097D                       2133 00127$:
                                   2134 ;	character.c:270: printf_tiny("\033[1;0mBuffer[%d] was already NULL\n\r",i);
      00097D C0 04            [24] 2135 	push	ar4
      00097F C0 03            [24] 2136 	push	ar3
      000981 C0 03            [24] 2137 	push	ar3
      000983 C0 04            [24] 2138 	push	ar4
      000985 74r9E            [12] 2139 	mov	a,#___str_30
      000987 C0 E0            [24] 2140 	push	acc
      000989 74s05            [12] 2141 	mov	a,#(___str_30 >> 8)
      00098B C0 E0            [24] 2142 	push	acc
      00098D 12r00r00         [24] 2143 	lcall	_printf_tiny
      000990 E5 81            [12] 2144 	mov	a,sp
      000992 24 FC            [12] 2145 	add	a,#0xfc
      000994 F5 81            [12] 2146 	mov	sp,a
      000996 D0 03            [24] 2147 	pop	ar3
      000998 D0 04            [24] 2148 	pop	ar4
      00099A                       2149 00144$:
                                   2150 ;	character.c:263: for(int i = 0; i < *new_buffer_index; i++) {
      00099A 0B               [12] 2151 	inc	r3
      00099B BB 00 01         [24] 2152 	cjne	r3,#0x00,00263$
      00099E 0C               [12] 2153 	inc	r4
      00099F                       2154 00263$:
      00099F 02r08rF1         [24] 2155 	ljmp	00143$
      0009A2                       2156 00129$:
                                   2157 ;	character.c:275: *new_buffer_index = 0;
      0009A2 85*06 82         [24] 2158 	mov	dpl,_command_processing_sloc1_1_0
      0009A5 85*07 83         [24] 2159 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      0009A8 85*08 F0         [24] 2160 	mov	b,(_command_processing_sloc1_1_0 + 2)
      0009AB E4               [12] 2161 	clr	a
      0009AC 12r00r00         [24] 2162 	lcall	__gptrput
      0009AF A3               [24] 2163 	inc	dptr
      0009B0 12r00r00         [24] 2164 	lcall	__gptrput
                                   2165 ;	character.c:276: (*filled_buffer_count) = 0;
      0009B3 90r00r0D         [24] 2166 	mov	dptr,#_command_processing_PARM_5
      0009B6 E0               [24] 2167 	movx	a,@dptr
      0009B7 FD               [12] 2168 	mov	r5,a
      0009B8 A3               [24] 2169 	inc	dptr
      0009B9 E0               [24] 2170 	movx	a,@dptr
      0009BA FE               [12] 2171 	mov	r6,a
      0009BB A3               [24] 2172 	inc	dptr
      0009BC E0               [24] 2173 	movx	a,@dptr
      0009BD FF               [12] 2174 	mov	r7,a
      0009BE 8D 82            [24] 2175 	mov	dpl,r5
      0009C0 8E 83            [24] 2176 	mov	dph,r6
      0009C2 8F F0            [24] 2177 	mov	b,r7
      0009C4 E4               [12] 2178 	clr	a
      0009C5 12r00r00         [24] 2179 	lcall	__gptrput
      0009C8 A3               [24] 2180 	inc	dptr
      0009C9 12r00r00         [24] 2181 	lcall	__gptrput
                                   2182 ;	character.c:277: (*free_buffer_count) = 0;
      0009CC 90r00r0A         [24] 2183 	mov	dptr,#_command_processing_PARM_4
      0009CF E0               [24] 2184 	movx	a,@dptr
      0009D0 FD               [12] 2185 	mov	r5,a
      0009D1 A3               [24] 2186 	inc	dptr
      0009D2 E0               [24] 2187 	movx	a,@dptr
      0009D3 FE               [12] 2188 	mov	r6,a
      0009D4 A3               [24] 2189 	inc	dptr
      0009D5 E0               [24] 2190 	movx	a,@dptr
      0009D6 FF               [12] 2191 	mov	r7,a
      0009D7 8D 82            [24] 2192 	mov	dpl,r5
      0009D9 8E 83            [24] 2193 	mov	dph,r6
      0009DB 8F F0            [24] 2194 	mov	b,r7
      0009DD E4               [12] 2195 	clr	a
      0009DE 12r00r00         [24] 2196 	lcall	__gptrput
      0009E1 A3               [24] 2197 	inc	dptr
      0009E2 12r00r00         [24] 2198 	lcall	__gptrput
                                   2199 ;	character.c:278: return ALL_BUFFER_CLEARED;
      0009E5 90 00 01         [24] 2200 	mov	dptr,#0x0001
      0009E8 22               [24] 2201 	ret
                                   2202 ;	character.c:281: case '=': // if input character is '='
      0009E9                       2203 00130$:
                                   2204 ;	character.c:283: printf_tiny("\033[1;33m\r\n|************ Processing [=] *******************|\n\r");
      0009E9 74rC2            [12] 2205 	mov	a,#___str_31
      0009EB C0 E0            [24] 2206 	push	acc
      0009ED 74s05            [12] 2207 	mov	a,#(___str_31 >> 8)
      0009EF C0 E0            [24] 2208 	push	acc
      0009F1 12r00r00         [24] 2209 	lcall	_printf_tiny
      0009F4 15 81            [12] 2210 	dec	sp
      0009F6 15 81            [12] 2211 	dec	sp
                                   2212 ;	character.c:286: buffer0_hexdump(LENGTH_16);
      0009F8 90 00 10         [24] 2213 	mov	dptr,#0x0010
      0009FB 12r00r52         [24] 2214 	lcall	_buffer0_hexdump
                                   2215 ;	character.c:287: DEBUGPORT(0x40);
      0009FE 75 82 40         [24] 2216 	mov	dpl,#0x40
      000A01 12r00r00         [24] 2217 	lcall	_dataout
                                   2218 ;	character.c:288: break;
      000A04 02r0CrC2         [24] 2219 	ljmp	00141$
                                   2220 ;	character.c:290: case '?':  // if input character is '?'
      000A07                       2221 00131$:
                                   2222 ;	character.c:292: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000A07 74r37            [12] 2223 	mov	a,#___str_5
      000A09 C0 E0            [24] 2224 	push	acc
      000A0B 74s00            [12] 2225 	mov	a,#(___str_5 >> 8)
      000A0D C0 E0            [24] 2226 	push	acc
      000A0F 12r00r00         [24] 2227 	lcall	_printf_tiny
      000A12 15 81            [12] 2228 	dec	sp
      000A14 15 81            [12] 2229 	dec	sp
                                   2230 ;	character.c:293: printf_tiny("\033[1;33m|************ Processing [?] *******************|\n\r");
      000A16 74rFF            [12] 2231 	mov	a,#___str_32
      000A18 C0 E0            [24] 2232 	push	acc
      000A1A 74s05            [12] 2233 	mov	a,#(___str_32 >> 8)
      000A1C C0 E0            [24] 2234 	push	acc
      000A1E 12r00r00         [24] 2235 	lcall	_printf_tiny
      000A21 15 81            [12] 2236 	dec	sp
      000A23 15 81            [12] 2237 	dec	sp
                                   2238 ;	character.c:294: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000A25 74r37            [12] 2239 	mov	a,#___str_5
      000A27 C0 E0            [24] 2240 	push	acc
      000A29 74s00            [12] 2241 	mov	a,#(___str_5 >> 8)
      000A2B C0 E0            [24] 2242 	push	acc
      000A2D 12r00r00         [24] 2243 	lcall	_printf_tiny
      000A30 15 81            [12] 2244 	dec	sp
      000A32 15 81            [12] 2245 	dec	sp
                                   2246 ;	character.c:297: printf_tiny(" \033[1;34m\r\n|***********************************************|\n\r");
      000A34 74r3A            [12] 2247 	mov	a,#___str_33
      000A36 C0 E0            [24] 2248 	push	acc
      000A38 74s06            [12] 2249 	mov	a,#(___str_33 >> 8)
      000A3A C0 E0            [24] 2250 	push	acc
      000A3C 12r00r00         [24] 2251 	lcall	_printf_tiny
      000A3F 15 81            [12] 2252 	dec	sp
      000A41 15 81            [12] 2253 	dec	sp
                                   2254 ;	character.c:298: printf_tiny(" \033[1;34m|*************** HEAP REPORT *******************|\n\r");
      000A43 74r78            [12] 2255 	mov	a,#___str_34
      000A45 C0 E0            [24] 2256 	push	acc
      000A47 74s06            [12] 2257 	mov	a,#(___str_34 >> 8)
      000A49 C0 E0            [24] 2258 	push	acc
      000A4B 12r00r00         [24] 2259 	lcall	_printf_tiny
      000A4E 15 81            [12] 2260 	dec	sp
      000A50 15 81            [12] 2261 	dec	sp
                                   2262 ;	character.c:299: printf_tiny(" \033[1;34m|***********************************************|\n\r");
      000A52 74rB4            [12] 2263 	mov	a,#___str_35
      000A54 C0 E0            [24] 2264 	push	acc
      000A56 74s06            [12] 2265 	mov	a,#(___str_35 >> 8)
      000A58 C0 E0            [24] 2266 	push	acc
      000A5A 12r00r00         [24] 2267 	lcall	_printf_tiny
      000A5D 15 81            [12] 2268 	dec	sp
      000A5F 15 81            [12] 2269 	dec	sp
                                   2270 ;	character.c:300: for(int i=0; i<*new_buffer_index; i++)              // iterate over the new buffer array using a loop variable i
      000A61 90r00r10         [24] 2271 	mov	dptr,#_command_processing_PARM_6
      000A64 E0               [24] 2272 	movx	a,@dptr
      000A65 FD               [12] 2273 	mov	r5,a
      000A66 A3               [24] 2274 	inc	dptr
      000A67 E0               [24] 2275 	movx	a,@dptr
      000A68 FE               [12] 2276 	mov	r6,a
      000A69 A3               [24] 2277 	inc	dptr
      000A6A E0               [24] 2278 	movx	a,@dptr
      000A6B FF               [12] 2279 	mov	r7,a
      000A6C 90r00r13         [24] 2280 	mov	dptr,#_command_processing_PARM_7
      000A6F E0               [24] 2281 	movx	a,@dptr
      000A70 F5*0C            [12] 2282 	mov	_command_processing_sloc3_1_0,a
      000A72 A3               [24] 2283 	inc	dptr
      000A73 E0               [24] 2284 	movx	a,@dptr
      000A74 F5*0D            [12] 2285 	mov	(_command_processing_sloc3_1_0 + 1),a
      000A76 A3               [24] 2286 	inc	dptr
      000A77 E0               [24] 2287 	movx	a,@dptr
      000A78 F5*0E            [12] 2288 	mov	(_command_processing_sloc3_1_0 + 2),a
      000A7A 90r00r07         [24] 2289 	mov	dptr,#_command_processing_PARM_3
      000A7D E0               [24] 2290 	movx	a,@dptr
      000A7E F5*09            [12] 2291 	mov	_command_processing_sloc2_1_0,a
      000A80 A3               [24] 2292 	inc	dptr
      000A81 E0               [24] 2293 	movx	a,@dptr
      000A82 F5*0A            [12] 2294 	mov	(_command_processing_sloc2_1_0 + 1),a
      000A84 A3               [24] 2295 	inc	dptr
      000A85 E0               [24] 2296 	movx	a,@dptr
      000A86 F5*0B            [12] 2297 	mov	(_command_processing_sloc2_1_0 + 2),a
      000A88 78 00            [12] 2298 	mov	r0,#0x00
      000A8A 79 00            [12] 2299 	mov	r1,#0x00
      000A8C                       2300 00146$:
      000A8C 85*09 82         [24] 2301 	mov	dpl,_command_processing_sloc2_1_0
      000A8F 85*0A 83         [24] 2302 	mov	dph,(_command_processing_sloc2_1_0 + 1)
      000A92 85*0B F0         [24] 2303 	mov	b,(_command_processing_sloc2_1_0 + 2)
      000A95 12r00r00         [24] 2304 	lcall	__gptrget
      000A98 FB               [12] 2305 	mov	r3,a
      000A99 A3               [24] 2306 	inc	dptr
      000A9A 12r00r00         [24] 2307 	lcall	__gptrget
      000A9D FC               [12] 2308 	mov	r4,a
      000A9E C3               [12] 2309 	clr	c
      000A9F E8               [12] 2310 	mov	a,r0
      000AA0 9B               [12] 2311 	subb	a,r3
      000AA1 E9               [12] 2312 	mov	a,r1
      000AA2 64 80            [12] 2313 	xrl	a,#0x80
      000AA4 8C F0            [24] 2314 	mov	b,r4
      000AA6 63 F0 80         [24] 2315 	xrl	b,#0x80
      000AA9 95 F0            [12] 2316 	subb	a,b
      000AAB 40 03            [24] 2317 	jc	00264$
      000AAD 02r0Cr7C         [24] 2318 	ljmp	00137$
      000AB0                       2319 00264$:
                                   2320 ;	character.c:302: if(new_buffer_arr[i] == 0)                      // check if the current buffer is already cleared
      000AB0 E8               [12] 2321 	mov	a,r0
      000AB1 28               [12] 2322 	add	a,r0
      000AB2 F5*06            [12] 2323 	mov	_command_processing_sloc1_1_0,a
      000AB4 E9               [12] 2324 	mov	a,r1
      000AB5 33               [12] 2325 	rlc	a
      000AB6 F5*07            [12] 2326 	mov	(_command_processing_sloc1_1_0 + 1),a
      000AB8 E5*06            [12] 2327 	mov	a,_command_processing_sloc1_1_0
      000ABA 24r00            [12] 2328 	add	a,#_new_buffer_arr
      000ABC F5*04            [12] 2329 	mov	_command_processing_sloc0_1_0,a
      000ABE E5*07            [12] 2330 	mov	a,(_command_processing_sloc1_1_0 + 1)
      000AC0 34s00            [12] 2331 	addc	a,#(_new_buffer_arr >> 8)
      000AC2 F5*05            [12] 2332 	mov	(_command_processing_sloc0_1_0 + 1),a
      000AC4 85*04 82         [24] 2333 	mov	dpl,_command_processing_sloc0_1_0
      000AC7 85*05 83         [24] 2334 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000ACA E0               [24] 2335 	movx	a,@dptr
      000ACB FB               [12] 2336 	mov	r3,a
      000ACC A3               [24] 2337 	inc	dptr
      000ACD E0               [24] 2338 	movx	a,@dptr
      000ACE 4B               [12] 2339 	orl	a,r3
      000ACF 70 2C            [24] 2340 	jnz	00133$
                                   2341 ;	character.c:304: printf_tiny("\033[1;31m\n\rBuffer [%d] already cleared!!\n\r",i); // print a message indicating the buffer is already cleared
      000AD1 C0 07            [24] 2342 	push	ar7
      000AD3 C0 06            [24] 2343 	push	ar6
      000AD5 C0 05            [24] 2344 	push	ar5
      000AD7 C0 01            [24] 2345 	push	ar1
      000AD9 C0 00            [24] 2346 	push	ar0
      000ADB C0 00            [24] 2347 	push	ar0
      000ADD C0 01            [24] 2348 	push	ar1
      000ADF 74rF0            [12] 2349 	mov	a,#___str_36
      000AE1 C0 E0            [24] 2350 	push	acc
      000AE3 74s06            [12] 2351 	mov	a,#(___str_36 >> 8)
      000AE5 C0 E0            [24] 2352 	push	acc
      000AE7 12r00r00         [24] 2353 	lcall	_printf_tiny
      000AEA E5 81            [12] 2354 	mov	a,sp
      000AEC 24 FC            [12] 2355 	add	a,#0xfc
      000AEE F5 81            [12] 2356 	mov	sp,a
      000AF0 D0 00            [24] 2357 	pop	ar0
      000AF2 D0 01            [24] 2358 	pop	ar1
      000AF4 D0 05            [24] 2359 	pop	ar5
      000AF6 D0 06            [24] 2360 	pop	ar6
      000AF8 D0 07            [24] 2361 	pop	ar7
                                   2362 ;	character.c:305: continue;                                    // continue the loop as there is no need to iterate further
      000AFA 02r0Cr74         [24] 2363 	ljmp	00136$
      000AFD                       2364 00133$:
                                   2365 ;	character.c:308: printf("\033[1;36m\n\r**Buffer [%d]**\n\r",i);  // print the buffer index in bold cyan color
      000AFD C0 05            [24] 2366 	push	ar5
      000AFF C0 06            [24] 2367 	push	ar6
      000B01 C0 07            [24] 2368 	push	ar7
      000B03 C0 07            [24] 2369 	push	ar7
      000B05 C0 06            [24] 2370 	push	ar6
      000B07 C0 05            [24] 2371 	push	ar5
      000B09 C0 01            [24] 2372 	push	ar1
      000B0B C0 00            [24] 2373 	push	ar0
      000B0D C0 00            [24] 2374 	push	ar0
      000B0F C0 01            [24] 2375 	push	ar1
      000B11 74r19            [12] 2376 	mov	a,#___str_37
      000B13 C0 E0            [24] 2377 	push	acc
      000B15 74s07            [12] 2378 	mov	a,#(___str_37 >> 8)
      000B17 C0 E0            [24] 2379 	push	acc
      000B19 74 80            [12] 2380 	mov	a,#0x80
      000B1B C0 E0            [24] 2381 	push	acc
      000B1D 12r00r00         [24] 2382 	lcall	_printf
      000B20 E5 81            [12] 2383 	mov	a,sp
      000B22 24 FB            [12] 2384 	add	a,#0xfb
      000B24 F5 81            [12] 2385 	mov	sp,a
      000B26 D0 00            [24] 2386 	pop	ar0
      000B28 D0 01            [24] 2387 	pop	ar1
                                   2388 ;	character.c:309: printf("\033[1;0m\n\rBuffer [%d] : Start Address = [%p] \n\r",i,new_buffer_arr[i]); // print the start address of the buffer with index i
      000B2A 85*04 82         [24] 2389 	mov	dpl,_command_processing_sloc0_1_0
      000B2D 85*05 83         [24] 2390 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000B30 E0               [24] 2391 	movx	a,@dptr
      000B31 FB               [12] 2392 	mov	r3,a
      000B32 A3               [24] 2393 	inc	dptr
      000B33 E0               [24] 2394 	movx	a,@dptr
      000B34 FC               [12] 2395 	mov	r4,a
      000B35 7A 00            [12] 2396 	mov	r2,#0x00
      000B37 C0 01            [24] 2397 	push	ar1
      000B39 C0 00            [24] 2398 	push	ar0
      000B3B C0 03            [24] 2399 	push	ar3
      000B3D C0 04            [24] 2400 	push	ar4
      000B3F C0 02            [24] 2401 	push	ar2
      000B41 C0 00            [24] 2402 	push	ar0
      000B43 C0 01            [24] 2403 	push	ar1
      000B45 74r34            [12] 2404 	mov	a,#___str_38
      000B47 C0 E0            [24] 2405 	push	acc
      000B49 74s07            [12] 2406 	mov	a,#(___str_38 >> 8)
      000B4B C0 E0            [24] 2407 	push	acc
      000B4D 74 80            [12] 2408 	mov	a,#0x80
      000B4F C0 E0            [24] 2409 	push	acc
      000B51 12r00r00         [24] 2410 	lcall	_printf
      000B54 E5 81            [12] 2411 	mov	a,sp
      000B56 24 F8            [12] 2412 	add	a,#0xf8
      000B58 F5 81            [12] 2413 	mov	sp,a
      000B5A D0 00            [24] 2414 	pop	ar0
      000B5C D0 01            [24] 2415 	pop	ar1
      000B5E D0 05            [24] 2416 	pop	ar5
      000B60 D0 06            [24] 2417 	pop	ar6
      000B62 D0 07            [24] 2418 	pop	ar7
                                   2419 ;	character.c:310: printf("\033[1;0m\n\rBuffer [%d] : End Address   = [%p] \n\r",i,new_buffer_arr[i] + buffer_size_arr[i]); // print the end address of the buffer with index i
      000B64 85*04 82         [24] 2420 	mov	dpl,_command_processing_sloc0_1_0
      000B67 85*05 83         [24] 2421 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000B6A E0               [24] 2422 	movx	a,@dptr
      000B6B FB               [12] 2423 	mov	r3,a
      000B6C A3               [24] 2424 	inc	dptr
      000B6D E0               [24] 2425 	movx	a,@dptr
      000B6E FC               [12] 2426 	mov	r4,a
      000B6F E5*06            [12] 2427 	mov	a,_command_processing_sloc1_1_0
      000B71 24r00            [12] 2428 	add	a,#_buffer_size_arr
      000B73 FA               [12] 2429 	mov	r2,a
      000B74 E5*07            [12] 2430 	mov	a,(_command_processing_sloc1_1_0 + 1)
      000B76 34s00            [12] 2431 	addc	a,#(_buffer_size_arr >> 8)
      000B78 FF               [12] 2432 	mov	r7,a
      000B79 8A 82            [24] 2433 	mov	dpl,r2
      000B7B 8F 83            [24] 2434 	mov	dph,r7
      000B7D E0               [24] 2435 	movx	a,@dptr
      000B7E FD               [12] 2436 	mov	r5,a
      000B7F A3               [24] 2437 	inc	dptr
      000B80 E0               [24] 2438 	movx	a,@dptr
      000B81 FE               [12] 2439 	mov	r6,a
      000B82 ED               [12] 2440 	mov	a,r5
      000B83 2B               [12] 2441 	add	a,r3
      000B84 FB               [12] 2442 	mov	r3,a
      000B85 EE               [12] 2443 	mov	a,r6
      000B86 3C               [12] 2444 	addc	a,r4
      000B87 FC               [12] 2445 	mov	r4,a
      000B88 7E 00            [12] 2446 	mov	r6,#0x00
      000B8A C0 07            [24] 2447 	push	ar7
      000B8C C0 06            [24] 2448 	push	ar6
      000B8E C0 05            [24] 2449 	push	ar5
      000B90 C0 02            [24] 2450 	push	ar2
      000B92 C0 01            [24] 2451 	push	ar1
      000B94 C0 00            [24] 2452 	push	ar0
      000B96 C0 03            [24] 2453 	push	ar3
      000B98 C0 04            [24] 2454 	push	ar4
      000B9A C0 06            [24] 2455 	push	ar6
      000B9C C0 00            [24] 2456 	push	ar0
      000B9E C0 01            [24] 2457 	push	ar1
      000BA0 74r62            [12] 2458 	mov	a,#___str_39
      000BA2 C0 E0            [24] 2459 	push	acc
      000BA4 74s07            [12] 2460 	mov	a,#(___str_39 >> 8)
      000BA6 C0 E0            [24] 2461 	push	acc
      000BA8 74 80            [12] 2462 	mov	a,#0x80
      000BAA C0 E0            [24] 2463 	push	acc
      000BAC 12r00r00         [24] 2464 	lcall	_printf
      000BAF E5 81            [12] 2465 	mov	a,sp
      000BB1 24 F8            [12] 2466 	add	a,#0xf8
      000BB3 F5 81            [12] 2467 	mov	sp,a
      000BB5 D0 00            [24] 2468 	pop	ar0
      000BB7 D0 01            [24] 2469 	pop	ar1
      000BB9 D0 02            [24] 2470 	pop	ar2
      000BBB D0 05            [24] 2471 	pop	ar5
      000BBD D0 06            [24] 2472 	pop	ar6
      000BBF D0 07            [24] 2473 	pop	ar7
                                   2474 ;	character.c:311: printf("\033[1;0m\n\rBuffer [%d] : Total Size    = [%d] \n\r",i,buffer_size_arr[i]); // print the total size of the buffer with index i
      000BC1 8A 82            [24] 2475 	mov	dpl,r2
      000BC3 8F 83            [24] 2476 	mov	dph,r7
      000BC5 E0               [24] 2477 	movx	a,@dptr
      000BC6 FA               [12] 2478 	mov	r2,a
      000BC7 A3               [24] 2479 	inc	dptr
      000BC8 E0               [24] 2480 	movx	a,@dptr
      000BC9 FF               [12] 2481 	mov	r7,a
      000BCA C0 07            [24] 2482 	push	ar7
      000BCC C0 06            [24] 2483 	push	ar6
      000BCE C0 05            [24] 2484 	push	ar5
      000BD0 C0 01            [24] 2485 	push	ar1
      000BD2 C0 00            [24] 2486 	push	ar0
      000BD4 C0 02            [24] 2487 	push	ar2
      000BD6 C0 07            [24] 2488 	push	ar7
      000BD8 C0 00            [24] 2489 	push	ar0
      000BDA C0 01            [24] 2490 	push	ar1
      000BDC 74r90            [12] 2491 	mov	a,#___str_40
      000BDE C0 E0            [24] 2492 	push	acc
      000BE0 74s07            [12] 2493 	mov	a,#(___str_40 >> 8)
      000BE2 C0 E0            [24] 2494 	push	acc
      000BE4 74 80            [12] 2495 	mov	a,#0x80
      000BE6 C0 E0            [24] 2496 	push	acc
      000BE8 12r00r00         [24] 2497 	lcall	_printf
      000BEB E5 81            [12] 2498 	mov	a,sp
      000BED 24 F9            [12] 2499 	add	a,#0xf9
      000BEF F5 81            [12] 2500 	mov	sp,a
      000BF1 D0 00            [24] 2501 	pop	ar0
      000BF3 D0 01            [24] 2502 	pop	ar1
      000BF5 D0 05            [24] 2503 	pop	ar5
      000BF7 D0 06            [24] 2504 	pop	ar6
      000BF9 D0 07            [24] 2505 	pop	ar7
                                   2506 ;	character.c:312: if(i == 0)                                      // if it is the first buffer
      000BFB D0 07            [24] 2507 	pop	ar7
      000BFD D0 06            [24] 2508 	pop	ar6
      000BFF D0 05            [24] 2509 	pop	ar5
      000C01 E8               [12] 2510 	mov	a,r0
      000C02 49               [12] 2511 	orl	a,r1
      000C03 70 6F            [24] 2512 	jnz	00136$
                                   2513 ;	character.c:314: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*storage_character_count); // print the number of storage characters since last ?= for the first buffer
      000C05 8D 82            [24] 2514 	mov	dpl,r5
      000C07 8E 83            [24] 2515 	mov	dph,r6
      000C09 8F F0            [24] 2516 	mov	b,r7
      000C0B 12r00r00         [24] 2517 	lcall	__gptrget
      000C0E FB               [12] 2518 	mov	r3,a
      000C0F A3               [24] 2519 	inc	dptr
      000C10 12r00r00         [24] 2520 	lcall	__gptrget
      000C13 FC               [12] 2521 	mov	r4,a
      000C14 C0 07            [24] 2522 	push	ar7
      000C16 C0 06            [24] 2523 	push	ar6
      000C18 C0 05            [24] 2524 	push	ar5
      000C1A C0 01            [24] 2525 	push	ar1
      000C1C C0 00            [24] 2526 	push	ar0
      000C1E C0 03            [24] 2527 	push	ar3
      000C20 C0 04            [24] 2528 	push	ar4
      000C22 C0 00            [24] 2529 	push	ar0
      000C24 C0 01            [24] 2530 	push	ar1
      000C26 74rBE            [12] 2531 	mov	a,#___str_41
      000C28 C0 E0            [24] 2532 	push	acc
      000C2A 74s07            [12] 2533 	mov	a,#(___str_41 >> 8)
      000C2C C0 E0            [24] 2534 	push	acc
      000C2E 12r00r00         [24] 2535 	lcall	_printf_tiny
      000C31 E5 81            [12] 2536 	mov	a,sp
      000C33 24 FA            [12] 2537 	add	a,#0xfa
      000C35 F5 81            [12] 2538 	mov	sp,a
      000C37 D0 00            [24] 2539 	pop	ar0
      000C39 D0 01            [24] 2540 	pop	ar1
                                   2541 ;	character.c:315: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*total_characters_count); // print the number of storage characters since last ?= for the first buffer
      000C3B 85*0C 82         [24] 2542 	mov	dpl,_command_processing_sloc3_1_0
      000C3E 85*0D 83         [24] 2543 	mov	dph,(_command_processing_sloc3_1_0 + 1)
      000C41 85*0E F0         [24] 2544 	mov	b,(_command_processing_sloc3_1_0 + 2)
      000C44 12r00r00         [24] 2545 	lcall	__gptrget
      000C47 FB               [12] 2546 	mov	r3,a
      000C48 A3               [24] 2547 	inc	dptr
      000C49 12r00r00         [24] 2548 	lcall	__gptrget
      000C4C FC               [12] 2549 	mov	r4,a
      000C4D C0 01            [24] 2550 	push	ar1
      000C4F C0 00            [24] 2551 	push	ar0
      000C51 C0 03            [24] 2552 	push	ar3
      000C53 C0 04            [24] 2553 	push	ar4
      000C55 C0 00            [24] 2554 	push	ar0
      000C57 C0 01            [24] 2555 	push	ar1
      000C59 74rBE            [12] 2556 	mov	a,#___str_41
      000C5B C0 E0            [24] 2557 	push	acc
      000C5D 74s07            [12] 2558 	mov	a,#(___str_41 >> 8)
      000C5F C0 E0            [24] 2559 	push	acc
      000C61 12r00r00         [24] 2560 	lcall	_printf_tiny
      000C64 E5 81            [12] 2561 	mov	a,sp
      000C66 24 FA            [12] 2562 	add	a,#0xfa
      000C68 F5 81            [12] 2563 	mov	sp,a
      000C6A D0 00            [24] 2564 	pop	ar0
      000C6C D0 01            [24] 2565 	pop	ar1
      000C6E D0 05            [24] 2566 	pop	ar5
      000C70 D0 06            [24] 2567 	pop	ar6
      000C72 D0 07            [24] 2568 	pop	ar7
      000C74                       2569 00136$:
                                   2570 ;	character.c:300: for(int i=0; i<*new_buffer_index; i++)              // iterate over the new buffer array using a loop variable i
      000C74 08               [12] 2571 	inc	r0
      000C75 B8 00 01         [24] 2572 	cjne	r0,#0x00,00267$
      000C78 09               [12] 2573 	inc	r1
      000C79                       2574 00267$:
      000C79 02r0Ar8C         [24] 2575 	ljmp	00146$
      000C7C                       2576 00137$:
                                   2577 ;	character.c:320: *storage_character_count = 0;
      000C7C 8D 82            [24] 2578 	mov	dpl,r5
      000C7E 8E 83            [24] 2579 	mov	dph,r6
      000C80 8F F0            [24] 2580 	mov	b,r7
      000C82 E4               [12] 2581 	clr	a
      000C83 12r00r00         [24] 2582 	lcall	__gptrput
      000C86 A3               [24] 2583 	inc	dptr
      000C87 12r00r00         [24] 2584 	lcall	__gptrput
                                   2585 ;	character.c:321: *total_characters_count = 0;
      000C8A 85*0C 82         [24] 2586 	mov	dpl,_command_processing_sloc3_1_0
      000C8D 85*0D 83         [24] 2587 	mov	dph,(_command_processing_sloc3_1_0 + 1)
      000C90 85*0E F0         [24] 2588 	mov	b,(_command_processing_sloc3_1_0 + 2)
      000C93 12r00r00         [24] 2589 	lcall	__gptrput
      000C96 A3               [24] 2590 	inc	dptr
      000C97 12r00r00         [24] 2591 	lcall	__gptrput
                                   2592 ;	character.c:324: buffer0_hexdump(LENGTH_32);
      000C9A 90 00 20         [24] 2593 	mov	dptr,#0x0020
      000C9D 12r00r52         [24] 2594 	lcall	_buffer0_hexdump
                                   2595 ;	character.c:327: empty_buffer0();
      000CA0 12r00r12         [24] 2596 	lcall	_empty_buffer0
                                   2597 ;	character.c:329: printf_tiny("\r\n\033[1;34m|************ REPORT ENDED  ********************|\n\r\n\r\n\r");
      000CA3 74r05            [12] 2598 	mov	a,#___str_42
      000CA5 C0 E0            [24] 2599 	push	acc
      000CA7 74s08            [12] 2600 	mov	a,#(___str_42 >> 8)
      000CA9 C0 E0            [24] 2601 	push	acc
      000CAB 12r00r00         [24] 2602 	lcall	_printf_tiny
      000CAE 15 81            [12] 2603 	dec	sp
      000CB0 15 81            [12] 2604 	dec	sp
                                   2605 ;	character.c:331: DEBUGPORT(0x50);
      000CB2 75 82 50         [24] 2606 	mov	dpl,#0x50
      000CB5 12r00r00         [24] 2607 	lcall	_dataout
                                   2608 ;	character.c:332: return BUFFER0_CLEARED;
      000CB8 90 00 02         [24] 2609 	mov	dptr,#0x0002
                                   2610 ;	character.c:336: default:
      000CBB 22               [24] 2611 	ret
      000CBC                       2612 00138$:
                                   2613 ;	character.c:337: DEBUGPORT(0x60);
      000CBC 75 82 60         [24] 2614 	mov	dpl,#0x60
      000CBF 12r00r00         [24] 2615 	lcall	_dataout
                                   2616 ;	character.c:339: }
      000CC2                       2617 00141$:
                                   2618 ;	character.c:341: return ALL_BUFFER_NOT_CLEARED;
      000CC2 90 00 00         [24] 2619 	mov	dptr,#0x0000
                                   2620 ;	character.c:342: }
      000CC5 22               [24] 2621 	ret
                                   2622 	.area CSEG    (CODE)
                                   2623 	.area CONST   (CODE)
                                   2624 	.area CONST   (CODE)
      000000                       2625 ___str_0:
      000000 1B                    2626 	.db 0x1b
      000001 5B 31 3B 33 34 6D     2627 	.ascii "[1;34m"
      000007 0A                    2628 	.db 0x0a
      000008 0D                    2629 	.db 0x0d
      000009 00                    2630 	.db 0x00
                                   2631 	.area CSEG    (CODE)
                                   2632 	.area CONST   (CODE)
      00000A                       2633 ___str_1:
      00000A 1B                    2634 	.db 0x1b
      00000B 5B 31 3B 33 34 6D 25  2635 	.ascii "[1;34m%p :"
             70 20 3A
      000015 00                    2636 	.db 0x00
                                   2637 	.area CSEG    (CODE)
                                   2638 	.area CONST   (CODE)
      000016                       2639 ___str_2:
      000016 1B                    2640 	.db 0x1b
      000017 5B 31 3B 33 34 6D 20  2641 	.ascii "[1;34m XX"
             58 58
      000020 00                    2642 	.db 0x00
                                   2643 	.area CSEG    (CODE)
                                   2644 	.area CONST   (CODE)
      000021                       2645 ___str_3:
      000021 1B                    2646 	.db 0x1b
      000022 5B 31 3B 33 34 6D 20  2647 	.ascii "[1;34m %x"
             25 78
      00002B 00                    2648 	.db 0x00
                                   2649 	.area CSEG    (CODE)
                                   2650 	.area CONST   (CODE)
      00002C                       2651 ___str_4:
      00002C 1B                    2652 	.db 0x1b
      00002D 5B 31 3B 33 34 6D 20  2653 	.ascii "[1;34m %d"
             25 64
      000036 00                    2654 	.db 0x00
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
      000037                       2657 ___str_5:
      000037 1B                    2658 	.db 0x1b
      000038 5B 31 3B 33 33 6D 7C  2659 	.ascii "[1;33m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00006F 0A                    2660 	.db 0x0a
      000070 0D                    2661 	.db 0x0d
      000071 00                    2662 	.db 0x00
                                   2663 	.area CSEG    (CODE)
                                   2664 	.area CONST   (CODE)
      000072                       2665 ___str_6:
      000072 1B                    2666 	.db 0x1b
      000073 5B 31 3B 33 33 6D 7C  2667 	.ascii "[1;33m|************ Processing [+] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2B 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0000AA 0A                    2668 	.db 0x0a
      0000AB 0D                    2669 	.db 0x0d
      0000AC 00                    2670 	.db 0x00
                                   2671 	.area CSEG    (CODE)
                                   2672 	.area CONST   (CODE)
      0000AD                       2673 ___str_7:
      0000AD 1B                    2674 	.db 0x1b
      0000AE 5B 31 3B 33 36 6D 7C  2675 	.ascii "[1;36m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0000E5 0A                    2676 	.db 0x0a
      0000E6 0D                    2677 	.db 0x0d
      0000E7 00                    2678 	.db 0x00
                                   2679 	.area CSEG    (CODE)
                                   2680 	.area CONST   (CODE)
      0000E8                       2681 ___str_8:
      0000E8 1B                    2682 	.db 0x1b
      0000E9 5B 31 3B 33 36 6D 7C  2683 	.ascii "[1;36m|********* Enter size for new bufer ************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 45 6E 74 65
             72 20 73 69 7A 65 20
             66 6F 72 20 6E 65 77
             20 62 75 66 65 72 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000120 0A                    2684 	.db 0x0a
      000121 0D                    2685 	.db 0x0d
      000122 00                    2686 	.db 0x00
                                   2687 	.area CSEG    (CODE)
                                   2688 	.area CONST   (CODE)
      000123                       2689 ___str_9:
      000123 1B                    2690 	.db 0x1b
      000124 5B 31 3B 33 31 6D 49  2691 	.ascii "[1;31mInvalid Input : The buffer size should be in the range"
             6E 76 61 6C 69 64 20
             49 6E 70 75 74 20 3A
             20 54 68 65 20 62 75
             66 66 65 72 20 73 69
             7A 65 20 73 68 6F 75
             6C 64 20 62 65 20 69
             6E 20 74 68 65 20 72
             61 6E 67 65
      000160 20 5B 33 30 2C 20 33  2692 	.ascii " [30, 300]"
             30 30 5D
      00016A 0A                    2693 	.db 0x0a
      00016B 0D                    2694 	.db 0x0d
      00016C 0A                    2695 	.db 0x0a
      00016D 0D                    2696 	.db 0x0d
      00016E 00                    2697 	.db 0x00
                                   2698 	.area CSEG    (CODE)
                                   2699 	.area CONST   (CODE)
      00016F                       2700 ___str_10:
      00016F 1B                    2701 	.db 0x1b
      000170 5B 31 3B 33 31 6D 49  2702 	.ascii "[1;31mInvalid input : Failed to allocate buffer"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 46 61 69 6C 65 64
             20 74 6F 20 61 6C 6C
             6F 63 61 74 65 20 62
             75 66 66 65 72
      00019F 0A                    2703 	.db 0x0a
      0001A0 0D                    2704 	.db 0x0d
      0001A1 0A                    2705 	.db 0x0a
      0001A2 0D                    2706 	.db 0x0d
      0001A3 00                    2707 	.db 0x00
                                   2708 	.area CSEG    (CODE)
                                   2709 	.area CONST   (CODE)
      0001A4                       2710 ___str_11:
      0001A4 1B                    2711 	.db 0x1b
      0001A5 5B 31 3B 30 6D 4E 65  2712 	.ascii "[1;0mNew buffer allocated successfully : Buffer[%d]"
             77 20 62 75 66 66 65
             72 20 61 6C 6C 6F 63
             61 74 65 64 20 73 75
             63 63 65 73 73 66 75
             6C 6C 79 20 3A 20 42
             75 66 66 65 72 5B 25
             64 5D
      0001D8 0A                    2713 	.db 0x0a
      0001D9 0D                    2714 	.db 0x0d
      0001DA 00                    2715 	.db 0x00
                                   2716 	.area CSEG    (CODE)
                                   2717 	.area CONST   (CODE)
      0001DB                       2718 ___str_12:
      0001DB 1B                    2719 	.db 0x1b
      0001DC 5B 31 3B 30 6D 54 6F  2720 	.ascii "[1;0mTotal Number of Buffers including buffer0 & buffer1 = ["
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 69 6E 63 6C 75 64
             69 6E 67 20 62 75 66
             66 65 72 30 20 26 20
             62 75 66 66 65 72 31
             20 3D 20 5B
      000218 25 64 5D              2721 	.ascii "%d]"
      00021B 0A                    2722 	.db 0x0a
      00021C 0D                    2723 	.db 0x0d
      00021D 00                    2724 	.db 0x00
                                   2725 	.area CSEG    (CODE)
                                   2726 	.area CONST   (CODE)
      00021E                       2727 ___str_13:
      00021E 1B                    2728 	.db 0x1b
      00021F 5B 31 3B 30 6D 54 6F  2729 	.ascii "[1;0mTotal Filled Buffers = [%d] "
             74 61 6C 20 46 69 6C
             6C 65 64 20 42 75 66
             66 65 72 73 20 3D 20
             5B 25 64 5D 20
      000240 0D                    2730 	.db 0x0d
      000241 0A                    2731 	.db 0x0a
      000242 54 6F 74 61 6C 20 45  2732 	.ascii "Total Empty Buffers = [%d] "
             6D 70 74 79 20 42 75
             66 66 65 72 73 20 3D
             20 5B 25 64 5D 20
      00025D 0A                    2733 	.db 0x0a
      00025E 0D                    2734 	.db 0x0d
      00025F 0A                    2735 	.db 0x0a
      000260 0D                    2736 	.db 0x0d
      000261 00                    2737 	.db 0x00
                                   2738 	.area CSEG    (CODE)
                                   2739 	.area CONST   (CODE)
      000262                       2740 ___str_14:
      000262 1B                    2741 	.db 0x1b
      000263 5B 31 3B 33 33 6D 7C  2742 	.ascii "[1;33m|************ Processing [-] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2D 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00029A 0A                    2743 	.db 0x0a
      00029B 0D                    2744 	.db 0x0d
      00029C 00                    2745 	.db 0x00
                                   2746 	.area CSEG    (CODE)
                                   2747 	.area CONST   (CODE)
      00029D                       2748 ___str_15:
      00029D 1B                    2749 	.db 0x1b
      00029E 5B 31 3B 33 36 6D 7C  2750 	.ascii "[1;36m|********* Enter buffer to be deleted **********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 45 6E 74 65
             72 20 62 75 66 66 65
             72 20 74 6F 20 62 65
             20 64 65 6C 65 74 65
             64 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0002D5 0A                    2751 	.db 0x0a
      0002D6 0D                    2752 	.db 0x0d
      0002D7 00                    2753 	.db 0x00
                                   2754 	.area CSEG    (CODE)
                                   2755 	.area CONST   (CODE)
      0002D8                       2756 ___str_16:
      0002D8 1B                    2757 	.db 0x1b
      0002D9 5B 31 3B 33 36 6D 7C  2758 	.ascii "[1;36m|********* Current No of buffers:[%d] ***********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 43 75 72 72
             65 6E 74 20 4E 6F 20
             6F 66 20 62 75 66 66
             65 72 73 3A 5B 25 64
             5D 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      000311 0A                    2759 	.db 0x0a
      000312 0D                    2760 	.db 0x0d
      000313 00                    2761 	.db 0x00
                                   2762 	.area CSEG    (CODE)
                                   2763 	.area CONST   (CODE)
      000314                       2764 ___str_17:
      000314 1B                    2765 	.db 0x1b
      000315 5B 31 3B 33 36 6D 7C  2766 	.ascii "[1;36m|********* Note : Index Starts with 0 **********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 4E 6F 74 65
             20 3A 20 49 6E 64 65
             78 20 53 74 61 72 74
             73 20 77 69 74 68 20
             30 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00034C 0A                    2767 	.db 0x0a
      00034D 0D                    2768 	.db 0x0d
      00034E 00                    2769 	.db 0x00
                                   2770 	.area CSEG    (CODE)
                                   2771 	.area CONST   (CODE)
      00034F                       2772 ___str_18:
      00034F 1B                    2773 	.db 0x1b
      000350 5B 31 3B 33 31 6D 49  2774 	.ascii "[1;31mInvalid input : invalid digits entered "
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 69 6E 76 61 6C 69
             64 20 64 69 67 69 74
             73 20 65 6E 74 65 72
             65 64 20
      00037D 0A                    2775 	.db 0x0a
      00037E 0D                    2776 	.db 0x0d
      00037F 0A                    2777 	.db 0x0a
      000380 0D                    2778 	.db 0x0d
      000381 00                    2779 	.db 0x00
                                   2780 	.area CSEG    (CODE)
                                   2781 	.area CONST   (CODE)
      000382                       2782 ___str_19:
      000382 1B                    2783 	.db 0x1b
      000383 5B 31 3B 33 31 6D 49  2784 	.ascii "[1;31mInvalid input : buffer number can't be 0"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 63 61 6E 27 74 20
             62 65 20 30
      0003B1 0A                    2785 	.db 0x0a
      0003B2 0D                    2786 	.db 0x0d
      0003B3 0A                    2787 	.db 0x0a
      0003B4 00                    2788 	.db 0x00
                                   2789 	.area CSEG    (CODE)
                                   2790 	.area CONST   (CODE)
      0003B5                       2791 ___str_20:
      0003B5 1B                    2792 	.db 0x1b
      0003B6 5B 31 3B 33 31 6D 49  2793 	.ascii "[1;31mInvalid input : buffer[%d] was already cleared earlier"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             5B 25 64 5D 20 77 61
             73 20 61 6C 72 65 61
             64 79 20 63 6C 65 61
             72 65 64 20 65 61 72
             6C 69 65 72
      0003F2 0A                    2794 	.db 0x0a
      0003F3 0D                    2795 	.db 0x0d
      0003F4 00                    2796 	.db 0x00
                                   2797 	.area CSEG    (CODE)
                                   2798 	.area CONST   (CODE)
      0003F5                       2799 ___str_21:
      0003F5 1B                    2800 	.db 0x1b
      0003F6 5B 31 3B 33 31 6D 49  2801 	.ascii "[1;31mInvalid input : buffer number doesn't exist"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 64 6F 65 73 6E 27
             74 20 65 78 69 73 74
      000427 0A                    2802 	.db 0x0a
      000428 0D                    2803 	.db 0x0d
      000429 00                    2804 	.db 0x00
                                   2805 	.area CSEG    (CODE)
                                   2806 	.area CONST   (CODE)
      00042A                       2807 ___str_22:
      00042A 1B                    2808 	.db 0x1b
      00042B 5B 31 3B 30 6D 42 75  2809 	.ascii "[1;0mBuffer [%d] requested to be deleted"
             66 66 65 72 20 5B 25
             64 5D 20 72 65 71 75
             65 73 74 65 64 20 74
             6F 20 62 65 20 64 65
             6C 65 74 65 64
      000453 0A                    2810 	.db 0x0a
      000454 0D                    2811 	.db 0x0d
      000455 00                    2812 	.db 0x00
                                   2813 	.area CSEG    (CODE)
                                   2814 	.area CONST   (CODE)
      000456                       2815 ___str_23:
      000456 50 65 72 66 6F 72 6D  2816 	.ascii "Performing buffer freeing operation"
             69 6E 67 20 62 75 66
             66 65 72 20 66 72 65
             65 69 6E 67 20 6F 70
             65 72 61 74 69 6F 6E
      000479 0D                    2817 	.db 0x0d
      00047A 0A                    2818 	.db 0x0a
      00047B 00                    2819 	.db 0x00
                                   2820 	.area CSEG    (CODE)
                                   2821 	.area CONST   (CODE)
      00047C                       2822 ___str_24:
      00047C 2A 2A 2A 42 75 66 66  2823 	.ascii "***Buffer [%d] is freed****"
             65 72 20 5B 25 64 5D
             20 69 73 20 66 72 65
             65 64 2A 2A 2A 2A
      000497 0A                    2824 	.db 0x0a
      000498 0D                    2825 	.db 0x0d
      000499 00                    2826 	.db 0x00
                                   2827 	.area CSEG    (CODE)
                                   2828 	.area CONST   (CODE)
      00049A                       2829 ___str_25:
      00049A 1B                    2830 	.db 0x1b
      00049B 5B 31 3B 30 6D 42 75  2831 	.ascii "[1;0mBuffer[%d] de-allocated successfully  "
             66 66 65 72 5B 25 64
             5D 20 64 65 2D 61 6C
             6C 6F 63 61 74 65 64
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             20
      0004C6 0A                    2832 	.db 0x0a
      0004C7 0D                    2833 	.db 0x0d
      0004C8 00                    2834 	.db 0x00
                                   2835 	.area CSEG    (CODE)
                                   2836 	.area CONST   (CODE)
      0004C9                       2837 ___str_26:
      0004C9 1B                    2838 	.db 0x1b
      0004CA 5B 31 3B 30 6D 54 6F  2839 	.ascii "[1;0mTotal Number of Buffers after deallocation = [%d]"
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 61 66 74 65 72 20
             64 65 61 6C 6C 6F 63
             61 74 69 6F 6E 20 3D
             20 5B 25 64 5D
      000500 0A                    2840 	.db 0x0a
      000501 0D                    2841 	.db 0x0d
      000502 0A                    2842 	.db 0x0a
      000503 0D                    2843 	.db 0x0d
      000504 00                    2844 	.db 0x00
                                   2845 	.area CSEG    (CODE)
                                   2846 	.area CONST   (CODE)
      000505                       2847 ___str_27:
      000505 1B                    2848 	.db 0x1b
      000506 5B 31 3B 30 6D 54 6F  2849 	.ascii "[1;0mTotal Filled Buffers = [%d] "
             74 61 6C 20 46 69 6C
             6C 65 64 20 42 75 66
             66 65 72 73 20 3D 20
             5B 25 64 5D 20
      000527 0D                    2850 	.db 0x0d
      000528 0A                    2851 	.db 0x0a
      000529 54 6F 74 61 6C 20 45  2852 	.ascii "Total Empty Buffers  = [%d] "
             6D 70 74 79 20 42 75
             66 66 65 72 73 20 20
             3D 20 5B 25 64 5D 20
      000545 0A                    2853 	.db 0x0a
      000546 0D                    2854 	.db 0x0d
      000547 0A                    2855 	.db 0x0a
      000548 0D                    2856 	.db 0x0d
      000549 00                    2857 	.db 0x00
                                   2858 	.area CSEG    (CODE)
                                   2859 	.area CONST   (CODE)
      00054A                       2860 ___str_28:
      00054A 1B                    2861 	.db 0x1b
      00054B 5B 31 3B 33 33 6D 7C  2862 	.ascii "[1;33m|************ Processing [@] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 40 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000582 0A                    2863 	.db 0x0a
      000583 0D                    2864 	.db 0x0d
      000584 00                    2865 	.db 0x00
                                   2866 	.area CSEG    (CODE)
                                   2867 	.area CONST   (CODE)
      000585                       2868 ___str_29:
      000585 1B                    2869 	.db 0x1b
      000586 5B 31 3B 30 6D 42 75  2870 	.ascii "[1;0mBuffer[%d] freed"
             66 66 65 72 5B 25 64
             5D 20 66 72 65 65 64
      00059B 0A                    2871 	.db 0x0a
      00059C 0D                    2872 	.db 0x0d
      00059D 00                    2873 	.db 0x00
                                   2874 	.area CSEG    (CODE)
                                   2875 	.area CONST   (CODE)
      00059E                       2876 ___str_30:
      00059E 1B                    2877 	.db 0x1b
      00059F 5B 31 3B 30 6D 42 75  2878 	.ascii "[1;0mBuffer[%d] was already NULL"
             66 66 65 72 5B 25 64
             5D 20 77 61 73 20 61
             6C 72 65 61 64 79 20
             4E 55 4C 4C
      0005BF 0A                    2879 	.db 0x0a
      0005C0 0D                    2880 	.db 0x0d
      0005C1 00                    2881 	.db 0x00
                                   2882 	.area CSEG    (CODE)
                                   2883 	.area CONST   (CODE)
      0005C2                       2884 ___str_31:
      0005C2 1B                    2885 	.db 0x1b
      0005C3 5B 31 3B 33 33 6D     2886 	.ascii "[1;33m"
      0005C9 0D                    2887 	.db 0x0d
      0005CA 0A                    2888 	.db 0x0a
      0005CB 7C 2A 2A 2A 2A 2A 2A  2889 	.ascii "|************ Processing [=] *******************|"
             2A 2A 2A 2A 2A 2A 20
             50 72 6F 63 65 73 73
             69 6E 67 20 5B 3D 5D
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      0005FC 0A                    2890 	.db 0x0a
      0005FD 0D                    2891 	.db 0x0d
      0005FE 00                    2892 	.db 0x00
                                   2893 	.area CSEG    (CODE)
                                   2894 	.area CONST   (CODE)
      0005FF                       2895 ___str_32:
      0005FF 1B                    2896 	.db 0x1b
      000600 5B 31 3B 33 33 6D 7C  2897 	.ascii "[1;33m|************ Processing [?] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 3F 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000637 0A                    2898 	.db 0x0a
      000638 0D                    2899 	.db 0x0d
      000639 00                    2900 	.db 0x00
                                   2901 	.area CSEG    (CODE)
                                   2902 	.area CONST   (CODE)
      00063A                       2903 ___str_33:
      00063A 20                    2904 	.ascii " "
      00063B 1B                    2905 	.db 0x1b
      00063C 5B 31 3B 33 34 6D     2906 	.ascii "[1;34m"
      000642 0D                    2907 	.db 0x0d
      000643 0A                    2908 	.db 0x0a
      000644 7C 2A 2A 2A 2A 2A 2A  2909 	.ascii "|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      000675 0A                    2910 	.db 0x0a
      000676 0D                    2911 	.db 0x0d
      000677 00                    2912 	.db 0x00
                                   2913 	.area CSEG    (CODE)
                                   2914 	.area CONST   (CODE)
      000678                       2915 ___str_34:
      000678 20                    2916 	.ascii " "
      000679 1B                    2917 	.db 0x1b
      00067A 5B 31 3B 33 34 6D 7C  2918 	.ascii "[1;34m|*************** HEAP REPORT *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 20 48 45 41 50 20
             52 45 50 4F 52 54 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0006B1 0A                    2919 	.db 0x0a
      0006B2 0D                    2920 	.db 0x0d
      0006B3 00                    2921 	.db 0x00
                                   2922 	.area CSEG    (CODE)
                                   2923 	.area CONST   (CODE)
      0006B4                       2924 ___str_35:
      0006B4 20                    2925 	.ascii " "
      0006B5 1B                    2926 	.db 0x1b
      0006B6 5B 31 3B 33 34 6D 7C  2927 	.ascii "[1;34m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0006ED 0A                    2928 	.db 0x0a
      0006EE 0D                    2929 	.db 0x0d
      0006EF 00                    2930 	.db 0x00
                                   2931 	.area CSEG    (CODE)
                                   2932 	.area CONST   (CODE)
      0006F0                       2933 ___str_36:
      0006F0 1B                    2934 	.db 0x1b
      0006F1 5B 31 3B 33 31 6D     2935 	.ascii "[1;31m"
      0006F7 0A                    2936 	.db 0x0a
      0006F8 0D                    2937 	.db 0x0d
      0006F9 42 75 66 66 65 72 20  2938 	.ascii "Buffer [%d] already cleared!!"
             5B 25 64 5D 20 61 6C
             72 65 61 64 79 20 63
             6C 65 61 72 65 64 21
             21
      000716 0A                    2939 	.db 0x0a
      000717 0D                    2940 	.db 0x0d
      000718 00                    2941 	.db 0x00
                                   2942 	.area CSEG    (CODE)
                                   2943 	.area CONST   (CODE)
      000719                       2944 ___str_37:
      000719 1B                    2945 	.db 0x1b
      00071A 5B 31 3B 33 36 6D     2946 	.ascii "[1;36m"
      000720 0A                    2947 	.db 0x0a
      000721 0D                    2948 	.db 0x0d
      000722 2A 2A 42 75 66 66 65  2949 	.ascii "**Buffer [%d]**"
             72 20 5B 25 64 5D 2A
             2A
      000731 0A                    2950 	.db 0x0a
      000732 0D                    2951 	.db 0x0d
      000733 00                    2952 	.db 0x00
                                   2953 	.area CSEG    (CODE)
                                   2954 	.area CONST   (CODE)
      000734                       2955 ___str_38:
      000734 1B                    2956 	.db 0x1b
      000735 5B 31 3B 30 6D        2957 	.ascii "[1;0m"
      00073A 0A                    2958 	.db 0x0a
      00073B 0D                    2959 	.db 0x0d
      00073C 42 75 66 66 65 72 20  2960 	.ascii "Buffer [%d] : Start Address = [%p] "
             5B 25 64 5D 20 3A 20
             53 74 61 72 74 20 41
             64 64 72 65 73 73 20
             3D 20 5B 25 70 5D 20
      00075F 0A                    2961 	.db 0x0a
      000760 0D                    2962 	.db 0x0d
      000761 00                    2963 	.db 0x00
                                   2964 	.area CSEG    (CODE)
                                   2965 	.area CONST   (CODE)
      000762                       2966 ___str_39:
      000762 1B                    2967 	.db 0x1b
      000763 5B 31 3B 30 6D        2968 	.ascii "[1;0m"
      000768 0A                    2969 	.db 0x0a
      000769 0D                    2970 	.db 0x0d
      00076A 42 75 66 66 65 72 20  2971 	.ascii "Buffer [%d] : End Address   = [%p] "
             5B 25 64 5D 20 3A 20
             45 6E 64 20 41 64 64
             72 65 73 73 20 20 20
             3D 20 5B 25 70 5D 20
      00078D 0A                    2972 	.db 0x0a
      00078E 0D                    2973 	.db 0x0d
      00078F 00                    2974 	.db 0x00
                                   2975 	.area CSEG    (CODE)
                                   2976 	.area CONST   (CODE)
      000790                       2977 ___str_40:
      000790 1B                    2978 	.db 0x1b
      000791 5B 31 3B 30 6D        2979 	.ascii "[1;0m"
      000796 0A                    2980 	.db 0x0a
      000797 0D                    2981 	.db 0x0d
      000798 42 75 66 66 65 72 20  2982 	.ascii "Buffer [%d] : Total Size    = [%d] "
             5B 25 64 5D 20 3A 20
             54 6F 74 61 6C 20 53
             69 7A 65 20 20 20 20
             3D 20 5B 25 64 5D 20
      0007BB 0A                    2983 	.db 0x0a
      0007BC 0D                    2984 	.db 0x0d
      0007BD 00                    2985 	.db 0x00
                                   2986 	.area CSEG    (CODE)
                                   2987 	.area CONST   (CODE)
      0007BE                       2988 ___str_41:
      0007BE 1B                    2989 	.db 0x1b
      0007BF 5B 31 3B 30 6D        2990 	.ascii "[1;0m"
      0007C4 0A                    2991 	.db 0x0a
      0007C5 0D                    2992 	.db 0x0d
      0007C6 42 75 66 66 65 72 5B  2993 	.ascii "Buffer[%d] : Number of storage characters since last ?= [%d]"
             25 64 5D 20 3A 20 4E
             75 6D 62 65 72 20 6F
             66 20 73 74 6F 72 61
             67 65 20 63 68 61 72
             61 63 74 65 72 73 20
             73 69 6E 63 65 20 6C
             61 73 74 20 3F 3D 20
             5B 25 64 5D
      000802 0A                    2994 	.db 0x0a
      000803 0D                    2995 	.db 0x0d
      000804 00                    2996 	.db 0x00
                                   2997 	.area CSEG    (CODE)
                                   2998 	.area CONST   (CODE)
      000805                       2999 ___str_42:
      000805 0D                    3000 	.db 0x0d
      000806 0A                    3001 	.db 0x0a
      000807 1B                    3002 	.db 0x1b
      000808 5B 31 3B 33 34 6D 7C  3003 	.ascii "[1;34m|************ REPORT ENDED  ********************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 52
             45 50 4F 52 54 20 45
             4E 44 45 44 20 20 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00083F 0A                    3004 	.db 0x0a
      000840 0D                    3005 	.db 0x0d
      000841 0A                    3006 	.db 0x0a
      000842 0D                    3007 	.db 0x0d
      000843 0A                    3008 	.db 0x0a
      000844 0D                    3009 	.db 0x0d
      000845 00                    3010 	.db 0x00
                                   3011 	.area CSEG    (CODE)
                                   3012 	.area XINIT   (CODE)
      000000                       3013 __xinit__size:
      000000 30                    3014 	.db #0x30	; 48	'0'
      000001 30                    3015 	.db #0x30	; 48	'0'
      000002 30                    3016 	.db #0x30	; 48	'0'
      000003 00                    3017 	.db #0x00	; 0
      000004                       3018 __xinit__buffer_to_delete:
      000004 00 00                 3019 	.byte #0x00, #0x00	;  0
      000006                       3020 __xinit__buff_not_cleared:
      000006 00 00                 3021 	.byte #0x00, #0x00	;  0
      000008 00                    3022 	.db 0x00
      000009 00                    3023 	.db 0x00
      00000A 00                    3024 	.db 0x00
      00000B 00                    3025 	.db 0x00
      00000C 00                    3026 	.db 0x00
      00000D 00                    3027 	.db 0x00
      00000E 00                    3028 	.db 0x00
      00000F 00                    3029 	.db 0x00
      000010 00                    3030 	.db 0x00
      000011 00                    3031 	.db 0x00
      000012 00                    3032 	.db 0x00
      000013 00                    3033 	.db 0x00
      000014 00                    3034 	.db 0x00
      000015 00                    3035 	.db 0x00
      000016 00                    3036 	.db 0x00
      000017 00                    3037 	.db 0x00
      000018 00                    3038 	.db 0x00
      000019 00                    3039 	.db 0x00
      00001A 00                    3040 	.db 0x00
      00001B 00                    3041 	.db 0x00
      00001C 00                    3042 	.db 0x00
      00001D 00                    3043 	.db 0x00
      00001E 00                    3044 	.db 0x00
      00001F 00                    3045 	.db 0x00
      000020 00                    3046 	.db 0x00
      000021 00                    3047 	.db 0x00
      000022 00                    3048 	.db 0x00
      000023 00                    3049 	.db 0x00
      000024 00                    3050 	.db 0x00
      000025 00                    3051 	.db 0x00
      000026 00                    3052 	.db 0x00
      000027 00                    3053 	.db 0x00
      000028 00                    3054 	.db 0x00
      000029 00                    3055 	.db 0x00
      00002A 00                    3056 	.db 0x00
      00002B 00                    3057 	.db 0x00
      00002C 00                    3058 	.db 0x00
      00002D 00                    3059 	.db 0x00
      00002E 00                    3060 	.db 0x00
      00002F 00                    3061 	.db 0x00
      000030 00                    3062 	.db 0x00
      000031 00                    3063 	.db 0x00
      000032 00                    3064 	.db 0x00
      000033 00                    3065 	.db 0x00
      000034 00                    3066 	.db 0x00
      000035 00                    3067 	.db 0x00
      000036 00                    3068 	.db 0x00
      000037 00                    3069 	.db 0x00
      000038 00                    3070 	.db 0x00
      000039 00                    3071 	.db 0x00
      00003A 00                    3072 	.db 0x00
      00003B 00                    3073 	.db 0x00
      00003C 00                    3074 	.db 0x00
      00003D 00                    3075 	.db 0x00
      00003E 00                    3076 	.db 0x00
      00003F 00                    3077 	.db 0x00
      000040 00                    3078 	.db 0x00
      000041 00                    3079 	.db 0x00
      000042 00                    3080 	.db 0x00
      000043 00                    3081 	.db 0x00
      000044 00                    3082 	.db 0x00
      000045 00                    3083 	.db 0x00
      000046 00                    3084 	.db 0x00
      000047 00                    3085 	.db 0x00
      000048 00                    3086 	.db 0x00
      000049 00                    3087 	.db 0x00
      00004A 00                    3088 	.db 0x00
      00004B 00                    3089 	.db 0x00
      00004C 00                    3090 	.db 0x00
      00004D 00                    3091 	.db 0x00
      00004E 00                    3092 	.db 0x00
      00004F 00                    3093 	.db 0x00
      000050 00                    3094 	.db 0x00
      000051 00                    3095 	.db 0x00
      000052 00                    3096 	.db 0x00
      000053 00                    3097 	.db 0x00
      000054 00                    3098 	.db 0x00
      000055 00                    3099 	.db 0x00
      000056 00                    3100 	.db 0x00
      000057 00                    3101 	.db 0x00
      000058 00                    3102 	.db 0x00
      000059 00                    3103 	.db 0x00
      00005A 00                    3104 	.db 0x00
      00005B 00                    3105 	.db 0x00
      00005C 00                    3106 	.db 0x00
      00005D 00                    3107 	.db 0x00
      00005E 00                    3108 	.db 0x00
      00005F 00                    3109 	.db 0x00
      000060 00                    3110 	.db 0x00
      000061 00                    3111 	.db 0x00
      000062 00                    3112 	.db 0x00
      000063 00                    3113 	.db 0x00
      000064 00                    3114 	.db 0x00
      000065 00                    3115 	.db 0x00
      000066 00                    3116 	.db 0x00
      000067 00                    3117 	.db 0x00
      000068 00                    3118 	.db 0x00
      000069 00                    3119 	.db 0x00
      00006A 00                    3120 	.db 0x00
      00006B 00                    3121 	.db 0x00
      00006C 00                    3122 	.db 0x00
      00006D 00                    3123 	.db 0x00
      00006E 00                    3124 	.db 0x00
      00006F 00                    3125 	.db 0x00
      000070 00                    3126 	.db 0x00
      000071 00                    3127 	.db 0x00
      000072 00                    3128 	.db 0x00
      000073 00                    3129 	.db 0x00
      000074 00                    3130 	.db 0x00
      000075 00                    3131 	.db 0x00
      000076 00                    3132 	.db 0x00
      000077 00                    3133 	.db 0x00
      000078 00                    3134 	.db 0x00
      000079 00                    3135 	.db 0x00
      00007A 00                    3136 	.db 0x00
      00007B 00                    3137 	.db 0x00
      00007C 00                    3138 	.db 0x00
      00007D 00                    3139 	.db 0x00
      00007E 00                    3140 	.db 0x00
      00007F 00                    3141 	.db 0x00
      000080 00                    3142 	.db 0x00
      000081 00                    3143 	.db 0x00
      000082 00                    3144 	.db 0x00
      000083 00                    3145 	.db 0x00
      000084 00                    3146 	.db 0x00
      000085 00                    3147 	.db 0x00
      000086 00                    3148 	.db 0x00
      000087 00                    3149 	.db 0x00
      000088 00                    3150 	.db 0x00
      000089 00                    3151 	.db 0x00
      00008A 00                    3152 	.db 0x00
      00008B 00                    3153 	.db 0x00
      00008C 00                    3154 	.db 0x00
      00008D 00                    3155 	.db 0x00
      00008E 00                    3156 	.db 0x00
      00008F 00                    3157 	.db 0x00
      000090 00                    3158 	.db 0x00
      000091 00                    3159 	.db 0x00
      000092 00                    3160 	.db 0x00
      000093 00                    3161 	.db 0x00
      000094 00                    3162 	.db 0x00
      000095 00                    3163 	.db 0x00
      000096 00                    3164 	.db 0x00
      000097 00                    3165 	.db 0x00
      000098 00                    3166 	.db 0x00
      000099 00                    3167 	.db 0x00
      00009A 00                    3168 	.db 0x00
      00009B 00                    3169 	.db 0x00
      00009C 00                    3170 	.db 0x00
      00009D 00                    3171 	.db 0x00
      00009E 00                    3172 	.db 0x00
      00009F 00                    3173 	.db 0x00
      0000A0 00                    3174 	.db 0x00
      0000A1 00                    3175 	.db 0x00
      0000A2 00                    3176 	.db 0x00
      0000A3 00                    3177 	.db 0x00
      0000A4 00                    3178 	.db 0x00
      0000A5 00                    3179 	.db 0x00
      0000A6 00                    3180 	.db 0x00
      0000A7 00                    3181 	.db 0x00
      0000A8 00                    3182 	.db 0x00
      0000A9 00                    3183 	.db 0x00
      0000AA 00                    3184 	.db 0x00
      0000AB 00                    3185 	.db 0x00
      0000AC 00                    3186 	.db 0x00
      0000AD 00                    3187 	.db 0x00
      0000AE 00                    3188 	.db 0x00
      0000AF 00                    3189 	.db 0x00
      0000B0 00                    3190 	.db 0x00
      0000B1 00                    3191 	.db 0x00
      0000B2 00                    3192 	.db 0x00
      0000B3 00                    3193 	.db 0x00
      0000B4 00                    3194 	.db 0x00
      0000B5 00                    3195 	.db 0x00
      0000B6 00                    3196 	.db 0x00
      0000B7 00                    3197 	.db 0x00
      0000B8 00                    3198 	.db 0x00
      0000B9 00                    3199 	.db 0x00
      0000BA 00                    3200 	.db 0x00
      0000BB 00                    3201 	.db 0x00
      0000BC 00                    3202 	.db 0x00
      0000BD 00                    3203 	.db 0x00
      0000BE 00                    3204 	.db 0x00
      0000BF 00                    3205 	.db 0x00
      0000C0 00                    3206 	.db 0x00
      0000C1 00                    3207 	.db 0x00
      0000C2 00                    3208 	.db 0x00
      0000C3 00                    3209 	.db 0x00
      0000C4 00                    3210 	.db 0x00
      0000C5 00                    3211 	.db 0x00
      0000C6 00                    3212 	.db 0x00
      0000C7 00                    3213 	.db 0x00
      0000C8 00                    3214 	.db 0x00
      0000C9 00                    3215 	.db 0x00
      0000CA 00                    3216 	.db 0x00
      0000CB 00                    3217 	.db 0x00
      0000CC 00                    3218 	.db 0x00
      0000CD 00                    3219 	.db 0x00
      0000CE                       3220 __xinit__buffer0and1_size:
      0000CE 00 00                 3221 	.byte #0x00, #0x00	;  0
                                   3222 	.area CABS    (ABS,CODE)
