                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module character
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets_
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _atoi
                                     17 	.globl _printf_tiny
                                     18 	.globl _printf
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _TXD0
                                     95 	.globl _RXD0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl _B
                                    154 	.globl _ACC
                                    155 	.globl _PSW
                                    156 	.globl _IP
                                    157 	.globl _P3
                                    158 	.globl _IE
                                    159 	.globl _P2
                                    160 	.globl _SBUF
                                    161 	.globl _SCON
                                    162 	.globl _P1
                                    163 	.globl _TH1
                                    164 	.globl _TH0
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TMOD
                                    168 	.globl _TCON
                                    169 	.globl _PCON
                                    170 	.globl _DPH
                                    171 	.globl _DPL
                                    172 	.globl _SP
                                    173 	.globl _P0
                                    174 	.globl _SBUF0
                                    175 	.globl _DP0L
                                    176 	.globl _DP0H
                                    177 	.globl _EECON
                                    178 	.globl _KBF
                                    179 	.globl _KBE
                                    180 	.globl _KBLS
                                    181 	.globl _BRL
                                    182 	.globl _BDRCON
                                    183 	.globl _T2MOD
                                    184 	.globl _SPDAT
                                    185 	.globl _SPSTA
                                    186 	.globl _SPCON
                                    187 	.globl _SADEN
                                    188 	.globl _SADDR
                                    189 	.globl _WDTPRG
                                    190 	.globl _WDTRST
                                    191 	.globl _P5
                                    192 	.globl _P4
                                    193 	.globl _IPH1
                                    194 	.globl _IPL1
                                    195 	.globl _IPH0
                                    196 	.globl _IPL0
                                    197 	.globl _IEN1
                                    198 	.globl _IEN0
                                    199 	.globl _CMOD
                                    200 	.globl _CL
                                    201 	.globl _CH
                                    202 	.globl _CCON
                                    203 	.globl _CCAPM4
                                    204 	.globl _CCAPM3
                                    205 	.globl _CCAPM2
                                    206 	.globl _CCAPM1
                                    207 	.globl _CCAPM0
                                    208 	.globl _CCAP4L
                                    209 	.globl _CCAP3L
                                    210 	.globl _CCAP2L
                                    211 	.globl _CCAP1L
                                    212 	.globl _CCAP0L
                                    213 	.globl _CCAP4H
                                    214 	.globl _CCAP3H
                                    215 	.globl _CCAP2H
                                    216 	.globl _CCAP1H
                                    217 	.globl _CCAP0H
                                    218 	.globl _CKCON1
                                    219 	.globl _CKCON0
                                    220 	.globl _CKRL
                                    221 	.globl _AUXR1
                                    222 	.globl _AUXR
                                    223 	.globl _TH2
                                    224 	.globl _TL2
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _T2CON
                                    228 	.globl _buffer0and1_size
                                    229 	.globl _buff_not_cleared
                                    230 	.globl _buffer_to_delete
                                    231 	.globl _size
                                    232 	.globl _command_processing_PARM_8
                                    233 	.globl _command_processing_PARM_7
                                    234 	.globl _command_processing_PARM_6
                                    235 	.globl _command_processing_PARM_5
                                    236 	.globl _command_processing_PARM_4
                                    237 	.globl _command_processing_PARM_3
                                    238 	.globl _command_processing_PARM_2
                                    239 	.globl _length
                                    240 	.globl _empty_buffer0
                                    241 	.globl _buffer0_hexdump
                                    242 	.globl _command_processing
                                    243 ;--------------------------------------------------------
                                    244 ; special function registers
                                    245 ;--------------------------------------------------------
                                    246 	.area RSEG    (ABS,DATA)
      000000                        247 	.org 0x0000
                           0000C8   248 _T2CON	=	0x00c8
                           0000CA   249 _RCAP2L	=	0x00ca
                           0000CB   250 _RCAP2H	=	0x00cb
                           0000CC   251 _TL2	=	0x00cc
                           0000CD   252 _TH2	=	0x00cd
                           00008E   253 _AUXR	=	0x008e
                           0000A2   254 _AUXR1	=	0x00a2
                           000097   255 _CKRL	=	0x0097
                           00008F   256 _CKCON0	=	0x008f
                           0000AF   257 _CKCON1	=	0x00af
                           0000FA   258 _CCAP0H	=	0x00fa
                           0000FB   259 _CCAP1H	=	0x00fb
                           0000FC   260 _CCAP2H	=	0x00fc
                           0000FD   261 _CCAP3H	=	0x00fd
                           0000FE   262 _CCAP4H	=	0x00fe
                           0000EA   263 _CCAP0L	=	0x00ea
                           0000EB   264 _CCAP1L	=	0x00eb
                           0000EC   265 _CCAP2L	=	0x00ec
                           0000ED   266 _CCAP3L	=	0x00ed
                           0000EE   267 _CCAP4L	=	0x00ee
                           0000DA   268 _CCAPM0	=	0x00da
                           0000DB   269 _CCAPM1	=	0x00db
                           0000DC   270 _CCAPM2	=	0x00dc
                           0000DD   271 _CCAPM3	=	0x00dd
                           0000DE   272 _CCAPM4	=	0x00de
                           0000D8   273 _CCON	=	0x00d8
                           0000F9   274 _CH	=	0x00f9
                           0000E9   275 _CL	=	0x00e9
                           0000D9   276 _CMOD	=	0x00d9
                           0000A8   277 _IEN0	=	0x00a8
                           0000B1   278 _IEN1	=	0x00b1
                           0000B8   279 _IPL0	=	0x00b8
                           0000B7   280 _IPH0	=	0x00b7
                           0000B2   281 _IPL1	=	0x00b2
                           0000B3   282 _IPH1	=	0x00b3
                           0000C0   283 _P4	=	0x00c0
                           0000E8   284 _P5	=	0x00e8
                           0000A6   285 _WDTRST	=	0x00a6
                           0000A7   286 _WDTPRG	=	0x00a7
                           0000A9   287 _SADDR	=	0x00a9
                           0000B9   288 _SADEN	=	0x00b9
                           0000C3   289 _SPCON	=	0x00c3
                           0000C4   290 _SPSTA	=	0x00c4
                           0000C5   291 _SPDAT	=	0x00c5
                           0000C9   292 _T2MOD	=	0x00c9
                           00009B   293 _BDRCON	=	0x009b
                           00009A   294 _BRL	=	0x009a
                           00009C   295 _KBLS	=	0x009c
                           00009D   296 _KBE	=	0x009d
                           00009E   297 _KBF	=	0x009e
                           0000D2   298 _EECON	=	0x00d2
                           000083   299 _DP0H	=	0x0083
                           000082   300 _DP0L	=	0x0082
                           000099   301 _SBUF0	=	0x0099
                           000080   302 _P0	=	0x0080
                           000081   303 _SP	=	0x0081
                           000082   304 _DPL	=	0x0082
                           000083   305 _DPH	=	0x0083
                           000087   306 _PCON	=	0x0087
                           000088   307 _TCON	=	0x0088
                           000089   308 _TMOD	=	0x0089
                           00008A   309 _TL0	=	0x008a
                           00008B   310 _TL1	=	0x008b
                           00008C   311 _TH0	=	0x008c
                           00008D   312 _TH1	=	0x008d
                           000090   313 _P1	=	0x0090
                           000098   314 _SCON	=	0x0098
                           000099   315 _SBUF	=	0x0099
                           0000A0   316 _P2	=	0x00a0
                           0000A8   317 _IE	=	0x00a8
                           0000B0   318 _P3	=	0x00b0
                           0000B8   319 _IP	=	0x00b8
                           0000D0   320 _PSW	=	0x00d0
                           0000E0   321 _ACC	=	0x00e0
                           0000F0   322 _B	=	0x00f0
                                    323 ;--------------------------------------------------------
                                    324 ; special function bits
                                    325 ;--------------------------------------------------------
                                    326 	.area RSEG    (ABS,DATA)
      000000                        327 	.org 0x0000
                           0000AD   328 _ET2	=	0x00ad
                           0000BD   329 _PT2	=	0x00bd
                           0000C8   330 _T2CON_0	=	0x00c8
                           0000C9   331 _T2CON_1	=	0x00c9
                           0000CA   332 _T2CON_2	=	0x00ca
                           0000CB   333 _T2CON_3	=	0x00cb
                           0000CC   334 _T2CON_4	=	0x00cc
                           0000CD   335 _T2CON_5	=	0x00cd
                           0000CE   336 _T2CON_6	=	0x00ce
                           0000CF   337 _T2CON_7	=	0x00cf
                           0000C8   338 _CP_RL2	=	0x00c8
                           0000C9   339 _C_T2	=	0x00c9
                           0000CA   340 _TR2	=	0x00ca
                           0000CB   341 _EXEN2	=	0x00cb
                           0000CC   342 _TCLK	=	0x00cc
                           0000CD   343 _RCLK	=	0x00cd
                           0000CE   344 _EXF2	=	0x00ce
                           0000CF   345 _TF2	=	0x00cf
                           0000DF   346 _CF	=	0x00df
                           0000DE   347 _CR	=	0x00de
                           0000DC   348 _CCF4	=	0x00dc
                           0000DB   349 _CCF3	=	0x00db
                           0000DA   350 _CCF2	=	0x00da
                           0000D9   351 _CCF1	=	0x00d9
                           0000D8   352 _CCF0	=	0x00d8
                           0000AE   353 _EC	=	0x00ae
                           0000BE   354 _PPCL	=	0x00be
                           0000BD   355 _PT2L	=	0x00bd
                           0000BC   356 _PSL	=	0x00bc
                           0000BB   357 _PT1L	=	0x00bb
                           0000BA   358 _PX1L	=	0x00ba
                           0000B9   359 _PT0L	=	0x00b9
                           0000B8   360 _PX0L	=	0x00b8
                           0000C0   361 _P4_0	=	0x00c0
                           0000C1   362 _P4_1	=	0x00c1
                           0000C2   363 _P4_2	=	0x00c2
                           0000C3   364 _P4_3	=	0x00c3
                           0000C4   365 _P4_4	=	0x00c4
                           0000C5   366 _P4_5	=	0x00c5
                           0000C6   367 _P4_6	=	0x00c6
                           0000C7   368 _P4_7	=	0x00c7
                           0000E8   369 _P5_0	=	0x00e8
                           0000E9   370 _P5_1	=	0x00e9
                           0000EA   371 _P5_2	=	0x00ea
                           0000EB   372 _P5_3	=	0x00eb
                           0000EC   373 _P5_4	=	0x00ec
                           0000ED   374 _P5_5	=	0x00ed
                           0000EE   375 _P5_6	=	0x00ee
                           0000EF   376 _P5_7	=	0x00ef
                           0000F0   377 _BREG_F0	=	0x00f0
                           0000F1   378 _BREG_F1	=	0x00f1
                           0000F2   379 _BREG_F2	=	0x00f2
                           0000F3   380 _BREG_F3	=	0x00f3
                           0000F4   381 _BREG_F4	=	0x00f4
                           0000F5   382 _BREG_F5	=	0x00f5
                           0000F6   383 _BREG_F6	=	0x00f6
                           0000F7   384 _BREG_F7	=	0x00f7
                           0000B0   385 _RXD0	=	0x00b0
                           0000B1   386 _TXD0	=	0x00b1
                           000080   387 _P0_0	=	0x0080
                           000081   388 _P0_1	=	0x0081
                           000082   389 _P0_2	=	0x0082
                           000083   390 _P0_3	=	0x0083
                           000084   391 _P0_4	=	0x0084
                           000085   392 _P0_5	=	0x0085
                           000086   393 _P0_6	=	0x0086
                           000087   394 _P0_7	=	0x0087
                           000088   395 _IT0	=	0x0088
                           000089   396 _IE0	=	0x0089
                           00008A   397 _IT1	=	0x008a
                           00008B   398 _IE1	=	0x008b
                           00008C   399 _TR0	=	0x008c
                           00008D   400 _TF0	=	0x008d
                           00008E   401 _TR1	=	0x008e
                           00008F   402 _TF1	=	0x008f
                           000090   403 _P1_0	=	0x0090
                           000091   404 _P1_1	=	0x0091
                           000092   405 _P1_2	=	0x0092
                           000093   406 _P1_3	=	0x0093
                           000094   407 _P1_4	=	0x0094
                           000095   408 _P1_5	=	0x0095
                           000096   409 _P1_6	=	0x0096
                           000097   410 _P1_7	=	0x0097
                           000098   411 _RI	=	0x0098
                           000099   412 _TI	=	0x0099
                           00009A   413 _RB8	=	0x009a
                           00009B   414 _TB8	=	0x009b
                           00009C   415 _REN	=	0x009c
                           00009D   416 _SM2	=	0x009d
                           00009E   417 _SM1	=	0x009e
                           00009F   418 _SM0	=	0x009f
                           0000A0   419 _P2_0	=	0x00a0
                           0000A1   420 _P2_1	=	0x00a1
                           0000A2   421 _P2_2	=	0x00a2
                           0000A3   422 _P2_3	=	0x00a3
                           0000A4   423 _P2_4	=	0x00a4
                           0000A5   424 _P2_5	=	0x00a5
                           0000A6   425 _P2_6	=	0x00a6
                           0000A7   426 _P2_7	=	0x00a7
                           0000A8   427 _EX0	=	0x00a8
                           0000A9   428 _ET0	=	0x00a9
                           0000AA   429 _EX1	=	0x00aa
                           0000AB   430 _ET1	=	0x00ab
                           0000AC   431 _ES	=	0x00ac
                           0000AF   432 _EA	=	0x00af
                           0000B0   433 _P3_0	=	0x00b0
                           0000B1   434 _P3_1	=	0x00b1
                           0000B2   435 _P3_2	=	0x00b2
                           0000B3   436 _P3_3	=	0x00b3
                           0000B4   437 _P3_4	=	0x00b4
                           0000B5   438 _P3_5	=	0x00b5
                           0000B6   439 _P3_6	=	0x00b6
                           0000B7   440 _P3_7	=	0x00b7
                           0000B0   441 _RXD	=	0x00b0
                           0000B1   442 _TXD	=	0x00b1
                           0000B2   443 _INT0	=	0x00b2
                           0000B3   444 _INT1	=	0x00b3
                           0000B4   445 _T0	=	0x00b4
                           0000B5   446 _T1	=	0x00b5
                           0000B6   447 _WR	=	0x00b6
                           0000B7   448 _RD	=	0x00b7
                           0000B8   449 _PX0	=	0x00b8
                           0000B9   450 _PT0	=	0x00b9
                           0000BA   451 _PX1	=	0x00ba
                           0000BB   452 _PT1	=	0x00bb
                           0000BC   453 _PS	=	0x00bc
                           0000D0   454 _P	=	0x00d0
                           0000D1   455 _F1	=	0x00d1
                           0000D2   456 _OV	=	0x00d2
                           0000D3   457 _RS0	=	0x00d3
                           0000D4   458 _RS1	=	0x00d4
                           0000D5   459 _F0	=	0x00d5
                           0000D6   460 _AC	=	0x00d6
                           0000D7   461 _CY	=	0x00d7
                                    462 ;--------------------------------------------------------
                                    463 ; overlayable register banks
                                    464 ;--------------------------------------------------------
                                    465 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        466 	.ds 8
                                    467 ;--------------------------------------------------------
                                    468 ; internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area DSEG    (DATA)
      000000                        471 _buffer0_hexdump_sloc0_1_0:
      000000                        472 	.ds 2
      000002                        473 _buffer0_hexdump_sloc1_1_0:
      000002                        474 	.ds 1
      000003                        475 _buffer0_hexdump_sloc2_1_0:
      000003                        476 	.ds 1
      000004                        477 _command_processing_sloc0_1_0:
      000004                        478 	.ds 2
      000006                        479 _command_processing_sloc1_1_0:
      000006                        480 	.ds 3
      000009                        481 _command_processing_sloc2_1_0:
      000009                        482 	.ds 3
      00000C                        483 _command_processing_sloc3_1_0:
      00000C                        484 	.ds 2
      00000E                        485 _command_processing_sloc4_1_0:
      00000E                        486 	.ds 3
                                    487 ;--------------------------------------------------------
                                    488 ; overlayable items in internal ram
                                    489 ;--------------------------------------------------------
                                    490 ;--------------------------------------------------------
                                    491 ; indirectly addressable internal ram data
                                    492 ;--------------------------------------------------------
                                    493 	.area ISEG    (DATA)
                                    494 ;--------------------------------------------------------
                                    495 ; absolute internal ram data
                                    496 ;--------------------------------------------------------
                                    497 	.area IABS    (ABS,DATA)
                                    498 	.area IABS    (ABS,DATA)
                                    499 ;--------------------------------------------------------
                                    500 ; bit data
                                    501 ;--------------------------------------------------------
                                    502 	.area BSEG    (BIT)
                                    503 ;--------------------------------------------------------
                                    504 ; paged external ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area PSEG    (PAG,XDATA)
                                    507 ;--------------------------------------------------------
                                    508 ; external ram data
                                    509 ;--------------------------------------------------------
                                    510 	.area XSEG    (XDATA)
      000000                        511 _length::
      000000                        512 	.ds 2
      000002                        513 _buffer0_hexdump_length_65536_53:
      000002                        514 	.ds 2
      000004                        515 _buffer0_hexdump_print_address_65536_54:
      000004                        516 	.ds 1
      000005                        517 _command_processing_PARM_2:
      000005                        518 	.ds 1
      000006                        519 _command_processing_PARM_3:
      000006                        520 	.ds 3
      000009                        521 _command_processing_PARM_4:
      000009                        522 	.ds 3
      00000C                        523 _command_processing_PARM_5:
      00000C                        524 	.ds 3
      00000F                        525 _command_processing_PARM_6:
      00000F                        526 	.ds 3
      000012                        527 _command_processing_PARM_7:
      000012                        528 	.ds 3
      000015                        529 _command_processing_PARM_8:
      000015                        530 	.ds 2
      000017                        531 _command_processing_cmd_detected_65536_62:
      000017                        532 	.ds 2
                                    533 ;--------------------------------------------------------
                                    534 ; absolute external ram data
                                    535 ;--------------------------------------------------------
                                    536 	.area XABS    (ABS,XDATA)
                                    537 ;--------------------------------------------------------
                                    538 ; external initialized ram data
                                    539 ;--------------------------------------------------------
                                    540 	.area XISEG   (XDATA)
      000000                        541 _size::
      000000                        542 	.ds 4
      000004                        543 _buffer_to_delete::
      000004                        544 	.ds 2
      000006                        545 _buff_not_cleared::
      000006                        546 	.ds 200
      0000CE                        547 _buffer0and1_size::
      0000CE                        548 	.ds 2
                                    549 	.area HOME    (CODE)
                                    550 	.area GSINIT0 (CODE)
                                    551 	.area GSINIT1 (CODE)
                                    552 	.area GSINIT2 (CODE)
                                    553 	.area GSINIT3 (CODE)
                                    554 	.area GSINIT4 (CODE)
                                    555 	.area GSINIT5 (CODE)
                                    556 	.area GSINIT  (CODE)
                                    557 	.area GSFINAL (CODE)
                                    558 	.area CSEG    (CODE)
                                    559 ;--------------------------------------------------------
                                    560 ; global & static initialisations
                                    561 ;--------------------------------------------------------
                                    562 	.area HOME    (CODE)
                                    563 	.area GSINIT  (CODE)
                                    564 	.area GSFINAL (CODE)
                                    565 	.area GSINIT  (CODE)
                                    566 ;--------------------------------------------------------
                                    567 ; Home
                                    568 ;--------------------------------------------------------
                                    569 	.area HOME    (CODE)
                                    570 	.area HOME    (CODE)
                                    571 ;--------------------------------------------------------
                                    572 ; code
                                    573 ;--------------------------------------------------------
                                    574 	.area CSEG    (CODE)
                                    575 ;------------------------------------------------------------
                                    576 ;Allocation info for local variables in function 'empty_buffer0'
                                    577 ;------------------------------------------------------------
                                    578 ;buffer0_ptr               Allocated with name '_empty_buffer0_buffer0_ptr_65536_50'
                                    579 ;i                         Allocated with name '_empty_buffer0_i_131072_51'
                                    580 ;------------------------------------------------------------
                                    581 ;	character.c:56: void empty_buffer0(void)
                                    582 ;	-----------------------------------------
                                    583 ;	 function empty_buffer0
                                    584 ;	-----------------------------------------
      000000                        585 _empty_buffer0:
                           000007   586 	ar7 = 0x07
                           000006   587 	ar6 = 0x06
                           000005   588 	ar5 = 0x05
                           000004   589 	ar4 = 0x04
                           000003   590 	ar3 = 0x03
                           000002   591 	ar2 = 0x02
                           000001   592 	ar1 = 0x01
                           000000   593 	ar0 = 0x00
                                    594 ;	character.c:58: char * buffer0_ptr = buffer0;
      000000 90r00r00         [24]  595 	mov	dptr,#_buffer0
      000003 E0               [24]  596 	movx	a,@dptr
      000004 FE               [12]  597 	mov	r6,a
      000005 A3               [24]  598 	inc	dptr
      000006 E0               [24]  599 	movx	a,@dptr
      000007 FD               [12]  600 	mov	r5,a
      000008 7F 00            [12]  601 	mov	r7,#0x00
                                    602 ;	character.c:59: for (int i = 0; i < buffer_size_arr[0]; i++)
      00000A 7B 00            [12]  603 	mov	r3,#0x00
      00000C 7C 00            [12]  604 	mov	r4,#0x00
      00000E                        605 00103$:
      00000E 90r00r00         [24]  606 	mov	dptr,#_buffer_size_arr
      000011 E0               [24]  607 	movx	a,@dptr
      000012 F9               [12]  608 	mov	r1,a
      000013 A3               [24]  609 	inc	dptr
      000014 E0               [24]  610 	movx	a,@dptr
      000015 FA               [12]  611 	mov	r2,a
      000016 C3               [12]  612 	clr	c
      000017 EB               [12]  613 	mov	a,r3
      000018 99               [12]  614 	subb	a,r1
      000019 EC               [12]  615 	mov	a,r4
      00001A 64 80            [12]  616 	xrl	a,#0x80
      00001C 8A F0            [24]  617 	mov	b,r2
      00001E 63 F0 80         [24]  618 	xrl	b,#0x80
      000021 95 F0            [12]  619 	subb	a,b
      000023 50 1A            [24]  620 	jnc	00105$
                                    621 ;	character.c:61: buffer0_ptr[i] = '0';
      000025 EB               [12]  622 	mov	a,r3
      000026 2E               [12]  623 	add	a,r6
      000027 F8               [12]  624 	mov	r0,a
      000028 EC               [12]  625 	mov	a,r4
      000029 3D               [12]  626 	addc	a,r5
      00002A F9               [12]  627 	mov	r1,a
      00002B 8F 02            [24]  628 	mov	ar2,r7
      00002D 88 82            [24]  629 	mov	dpl,r0
      00002F 89 83            [24]  630 	mov	dph,r1
      000031 8A F0            [24]  631 	mov	b,r2
      000033 74 30            [12]  632 	mov	a,#0x30
      000035 12r00r00         [24]  633 	lcall	__gptrput
                                    634 ;	character.c:59: for (int i = 0; i < buffer_size_arr[0]; i++)
      000038 0B               [12]  635 	inc	r3
      000039 BB 00 D2         [24]  636 	cjne	r3,#0x00,00103$
      00003C 0C               [12]  637 	inc	r4
      00003D 80 CF            [24]  638 	sjmp	00103$
      00003F                        639 00105$:
                                    640 ;	character.c:63: }
      00003F 22               [24]  641 	ret
                                    642 ;------------------------------------------------------------
                                    643 ;Allocation info for local variables in function 'buffer0_hexdump'
                                    644 ;------------------------------------------------------------
                                    645 ;sloc0                     Allocated with name '_buffer0_hexdump_sloc0_1_0'
                                    646 ;sloc1                     Allocated with name '_buffer0_hexdump_sloc1_1_0'
                                    647 ;sloc2                     Allocated with name '_buffer0_hexdump_sloc2_1_0'
                                    648 ;length                    Allocated with name '_buffer0_hexdump_length_65536_53'
                                    649 ;itr                       Allocated with name '_buffer0_hexdump_itr_65536_54'
                                    650 ;print_address             Allocated with name '_buffer0_hexdump_print_address_65536_54'
                                    651 ;buffer0_ptr               Allocated with name '_buffer0_hexdump_buffer0_ptr_65536_54'
                                    652 ;------------------------------------------------------------
                                    653 ;	character.c:72: void buffer0_hexdump(int length) {
                                    654 ;	-----------------------------------------
                                    655 ;	 function buffer0_hexdump
                                    656 ;	-----------------------------------------
      000040                        657 _buffer0_hexdump:
      000040 AF 83            [24]  658 	mov	r7,dph
      000042 E5 82            [12]  659 	mov	a,dpl
      000044 90r00r02         [24]  660 	mov	dptr,#_buffer0_hexdump_length_65536_53
      000047 F0               [24]  661 	movx	@dptr,a
      000048 EF               [12]  662 	mov	a,r7
      000049 A3               [24]  663 	inc	dptr
      00004A F0               [24]  664 	movx	@dptr,a
                                    665 ;	character.c:74: bool print_address = true;
      00004B 90r00r04         [24]  666 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      00004E 74 01            [12]  667 	mov	a,#0x01
      000050 F0               [24]  668 	movx	@dptr,a
                                    669 ;	character.c:76: char * buffer0_ptr = new_buffer_arr[0];
      000051 90r00r00         [24]  670 	mov	dptr,#_new_buffer_arr
      000054 E0               [24]  671 	movx	a,@dptr
      000055 FE               [12]  672 	mov	r6,a
      000056 A3               [24]  673 	inc	dptr
      000057 E0               [24]  674 	movx	a,@dptr
      000058 FD               [12]  675 	mov	r5,a
      000059 7F 00            [12]  676 	mov	r7,#0x00
                                    677 ;	character.c:79: printf("\033[1;34m\n\r");
      00005B C0 07            [24]  678 	push	ar7
      00005D C0 06            [24]  679 	push	ar6
      00005F C0 05            [24]  680 	push	ar5
      000061 74r00            [12]  681 	mov	a,#___str_0
      000063 C0 E0            [24]  682 	push	acc
      000065 74s00            [12]  683 	mov	a,#(___str_0 >> 8)
      000067 C0 E0            [24]  684 	push	acc
      000069 74 80            [12]  685 	mov	a,#0x80
      00006B C0 E0            [24]  686 	push	acc
      00006D 12r00r00         [24]  687 	lcall	_printf
      000070 15 81            [12]  688 	dec	sp
      000072 15 81            [12]  689 	dec	sp
      000074 15 81            [12]  690 	dec	sp
      000076 D0 05            [24]  691 	pop	ar5
      000078 D0 06            [24]  692 	pop	ar6
      00007A D0 07            [24]  693 	pop	ar7
                                    694 ;	character.c:81: while (itr < buffer0and1_size)
      00007C 90r00r02         [24]  695 	mov	dptr,#_buffer0_hexdump_length_65536_53
      00007F E0               [24]  696 	movx	a,@dptr
      000080 FB               [12]  697 	mov	r3,a
      000081 A3               [24]  698 	inc	dptr
      000082 E0               [24]  699 	movx	a,@dptr
      000083 FC               [12]  700 	mov	r4,a
      000084 E4               [12]  701 	clr	a
      000085 BB 10 04         [24]  702 	cjne	r3,#0x10,00146$
      000088 BC 00 01         [24]  703 	cjne	r4,#0x00,00146$
      00008B 04               [12]  704 	inc	a
      00008C                        705 00146$:
      00008C F5*02            [12]  706 	mov	_buffer0_hexdump_sloc1_1_0,a
      00008E E4               [12]  707 	clr	a
      00008F BB 20 04         [24]  708 	cjne	r3,#0x20,00148$
      000092 BC 00 01         [24]  709 	cjne	r4,#0x00,00148$
      000095 04               [12]  710 	inc	a
      000096                        711 00148$:
      000096 F9               [12]  712 	mov	r1,a
      000097 E4               [12]  713 	clr	a
      000098 F5*00            [12]  714 	mov	_buffer0_hexdump_sloc0_1_0,a
      00009A F5*01            [12]  715 	mov	(_buffer0_hexdump_sloc0_1_0 + 1),a
      00009C                        716 00112$:
      00009C C0 01            [24]  717 	push	ar1
      00009E 90r00rCE         [24]  718 	mov	dptr,#_buffer0and1_size
      0000A1 E0               [24]  719 	movx	a,@dptr
      0000A2 F8               [12]  720 	mov	r0,a
      0000A3 A3               [24]  721 	inc	dptr
      0000A4 E0               [24]  722 	movx	a,@dptr
      0000A5 F9               [12]  723 	mov	r1,a
      0000A6 C3               [12]  724 	clr	c
      0000A7 E5*00            [12]  725 	mov	a,_buffer0_hexdump_sloc0_1_0
      0000A9 98               [12]  726 	subb	a,r0
      0000AA E5*01            [12]  727 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0000AC 64 80            [12]  728 	xrl	a,#0x80
      0000AE 89 F0            [24]  729 	mov	b,r1
      0000B0 63 F0 80         [24]  730 	xrl	b,#0x80
      0000B3 95 F0            [12]  731 	subb	a,b
      0000B5 D0 01            [24]  732 	pop	ar1
      0000B7 40 01            [24]  733 	jc	00150$
      0000B9 22               [24]  734 	ret
      0000BA                        735 00150$:
                                    736 ;	character.c:84: if (print_address)
      0000BA 90r00r04         [24]  737 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      0000BD E0               [24]  738 	movx	a,@dptr
      0000BE 70 03            [24]  739 	jnz	00151$
      0000C0 02r01r46         [24]  740 	ljmp	00102$
      0000C3                        741 00151$:
                                    742 ;	character.c:86: printf("%p :", buffer0_ptr + itr);
      0000C3 C0 01            [24]  743 	push	ar1
      0000C5 E5*00            [12]  744 	mov	a,_buffer0_hexdump_sloc0_1_0
      0000C7 2E               [12]  745 	add	a,r6
      0000C8 F8               [12]  746 	mov	r0,a
      0000C9 E5*01            [12]  747 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0000CB 3D               [12]  748 	addc	a,r5
      0000CC F9               [12]  749 	mov	r1,a
      0000CD 8F 02            [24]  750 	mov	ar2,r7
      0000CF C0 07            [24]  751 	push	ar7
      0000D1 C0 06            [24]  752 	push	ar6
      0000D3 C0 05            [24]  753 	push	ar5
      0000D5 C0 04            [24]  754 	push	ar4
      0000D7 C0 03            [24]  755 	push	ar3
      0000D9 C0 01            [24]  756 	push	ar1
      0000DB C0 00            [24]  757 	push	ar0
      0000DD C0 01            [24]  758 	push	ar1
      0000DF C0 02            [24]  759 	push	ar2
      0000E1 74r0A            [12]  760 	mov	a,#___str_1
      0000E3 C0 E0            [24]  761 	push	acc
      0000E5 74s00            [12]  762 	mov	a,#(___str_1 >> 8)
      0000E7 C0 E0            [24]  763 	push	acc
      0000E9 74 80            [12]  764 	mov	a,#0x80
      0000EB C0 E0            [24]  765 	push	acc
      0000ED 12r00r00         [24]  766 	lcall	_printf
      0000F0 E5 81            [12]  767 	mov	a,sp
      0000F2 24 FA            [12]  768 	add	a,#0xfa
      0000F4 F5 81            [12]  769 	mov	sp,a
      0000F6 D0 01            [24]  770 	pop	ar1
      0000F8 D0 03            [24]  771 	pop	ar3
      0000FA D0 04            [24]  772 	pop	ar4
      0000FC D0 05            [24]  773 	pop	ar5
      0000FE D0 06            [24]  774 	pop	ar6
      000100 D0 07            [24]  775 	pop	ar7
                                    776 ;	character.c:87: printf("\033[1;34m%p :", buffer0_ptr + itr);
      000102 E5*00            [12]  777 	mov	a,_buffer0_hexdump_sloc0_1_0
      000104 2E               [12]  778 	add	a,r6
      000105 F8               [12]  779 	mov	r0,a
      000106 E5*01            [12]  780 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      000108 3D               [12]  781 	addc	a,r5
      000109 F9               [12]  782 	mov	r1,a
      00010A 8F 02            [24]  783 	mov	ar2,r7
      00010C C0 07            [24]  784 	push	ar7
      00010E C0 06            [24]  785 	push	ar6
      000110 C0 05            [24]  786 	push	ar5
      000112 C0 04            [24]  787 	push	ar4
      000114 C0 03            [24]  788 	push	ar3
      000116 C0 01            [24]  789 	push	ar1
      000118 C0 00            [24]  790 	push	ar0
      00011A C0 01            [24]  791 	push	ar1
      00011C C0 02            [24]  792 	push	ar2
      00011E 74r0F            [12]  793 	mov	a,#___str_2
      000120 C0 E0            [24]  794 	push	acc
      000122 74s00            [12]  795 	mov	a,#(___str_2 >> 8)
      000124 C0 E0            [24]  796 	push	acc
      000126 74 80            [12]  797 	mov	a,#0x80
      000128 C0 E0            [24]  798 	push	acc
      00012A 12r00r00         [24]  799 	lcall	_printf
      00012D E5 81            [12]  800 	mov	a,sp
      00012F 24 FA            [12]  801 	add	a,#0xfa
      000131 F5 81            [12]  802 	mov	sp,a
      000133 D0 01            [24]  803 	pop	ar1
      000135 D0 03            [24]  804 	pop	ar3
      000137 D0 04            [24]  805 	pop	ar4
      000139 D0 05            [24]  806 	pop	ar5
      00013B D0 06            [24]  807 	pop	ar6
      00013D D0 07            [24]  808 	pop	ar7
                                    809 ;	character.c:88: print_address = false;
      00013F 90r00r04         [24]  810 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      000142 E4               [12]  811 	clr	a
      000143 F0               [24]  812 	movx	@dptr,a
                                    813 ;	character.c:112: itr++;
      000144 D0 01            [24]  814 	pop	ar1
                                    815 ;	character.c:88: print_address = false;
      000146                        816 00102$:
                                    817 ;	character.c:91: if (buffer0_ptr[itr] == '0')
      000146 C0 01            [24]  818 	push	ar1
      000148 E5*00            [12]  819 	mov	a,_buffer0_hexdump_sloc0_1_0
      00014A 2E               [12]  820 	add	a,r6
      00014B F8               [12]  821 	mov	r0,a
      00014C E5*01            [12]  822 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      00014E 3D               [12]  823 	addc	a,r5
      00014F F9               [12]  824 	mov	r1,a
      000150 8F 02            [24]  825 	mov	ar2,r7
      000152 88 82            [24]  826 	mov	dpl,r0
      000154 89 83            [24]  827 	mov	dph,r1
      000156 8A F0            [24]  828 	mov	b,r2
      000158 12r00r00         [24]  829 	lcall	__gptrget
      00015B F5*03            [12]  830 	mov	_buffer0_hexdump_sloc2_1_0,a
      00015D 74 30            [12]  831 	mov	a,#0x30
      00015F B5*03 02         [24]  832 	cjne	a,_buffer0_hexdump_sloc2_1_0,00152$
      000162 80 04            [24]  833 	sjmp	00153$
      000164                        834 00152$:
      000164 D0 01            [24]  835 	pop	ar1
      000166 80 2C            [24]  836 	sjmp	00108$
      000168                        837 00153$:
      000168 D0 01            [24]  838 	pop	ar1
                                    839 ;	character.c:93: printf_tiny("\033[1;34m XX");
      00016A C0 07            [24]  840 	push	ar7
      00016C C0 06            [24]  841 	push	ar6
      00016E C0 05            [24]  842 	push	ar5
      000170 C0 04            [24]  843 	push	ar4
      000172 C0 03            [24]  844 	push	ar3
      000174 C0 01            [24]  845 	push	ar1
      000176 74r1B            [12]  846 	mov	a,#___str_3
      000178 C0 E0            [24]  847 	push	acc
      00017A 74s00            [12]  848 	mov	a,#(___str_3 >> 8)
      00017C C0 E0            [24]  849 	push	acc
      00017E 12r00r00         [24]  850 	lcall	_printf_tiny
      000181 15 81            [12]  851 	dec	sp
      000183 15 81            [12]  852 	dec	sp
      000185 D0 01            [24]  853 	pop	ar1
      000187 D0 03            [24]  854 	pop	ar3
      000189 D0 04            [24]  855 	pop	ar4
      00018B D0 05            [24]  856 	pop	ar5
      00018D D0 06            [24]  857 	pop	ar6
      00018F D0 07            [24]  858 	pop	ar7
      000191 02r02r13         [24]  859 	ljmp	00109$
      000194                        860 00108$:
                                    861 ;	character.c:97: if (length == 16) {
      000194 E5*02            [12]  862 	mov	a,_buffer0_hexdump_sloc1_1_0
      000196 60 31            [24]  863 	jz	00104$
                                    864 ;	character.c:98: printf_tiny("\033[1;34m %x", buffer0_ptr[itr]);
      000198 A8*03            [24]  865 	mov	r0,_buffer0_hexdump_sloc2_1_0
      00019A 7A 00            [12]  866 	mov	r2,#0x00
      00019C C0 07            [24]  867 	push	ar7
      00019E C0 06            [24]  868 	push	ar6
      0001A0 C0 05            [24]  869 	push	ar5
      0001A2 C0 04            [24]  870 	push	ar4
      0001A4 C0 03            [24]  871 	push	ar3
      0001A6 C0 01            [24]  872 	push	ar1
      0001A8 C0 00            [24]  873 	push	ar0
      0001AA C0 02            [24]  874 	push	ar2
      0001AC 74r26            [12]  875 	mov	a,#___str_4
      0001AE C0 E0            [24]  876 	push	acc
      0001B0 74s00            [12]  877 	mov	a,#(___str_4 >> 8)
      0001B2 C0 E0            [24]  878 	push	acc
      0001B4 12r00r00         [24]  879 	lcall	_printf_tiny
      0001B7 E5 81            [12]  880 	mov	a,sp
      0001B9 24 FC            [12]  881 	add	a,#0xfc
      0001BB F5 81            [12]  882 	mov	sp,a
      0001BD D0 01            [24]  883 	pop	ar1
      0001BF D0 03            [24]  884 	pop	ar3
      0001C1 D0 04            [24]  885 	pop	ar4
      0001C3 D0 05            [24]  886 	pop	ar5
      0001C5 D0 06            [24]  887 	pop	ar6
      0001C7 D0 07            [24]  888 	pop	ar7
      0001C9                        889 00104$:
                                    890 ;	character.c:100: if (length == 32)
      0001C9 E9               [12]  891 	mov	a,r1
      0001CA 60 47            [24]  892 	jz	00109$
                                    893 ;	character.c:102: printf_tiny("\033[1;34m %d", buffer0_ptr[itr]);
      0001CC C0 01            [24]  894 	push	ar1
      0001CE E5*00            [12]  895 	mov	a,_buffer0_hexdump_sloc0_1_0
      0001D0 2E               [12]  896 	add	a,r6
      0001D1 F8               [12]  897 	mov	r0,a
      0001D2 E5*01            [12]  898 	mov	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      0001D4 3D               [12]  899 	addc	a,r5
      0001D5 F9               [12]  900 	mov	r1,a
      0001D6 8F 02            [24]  901 	mov	ar2,r7
      0001D8 88 82            [24]  902 	mov	dpl,r0
      0001DA 89 83            [24]  903 	mov	dph,r1
      0001DC 8A F0            [24]  904 	mov	b,r2
      0001DE 12r00r00         [24]  905 	lcall	__gptrget
      0001E1 F8               [12]  906 	mov	r0,a
      0001E2 7A 00            [12]  907 	mov	r2,#0x00
      0001E4 C0 07            [24]  908 	push	ar7
      0001E6 C0 06            [24]  909 	push	ar6
      0001E8 C0 05            [24]  910 	push	ar5
      0001EA C0 04            [24]  911 	push	ar4
      0001EC C0 03            [24]  912 	push	ar3
      0001EE C0 01            [24]  913 	push	ar1
      0001F0 C0 00            [24]  914 	push	ar0
      0001F2 C0 02            [24]  915 	push	ar2
      0001F4 74r31            [12]  916 	mov	a,#___str_5
      0001F6 C0 E0            [24]  917 	push	acc
      0001F8 74s00            [12]  918 	mov	a,#(___str_5 >> 8)
      0001FA C0 E0            [24]  919 	push	acc
      0001FC 12r00r00         [24]  920 	lcall	_printf_tiny
      0001FF E5 81            [12]  921 	mov	a,sp
      000201 24 FC            [12]  922 	add	a,#0xfc
      000203 F5 81            [12]  923 	mov	sp,a
      000205 D0 01            [24]  924 	pop	ar1
      000207 D0 03            [24]  925 	pop	ar3
      000209 D0 04            [24]  926 	pop	ar4
      00020B D0 05            [24]  927 	pop	ar5
      00020D D0 06            [24]  928 	pop	ar6
      00020F D0 07            [24]  929 	pop	ar7
                                    930 ;	character.c:112: itr++;
      000211 D0 01            [24]  931 	pop	ar1
                                    932 ;	character.c:102: printf_tiny("\033[1;34m %d", buffer0_ptr[itr]);
      000213                        933 00109$:
                                    934 ;	character.c:106: if ((itr + 1) % length == 0)
      000213 74 01            [12]  935 	mov	a,#0x01
      000215 25*00            [12]  936 	add	a,_buffer0_hexdump_sloc0_1_0
      000217 F8               [12]  937 	mov	r0,a
      000218 E4               [12]  938 	clr	a
      000219 35*01            [12]  939 	addc	a,(_buffer0_hexdump_sloc0_1_0 + 1)
      00021B FA               [12]  940 	mov	r2,a
      00021C 90r00r00         [24]  941 	mov	dptr,#__modsint_PARM_2
      00021F EB               [12]  942 	mov	a,r3
      000220 F0               [24]  943 	movx	@dptr,a
      000221 EC               [12]  944 	mov	a,r4
      000222 A3               [24]  945 	inc	dptr
      000223 F0               [24]  946 	movx	@dptr,a
      000224 88 82            [24]  947 	mov	dpl,r0
      000226 8A 83            [24]  948 	mov	dph,r2
      000228 C0 07            [24]  949 	push	ar7
      00022A C0 06            [24]  950 	push	ar6
      00022C C0 05            [24]  951 	push	ar5
      00022E C0 04            [24]  952 	push	ar4
      000230 C0 03            [24]  953 	push	ar3
      000232 C0 01            [24]  954 	push	ar1
      000234 12r00r00         [24]  955 	lcall	__modsint
      000237 E5 82            [12]  956 	mov	a,dpl
      000239 85 83 F0         [24]  957 	mov	b,dph
      00023C D0 01            [24]  958 	pop	ar1
      00023E D0 03            [24]  959 	pop	ar3
      000240 D0 04            [24]  960 	pop	ar4
      000242 D0 05            [24]  961 	pop	ar5
      000244 D0 06            [24]  962 	pop	ar6
      000246 D0 07            [24]  963 	pop	ar7
      000248 45 F0            [12]  964 	orl	a,b
      00024A 70 2D            [24]  965 	jnz	00111$
                                    966 ;	character.c:108: printf_tiny("\033[1;34m\n\r");
      00024C C0 07            [24]  967 	push	ar7
      00024E C0 06            [24]  968 	push	ar6
      000250 C0 05            [24]  969 	push	ar5
      000252 C0 04            [24]  970 	push	ar4
      000254 C0 03            [24]  971 	push	ar3
      000256 C0 01            [24]  972 	push	ar1
      000258 74r00            [12]  973 	mov	a,#___str_0
      00025A C0 E0            [24]  974 	push	acc
      00025C 74s00            [12]  975 	mov	a,#(___str_0 >> 8)
      00025E C0 E0            [24]  976 	push	acc
      000260 12r00r00         [24]  977 	lcall	_printf_tiny
      000263 15 81            [12]  978 	dec	sp
      000265 15 81            [12]  979 	dec	sp
      000267 D0 01            [24]  980 	pop	ar1
      000269 D0 03            [24]  981 	pop	ar3
      00026B D0 04            [24]  982 	pop	ar4
      00026D D0 05            [24]  983 	pop	ar5
      00026F D0 06            [24]  984 	pop	ar6
      000271 D0 07            [24]  985 	pop	ar7
                                    986 ;	character.c:109: print_address = true;
      000273 90r00r04         [24]  987 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      000276 74 01            [12]  988 	mov	a,#0x01
      000278 F0               [24]  989 	movx	@dptr,a
      000279                        990 00111$:
                                    991 ;	character.c:112: itr++;
      000279 05*00            [12]  992 	inc	_buffer0_hexdump_sloc0_1_0
      00027B E4               [12]  993 	clr	a
      00027C B5*00 02         [24]  994 	cjne	a,_buffer0_hexdump_sloc0_1_0,00157$
      00027F 05*01            [12]  995 	inc	(_buffer0_hexdump_sloc0_1_0 + 1)
      000281                        996 00157$:
                                    997 ;	character.c:114: }
      000281 02r00r9C         [24]  998 	ljmp	00112$
                                    999 ;------------------------------------------------------------
                                   1000 ;Allocation info for local variables in function 'command_processing'
                                   1001 ;------------------------------------------------------------
                                   1002 ;sloc0                     Allocated with name '_command_processing_sloc0_1_0'
                                   1003 ;sloc1                     Allocated with name '_command_processing_sloc1_1_0'
                                   1004 ;sloc2                     Allocated with name '_command_processing_sloc2_1_0'
                                   1005 ;sloc3                     Allocated with name '_command_processing_sloc3_1_0'
                                   1006 ;sloc4                     Allocated with name '_command_processing_sloc4_1_0'
                                   1007 ;ch                        Allocated with name '_command_processing_PARM_2'
                                   1008 ;new_buffer_index          Allocated with name '_command_processing_PARM_3'
                                   1009 ;free_buffer_count         Allocated with name '_command_processing_PARM_4'
                                   1010 ;filled_buffer_count       Allocated with name '_command_processing_PARM_5'
                                   1011 ;storage_character_count   Allocated with name '_command_processing_PARM_6'
                                   1012 ;total_characters_count    Allocated with name '_command_processing_PARM_7'
                                   1013 ;buffer0_size              Allocated with name '_command_processing_PARM_8'
                                   1014 ;cmd_detected              Allocated with name '_command_processing_cmd_detected_65536_62'
                                   1015 ;buffer_size               Allocated with name '_command_processing_buffer_size_196609_66'
                                   1016 ;buffer_ptr                Allocated with name '_command_processing_buffer_ptr_196610_68'
                                   1017 ;ch                        Allocated with name '_command_processing_ch_196611_70'
                                   1018 ;temp                      Allocated with name '_command_processing_temp_262148_73'
                                   1019 ;i                         Allocated with name '_command_processing_i_262147_79'
                                   1020 ;buffer_to_free            Allocated with name '_command_processing_buffer_to_free_327683_80'
                                   1021 ;i                         Allocated with name '_command_processing_i_262147_83'
                                   1022 ;------------------------------------------------------------
                                   1023 ;	character.c:117: int command_processing(int cmd_detected, char ch, int * new_buffer_index,
                                   1024 ;	-----------------------------------------
                                   1025 ;	 function command_processing
                                   1026 ;	-----------------------------------------
      000284                       1027 _command_processing:
      000284 AF 83            [24] 1028 	mov	r7,dph
      000286 E5 82            [12] 1029 	mov	a,dpl
      000288 90r00r17         [24] 1030 	mov	dptr,#_command_processing_cmd_detected_65536_62
      00028B F0               [24] 1031 	movx	@dptr,a
      00028C EF               [12] 1032 	mov	a,r7
      00028D A3               [24] 1033 	inc	dptr
      00028E F0               [24] 1034 	movx	@dptr,a
                                   1035 ;	character.c:120: buffer0and1_size = buffer0_size;
      00028F 90r00r15         [24] 1036 	mov	dptr,#_command_processing_PARM_8
      000292 E0               [24] 1037 	movx	a,@dptr
      000293 FE               [12] 1038 	mov	r6,a
      000294 A3               [24] 1039 	inc	dptr
      000295 E0               [24] 1040 	movx	a,@dptr
      000296 FF               [12] 1041 	mov	r7,a
      000297 90r00rCE         [24] 1042 	mov	dptr,#_buffer0and1_size
      00029A EE               [12] 1043 	mov	a,r6
      00029B F0               [24] 1044 	movx	@dptr,a
      00029C EF               [12] 1045 	mov	a,r7
      00029D A3               [24] 1046 	inc	dptr
      00029E F0               [24] 1047 	movx	@dptr,a
                                   1048 ;	character.c:121: if(cmd_detected)            // if command detected
      00029F 90r00r17         [24] 1049 	mov	dptr,#_command_processing_cmd_detected_65536_62
      0002A2 E0               [24] 1050 	movx	a,@dptr
      0002A3 F5 F0            [12] 1051 	mov	b,a
      0002A5 A3               [24] 1052 	inc	dptr
      0002A6 E0               [24] 1053 	movx	a,@dptr
      0002A7 45 F0            [12] 1054 	orl	a,b
      0002A9 70 03            [24] 1055 	jnz	00236$
      0002AB 02r0CrD7         [24] 1056 	ljmp	00142$
      0002AE                       1057 00236$:
                                   1058 ;	character.c:123: switch(ch)              // switch based on the input character
      0002AE 90r00r05         [24] 1059 	mov	dptr,#_command_processing_PARM_2
      0002B1 E0               [24] 1060 	movx	a,@dptr
      0002B2 FF               [12] 1061 	mov	r7,a
      0002B3 BF 2B 02         [24] 1062 	cjne	r7,#0x2b,00237$
      0002B6 80 1B            [24] 1063 	sjmp	00101$
      0002B8                       1064 00237$:
      0002B8 BF 2D 03         [24] 1065 	cjne	r7,#0x2d,00238$
      0002BB 02r05r3D         [24] 1066 	ljmp	00107$
      0002BE                       1067 00238$:
      0002BE BF 3D 03         [24] 1068 	cjne	r7,#0x3d,00239$
      0002C1 02r09rE6         [24] 1069 	ljmp	00130$
      0002C4                       1070 00239$:
      0002C4 BF 3F 03         [24] 1071 	cjne	r7,#0x3f,00240$
      0002C7 02r09rFE         [24] 1072 	ljmp	00131$
      0002CA                       1073 00240$:
      0002CA BF 40 03         [24] 1074 	cjne	r7,#0x40,00241$
      0002CD 02r08rAF         [24] 1075 	ljmp	00125$
      0002D0                       1076 00241$:
      0002D0 02r0CrD7         [24] 1077 	ljmp	00142$
                                   1078 ;	character.c:125: case '+':               // if input character is '+'
      0002D3                       1079 00101$:
                                   1080 ;	character.c:127: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0002D3 74r3C            [12] 1081 	mov	a,#___str_6
      0002D5 C0 E0            [24] 1082 	push	acc
      0002D7 74s00            [12] 1083 	mov	a,#(___str_6 >> 8)
      0002D9 C0 E0            [24] 1084 	push	acc
      0002DB 12r00r00         [24] 1085 	lcall	_printf_tiny
      0002DE 15 81            [12] 1086 	dec	sp
      0002E0 15 81            [12] 1087 	dec	sp
                                   1088 ;	character.c:128: printf_tiny("\033[1;33m|************ Processing [+] *******************|\n\r");
      0002E2 74r77            [12] 1089 	mov	a,#___str_7
      0002E4 C0 E0            [24] 1090 	push	acc
      0002E6 74s00            [12] 1091 	mov	a,#(___str_7 >> 8)
      0002E8 C0 E0            [24] 1092 	push	acc
      0002EA 12r00r00         [24] 1093 	lcall	_printf_tiny
      0002ED 15 81            [12] 1094 	dec	sp
      0002EF 15 81            [12] 1095 	dec	sp
                                   1096 ;	character.c:129: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0002F1 74r3C            [12] 1097 	mov	a,#___str_6
      0002F3 C0 E0            [24] 1098 	push	acc
      0002F5 74s00            [12] 1099 	mov	a,#(___str_6 >> 8)
      0002F7 C0 E0            [24] 1100 	push	acc
      0002F9 12r00r00         [24] 1101 	lcall	_printf_tiny
      0002FC 15 81            [12] 1102 	dec	sp
      0002FE 15 81            [12] 1103 	dec	sp
                                   1104 ;	character.c:131: (*new_buffer_index)++;                      // increment buffer index
      000300 90r00r06         [24] 1105 	mov	dptr,#_command_processing_PARM_3
      000303 E0               [24] 1106 	movx	a,@dptr
      000304 FD               [12] 1107 	mov	r5,a
      000305 A3               [24] 1108 	inc	dptr
      000306 E0               [24] 1109 	movx	a,@dptr
      000307 FE               [12] 1110 	mov	r6,a
      000308 A3               [24] 1111 	inc	dptr
      000309 E0               [24] 1112 	movx	a,@dptr
      00030A FF               [12] 1113 	mov	r7,a
      00030B 8D 82            [24] 1114 	mov	dpl,r5
      00030D 8E 83            [24] 1115 	mov	dph,r6
      00030F 8F F0            [24] 1116 	mov	b,r7
      000311 12r00r00         [24] 1117 	lcall	__gptrget
      000314 FB               [12] 1118 	mov	r3,a
      000315 A3               [24] 1119 	inc	dptr
      000316 12r00r00         [24] 1120 	lcall	__gptrget
      000319 FC               [12] 1121 	mov	r4,a
      00031A 0B               [12] 1122 	inc	r3
      00031B BB 00 01         [24] 1123 	cjne	r3,#0x00,00242$
      00031E 0C               [12] 1124 	inc	r4
      00031F                       1125 00242$:
      00031F 8D 82            [24] 1126 	mov	dpl,r5
      000321 8E 83            [24] 1127 	mov	dph,r6
      000323 8F F0            [24] 1128 	mov	b,r7
      000325 EB               [12] 1129 	mov	a,r3
      000326 12r00r00         [24] 1130 	lcall	__gptrput
      000329 A3               [24] 1131 	inc	dptr
      00032A EC               [12] 1132 	mov	a,r4
      00032B 12r00r00         [24] 1133 	lcall	__gptrput
                                   1134 ;	character.c:132: printf_tiny("\033[1;36m|***********************************************|\n\r");
      00032E C0 07            [24] 1135 	push	ar7
      000330 C0 06            [24] 1136 	push	ar6
      000332 C0 05            [24] 1137 	push	ar5
      000334 74rB2            [12] 1138 	mov	a,#___str_8
      000336 C0 E0            [24] 1139 	push	acc
      000338 74s00            [12] 1140 	mov	a,#(___str_8 >> 8)
      00033A C0 E0            [24] 1141 	push	acc
      00033C 12r00r00         [24] 1142 	lcall	_printf_tiny
      00033F 15 81            [12] 1143 	dec	sp
      000341 15 81            [12] 1144 	dec	sp
                                   1145 ;	character.c:133: printf_tiny("\033[1;36m|********* Enter size for new bufer ************|\n\r");
      000343 74rED            [12] 1146 	mov	a,#___str_9
      000345 C0 E0            [24] 1147 	push	acc
      000347 74s00            [12] 1148 	mov	a,#(___str_9 >> 8)
      000349 C0 E0            [24] 1149 	push	acc
      00034B 12r00r00         [24] 1150 	lcall	_printf_tiny
      00034E 15 81            [12] 1151 	dec	sp
      000350 15 81            [12] 1152 	dec	sp
                                   1153 ;	character.c:134: printf_tiny("\033[1;36m|***********************************************|\n\r");
      000352 74rB2            [12] 1154 	mov	a,#___str_8
      000354 C0 E0            [24] 1155 	push	acc
      000356 74s00            [12] 1156 	mov	a,#(___str_8 >> 8)
      000358 C0 E0            [24] 1157 	push	acc
      00035A 12r00r00         [24] 1158 	lcall	_printf_tiny
      00035D 15 81            [12] 1159 	dec	sp
      00035F 15 81            [12] 1160 	dec	sp
                                   1161 ;	character.c:135: gets_(size);                                // get buffer size
      000361 90r00r00         [24] 1162 	mov	dptr,#_size
      000364 12r00r00         [24] 1163 	lcall	_gets_
                                   1164 ;	character.c:136: int buffer_size = atoi(size);               // convert buffer size to integer
      000367 90r00r00         [24] 1165 	mov	dptr,#_size
      00036A 75 F0 00         [24] 1166 	mov	b,#0x00
      00036D 12r00r00         [24] 1167 	lcall	_atoi
      000370 AB 82            [24] 1168 	mov	r3,dpl
      000372 AC 83            [24] 1169 	mov	r4,dph
      000374 D0 05            [24] 1170 	pop	ar5
      000376 D0 06            [24] 1171 	pop	ar6
      000378 D0 07            [24] 1172 	pop	ar7
                                   1173 ;	character.c:137: if (buffer_size < 30 || buffer_size > 300) { // check if buffer size is within range
      00037A C3               [12] 1174 	clr	c
      00037B EB               [12] 1175 	mov	a,r3
      00037C 94 1E            [12] 1176 	subb	a,#0x1e
      00037E EC               [12] 1177 	mov	a,r4
      00037F 64 80            [12] 1178 	xrl	a,#0x80
      000381 94 80            [12] 1179 	subb	a,#0x80
      000383 40 0E            [24] 1180 	jc	00102$
      000385 74 2C            [12] 1181 	mov	a,#0x2c
      000387 9B               [12] 1182 	subb	a,r3
      000388 74 81            [12] 1183 	mov	a,#(0x01 ^ 0x80)
      00038A 8C F0            [24] 1184 	mov	b,r4
      00038C 63 F0 80         [24] 1185 	xrl	b,#0x80
      00038F 95 F0            [12] 1186 	subb	a,b
      000391 50 12            [24] 1187 	jnc	00103$
      000393                       1188 00102$:
                                   1189 ;	character.c:138: printf_tiny("\033[1;31mInvalid Input : The buffer size should be in the range [30, 300]\n\r\n\r");
      000393 74r28            [12] 1190 	mov	a,#___str_10
      000395 C0 E0            [24] 1191 	push	acc
      000397 74s01            [12] 1192 	mov	a,#(___str_10 >> 8)
      000399 C0 E0            [24] 1193 	push	acc
      00039B 12r00r00         [24] 1194 	lcall	_printf_tiny
      00039E 15 81            [12] 1195 	dec	sp
      0003A0 15 81            [12] 1196 	dec	sp
                                   1197 ;	character.c:139: break;                                  // break out of switch
      0003A2 02r0CrD7         [24] 1198 	ljmp	00142$
      0003A5                       1199 00103$:
                                   1200 ;	character.c:141: __xdata char* buffer_ptr = (__xdata char*)malloc(buffer_size);  // allocate memory for buffer
      0003A5 8B 82            [24] 1201 	mov	dpl,r3
      0003A7 8C 83            [24] 1202 	mov	dph,r4
      0003A9 C0 07            [24] 1203 	push	ar7
      0003AB C0 06            [24] 1204 	push	ar6
      0003AD C0 05            [24] 1205 	push	ar5
      0003AF C0 04            [24] 1206 	push	ar4
      0003B1 C0 03            [24] 1207 	push	ar3
      0003B3 12r00r00         [24] 1208 	lcall	_malloc
      0003B6 A9 82            [24] 1209 	mov	r1,dpl
      0003B8 AA 83            [24] 1210 	mov	r2,dph
      0003BA D0 03            [24] 1211 	pop	ar3
      0003BC D0 04            [24] 1212 	pop	ar4
      0003BE D0 05            [24] 1213 	pop	ar5
      0003C0 D0 06            [24] 1214 	pop	ar6
      0003C2 D0 07            [24] 1215 	pop	ar7
      0003C4 89*04            [24] 1216 	mov	_command_processing_sloc0_1_0,r1
      0003C6 8A*05            [24] 1217 	mov	(_command_processing_sloc0_1_0 + 1),r2
                                   1218 ;	character.c:143: if (buffer_ptr == NULL) {                                       // check if buffer allocation failed
      0003C8 E5*04            [12] 1219 	mov	a,_command_processing_sloc0_1_0
      0003CA 45*05            [12] 1220 	orl	a,(_command_processing_sloc0_1_0 + 1)
      0003CC 70 12            [24] 1221 	jnz	00106$
                                   1222 ;	character.c:144: printf_tiny("\033[1;31mInvalid input : Failed to allocate buffer\n\r\n\r");
      0003CE 74r74            [12] 1223 	mov	a,#___str_11
      0003D0 C0 E0            [24] 1224 	push	acc
      0003D2 74s01            [12] 1225 	mov	a,#(___str_11 >> 8)
      0003D4 C0 E0            [24] 1226 	push	acc
      0003D6 12r00r00         [24] 1227 	lcall	_printf_tiny
      0003D9 15 81            [12] 1228 	dec	sp
      0003DB 15 81            [12] 1229 	dec	sp
                                   1230 ;	character.c:145: break;                                                      // break out of switch
      0003DD 02r0CrD7         [24] 1231 	ljmp	00142$
      0003E0                       1232 00106$:
                                   1233 ;	character.c:148: buffer_size_arr[(*new_buffer_index)-1] = buffer_size;           // store buffer size in array
      0003E0 8D 82            [24] 1234 	mov	dpl,r5
      0003E2 8E 83            [24] 1235 	mov	dph,r6
      0003E4 8F F0            [24] 1236 	mov	b,r7
      0003E6 12r00r00         [24] 1237 	lcall	__gptrget
      0003E9 F8               [12] 1238 	mov	r0,a
      0003EA A3               [24] 1239 	inc	dptr
      0003EB 12r00r00         [24] 1240 	lcall	__gptrget
      0003EE FA               [12] 1241 	mov	r2,a
      0003EF 18               [12] 1242 	dec	r0
      0003F0 B8 FF 01         [24] 1243 	cjne	r0,#0xff,00246$
      0003F3 1A               [12] 1244 	dec	r2
      0003F4                       1245 00246$:
      0003F4 E8               [12] 1246 	mov	a,r0
      0003F5 28               [12] 1247 	add	a,r0
      0003F6 F8               [12] 1248 	mov	r0,a
      0003F7 EA               [12] 1249 	mov	a,r2
      0003F8 33               [12] 1250 	rlc	a
      0003F9 FA               [12] 1251 	mov	r2,a
      0003FA E8               [12] 1252 	mov	a,r0
      0003FB 24r00            [12] 1253 	add	a,#_buffer_size_arr
      0003FD F5 82            [12] 1254 	mov	dpl,a
      0003FF EA               [12] 1255 	mov	a,r2
      000400 34s00            [12] 1256 	addc	a,#(_buffer_size_arr >> 8)
      000402 F5 83            [12] 1257 	mov	dph,a
      000404 EB               [12] 1258 	mov	a,r3
      000405 F0               [24] 1259 	movx	@dptr,a
      000406 EC               [12] 1260 	mov	a,r4
      000407 A3               [24] 1261 	inc	dptr
      000408 F0               [24] 1262 	movx	@dptr,a
                                   1263 ;	character.c:149: ++(*filled_buffer_count);                                       // increment filled buffer count
      000409 90r00r0C         [24] 1264 	mov	dptr,#_command_processing_PARM_5
      00040C E0               [24] 1265 	movx	a,@dptr
      00040D FA               [12] 1266 	mov	r2,a
      00040E A3               [24] 1267 	inc	dptr
      00040F E0               [24] 1268 	movx	a,@dptr
      000410 FB               [12] 1269 	mov	r3,a
      000411 A3               [24] 1270 	inc	dptr
      000412 E0               [24] 1271 	movx	a,@dptr
      000413 FC               [12] 1272 	mov	r4,a
      000414 8A 82            [24] 1273 	mov	dpl,r2
      000416 8B 83            [24] 1274 	mov	dph,r3
      000418 8C F0            [24] 1275 	mov	b,r4
      00041A 12r00r00         [24] 1276 	lcall	__gptrget
      00041D F8               [12] 1277 	mov	r0,a
      00041E A3               [24] 1278 	inc	dptr
      00041F 12r00r00         [24] 1279 	lcall	__gptrget
      000422 F9               [12] 1280 	mov	r1,a
      000423 08               [12] 1281 	inc	r0
      000424 B8 00 01         [24] 1282 	cjne	r0,#0x00,00247$
      000427 09               [12] 1283 	inc	r1
      000428                       1284 00247$:
      000428 8A 82            [24] 1285 	mov	dpl,r2
      00042A 8B 83            [24] 1286 	mov	dph,r3
      00042C 8C F0            [24] 1287 	mov	b,r4
      00042E E8               [12] 1288 	mov	a,r0
      00042F 12r00r00         [24] 1289 	lcall	__gptrput
      000432 A3               [24] 1290 	inc	dptr
      000433 E9               [12] 1291 	mov	a,r1
      000434 12r00r00         [24] 1292 	lcall	__gptrput
                                   1293 ;	character.c:151: new_buffer_arr[(*new_buffer_index)-1] = buffer_ptr;             // store buffer pointer in array
      000437 8D 82            [24] 1294 	mov	dpl,r5
      000439 8E 83            [24] 1295 	mov	dph,r6
      00043B 8F F0            [24] 1296 	mov	b,r7
      00043D 12r00r00         [24] 1297 	lcall	__gptrget
      000440 F8               [12] 1298 	mov	r0,a
      000441 A3               [24] 1299 	inc	dptr
      000442 12r00r00         [24] 1300 	lcall	__gptrget
      000445 F9               [12] 1301 	mov	r1,a
      000446 18               [12] 1302 	dec	r0
      000447 B8 FF 01         [24] 1303 	cjne	r0,#0xff,00248$
      00044A 19               [12] 1304 	dec	r1
      00044B                       1305 00248$:
      00044B E8               [12] 1306 	mov	a,r0
      00044C 28               [12] 1307 	add	a,r0
      00044D F8               [12] 1308 	mov	r0,a
      00044E E9               [12] 1309 	mov	a,r1
      00044F 33               [12] 1310 	rlc	a
      000450 F9               [12] 1311 	mov	r1,a
      000451 E8               [12] 1312 	mov	a,r0
      000452 24r00            [12] 1313 	add	a,#_new_buffer_arr
      000454 F5 82            [12] 1314 	mov	dpl,a
      000456 E9               [12] 1315 	mov	a,r1
      000457 34s00            [12] 1316 	addc	a,#(_new_buffer_arr >> 8)
      000459 F5 83            [12] 1317 	mov	dph,a
      00045B E5*04            [12] 1318 	mov	a,_command_processing_sloc0_1_0
      00045D F0               [24] 1319 	movx	@dptr,a
      00045E E5*05            [12] 1320 	mov	a,(_command_processing_sloc0_1_0 + 1)
      000460 A3               [24] 1321 	inc	dptr
      000461 F0               [24] 1322 	movx	@dptr,a
                                   1323 ;	character.c:152: buff_not_cleared[(*new_buffer_index)] = 1;                      // set flag to indicate new buffer is created
      000462 8D 82            [24] 1324 	mov	dpl,r5
      000464 8E 83            [24] 1325 	mov	dph,r6
      000466 8F F0            [24] 1326 	mov	b,r7
      000468 12r00r00         [24] 1327 	lcall	__gptrget
      00046B F8               [12] 1328 	mov	r0,a
      00046C A3               [24] 1329 	inc	dptr
      00046D 12r00r00         [24] 1330 	lcall	__gptrget
      000470 F9               [12] 1331 	mov	r1,a
      000471 E8               [12] 1332 	mov	a,r0
      000472 28               [12] 1333 	add	a,r0
      000473 F8               [12] 1334 	mov	r0,a
      000474 E9               [12] 1335 	mov	a,r1
      000475 33               [12] 1336 	rlc	a
      000476 F9               [12] 1337 	mov	r1,a
      000477 E8               [12] 1338 	mov	a,r0
      000478 24r06            [12] 1339 	add	a,#_buff_not_cleared
      00047A F5 82            [12] 1340 	mov	dpl,a
      00047C E9               [12] 1341 	mov	a,r1
      00047D 34s00            [12] 1342 	addc	a,#(_buff_not_cleared >> 8)
      00047F F5 83            [12] 1343 	mov	dph,a
      000481 74 01            [12] 1344 	mov	a,#0x01
      000483 F0               [24] 1345 	movx	@dptr,a
      000484 E4               [12] 1346 	clr	a
      000485 A3               [24] 1347 	inc	dptr
      000486 F0               [24] 1348 	movx	@dptr,a
                                   1349 ;	character.c:155: printf_tiny("\033[1;0mNew buffer allocated successfully : Buffer[%d]\n\r", ((*new_buffer_index)-1)); // print successful buffer allocation message
      000487 8D 82            [24] 1350 	mov	dpl,r5
      000489 8E 83            [24] 1351 	mov	dph,r6
      00048B 8F F0            [24] 1352 	mov	b,r7
      00048D 12r00r00         [24] 1353 	lcall	__gptrget
      000490 F8               [12] 1354 	mov	r0,a
      000491 A3               [24] 1355 	inc	dptr
      000492 12r00r00         [24] 1356 	lcall	__gptrget
      000495 F9               [12] 1357 	mov	r1,a
      000496 18               [12] 1358 	dec	r0
      000497 B8 FF 01         [24] 1359 	cjne	r0,#0xff,00249$
      00049A 19               [12] 1360 	dec	r1
      00049B                       1361 00249$:
      00049B C0 07            [24] 1362 	push	ar7
      00049D C0 06            [24] 1363 	push	ar6
      00049F C0 05            [24] 1364 	push	ar5
      0004A1 C0 04            [24] 1365 	push	ar4
      0004A3 C0 03            [24] 1366 	push	ar3
      0004A5 C0 02            [24] 1367 	push	ar2
      0004A7 C0 00            [24] 1368 	push	ar0
      0004A9 C0 01            [24] 1369 	push	ar1
      0004AB 74rA9            [12] 1370 	mov	a,#___str_12
      0004AD C0 E0            [24] 1371 	push	acc
      0004AF 74s01            [12] 1372 	mov	a,#(___str_12 >> 8)
      0004B1 C0 E0            [24] 1373 	push	acc
      0004B3 12r00r00         [24] 1374 	lcall	_printf_tiny
      0004B6 E5 81            [12] 1375 	mov	a,sp
      0004B8 24 FC            [12] 1376 	add	a,#0xfc
      0004BA F5 81            [12] 1377 	mov	sp,a
      0004BC D0 02            [24] 1378 	pop	ar2
      0004BE D0 03            [24] 1379 	pop	ar3
      0004C0 D0 04            [24] 1380 	pop	ar4
      0004C2 D0 05            [24] 1381 	pop	ar5
      0004C4 D0 06            [24] 1382 	pop	ar6
      0004C6 D0 07            [24] 1383 	pop	ar7
                                   1384 ;	character.c:156: printf_tiny("\033[1;0mTotal Number of Buffers including buffer0 & buffer1 = [%d]\n\r",(*new_buffer_index)); // print total number of buffers
      0004C8 8D 82            [24] 1385 	mov	dpl,r5
      0004CA 8E 83            [24] 1386 	mov	dph,r6
      0004CC 8F F0            [24] 1387 	mov	b,r7
      0004CE 12r00r00         [24] 1388 	lcall	__gptrget
      0004D1 FD               [12] 1389 	mov	r5,a
      0004D2 A3               [24] 1390 	inc	dptr
      0004D3 12r00r00         [24] 1391 	lcall	__gptrget
      0004D6 FE               [12] 1392 	mov	r6,a
      0004D7 C0 04            [24] 1393 	push	ar4
      0004D9 C0 03            [24] 1394 	push	ar3
      0004DB C0 02            [24] 1395 	push	ar2
      0004DD C0 05            [24] 1396 	push	ar5
      0004DF C0 06            [24] 1397 	push	ar6
      0004E1 74rE0            [12] 1398 	mov	a,#___str_13
      0004E3 C0 E0            [24] 1399 	push	acc
      0004E5 74s01            [12] 1400 	mov	a,#(___str_13 >> 8)
      0004E7 C0 E0            [24] 1401 	push	acc
      0004E9 12r00r00         [24] 1402 	lcall	_printf_tiny
      0004EC E5 81            [12] 1403 	mov	a,sp
      0004EE 24 FC            [12] 1404 	add	a,#0xfc
      0004F0 F5 81            [12] 1405 	mov	sp,a
      0004F2 D0 02            [24] 1406 	pop	ar2
      0004F4 D0 03            [24] 1407 	pop	ar3
      0004F6 D0 04            [24] 1408 	pop	ar4
                                   1409 ;	character.c:157: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \r\nTotal Empty Buffers = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count)); // print filled and empty buffer count
      0004F8 90r00r09         [24] 1410 	mov	dptr,#_command_processing_PARM_4
      0004FB E0               [24] 1411 	movx	a,@dptr
      0004FC FD               [12] 1412 	mov	r5,a
      0004FD A3               [24] 1413 	inc	dptr
      0004FE E0               [24] 1414 	movx	a,@dptr
      0004FF FE               [12] 1415 	mov	r6,a
      000500 A3               [24] 1416 	inc	dptr
      000501 E0               [24] 1417 	movx	a,@dptr
      000502 FF               [12] 1418 	mov	r7,a
      000503 8D 82            [24] 1419 	mov	dpl,r5
      000505 8E 83            [24] 1420 	mov	dph,r6
      000507 8F F0            [24] 1421 	mov	b,r7
      000509 12r00r00         [24] 1422 	lcall	__gptrget
      00050C FD               [12] 1423 	mov	r5,a
      00050D A3               [24] 1424 	inc	dptr
      00050E 12r00r00         [24] 1425 	lcall	__gptrget
      000511 FE               [12] 1426 	mov	r6,a
      000512 8A 82            [24] 1427 	mov	dpl,r2
      000514 8B 83            [24] 1428 	mov	dph,r3
      000516 8C F0            [24] 1429 	mov	b,r4
      000518 12r00r00         [24] 1430 	lcall	__gptrget
      00051B FA               [12] 1431 	mov	r2,a
      00051C A3               [24] 1432 	inc	dptr
      00051D 12r00r00         [24] 1433 	lcall	__gptrget
      000520 FB               [12] 1434 	mov	r3,a
      000521 C0 05            [24] 1435 	push	ar5
      000523 C0 06            [24] 1436 	push	ar6
      000525 C0 02            [24] 1437 	push	ar2
      000527 C0 03            [24] 1438 	push	ar3
      000529 74r23            [12] 1439 	mov	a,#___str_14
      00052B C0 E0            [24] 1440 	push	acc
      00052D 74s02            [12] 1441 	mov	a,#(___str_14 >> 8)
      00052F C0 E0            [24] 1442 	push	acc
      000531 12r00r00         [24] 1443 	lcall	_printf_tiny
      000534 E5 81            [12] 1444 	mov	a,sp
      000536 24 FA            [12] 1445 	add	a,#0xfa
      000538 F5 81            [12] 1446 	mov	sp,a
                                   1447 ;	character.c:158: break;                                                          // break out of switch
      00053A 02r0CrD7         [24] 1448 	ljmp	00142$
                                   1449 ;	character.c:161: case '-':   // if input character is '-'
      00053D                       1450 00107$:
                                   1451 ;	character.c:163: printf_tiny("\033[1;33m|***********************************************|\n\r");
      00053D 74r3C            [12] 1452 	mov	a,#___str_6
      00053F C0 E0            [24] 1453 	push	acc
      000541 74s00            [12] 1454 	mov	a,#(___str_6 >> 8)
      000543 C0 E0            [24] 1455 	push	acc
      000545 12r00r00         [24] 1456 	lcall	_printf_tiny
      000548 15 81            [12] 1457 	dec	sp
      00054A 15 81            [12] 1458 	dec	sp
                                   1459 ;	character.c:164: printf_tiny("\033[1;33m|************ Processing [-] *******************|\n\r");
      00054C 74r67            [12] 1460 	mov	a,#___str_15
      00054E C0 E0            [24] 1461 	push	acc
      000550 74s02            [12] 1462 	mov	a,#(___str_15 >> 8)
      000552 C0 E0            [24] 1463 	push	acc
      000554 12r00r00         [24] 1464 	lcall	_printf_tiny
      000557 15 81            [12] 1465 	dec	sp
      000559 15 81            [12] 1466 	dec	sp
                                   1467 ;	character.c:165: printf_tiny("\033[1;33m|***********************************************|\n\r");
      00055B 74r3C            [12] 1468 	mov	a,#___str_6
      00055D C0 E0            [24] 1469 	push	acc
      00055F 74s00            [12] 1470 	mov	a,#(___str_6 >> 8)
      000561 C0 E0            [24] 1471 	push	acc
      000563 12r00r00         [24] 1472 	lcall	_printf_tiny
      000566 15 81            [12] 1473 	dec	sp
      000568 15 81            [12] 1474 	dec	sp
                                   1475 ;	character.c:168: buffer_to_delete = 0;
      00056A 90r00r04         [24] 1476 	mov	dptr,#_buffer_to_delete
      00056D E4               [12] 1477 	clr	a
      00056E F0               [24] 1478 	movx	@dptr,a
      00056F A3               [24] 1479 	inc	dptr
      000570 F0               [24] 1480 	movx	@dptr,a
                                   1481 ;	character.c:171: printf_tiny("\033[1;36m|***********************************************|\n\r");
      000571 74rB2            [12] 1482 	mov	a,#___str_8
      000573 C0 E0            [24] 1483 	push	acc
      000575 74s00            [12] 1484 	mov	a,#(___str_8 >> 8)
      000577 C0 E0            [24] 1485 	push	acc
      000579 12r00r00         [24] 1486 	lcall	_printf_tiny
      00057C 15 81            [12] 1487 	dec	sp
      00057E 15 81            [12] 1488 	dec	sp
                                   1489 ;	character.c:172: printf_tiny("\033[1;36m|********* Enter buffer to be deleted **********|\n\r");
      000580 74rA2            [12] 1490 	mov	a,#___str_16
      000582 C0 E0            [24] 1491 	push	acc
      000584 74s02            [12] 1492 	mov	a,#(___str_16 >> 8)
      000586 C0 E0            [24] 1493 	push	acc
      000588 12r00r00         [24] 1494 	lcall	_printf_tiny
      00058B 15 81            [12] 1495 	dec	sp
      00058D 15 81            [12] 1496 	dec	sp
                                   1497 ;	character.c:173: printf_tiny("\033[1;36m|********* Current No of buffers:[%d] ***********|\n\r", *new_buffer_index);
      00058F 90r00r06         [24] 1498 	mov	dptr,#_command_processing_PARM_3
      000592 E0               [24] 1499 	movx	a,@dptr
      000593 FD               [12] 1500 	mov	r5,a
      000594 A3               [24] 1501 	inc	dptr
      000595 E0               [24] 1502 	movx	a,@dptr
      000596 FE               [12] 1503 	mov	r6,a
      000597 A3               [24] 1504 	inc	dptr
      000598 E0               [24] 1505 	movx	a,@dptr
      000599 FF               [12] 1506 	mov	r7,a
      00059A 8D 82            [24] 1507 	mov	dpl,r5
      00059C 8E 83            [24] 1508 	mov	dph,r6
      00059E 8F F0            [24] 1509 	mov	b,r7
      0005A0 12r00r00         [24] 1510 	lcall	__gptrget
      0005A3 FB               [12] 1511 	mov	r3,a
      0005A4 A3               [24] 1512 	inc	dptr
      0005A5 12r00r00         [24] 1513 	lcall	__gptrget
      0005A8 FC               [12] 1514 	mov	r4,a
      0005A9 C0 07            [24] 1515 	push	ar7
      0005AB C0 06            [24] 1516 	push	ar6
      0005AD C0 05            [24] 1517 	push	ar5
      0005AF C0 03            [24] 1518 	push	ar3
      0005B1 C0 04            [24] 1519 	push	ar4
      0005B3 74rDD            [12] 1520 	mov	a,#___str_17
      0005B5 C0 E0            [24] 1521 	push	acc
      0005B7 74s02            [12] 1522 	mov	a,#(___str_17 >> 8)
      0005B9 C0 E0            [24] 1523 	push	acc
      0005BB 12r00r00         [24] 1524 	lcall	_printf_tiny
      0005BE E5 81            [12] 1525 	mov	a,sp
      0005C0 24 FC            [12] 1526 	add	a,#0xfc
      0005C2 F5 81            [12] 1527 	mov	sp,a
                                   1528 ;	character.c:174: printf_tiny("\033[1;36m|********* Note : Index Starts with 0 **********|\n\r");
      0005C4 74r19            [12] 1529 	mov	a,#___str_18
      0005C6 C0 E0            [24] 1530 	push	acc
      0005C8 74s03            [12] 1531 	mov	a,#(___str_18 >> 8)
      0005CA C0 E0            [24] 1532 	push	acc
      0005CC 12r00r00         [24] 1533 	lcall	_printf_tiny
      0005CF 15 81            [12] 1534 	dec	sp
      0005D1 15 81            [12] 1535 	dec	sp
                                   1536 ;	character.c:175: printf_tiny("\033[1;36m|***********************************************|\n\r");
      0005D3 74rB2            [12] 1537 	mov	a,#___str_8
      0005D5 C0 E0            [24] 1538 	push	acc
      0005D7 74s00            [12] 1539 	mov	a,#(___str_8 >> 8)
      0005D9 C0 E0            [24] 1540 	push	acc
      0005DB 12r00r00         [24] 1541 	lcall	_printf_tiny
      0005DE 15 81            [12] 1542 	dec	sp
      0005E0 15 81            [12] 1543 	dec	sp
      0005E2 D0 05            [24] 1544 	pop	ar5
      0005E4 D0 06            [24] 1545 	pop	ar6
      0005E6 D0 07            [24] 1546 	pop	ar7
                                   1547 ;	character.c:179: do{
      0005E8                       1548 00111$:
                                   1549 ;	character.c:180: ch = getchar();
      0005E8 C0 07            [24] 1550 	push	ar7
      0005EA C0 06            [24] 1551 	push	ar6
      0005EC C0 05            [24] 1552 	push	ar5
      0005EE 12r00r00         [24] 1553 	lcall	_getchar
      0005F1 AB 82            [24] 1554 	mov	r3,dpl
                                   1555 ;	character.c:181: putchar(ch);
      0005F3 8B 02            [24] 1556 	mov	ar2,r3
      0005F5 7C 00            [12] 1557 	mov	r4,#0x00
      0005F7 8A 82            [24] 1558 	mov	dpl,r2
      0005F9 8C 83            [24] 1559 	mov	dph,r4
      0005FB C0 04            [24] 1560 	push	ar4
      0005FD C0 03            [24] 1561 	push	ar3
      0005FF C0 02            [24] 1562 	push	ar2
      000601 12r00r00         [24] 1563 	lcall	_putchar
      000604 D0 02            [24] 1564 	pop	ar2
      000606 D0 03            [24] 1565 	pop	ar3
      000608 D0 04            [24] 1566 	pop	ar4
      00060A D0 05            [24] 1567 	pop	ar5
      00060C D0 06            [24] 1568 	pop	ar6
      00060E D0 07            [24] 1569 	pop	ar7
                                   1570 ;	character.c:184: if (ch < '0' || ch > '9') {
      000610 BB 30 00         [24] 1571 	cjne	r3,#0x30,00250$
      000613                       1572 00250$:
      000613 40 05            [24] 1573 	jc	00108$
      000615 EB               [12] 1574 	mov	a,r3
      000616 24 C6            [12] 1575 	add	a,#0xff - 0x39
      000618 50 1D            [24] 1576 	jnc	00109$
      00061A                       1577 00108$:
                                   1578 ;	character.c:185: printf_tiny("\033[1;31mInvalid input : invalid digits entered \n\r\n\r");
      00061A C0 07            [24] 1579 	push	ar7
      00061C C0 06            [24] 1580 	push	ar6
      00061E C0 05            [24] 1581 	push	ar5
      000620 74r54            [12] 1582 	mov	a,#___str_19
      000622 C0 E0            [24] 1583 	push	acc
      000624 74s03            [12] 1584 	mov	a,#(___str_19 >> 8)
      000626 C0 E0            [24] 1585 	push	acc
      000628 12r00r00         [24] 1586 	lcall	_printf_tiny
      00062B 15 81            [12] 1587 	dec	sp
      00062D 15 81            [12] 1588 	dec	sp
      00062F D0 05            [24] 1589 	pop	ar5
      000631 D0 06            [24] 1590 	pop	ar6
      000633 D0 07            [24] 1591 	pop	ar7
                                   1592 ;	character.c:186: break;
      000635 80 50            [24] 1593 	sjmp	00113$
      000637                       1594 00109$:
                                   1595 ;	character.c:190: int temp = ch - '0';
      000637 EA               [12] 1596 	mov	a,r2
      000638 24 D0            [12] 1597 	add	a,#0xd0
      00063A FA               [12] 1598 	mov	r2,a
      00063B EC               [12] 1599 	mov	a,r4
      00063C 34 FF            [12] 1600 	addc	a,#0xff
      00063E FC               [12] 1601 	mov	r4,a
                                   1602 ;	character.c:191: buffer_to_delete = buffer_to_delete * 10 + temp;
      00063F 90r00r04         [24] 1603 	mov	dptr,#_buffer_to_delete
      000642 E0               [24] 1604 	movx	a,@dptr
      000643 F9               [12] 1605 	mov	r1,a
      000644 A3               [24] 1606 	inc	dptr
      000645 E0               [24] 1607 	movx	a,@dptr
      000646 FB               [12] 1608 	mov	r3,a
      000647 90r00r00         [24] 1609 	mov	dptr,#__mulint_PARM_2
      00064A E9               [12] 1610 	mov	a,r1
      00064B F0               [24] 1611 	movx	@dptr,a
      00064C EB               [12] 1612 	mov	a,r3
      00064D A3               [24] 1613 	inc	dptr
      00064E F0               [24] 1614 	movx	@dptr,a
      00064F 90 00 0A         [24] 1615 	mov	dptr,#0x000a
      000652 C0 07            [24] 1616 	push	ar7
      000654 C0 06            [24] 1617 	push	ar6
      000656 C0 05            [24] 1618 	push	ar5
      000658 C0 04            [24] 1619 	push	ar4
      00065A C0 02            [24] 1620 	push	ar2
      00065C 12r00r00         [24] 1621 	lcall	__mulint
      00065F E5 82            [12] 1622 	mov	a,dpl
      000661 85 83 F0         [24] 1623 	mov	b,dph
      000664 D0 02            [24] 1624 	pop	ar2
      000666 D0 04            [24] 1625 	pop	ar4
      000668 90r00r04         [24] 1626 	mov	dptr,#_buffer_to_delete
      00066B 2A               [12] 1627 	add	a,r2
      00066C F0               [24] 1628 	movx	@dptr,a
      00066D EC               [12] 1629 	mov	a,r4
      00066E 35 F0            [12] 1630 	addc	a,b
      000670 A3               [24] 1631 	inc	dptr
      000671 F0               [24] 1632 	movx	@dptr,a
                                   1633 ;	character.c:193: ch = getchar();
      000672 12r00r00         [24] 1634 	lcall	_getchar
      000675 AB 82            [24] 1635 	mov	r3,dpl
      000677 AC 83            [24] 1636 	mov	r4,dph
      000679 D0 05            [24] 1637 	pop	ar5
      00067B D0 06            [24] 1638 	pop	ar6
      00067D D0 07            [24] 1639 	pop	ar7
                                   1640 ;	character.c:195: }while(ch != '\r');
      00067F BB 0D 02         [24] 1641 	cjne	r3,#0x0d,00253$
      000682 80 03            [24] 1642 	sjmp	00254$
      000684                       1643 00253$:
      000684 02r05rE8         [24] 1644 	ljmp	00111$
      000687                       1645 00254$:
      000687                       1646 00113$:
                                   1647 ;	character.c:198: if (buffer_to_delete == 0)
      000687 90r00r04         [24] 1648 	mov	dptr,#_buffer_to_delete
      00068A E0               [24] 1649 	movx	a,@dptr
      00068B FB               [12] 1650 	mov	r3,a
      00068C A3               [24] 1651 	inc	dptr
      00068D E0               [24] 1652 	movx	a,@dptr
      00068E FC               [12] 1653 	mov	r4,a
      00068F 4B               [12] 1654 	orl	a,r3
      000690 70 12            [24] 1655 	jnz	00123$
                                   1656 ;	character.c:200: printf_tiny("\033[1;31mInvalid input : buffer number can't be 0\n\r\n");
      000692 74r87            [12] 1657 	mov	a,#___str_20
      000694 C0 E0            [24] 1658 	push	acc
      000696 74s03            [12] 1659 	mov	a,#(___str_20 >> 8)
      000698 C0 E0            [24] 1660 	push	acc
      00069A 12r00r00         [24] 1661 	lcall	_printf_tiny
      00069D 15 81            [12] 1662 	dec	sp
      00069F 15 81            [12] 1663 	dec	sp
                                   1664 ;	character.c:201: break;
      0006A1 02r0CrD7         [24] 1665 	ljmp	00142$
      0006A4                       1666 00123$:
                                   1667 ;	character.c:203: else if(buff_not_cleared[buffer_to_delete] == 0){
      0006A4 EB               [12] 1668 	mov	a,r3
      0006A5 2B               [12] 1669 	add	a,r3
      0006A6 F9               [12] 1670 	mov	r1,a
      0006A7 EC               [12] 1671 	mov	a,r4
      0006A8 33               [12] 1672 	rlc	a
      0006A9 FA               [12] 1673 	mov	r2,a
      0006AA E9               [12] 1674 	mov	a,r1
      0006AB 24r06            [12] 1675 	add	a,#_buff_not_cleared
      0006AD F5 82            [12] 1676 	mov	dpl,a
      0006AF EA               [12] 1677 	mov	a,r2
      0006B0 34s00            [12] 1678 	addc	a,#(_buff_not_cleared >> 8)
      0006B2 F5 83            [12] 1679 	mov	dph,a
      0006B4 E0               [24] 1680 	movx	a,@dptr
      0006B5 F9               [12] 1681 	mov	r1,a
      0006B6 A3               [24] 1682 	inc	dptr
      0006B7 E0               [24] 1683 	movx	a,@dptr
      0006B8 49               [12] 1684 	orl	a,r1
      0006B9 70 18            [24] 1685 	jnz	00120$
                                   1686 ;	character.c:204: printf_tiny("\033[1;31mInvalid input : buffer[%d] was already cleared earlier\n\r",buffer_to_delete);
      0006BB C0 03            [24] 1687 	push	ar3
      0006BD C0 04            [24] 1688 	push	ar4
      0006BF 74rBA            [12] 1689 	mov	a,#___str_21
      0006C1 C0 E0            [24] 1690 	push	acc
      0006C3 74s03            [12] 1691 	mov	a,#(___str_21 >> 8)
      0006C5 C0 E0            [24] 1692 	push	acc
      0006C7 12r00r00         [24] 1693 	lcall	_printf_tiny
      0006CA E5 81            [12] 1694 	mov	a,sp
      0006CC 24 FC            [12] 1695 	add	a,#0xfc
      0006CE F5 81            [12] 1696 	mov	sp,a
                                   1697 ;	character.c:205: break;
      0006D0 02r0CrD7         [24] 1698 	ljmp	00142$
      0006D3                       1699 00120$:
                                   1700 ;	character.c:207: else if ((buffer_to_delete) >= *new_buffer_index) {
      0006D3 8D 82            [24] 1701 	mov	dpl,r5
      0006D5 8E 83            [24] 1702 	mov	dph,r6
      0006D7 8F F0            [24] 1703 	mov	b,r7
      0006D9 12r00r00         [24] 1704 	lcall	__gptrget
      0006DC F9               [12] 1705 	mov	r1,a
      0006DD A3               [24] 1706 	inc	dptr
      0006DE 12r00r00         [24] 1707 	lcall	__gptrget
      0006E1 FA               [12] 1708 	mov	r2,a
      0006E2 C3               [12] 1709 	clr	c
      0006E3 EB               [12] 1710 	mov	a,r3
      0006E4 99               [12] 1711 	subb	a,r1
      0006E5 EC               [12] 1712 	mov	a,r4
      0006E6 64 80            [12] 1713 	xrl	a,#0x80
      0006E8 8A F0            [24] 1714 	mov	b,r2
      0006EA 63 F0 80         [24] 1715 	xrl	b,#0x80
      0006ED 95 F0            [12] 1716 	subb	a,b
      0006EF 40 12            [24] 1717 	jc	00117$
                                   1718 ;	character.c:208: printf_tiny("\033[1;31mInvalid input : buffer number doesn't exist\n\r");
      0006F1 74rFA            [12] 1719 	mov	a,#___str_22
      0006F3 C0 E0            [24] 1720 	push	acc
      0006F5 74s03            [12] 1721 	mov	a,#(___str_22 >> 8)
      0006F7 C0 E0            [24] 1722 	push	acc
      0006F9 12r00r00         [24] 1723 	lcall	_printf_tiny
      0006FC 15 81            [12] 1724 	dec	sp
      0006FE 15 81            [12] 1725 	dec	sp
                                   1726 ;	character.c:209: break;
      000700 02r0CrD7         [24] 1727 	ljmp	00142$
      000703                       1728 00117$:
                                   1729 ;	character.c:213: printf_tiny("\033[1;0mBuffer [%d] requested to be deleted\n\r", buffer_to_delete);
      000703 C0 05            [24] 1730 	push	ar5
      000705 C0 06            [24] 1731 	push	ar6
      000707 C0 07            [24] 1732 	push	ar7
      000709 C0 07            [24] 1733 	push	ar7
      00070B C0 06            [24] 1734 	push	ar6
      00070D C0 05            [24] 1735 	push	ar5
      00070F C0 03            [24] 1736 	push	ar3
      000711 C0 04            [24] 1737 	push	ar4
      000713 74r2F            [12] 1738 	mov	a,#___str_23
      000715 C0 E0            [24] 1739 	push	acc
      000717 74s04            [12] 1740 	mov	a,#(___str_23 >> 8)
      000719 C0 E0            [24] 1741 	push	acc
      00071B 12r00r00         [24] 1742 	lcall	_printf_tiny
      00071E E5 81            [12] 1743 	mov	a,sp
      000720 24 FC            [12] 1744 	add	a,#0xfc
      000722 F5 81            [12] 1745 	mov	sp,a
                                   1746 ;	character.c:214: printf("Performing buffer freeing operation\r\n");
      000724 74r5B            [12] 1747 	mov	a,#___str_24
      000726 C0 E0            [24] 1748 	push	acc
      000728 74s04            [12] 1749 	mov	a,#(___str_24 >> 8)
      00072A C0 E0            [24] 1750 	push	acc
      00072C 74 80            [12] 1751 	mov	a,#0x80
      00072E C0 E0            [24] 1752 	push	acc
      000730 12r00r00         [24] 1753 	lcall	_printf
      000733 15 81            [12] 1754 	dec	sp
      000735 15 81            [12] 1755 	dec	sp
      000737 15 81            [12] 1756 	dec	sp
                                   1757 ;	character.c:215: free(new_buffer_arr[buffer_to_delete]);
      000739 90r00r04         [24] 1758 	mov	dptr,#_buffer_to_delete
      00073C E0               [24] 1759 	movx	a,@dptr
      00073D FB               [12] 1760 	mov	r3,a
      00073E A3               [24] 1761 	inc	dptr
      00073F E0               [24] 1762 	movx	a,@dptr
      000740 FC               [12] 1763 	mov	r4,a
      000741 EB               [12] 1764 	mov	a,r3
      000742 2B               [12] 1765 	add	a,r3
      000743 FB               [12] 1766 	mov	r3,a
      000744 EC               [12] 1767 	mov	a,r4
      000745 33               [12] 1768 	rlc	a
      000746 FC               [12] 1769 	mov	r4,a
      000747 EB               [12] 1770 	mov	a,r3
      000748 24r00            [12] 1771 	add	a,#_new_buffer_arr
      00074A F5 82            [12] 1772 	mov	dpl,a
      00074C EC               [12] 1773 	mov	a,r4
      00074D 34s00            [12] 1774 	addc	a,#(_new_buffer_arr >> 8)
      00074F F5 83            [12] 1775 	mov	dph,a
      000751 E0               [24] 1776 	movx	a,@dptr
      000752 FB               [12] 1777 	mov	r3,a
      000753 A3               [24] 1778 	inc	dptr
      000754 E0               [24] 1779 	movx	a,@dptr
      000755 FC               [12] 1780 	mov	r4,a
      000756 7A 00            [12] 1781 	mov	r2,#0x00
      000758 8B 82            [24] 1782 	mov	dpl,r3
      00075A 8C 83            [24] 1783 	mov	dph,r4
      00075C 8A F0            [24] 1784 	mov	b,r2
      00075E 12r00r00         [24] 1785 	lcall	_free
      000761 D0 05            [24] 1786 	pop	ar5
      000763 D0 06            [24] 1787 	pop	ar6
      000765 D0 07            [24] 1788 	pop	ar7
                                   1789 ;	character.c:216: buff_not_cleared[buffer_to_delete] =0;
      000767 90r00r04         [24] 1790 	mov	dptr,#_buffer_to_delete
      00076A E0               [24] 1791 	movx	a,@dptr
      00076B FB               [12] 1792 	mov	r3,a
      00076C A3               [24] 1793 	inc	dptr
      00076D E0               [24] 1794 	movx	a,@dptr
      00076E FC               [12] 1795 	mov	r4,a
      00076F EB               [12] 1796 	mov	a,r3
      000770 2B               [12] 1797 	add	a,r3
      000771 FB               [12] 1798 	mov	r3,a
      000772 EC               [12] 1799 	mov	a,r4
      000773 33               [12] 1800 	rlc	a
      000774 FC               [12] 1801 	mov	r4,a
      000775 EB               [12] 1802 	mov	a,r3
      000776 24r06            [12] 1803 	add	a,#_buff_not_cleared
      000778 F5 82            [12] 1804 	mov	dpl,a
      00077A EC               [12] 1805 	mov	a,r4
      00077B 34s00            [12] 1806 	addc	a,#(_buff_not_cleared >> 8)
      00077D F5 83            [12] 1807 	mov	dph,a
      00077F E4               [12] 1808 	clr	a
      000780 F0               [24] 1809 	movx	@dptr,a
      000781 A3               [24] 1810 	inc	dptr
      000782 F0               [24] 1811 	movx	@dptr,a
                                   1812 ;	character.c:217: ++(*free_buffer_count);
      000783 90r00r09         [24] 1813 	mov	dptr,#_command_processing_PARM_4
      000786 E0               [24] 1814 	movx	a,@dptr
      000787 FA               [12] 1815 	mov	r2,a
      000788 A3               [24] 1816 	inc	dptr
      000789 E0               [24] 1817 	movx	a,@dptr
      00078A FB               [12] 1818 	mov	r3,a
      00078B A3               [24] 1819 	inc	dptr
      00078C E0               [24] 1820 	movx	a,@dptr
      00078D FC               [12] 1821 	mov	r4,a
      00078E 8A 82            [24] 1822 	mov	dpl,r2
      000790 8B 83            [24] 1823 	mov	dph,r3
      000792 8C F0            [24] 1824 	mov	b,r4
      000794 12r00r00         [24] 1825 	lcall	__gptrget
      000797 F8               [12] 1826 	mov	r0,a
      000798 A3               [24] 1827 	inc	dptr
      000799 12r00r00         [24] 1828 	lcall	__gptrget
      00079C F9               [12] 1829 	mov	r1,a
      00079D 08               [12] 1830 	inc	r0
      00079E B8 00 01         [24] 1831 	cjne	r0,#0x00,00258$
      0007A1 09               [12] 1832 	inc	r1
      0007A2                       1833 00258$:
      0007A2 8A 82            [24] 1834 	mov	dpl,r2
      0007A4 8B 83            [24] 1835 	mov	dph,r3
      0007A6 8C F0            [24] 1836 	mov	b,r4
      0007A8 E8               [12] 1837 	mov	a,r0
      0007A9 12r00r00         [24] 1838 	lcall	__gptrput
      0007AC A3               [24] 1839 	inc	dptr
      0007AD E9               [12] 1840 	mov	a,r1
      0007AE 12r00r00         [24] 1841 	lcall	__gptrput
                                   1842 ;	character.c:219: if(new_buffer_arr[buffer_to_delete] == NULL)
      0007B1 90r00r04         [24] 1843 	mov	dptr,#_buffer_to_delete
      0007B4 E0               [24] 1844 	movx	a,@dptr
      0007B5 F8               [12] 1845 	mov	r0,a
      0007B6 A3               [24] 1846 	inc	dptr
      0007B7 E0               [24] 1847 	movx	a,@dptr
      0007B8 F9               [12] 1848 	mov	r1,a
      0007B9 E8               [12] 1849 	mov	a,r0
      0007BA 28               [12] 1850 	add	a,r0
      0007BB FE               [12] 1851 	mov	r6,a
      0007BC E9               [12] 1852 	mov	a,r1
      0007BD 33               [12] 1853 	rlc	a
      0007BE FF               [12] 1854 	mov	r7,a
      0007BF EE               [12] 1855 	mov	a,r6
      0007C0 24r00            [12] 1856 	add	a,#_new_buffer_arr
      0007C2 F5 82            [12] 1857 	mov	dpl,a
      0007C4 EF               [12] 1858 	mov	a,r7
      0007C5 34s00            [12] 1859 	addc	a,#(_new_buffer_arr >> 8)
      0007C7 F5 83            [12] 1860 	mov	dph,a
      0007C9 E0               [24] 1861 	movx	a,@dptr
      0007CA FE               [12] 1862 	mov	r6,a
      0007CB A3               [24] 1863 	inc	dptr
      0007CC E0               [24] 1864 	movx	a,@dptr
      0007CD 4E               [12] 1865 	orl	a,r6
      0007CE D0 07            [24] 1866 	pop	ar7
      0007D0 D0 06            [24] 1867 	pop	ar6
      0007D2 D0 05            [24] 1868 	pop	ar5
      0007D4 70 31            [24] 1869 	jnz	00115$
                                   1870 ;	character.c:221: printf("***Buffer [%d] is freed****\n\r",buffer_to_delete);
      0007D6 C0 07            [24] 1871 	push	ar7
      0007D8 C0 06            [24] 1872 	push	ar6
      0007DA C0 05            [24] 1873 	push	ar5
      0007DC C0 04            [24] 1874 	push	ar4
      0007DE C0 03            [24] 1875 	push	ar3
      0007E0 C0 02            [24] 1876 	push	ar2
      0007E2 C0 00            [24] 1877 	push	ar0
      0007E4 C0 01            [24] 1878 	push	ar1
      0007E6 74r81            [12] 1879 	mov	a,#___str_25
      0007E8 C0 E0            [24] 1880 	push	acc
      0007EA 74s04            [12] 1881 	mov	a,#(___str_25 >> 8)
      0007EC C0 E0            [24] 1882 	push	acc
      0007EE 74 80            [12] 1883 	mov	a,#0x80
      0007F0 C0 E0            [24] 1884 	push	acc
      0007F2 12r00r00         [24] 1885 	lcall	_printf
      0007F5 E5 81            [12] 1886 	mov	a,sp
      0007F7 24 FB            [12] 1887 	add	a,#0xfb
      0007F9 F5 81            [12] 1888 	mov	sp,a
      0007FB D0 02            [24] 1889 	pop	ar2
      0007FD D0 03            [24] 1890 	pop	ar3
      0007FF D0 04            [24] 1891 	pop	ar4
      000801 D0 05            [24] 1892 	pop	ar5
      000803 D0 06            [24] 1893 	pop	ar6
      000805 D0 07            [24] 1894 	pop	ar7
      000807                       1895 00115$:
                                   1896 ;	character.c:223: printf_tiny("\033[1;0mBuffer[%d] de-allocated successfully  \n\r", buffer_to_delete);
      000807 C0 07            [24] 1897 	push	ar7
      000809 C0 06            [24] 1898 	push	ar6
      00080B C0 05            [24] 1899 	push	ar5
      00080D C0 04            [24] 1900 	push	ar4
      00080F C0 03            [24] 1901 	push	ar3
      000811 C0 02            [24] 1902 	push	ar2
      000813 90r00r04         [24] 1903 	mov	dptr,#_buffer_to_delete
      000816 E0               [24] 1904 	movx	a,@dptr
      000817 C0 E0            [24] 1905 	push	acc
      000819 A3               [24] 1906 	inc	dptr
      00081A E0               [24] 1907 	movx	a,@dptr
      00081B C0 E0            [24] 1908 	push	acc
      00081D 74r9F            [12] 1909 	mov	a,#___str_26
      00081F C0 E0            [24] 1910 	push	acc
      000821 74s04            [12] 1911 	mov	a,#(___str_26 >> 8)
      000823 C0 E0            [24] 1912 	push	acc
      000825 12r00r00         [24] 1913 	lcall	_printf_tiny
      000828 E5 81            [12] 1914 	mov	a,sp
      00082A 24 FC            [12] 1915 	add	a,#0xfc
      00082C F5 81            [12] 1916 	mov	sp,a
      00082E D0 02            [24] 1917 	pop	ar2
      000830 D0 03            [24] 1918 	pop	ar3
      000832 D0 04            [24] 1919 	pop	ar4
      000834 D0 05            [24] 1920 	pop	ar5
      000836 D0 06            [24] 1921 	pop	ar6
      000838 D0 07            [24] 1922 	pop	ar7
                                   1923 ;	character.c:224: printf_tiny("\033[1;0mTotal Number of Buffers after deallocation = [%d]\n\r\n\r",*new_buffer_index);
      00083A 8D 82            [24] 1924 	mov	dpl,r5
      00083C 8E 83            [24] 1925 	mov	dph,r6
      00083E 8F F0            [24] 1926 	mov	b,r7
      000840 12r00r00         [24] 1927 	lcall	__gptrget
      000843 FD               [12] 1928 	mov	r5,a
      000844 A3               [24] 1929 	inc	dptr
      000845 12r00r00         [24] 1930 	lcall	__gptrget
      000848 FE               [12] 1931 	mov	r6,a
      000849 C0 04            [24] 1932 	push	ar4
      00084B C0 03            [24] 1933 	push	ar3
      00084D C0 02            [24] 1934 	push	ar2
      00084F C0 05            [24] 1935 	push	ar5
      000851 C0 06            [24] 1936 	push	ar6
      000853 74rCE            [12] 1937 	mov	a,#___str_27
      000855 C0 E0            [24] 1938 	push	acc
      000857 74s04            [12] 1939 	mov	a,#(___str_27 >> 8)
      000859 C0 E0            [24] 1940 	push	acc
      00085B 12r00r00         [24] 1941 	lcall	_printf_tiny
      00085E E5 81            [12] 1942 	mov	a,sp
      000860 24 FC            [12] 1943 	add	a,#0xfc
      000862 F5 81            [12] 1944 	mov	sp,a
      000864 D0 02            [24] 1945 	pop	ar2
      000866 D0 03            [24] 1946 	pop	ar3
      000868 D0 04            [24] 1947 	pop	ar4
                                   1948 ;	character.c:225: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \r\nTotal Empty Buffers = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count));
      00086A 8A 82            [24] 1949 	mov	dpl,r2
      00086C 8B 83            [24] 1950 	mov	dph,r3
      00086E 8C F0            [24] 1951 	mov	b,r4
      000870 12r00r00         [24] 1952 	lcall	__gptrget
      000873 FA               [12] 1953 	mov	r2,a
      000874 A3               [24] 1954 	inc	dptr
      000875 12r00r00         [24] 1955 	lcall	__gptrget
      000878 FB               [12] 1956 	mov	r3,a
      000879 90r00r0C         [24] 1957 	mov	dptr,#_command_processing_PARM_5
      00087C E0               [24] 1958 	movx	a,@dptr
      00087D FD               [12] 1959 	mov	r5,a
      00087E A3               [24] 1960 	inc	dptr
      00087F E0               [24] 1961 	movx	a,@dptr
      000880 FE               [12] 1962 	mov	r6,a
      000881 A3               [24] 1963 	inc	dptr
      000882 E0               [24] 1964 	movx	a,@dptr
      000883 FF               [12] 1965 	mov	r7,a
      000884 8D 82            [24] 1966 	mov	dpl,r5
      000886 8E 83            [24] 1967 	mov	dph,r6
      000888 8F F0            [24] 1968 	mov	b,r7
      00088A 12r00r00         [24] 1969 	lcall	__gptrget
      00088D FD               [12] 1970 	mov	r5,a
      00088E A3               [24] 1971 	inc	dptr
      00088F 12r00r00         [24] 1972 	lcall	__gptrget
      000892 FE               [12] 1973 	mov	r6,a
      000893 C0 02            [24] 1974 	push	ar2
      000895 C0 03            [24] 1975 	push	ar3
      000897 C0 05            [24] 1976 	push	ar5
      000899 C0 06            [24] 1977 	push	ar6
      00089B 74r23            [12] 1978 	mov	a,#___str_14
      00089D C0 E0            [24] 1979 	push	acc
      00089F 74s02            [12] 1980 	mov	a,#(___str_14 >> 8)
      0008A1 C0 E0            [24] 1981 	push	acc
      0008A3 12r00r00         [24] 1982 	lcall	_printf_tiny
      0008A6 E5 81            [12] 1983 	mov	a,sp
      0008A8 24 FA            [12] 1984 	add	a,#0xfa
      0008AA F5 81            [12] 1985 	mov	sp,a
                                   1986 ;	character.c:227: break;
      0008AC 02r0CrD7         [24] 1987 	ljmp	00142$
                                   1988 ;	character.c:230: case '@': // if input character is '@'
      0008AF                       1989 00125$:
                                   1990 ;	character.c:232: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0008AF 74r3C            [12] 1991 	mov	a,#___str_6
      0008B1 C0 E0            [24] 1992 	push	acc
      0008B3 74s00            [12] 1993 	mov	a,#(___str_6 >> 8)
      0008B5 C0 E0            [24] 1994 	push	acc
      0008B7 12r00r00         [24] 1995 	lcall	_printf_tiny
      0008BA 15 81            [12] 1996 	dec	sp
      0008BC 15 81            [12] 1997 	dec	sp
                                   1998 ;	character.c:233: printf_tiny("\033[1;33m|************ Processing [@] *******************|\n\r");
      0008BE 74r0A            [12] 1999 	mov	a,#___str_28
      0008C0 C0 E0            [24] 2000 	push	acc
      0008C2 74s05            [12] 2001 	mov	a,#(___str_28 >> 8)
      0008C4 C0 E0            [24] 2002 	push	acc
      0008C6 12r00r00         [24] 2003 	lcall	_printf_tiny
      0008C9 15 81            [12] 2004 	dec	sp
      0008CB 15 81            [12] 2005 	dec	sp
                                   2006 ;	character.c:234: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0008CD 74r3C            [12] 2007 	mov	a,#___str_6
      0008CF C0 E0            [24] 2008 	push	acc
      0008D1 74s00            [12] 2009 	mov	a,#(___str_6 >> 8)
      0008D3 C0 E0            [24] 2010 	push	acc
      0008D5 12r00r00         [24] 2011 	lcall	_printf_tiny
      0008D8 15 81            [12] 2012 	dec	sp
      0008DA 15 81            [12] 2013 	dec	sp
                                   2014 ;	character.c:237: for(int i = 0; i < *new_buffer_index; i++) {
      0008DC 90r00r06         [24] 2015 	mov	dptr,#_command_processing_PARM_3
      0008DF E0               [24] 2016 	movx	a,@dptr
      0008E0 F5*06            [12] 2017 	mov	_command_processing_sloc1_1_0,a
      0008E2 A3               [24] 2018 	inc	dptr
      0008E3 E0               [24] 2019 	movx	a,@dptr
      0008E4 F5*07            [12] 2020 	mov	(_command_processing_sloc1_1_0 + 1),a
      0008E6 A3               [24] 2021 	inc	dptr
      0008E7 E0               [24] 2022 	movx	a,@dptr
      0008E8 F5*08            [12] 2023 	mov	(_command_processing_sloc1_1_0 + 2),a
      0008EA 7B 00            [12] 2024 	mov	r3,#0x00
      0008EC 7C 00            [12] 2025 	mov	r4,#0x00
      0008EE                       2026 00144$:
      0008EE 85*06 82         [24] 2027 	mov	dpl,_command_processing_sloc1_1_0
      0008F1 85*07 83         [24] 2028 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      0008F4 85*08 F0         [24] 2029 	mov	b,(_command_processing_sloc1_1_0 + 2)
      0008F7 12r00r00         [24] 2030 	lcall	__gptrget
      0008FA F9               [12] 2031 	mov	r1,a
      0008FB A3               [24] 2032 	inc	dptr
      0008FC 12r00r00         [24] 2033 	lcall	__gptrget
      0008FF FA               [12] 2034 	mov	r2,a
      000900 C3               [12] 2035 	clr	c
      000901 EB               [12] 2036 	mov	a,r3
      000902 99               [12] 2037 	subb	a,r1
      000903 EC               [12] 2038 	mov	a,r4
      000904 64 80            [12] 2039 	xrl	a,#0x80
      000906 8A F0            [24] 2040 	mov	b,r2
      000908 63 F0 80         [24] 2041 	xrl	b,#0x80
      00090B 95 F0            [12] 2042 	subb	a,b
      00090D 40 03            [24] 2043 	jc	00260$
      00090F 02r09r9F         [24] 2044 	ljmp	00129$
      000912                       2045 00260$:
                                   2046 ;	character.c:238: char* buffer_to_free = new_buffer_arr[i];
      000912 EB               [12] 2047 	mov	a,r3
      000913 2B               [12] 2048 	add	a,r3
      000914 F9               [12] 2049 	mov	r1,a
      000915 EC               [12] 2050 	mov	a,r4
      000916 33               [12] 2051 	rlc	a
      000917 FA               [12] 2052 	mov	r2,a
      000918 E9               [12] 2053 	mov	a,r1
      000919 24r00            [12] 2054 	add	a,#_new_buffer_arr
      00091B F9               [12] 2055 	mov	r1,a
      00091C EA               [12] 2056 	mov	a,r2
      00091D 34s00            [12] 2057 	addc	a,#(_new_buffer_arr >> 8)
      00091F FA               [12] 2058 	mov	r2,a
      000920 89 82            [24] 2059 	mov	dpl,r1
      000922 8A 83            [24] 2060 	mov	dph,r2
      000924 E0               [24] 2061 	movx	a,@dptr
      000925 F8               [12] 2062 	mov	r0,a
      000926 A3               [24] 2063 	inc	dptr
      000927 E0               [24] 2064 	movx	a,@dptr
      000928 FF               [12] 2065 	mov	r7,a
      000929 88*09            [24] 2066 	mov	_command_processing_sloc2_1_0,r0
      00092B 8F*0A            [24] 2067 	mov	(_command_processing_sloc2_1_0 + 1),r7
      00092D 75*0B 00         [24] 2068 	mov	(_command_processing_sloc2_1_0 + 2),#0x00
                                   2069 ;	character.c:239: if(buffer_to_free != NULL) {
      000930 E8               [12] 2070 	mov	a,r0
      000931 4F               [12] 2071 	orl	a,r7
      000932 60 46            [24] 2072 	jz	00127$
                                   2073 ;	character.c:240: free(buffer_to_free);
      000934 AD*09            [24] 2074 	mov	r5,_command_processing_sloc2_1_0
      000936 AE*0A            [24] 2075 	mov	r6,(_command_processing_sloc2_1_0 + 1)
      000938 AF*0B            [24] 2076 	mov	r7,(_command_processing_sloc2_1_0 + 2)
      00093A 8D 82            [24] 2077 	mov	dpl,r5
      00093C 8E 83            [24] 2078 	mov	dph,r6
      00093E 8F F0            [24] 2079 	mov	b,r7
      000940 C0 04            [24] 2080 	push	ar4
      000942 C0 03            [24] 2081 	push	ar3
      000944 C0 02            [24] 2082 	push	ar2
      000946 C0 01            [24] 2083 	push	ar1
      000948 12r00r00         [24] 2084 	lcall	_free
      00094B D0 01            [24] 2085 	pop	ar1
      00094D D0 02            [24] 2086 	pop	ar2
      00094F D0 03            [24] 2087 	pop	ar3
      000951 D0 04            [24] 2088 	pop	ar4
                                   2089 ;	character.c:241: new_buffer_arr[i] = NULL;
      000953 89 82            [24] 2090 	mov	dpl,r1
      000955 8A 83            [24] 2091 	mov	dph,r2
      000957 E4               [12] 2092 	clr	a
      000958 F0               [24] 2093 	movx	@dptr,a
      000959 A3               [24] 2094 	inc	dptr
      00095A F0               [24] 2095 	movx	@dptr,a
                                   2096 ;	character.c:242: printf_tiny("\033[1;0mBuffer[%d] freed\n\r",i);
      00095B C0 04            [24] 2097 	push	ar4
      00095D C0 03            [24] 2098 	push	ar3
      00095F C0 03            [24] 2099 	push	ar3
      000961 C0 04            [24] 2100 	push	ar4
      000963 74r45            [12] 2101 	mov	a,#___str_29
      000965 C0 E0            [24] 2102 	push	acc
      000967 74s05            [12] 2103 	mov	a,#(___str_29 >> 8)
      000969 C0 E0            [24] 2104 	push	acc
      00096B 12r00r00         [24] 2105 	lcall	_printf_tiny
      00096E E5 81            [12] 2106 	mov	a,sp
      000970 24 FC            [12] 2107 	add	a,#0xfc
      000972 F5 81            [12] 2108 	mov	sp,a
      000974 D0 03            [24] 2109 	pop	ar3
      000976 D0 04            [24] 2110 	pop	ar4
      000978 80 1D            [24] 2111 	sjmp	00145$
      00097A                       2112 00127$:
                                   2113 ;	character.c:244: printf_tiny("\033[1;0mBuffer[%d] was already NULL\n\r",i);
      00097A C0 04            [24] 2114 	push	ar4
      00097C C0 03            [24] 2115 	push	ar3
      00097E C0 03            [24] 2116 	push	ar3
      000980 C0 04            [24] 2117 	push	ar4
      000982 74r5E            [12] 2118 	mov	a,#___str_30
      000984 C0 E0            [24] 2119 	push	acc
      000986 74s05            [12] 2120 	mov	a,#(___str_30 >> 8)
      000988 C0 E0            [24] 2121 	push	acc
      00098A 12r00r00         [24] 2122 	lcall	_printf_tiny
      00098D E5 81            [12] 2123 	mov	a,sp
      00098F 24 FC            [12] 2124 	add	a,#0xfc
      000991 F5 81            [12] 2125 	mov	sp,a
      000993 D0 03            [24] 2126 	pop	ar3
      000995 D0 04            [24] 2127 	pop	ar4
      000997                       2128 00145$:
                                   2129 ;	character.c:237: for(int i = 0; i < *new_buffer_index; i++) {
      000997 0B               [12] 2130 	inc	r3
      000998 BB 00 01         [24] 2131 	cjne	r3,#0x00,00262$
      00099B 0C               [12] 2132 	inc	r4
      00099C                       2133 00262$:
      00099C 02r08rEE         [24] 2134 	ljmp	00144$
      00099F                       2135 00129$:
                                   2136 ;	character.c:249: *new_buffer_index = 0;
      00099F 85*06 82         [24] 2137 	mov	dpl,_command_processing_sloc1_1_0
      0009A2 85*07 83         [24] 2138 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      0009A5 85*08 F0         [24] 2139 	mov	b,(_command_processing_sloc1_1_0 + 2)
      0009A8 E4               [12] 2140 	clr	a
      0009A9 12r00r00         [24] 2141 	lcall	__gptrput
      0009AC A3               [24] 2142 	inc	dptr
      0009AD 12r00r00         [24] 2143 	lcall	__gptrput
                                   2144 ;	character.c:250: (*filled_buffer_count) = 0;
      0009B0 90r00r0C         [24] 2145 	mov	dptr,#_command_processing_PARM_5
      0009B3 E0               [24] 2146 	movx	a,@dptr
      0009B4 FD               [12] 2147 	mov	r5,a
      0009B5 A3               [24] 2148 	inc	dptr
      0009B6 E0               [24] 2149 	movx	a,@dptr
      0009B7 FE               [12] 2150 	mov	r6,a
      0009B8 A3               [24] 2151 	inc	dptr
      0009B9 E0               [24] 2152 	movx	a,@dptr
      0009BA FF               [12] 2153 	mov	r7,a
      0009BB 8D 82            [24] 2154 	mov	dpl,r5
      0009BD 8E 83            [24] 2155 	mov	dph,r6
      0009BF 8F F0            [24] 2156 	mov	b,r7
      0009C1 E4               [12] 2157 	clr	a
      0009C2 12r00r00         [24] 2158 	lcall	__gptrput
      0009C5 A3               [24] 2159 	inc	dptr
      0009C6 12r00r00         [24] 2160 	lcall	__gptrput
                                   2161 ;	character.c:251: (*free_buffer_count) = 0;
      0009C9 90r00r09         [24] 2162 	mov	dptr,#_command_processing_PARM_4
      0009CC E0               [24] 2163 	movx	a,@dptr
      0009CD FD               [12] 2164 	mov	r5,a
      0009CE A3               [24] 2165 	inc	dptr
      0009CF E0               [24] 2166 	movx	a,@dptr
      0009D0 FE               [12] 2167 	mov	r6,a
      0009D1 A3               [24] 2168 	inc	dptr
      0009D2 E0               [24] 2169 	movx	a,@dptr
      0009D3 FF               [12] 2170 	mov	r7,a
      0009D4 8D 82            [24] 2171 	mov	dpl,r5
      0009D6 8E 83            [24] 2172 	mov	dph,r6
      0009D8 8F F0            [24] 2173 	mov	b,r7
      0009DA E4               [12] 2174 	clr	a
      0009DB 12r00r00         [24] 2175 	lcall	__gptrput
      0009DE A3               [24] 2176 	inc	dptr
      0009DF 12r00r00         [24] 2177 	lcall	__gptrput
                                   2178 ;	character.c:252: return ALL_BUFFER_CLEARED;
      0009E2 90 00 01         [24] 2179 	mov	dptr,#0x0001
      0009E5 22               [24] 2180 	ret
                                   2181 ;	character.c:254: case '=': // if input character is '='
      0009E6                       2182 00130$:
                                   2183 ;	character.c:256: printf_tiny("\033[1;33m\r\n|************ Processing [=] *******************|\n\r");
      0009E6 74r82            [12] 2184 	mov	a,#___str_31
      0009E8 C0 E0            [24] 2185 	push	acc
      0009EA 74s05            [12] 2186 	mov	a,#(___str_31 >> 8)
      0009EC C0 E0            [24] 2187 	push	acc
      0009EE 12r00r00         [24] 2188 	lcall	_printf_tiny
      0009F1 15 81            [12] 2189 	dec	sp
      0009F3 15 81            [12] 2190 	dec	sp
                                   2191 ;	character.c:259: buffer0_hexdump(LENGTH_16);
      0009F5 90 00 10         [24] 2192 	mov	dptr,#0x0010
      0009F8 12r00r40         [24] 2193 	lcall	_buffer0_hexdump
                                   2194 ;	character.c:260: break;
      0009FB 02r0CrD7         [24] 2195 	ljmp	00142$
                                   2196 ;	character.c:262: case '?':  // if input character is '?'
      0009FE                       2197 00131$:
                                   2198 ;	character.c:264: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0009FE 74r3C            [12] 2199 	mov	a,#___str_6
      000A00 C0 E0            [24] 2200 	push	acc
      000A02 74s00            [12] 2201 	mov	a,#(___str_6 >> 8)
      000A04 C0 E0            [24] 2202 	push	acc
      000A06 12r00r00         [24] 2203 	lcall	_printf_tiny
      000A09 15 81            [12] 2204 	dec	sp
      000A0B 15 81            [12] 2205 	dec	sp
                                   2206 ;	character.c:265: printf_tiny("\033[1;33m|************ Processing [?] *******************|\n\r");
      000A0D 74rBF            [12] 2207 	mov	a,#___str_32
      000A0F C0 E0            [24] 2208 	push	acc
      000A11 74s05            [12] 2209 	mov	a,#(___str_32 >> 8)
      000A13 C0 E0            [24] 2210 	push	acc
      000A15 12r00r00         [24] 2211 	lcall	_printf_tiny
      000A18 15 81            [12] 2212 	dec	sp
      000A1A 15 81            [12] 2213 	dec	sp
                                   2214 ;	character.c:266: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000A1C 74r3C            [12] 2215 	mov	a,#___str_6
      000A1E C0 E0            [24] 2216 	push	acc
      000A20 74s00            [12] 2217 	mov	a,#(___str_6 >> 8)
      000A22 C0 E0            [24] 2218 	push	acc
      000A24 12r00r00         [24] 2219 	lcall	_printf_tiny
      000A27 15 81            [12] 2220 	dec	sp
      000A29 15 81            [12] 2221 	dec	sp
                                   2222 ;	character.c:269: printf_tiny(" \033[1;34m\r\n|***********************************************|\n\r");
      000A2B 74rFA            [12] 2223 	mov	a,#___str_33
      000A2D C0 E0            [24] 2224 	push	acc
      000A2F 74s05            [12] 2225 	mov	a,#(___str_33 >> 8)
      000A31 C0 E0            [24] 2226 	push	acc
      000A33 12r00r00         [24] 2227 	lcall	_printf_tiny
      000A36 15 81            [12] 2228 	dec	sp
      000A38 15 81            [12] 2229 	dec	sp
                                   2230 ;	character.c:270: printf_tiny(" \033[1;34m|*************** HEAP REPORT *******************|\n\r");
      000A3A 74r38            [12] 2231 	mov	a,#___str_34
      000A3C C0 E0            [24] 2232 	push	acc
      000A3E 74s06            [12] 2233 	mov	a,#(___str_34 >> 8)
      000A40 C0 E0            [24] 2234 	push	acc
      000A42 12r00r00         [24] 2235 	lcall	_printf_tiny
      000A45 15 81            [12] 2236 	dec	sp
      000A47 15 81            [12] 2237 	dec	sp
                                   2238 ;	character.c:271: printf_tiny(" \033[1;34m|***********************************************|\n\r");
      000A49 74r74            [12] 2239 	mov	a,#___str_35
      000A4B C0 E0            [24] 2240 	push	acc
      000A4D 74s06            [12] 2241 	mov	a,#(___str_35 >> 8)
      000A4F C0 E0            [24] 2242 	push	acc
      000A51 12r00r00         [24] 2243 	lcall	_printf_tiny
      000A54 15 81            [12] 2244 	dec	sp
      000A56 15 81            [12] 2245 	dec	sp
                                   2246 ;	character.c:272: for(int i=0; i<*new_buffer_index; i++)              // iterate over the new buffer array using a loop variable i
      000A58 90r00r0F         [24] 2247 	mov	dptr,#_command_processing_PARM_6
      000A5B E0               [24] 2248 	movx	a,@dptr
      000A5C F5*0E            [12] 2249 	mov	_command_processing_sloc4_1_0,a
      000A5E A3               [24] 2250 	inc	dptr
      000A5F E0               [24] 2251 	movx	a,@dptr
      000A60 F5*0F            [12] 2252 	mov	(_command_processing_sloc4_1_0 + 1),a
      000A62 A3               [24] 2253 	inc	dptr
      000A63 E0               [24] 2254 	movx	a,@dptr
      000A64 F5*10            [12] 2255 	mov	(_command_processing_sloc4_1_0 + 2),a
      000A66 90r00r12         [24] 2256 	mov	dptr,#_command_processing_PARM_7
      000A69 E0               [24] 2257 	movx	a,@dptr
      000A6A FA               [12] 2258 	mov	r2,a
      000A6B A3               [24] 2259 	inc	dptr
      000A6C E0               [24] 2260 	movx	a,@dptr
      000A6D FB               [12] 2261 	mov	r3,a
      000A6E A3               [24] 2262 	inc	dptr
      000A6F E0               [24] 2263 	movx	a,@dptr
      000A70 FC               [12] 2264 	mov	r4,a
      000A71 90r00r06         [24] 2265 	mov	dptr,#_command_processing_PARM_3
      000A74 E0               [24] 2266 	movx	a,@dptr
      000A75 F5*09            [12] 2267 	mov	_command_processing_sloc2_1_0,a
      000A77 A3               [24] 2268 	inc	dptr
      000A78 E0               [24] 2269 	movx	a,@dptr
      000A79 F5*0A            [12] 2270 	mov	(_command_processing_sloc2_1_0 + 1),a
      000A7B A3               [24] 2271 	inc	dptr
      000A7C E0               [24] 2272 	movx	a,@dptr
      000A7D F5*0B            [12] 2273 	mov	(_command_processing_sloc2_1_0 + 2),a
      000A7F 78 00            [12] 2274 	mov	r0,#0x00
      000A81 79 00            [12] 2275 	mov	r1,#0x00
      000A83                       2276 00147$:
      000A83 C0 02            [24] 2277 	push	ar2
      000A85 C0 03            [24] 2278 	push	ar3
      000A87 C0 04            [24] 2279 	push	ar4
      000A89 85*09 82         [24] 2280 	mov	dpl,_command_processing_sloc2_1_0
      000A8C 85*0A 83         [24] 2281 	mov	dph,(_command_processing_sloc2_1_0 + 1)
      000A8F 85*0B F0         [24] 2282 	mov	b,(_command_processing_sloc2_1_0 + 2)
      000A92 12r00r00         [24] 2283 	lcall	__gptrget
      000A95 FB               [12] 2284 	mov	r3,a
      000A96 A3               [24] 2285 	inc	dptr
      000A97 12r00r00         [24] 2286 	lcall	__gptrget
      000A9A FC               [12] 2287 	mov	r4,a
      000A9B C3               [12] 2288 	clr	c
      000A9C E8               [12] 2289 	mov	a,r0
      000A9D 9B               [12] 2290 	subb	a,r3
      000A9E E9               [12] 2291 	mov	a,r1
      000A9F 64 80            [12] 2292 	xrl	a,#0x80
      000AA1 8C F0            [24] 2293 	mov	b,r4
      000AA3 63 F0 80         [24] 2294 	xrl	b,#0x80
      000AA6 95 F0            [12] 2295 	subb	a,b
      000AA8 D0 04            [24] 2296 	pop	ar4
      000AAA D0 03            [24] 2297 	pop	ar3
      000AAC D0 02            [24] 2298 	pop	ar2
      000AAE 40 03            [24] 2299 	jc	00263$
      000AB0 02r0Cr9D         [24] 2300 	ljmp	00138$
      000AB3                       2301 00263$:
                                   2302 ;	character.c:274: if( (new_buffer_arr[i] == NULL) || (new_buffer_arr[i] == 0) )                   // check if the current buffer is already cleared
      000AB3 E8               [12] 2303 	mov	a,r0
      000AB4 28               [12] 2304 	add	a,r0
      000AB5 F5*06            [12] 2305 	mov	_command_processing_sloc1_1_0,a
      000AB7 E9               [12] 2306 	mov	a,r1
      000AB8 33               [12] 2307 	rlc	a
      000AB9 F5*07            [12] 2308 	mov	(_command_processing_sloc1_1_0 + 1),a
      000ABB E5*06            [12] 2309 	mov	a,_command_processing_sloc1_1_0
      000ABD 24r00            [12] 2310 	add	a,#_new_buffer_arr
      000ABF F5*04            [12] 2311 	mov	_command_processing_sloc0_1_0,a
      000AC1 E5*07            [12] 2312 	mov	a,(_command_processing_sloc1_1_0 + 1)
      000AC3 34s00            [12] 2313 	addc	a,#(_new_buffer_arr >> 8)
      000AC5 F5*05            [12] 2314 	mov	(_command_processing_sloc0_1_0 + 1),a
      000AC7 85*04 82         [24] 2315 	mov	dpl,_command_processing_sloc0_1_0
      000ACA 85*05 83         [24] 2316 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000ACD E0               [24] 2317 	movx	a,@dptr
      000ACE F5*0C            [12] 2318 	mov	_command_processing_sloc3_1_0,a
      000AD0 A3               [24] 2319 	inc	dptr
      000AD1 E0               [24] 2320 	movx	a,@dptr
      000AD2 F5*0D            [12] 2321 	mov	(_command_processing_sloc3_1_0 + 1),a
      000AD4 E5*0C            [12] 2322 	mov	a,_command_processing_sloc3_1_0
      000AD6 45*0D            [12] 2323 	orl	a,(_command_processing_sloc3_1_0 + 1)
      000AD8 60 06            [24] 2324 	jz	00132$
      000ADA E5*0C            [12] 2325 	mov	a,_command_processing_sloc3_1_0
      000ADC 45*0D            [12] 2326 	orl	a,(_command_processing_sloc3_1_0 + 1)
      000ADE 70 26            [24] 2327 	jnz	00133$
      000AE0                       2328 00132$:
                                   2329 ;	character.c:276: printf_tiny("\033[1;31m\n\rBuffer [%d] already cleared!!\n\r"); // print a message indicating the buffer is already cleared
      000AE0 C0 04            [24] 2330 	push	ar4
      000AE2 C0 03            [24] 2331 	push	ar3
      000AE4 C0 02            [24] 2332 	push	ar2
      000AE6 C0 01            [24] 2333 	push	ar1
      000AE8 C0 00            [24] 2334 	push	ar0
      000AEA 74rB0            [12] 2335 	mov	a,#___str_36
      000AEC C0 E0            [24] 2336 	push	acc
      000AEE 74s06            [12] 2337 	mov	a,#(___str_36 >> 8)
      000AF0 C0 E0            [24] 2338 	push	acc
      000AF2 12r00r00         [24] 2339 	lcall	_printf_tiny
      000AF5 15 81            [12] 2340 	dec	sp
      000AF7 15 81            [12] 2341 	dec	sp
      000AF9 D0 00            [24] 2342 	pop	ar0
      000AFB D0 01            [24] 2343 	pop	ar1
      000AFD D0 02            [24] 2344 	pop	ar2
      000AFF D0 03            [24] 2345 	pop	ar3
      000B01 D0 04            [24] 2346 	pop	ar4
                                   2347 ;	character.c:277: continue;                                    // continue the loop as there is no need to iterate further
      000B03 02r0Cr95         [24] 2348 	ljmp	00137$
      000B06                       2349 00133$:
                                   2350 ;	character.c:280: printf("\033[1;36m\n\r**Buffer [%d]**\n\r",i);  // print the buffer index in bold cyan color
      000B06 C0 02            [24] 2351 	push	ar2
      000B08 C0 03            [24] 2352 	push	ar3
      000B0A C0 04            [24] 2353 	push	ar4
      000B0C C0 04            [24] 2354 	push	ar4
      000B0E C0 03            [24] 2355 	push	ar3
      000B10 C0 02            [24] 2356 	push	ar2
      000B12 C0 01            [24] 2357 	push	ar1
      000B14 C0 00            [24] 2358 	push	ar0
      000B16 C0 00            [24] 2359 	push	ar0
      000B18 C0 01            [24] 2360 	push	ar1
      000B1A 74rD9            [12] 2361 	mov	a,#___str_37
      000B1C C0 E0            [24] 2362 	push	acc
      000B1E 74s06            [12] 2363 	mov	a,#(___str_37 >> 8)
      000B20 C0 E0            [24] 2364 	push	acc
      000B22 74 80            [12] 2365 	mov	a,#0x80
      000B24 C0 E0            [24] 2366 	push	acc
      000B26 12r00r00         [24] 2367 	lcall	_printf
      000B29 E5 81            [12] 2368 	mov	a,sp
      000B2B 24 FB            [12] 2369 	add	a,#0xfb
      000B2D F5 81            [12] 2370 	mov	sp,a
      000B2F D0 00            [24] 2371 	pop	ar0
      000B31 D0 01            [24] 2372 	pop	ar1
      000B33 D0 02            [24] 2373 	pop	ar2
      000B35 D0 03            [24] 2374 	pop	ar3
      000B37 D0 04            [24] 2375 	pop	ar4
                                   2376 ;	character.c:281: printf("\033[1;0m\n\rBuffer [%d] : Start Address = [%p] \n\r",i,new_buffer_arr[i]); // print the start address of the buffer with index i
      000B39 85*04 82         [24] 2377 	mov	dpl,_command_processing_sloc0_1_0
      000B3C 85*05 83         [24] 2378 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000B3F E0               [24] 2379 	movx	a,@dptr
      000B40 FB               [12] 2380 	mov	r3,a
      000B41 A3               [24] 2381 	inc	dptr
      000B42 E0               [24] 2382 	movx	a,@dptr
      000B43 FC               [12] 2383 	mov	r4,a
      000B44 7A 00            [12] 2384 	mov	r2,#0x00
      000B46 C0 04            [24] 2385 	push	ar4
      000B48 C0 03            [24] 2386 	push	ar3
      000B4A C0 02            [24] 2387 	push	ar2
      000B4C C0 01            [24] 2388 	push	ar1
      000B4E C0 00            [24] 2389 	push	ar0
      000B50 C0 03            [24] 2390 	push	ar3
      000B52 C0 04            [24] 2391 	push	ar4
      000B54 C0 02            [24] 2392 	push	ar2
      000B56 C0 00            [24] 2393 	push	ar0
      000B58 C0 01            [24] 2394 	push	ar1
      000B5A 74rF4            [12] 2395 	mov	a,#___str_38
      000B5C C0 E0            [24] 2396 	push	acc
      000B5E 74s06            [12] 2397 	mov	a,#(___str_38 >> 8)
      000B60 C0 E0            [24] 2398 	push	acc
      000B62 74 80            [12] 2399 	mov	a,#0x80
      000B64 C0 E0            [24] 2400 	push	acc
      000B66 12r00r00         [24] 2401 	lcall	_printf
      000B69 E5 81            [12] 2402 	mov	a,sp
      000B6B 24 F8            [12] 2403 	add	a,#0xf8
      000B6D F5 81            [12] 2404 	mov	sp,a
      000B6F D0 00            [24] 2405 	pop	ar0
      000B71 D0 01            [24] 2406 	pop	ar1
      000B73 D0 02            [24] 2407 	pop	ar2
      000B75 D0 03            [24] 2408 	pop	ar3
      000B77 D0 04            [24] 2409 	pop	ar4
                                   2410 ;	character.c:282: printf("\033[1;0m\n\rBuffer [%d] : End Address   = [%p] \n\r",i,new_buffer_arr[i] + buffer_size_arr[i]); // print the end address of the buffer with index i
      000B79 85*04 82         [24] 2411 	mov	dpl,_command_processing_sloc0_1_0
      000B7C 85*05 83         [24] 2412 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000B7F E0               [24] 2413 	movx	a,@dptr
      000B80 F5*0C            [12] 2414 	mov	_command_processing_sloc3_1_0,a
      000B82 A3               [24] 2415 	inc	dptr
      000B83 E0               [24] 2416 	movx	a,@dptr
      000B84 F5*0D            [12] 2417 	mov	(_command_processing_sloc3_1_0 + 1),a
      000B86 E5*06            [12] 2418 	mov	a,_command_processing_sloc1_1_0
      000B88 24r00            [12] 2419 	add	a,#_buffer_size_arr
      000B8A FA               [12] 2420 	mov	r2,a
      000B8B E5*07            [12] 2421 	mov	a,(_command_processing_sloc1_1_0 + 1)
      000B8D 34s00            [12] 2422 	addc	a,#(_buffer_size_arr >> 8)
      000B8F FC               [12] 2423 	mov	r4,a
      000B90 8A 82            [24] 2424 	mov	dpl,r2
      000B92 8C 83            [24] 2425 	mov	dph,r4
      000B94 E0               [24] 2426 	movx	a,@dptr
      000B95 FB               [12] 2427 	mov	r3,a
      000B96 A3               [24] 2428 	inc	dptr
      000B97 E0               [24] 2429 	movx	a,@dptr
      000B98 FF               [12] 2430 	mov	r7,a
      000B99 EB               [12] 2431 	mov	a,r3
      000B9A 25*0C            [12] 2432 	add	a,_command_processing_sloc3_1_0
      000B9C FB               [12] 2433 	mov	r3,a
      000B9D EF               [12] 2434 	mov	a,r7
      000B9E 35*0D            [12] 2435 	addc	a,(_command_processing_sloc3_1_0 + 1)
      000BA0 FF               [12] 2436 	mov	r7,a
      000BA1 7E 00            [12] 2437 	mov	r6,#0x00
      000BA3 C0 04            [24] 2438 	push	ar4
      000BA5 C0 03            [24] 2439 	push	ar3
      000BA7 C0 02            [24] 2440 	push	ar2
      000BA9 C0 01            [24] 2441 	push	ar1
      000BAB C0 00            [24] 2442 	push	ar0
      000BAD C0 03            [24] 2443 	push	ar3
      000BAF C0 07            [24] 2444 	push	ar7
      000BB1 C0 06            [24] 2445 	push	ar6
      000BB3 C0 00            [24] 2446 	push	ar0
      000BB5 C0 01            [24] 2447 	push	ar1
      000BB7 74r22            [12] 2448 	mov	a,#___str_39
      000BB9 C0 E0            [24] 2449 	push	acc
      000BBB 74s07            [12] 2450 	mov	a,#(___str_39 >> 8)
      000BBD C0 E0            [24] 2451 	push	acc
      000BBF 74 80            [12] 2452 	mov	a,#0x80
      000BC1 C0 E0            [24] 2453 	push	acc
      000BC3 12r00r00         [24] 2454 	lcall	_printf
      000BC6 E5 81            [12] 2455 	mov	a,sp
      000BC8 24 F8            [12] 2456 	add	a,#0xf8
      000BCA F5 81            [12] 2457 	mov	sp,a
      000BCC D0 00            [24] 2458 	pop	ar0
      000BCE D0 01            [24] 2459 	pop	ar1
      000BD0 D0 02            [24] 2460 	pop	ar2
      000BD2 D0 03            [24] 2461 	pop	ar3
      000BD4 D0 04            [24] 2462 	pop	ar4
                                   2463 ;	character.c:283: printf("\033[1;0m\n\rBuffer [%d] : Total Size    = [%d] \n\r",i,buffer_size_arr[i]); // print the total size of the buffer with index i
      000BD6 8A 82            [24] 2464 	mov	dpl,r2
      000BD8 8C 83            [24] 2465 	mov	dph,r4
      000BDA E0               [24] 2466 	movx	a,@dptr
      000BDB FA               [12] 2467 	mov	r2,a
      000BDC A3               [24] 2468 	inc	dptr
      000BDD E0               [24] 2469 	movx	a,@dptr
      000BDE FC               [12] 2470 	mov	r4,a
      000BDF C0 04            [24] 2471 	push	ar4
      000BE1 C0 03            [24] 2472 	push	ar3
      000BE3 C0 02            [24] 2473 	push	ar2
      000BE5 C0 01            [24] 2474 	push	ar1
      000BE7 C0 00            [24] 2475 	push	ar0
      000BE9 C0 02            [24] 2476 	push	ar2
      000BEB C0 04            [24] 2477 	push	ar4
      000BED C0 00            [24] 2478 	push	ar0
      000BEF C0 01            [24] 2479 	push	ar1
      000BF1 74r50            [12] 2480 	mov	a,#___str_40
      000BF3 C0 E0            [24] 2481 	push	acc
      000BF5 74s07            [12] 2482 	mov	a,#(___str_40 >> 8)
      000BF7 C0 E0            [24] 2483 	push	acc
      000BF9 74 80            [12] 2484 	mov	a,#0x80
      000BFB C0 E0            [24] 2485 	push	acc
      000BFD 12r00r00         [24] 2486 	lcall	_printf
      000C00 E5 81            [12] 2487 	mov	a,sp
      000C02 24 F9            [12] 2488 	add	a,#0xf9
      000C04 F5 81            [12] 2489 	mov	sp,a
      000C06 D0 00            [24] 2490 	pop	ar0
      000C08 D0 01            [24] 2491 	pop	ar1
      000C0A D0 02            [24] 2492 	pop	ar2
      000C0C D0 03            [24] 2493 	pop	ar3
      000C0E D0 04            [24] 2494 	pop	ar4
                                   2495 ;	character.c:284: if(i == 0)                                      // if it is the first buffer
      000C10 D0 04            [24] 2496 	pop	ar4
      000C12 D0 03            [24] 2497 	pop	ar3
      000C14 D0 02            [24] 2498 	pop	ar2
      000C16 E8               [12] 2499 	mov	a,r0
      000C17 49               [12] 2500 	orl	a,r1
      000C18 70 7B            [24] 2501 	jnz	00137$
                                   2502 ;	character.c:286: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*storage_character_count); // print the number of storage characters since last ?= for the first buffer
      000C1A 85*0E 82         [24] 2503 	mov	dpl,_command_processing_sloc4_1_0
      000C1D 85*0F 83         [24] 2504 	mov	dph,(_command_processing_sloc4_1_0 + 1)
      000C20 85*10 F0         [24] 2505 	mov	b,(_command_processing_sloc4_1_0 + 2)
      000C23 12r00r00         [24] 2506 	lcall	__gptrget
      000C26 FE               [12] 2507 	mov	r6,a
      000C27 A3               [24] 2508 	inc	dptr
      000C28 12r00r00         [24] 2509 	lcall	__gptrget
      000C2B FF               [12] 2510 	mov	r7,a
      000C2C C0 04            [24] 2511 	push	ar4
      000C2E C0 03            [24] 2512 	push	ar3
      000C30 C0 02            [24] 2513 	push	ar2
      000C32 C0 01            [24] 2514 	push	ar1
      000C34 C0 00            [24] 2515 	push	ar0
      000C36 C0 06            [24] 2516 	push	ar6
      000C38 C0 07            [24] 2517 	push	ar7
      000C3A C0 00            [24] 2518 	push	ar0
      000C3C C0 01            [24] 2519 	push	ar1
      000C3E 74r7E            [12] 2520 	mov	a,#___str_41
      000C40 C0 E0            [24] 2521 	push	acc
      000C42 74s07            [12] 2522 	mov	a,#(___str_41 >> 8)
      000C44 C0 E0            [24] 2523 	push	acc
      000C46 12r00r00         [24] 2524 	lcall	_printf_tiny
      000C49 E5 81            [12] 2525 	mov	a,sp
      000C4B 24 FA            [12] 2526 	add	a,#0xfa
      000C4D F5 81            [12] 2527 	mov	sp,a
      000C4F D0 00            [24] 2528 	pop	ar0
      000C51 D0 01            [24] 2529 	pop	ar1
      000C53 D0 02            [24] 2530 	pop	ar2
      000C55 D0 03            [24] 2531 	pop	ar3
      000C57 D0 04            [24] 2532 	pop	ar4
                                   2533 ;	character.c:287: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*total_characters_count); // print the number of storage characters since last ?= for the first buffer
      000C59 8A 82            [24] 2534 	mov	dpl,r2
      000C5B 8B 83            [24] 2535 	mov	dph,r3
      000C5D 8C F0            [24] 2536 	mov	b,r4
      000C5F 12r00r00         [24] 2537 	lcall	__gptrget
      000C62 FE               [12] 2538 	mov	r6,a
      000C63 A3               [24] 2539 	inc	dptr
      000C64 12r00r00         [24] 2540 	lcall	__gptrget
      000C67 FF               [12] 2541 	mov	r7,a
      000C68 C0 04            [24] 2542 	push	ar4
      000C6A C0 03            [24] 2543 	push	ar3
      000C6C C0 02            [24] 2544 	push	ar2
      000C6E C0 01            [24] 2545 	push	ar1
      000C70 C0 00            [24] 2546 	push	ar0
      000C72 C0 06            [24] 2547 	push	ar6
      000C74 C0 07            [24] 2548 	push	ar7
      000C76 C0 00            [24] 2549 	push	ar0
      000C78 C0 01            [24] 2550 	push	ar1
      000C7A 74r7E            [12] 2551 	mov	a,#___str_41
      000C7C C0 E0            [24] 2552 	push	acc
      000C7E 74s07            [12] 2553 	mov	a,#(___str_41 >> 8)
      000C80 C0 E0            [24] 2554 	push	acc
      000C82 12r00r00         [24] 2555 	lcall	_printf_tiny
      000C85 E5 81            [12] 2556 	mov	a,sp
      000C87 24 FA            [12] 2557 	add	a,#0xfa
      000C89 F5 81            [12] 2558 	mov	sp,a
      000C8B D0 00            [24] 2559 	pop	ar0
      000C8D D0 01            [24] 2560 	pop	ar1
      000C8F D0 02            [24] 2561 	pop	ar2
      000C91 D0 03            [24] 2562 	pop	ar3
      000C93 D0 04            [24] 2563 	pop	ar4
      000C95                       2564 00137$:
                                   2565 ;	character.c:272: for(int i=0; i<*new_buffer_index; i++)              // iterate over the new buffer array using a loop variable i
      000C95 08               [12] 2566 	inc	r0
      000C96 B8 00 01         [24] 2567 	cjne	r0,#0x00,00267$
      000C99 09               [12] 2568 	inc	r1
      000C9A                       2569 00267$:
      000C9A 02r0Ar83         [24] 2570 	ljmp	00147$
      000C9D                       2571 00138$:
                                   2572 ;	character.c:291: *storage_character_count = 0;
      000C9D 85*0E 82         [24] 2573 	mov	dpl,_command_processing_sloc4_1_0
      000CA0 85*0F 83         [24] 2574 	mov	dph,(_command_processing_sloc4_1_0 + 1)
      000CA3 85*10 F0         [24] 2575 	mov	b,(_command_processing_sloc4_1_0 + 2)
      000CA6 E4               [12] 2576 	clr	a
      000CA7 12r00r00         [24] 2577 	lcall	__gptrput
      000CAA A3               [24] 2578 	inc	dptr
      000CAB 12r00r00         [24] 2579 	lcall	__gptrput
                                   2580 ;	character.c:292: *total_characters_count = 0;
      000CAE 8A 82            [24] 2581 	mov	dpl,r2
      000CB0 8B 83            [24] 2582 	mov	dph,r3
      000CB2 8C F0            [24] 2583 	mov	b,r4
      000CB4 12r00r00         [24] 2584 	lcall	__gptrput
      000CB7 A3               [24] 2585 	inc	dptr
      000CB8 12r00r00         [24] 2586 	lcall	__gptrput
                                   2587 ;	character.c:295: buffer0_hexdump(LENGTH_32);
      000CBB 90 00 20         [24] 2588 	mov	dptr,#0x0020
      000CBE 12r00r40         [24] 2589 	lcall	_buffer0_hexdump
                                   2590 ;	character.c:298: empty_buffer0();
      000CC1 12r00r00         [24] 2591 	lcall	_empty_buffer0
                                   2592 ;	character.c:300: printf_tiny(" \033[1;34m|************ REPORT ENDED  *******************|\n\r\n\r\n\r");
      000CC4 74rC5            [12] 2593 	mov	a,#___str_42
      000CC6 C0 E0            [24] 2594 	push	acc
      000CC8 74s07            [12] 2595 	mov	a,#(___str_42 >> 8)
      000CCA C0 E0            [24] 2596 	push	acc
      000CCC 12r00r00         [24] 2597 	lcall	_printf_tiny
      000CCF 15 81            [12] 2598 	dec	sp
      000CD1 15 81            [12] 2599 	dec	sp
                                   2600 ;	character.c:302: return BUFFER0_CLEARED;
      000CD3 90 00 02         [24] 2601 	mov	dptr,#0x0002
                                   2602 ;	character.c:307: }
      000CD6 22               [24] 2603 	ret
      000CD7                       2604 00142$:
                                   2605 ;	character.c:309: return ALL_BUFFER_NOT_CLEARED;
      000CD7 90 00 00         [24] 2606 	mov	dptr,#0x0000
                                   2607 ;	character.c:310: }
      000CDA 22               [24] 2608 	ret
                                   2609 	.area CSEG    (CODE)
                                   2610 	.area CONST   (CODE)
                                   2611 	.area CONST   (CODE)
      000000                       2612 ___str_0:
      000000 1B                    2613 	.db 0x1b
      000001 5B 31 3B 33 34 6D     2614 	.ascii "[1;34m"
      000007 0A                    2615 	.db 0x0a
      000008 0D                    2616 	.db 0x0d
      000009 00                    2617 	.db 0x00
                                   2618 	.area CSEG    (CODE)
                                   2619 	.area CONST   (CODE)
      00000A                       2620 ___str_1:
      00000A 25 70 20 3A           2621 	.ascii "%p :"
      00000E 00                    2622 	.db 0x00
                                   2623 	.area CSEG    (CODE)
                                   2624 	.area CONST   (CODE)
      00000F                       2625 ___str_2:
      00000F 1B                    2626 	.db 0x1b
      000010 5B 31 3B 33 34 6D 25  2627 	.ascii "[1;34m%p :"
             70 20 3A
      00001A 00                    2628 	.db 0x00
                                   2629 	.area CSEG    (CODE)
                                   2630 	.area CONST   (CODE)
      00001B                       2631 ___str_3:
      00001B 1B                    2632 	.db 0x1b
      00001C 5B 31 3B 33 34 6D 20  2633 	.ascii "[1;34m XX"
             58 58
      000025 00                    2634 	.db 0x00
                                   2635 	.area CSEG    (CODE)
                                   2636 	.area CONST   (CODE)
      000026                       2637 ___str_4:
      000026 1B                    2638 	.db 0x1b
      000027 5B 31 3B 33 34 6D 20  2639 	.ascii "[1;34m %x"
             25 78
      000030 00                    2640 	.db 0x00
                                   2641 	.area CSEG    (CODE)
                                   2642 	.area CONST   (CODE)
      000031                       2643 ___str_5:
      000031 1B                    2644 	.db 0x1b
      000032 5B 31 3B 33 34 6D 20  2645 	.ascii "[1;34m %d"
             25 64
      00003B 00                    2646 	.db 0x00
                                   2647 	.area CSEG    (CODE)
                                   2648 	.area CONST   (CODE)
      00003C                       2649 ___str_6:
      00003C 1B                    2650 	.db 0x1b
      00003D 5B 31 3B 33 33 6D 7C  2651 	.ascii "[1;33m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000074 0A                    2652 	.db 0x0a
      000075 0D                    2653 	.db 0x0d
      000076 00                    2654 	.db 0x00
                                   2655 	.area CSEG    (CODE)
                                   2656 	.area CONST   (CODE)
      000077                       2657 ___str_7:
      000077 1B                    2658 	.db 0x1b
      000078 5B 31 3B 33 33 6D 7C  2659 	.ascii "[1;33m|************ Processing [+] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2B 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0000AF 0A                    2660 	.db 0x0a
      0000B0 0D                    2661 	.db 0x0d
      0000B1 00                    2662 	.db 0x00
                                   2663 	.area CSEG    (CODE)
                                   2664 	.area CONST   (CODE)
      0000B2                       2665 ___str_8:
      0000B2 1B                    2666 	.db 0x1b
      0000B3 5B 31 3B 33 36 6D 7C  2667 	.ascii "[1;36m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0000EA 0A                    2668 	.db 0x0a
      0000EB 0D                    2669 	.db 0x0d
      0000EC 00                    2670 	.db 0x00
                                   2671 	.area CSEG    (CODE)
                                   2672 	.area CONST   (CODE)
      0000ED                       2673 ___str_9:
      0000ED 1B                    2674 	.db 0x1b
      0000EE 5B 31 3B 33 36 6D 7C  2675 	.ascii "[1;36m|********* Enter size for new bufer ************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 45 6E 74 65
             72 20 73 69 7A 65 20
             66 6F 72 20 6E 65 77
             20 62 75 66 65 72 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000125 0A                    2676 	.db 0x0a
      000126 0D                    2677 	.db 0x0d
      000127 00                    2678 	.db 0x00
                                   2679 	.area CSEG    (CODE)
                                   2680 	.area CONST   (CODE)
      000128                       2681 ___str_10:
      000128 1B                    2682 	.db 0x1b
      000129 5B 31 3B 33 31 6D 49  2683 	.ascii "[1;31mInvalid Input : The buffer size should be in the range"
             6E 76 61 6C 69 64 20
             49 6E 70 75 74 20 3A
             20 54 68 65 20 62 75
             66 66 65 72 20 73 69
             7A 65 20 73 68 6F 75
             6C 64 20 62 65 20 69
             6E 20 74 68 65 20 72
             61 6E 67 65
      000165 20 5B 33 30 2C 20 33  2684 	.ascii " [30, 300]"
             30 30 5D
      00016F 0A                    2685 	.db 0x0a
      000170 0D                    2686 	.db 0x0d
      000171 0A                    2687 	.db 0x0a
      000172 0D                    2688 	.db 0x0d
      000173 00                    2689 	.db 0x00
                                   2690 	.area CSEG    (CODE)
                                   2691 	.area CONST   (CODE)
      000174                       2692 ___str_11:
      000174 1B                    2693 	.db 0x1b
      000175 5B 31 3B 33 31 6D 49  2694 	.ascii "[1;31mInvalid input : Failed to allocate buffer"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 46 61 69 6C 65 64
             20 74 6F 20 61 6C 6C
             6F 63 61 74 65 20 62
             75 66 66 65 72
      0001A4 0A                    2695 	.db 0x0a
      0001A5 0D                    2696 	.db 0x0d
      0001A6 0A                    2697 	.db 0x0a
      0001A7 0D                    2698 	.db 0x0d
      0001A8 00                    2699 	.db 0x00
                                   2700 	.area CSEG    (CODE)
                                   2701 	.area CONST   (CODE)
      0001A9                       2702 ___str_12:
      0001A9 1B                    2703 	.db 0x1b
      0001AA 5B 31 3B 30 6D 4E 65  2704 	.ascii "[1;0mNew buffer allocated successfully : Buffer[%d]"
             77 20 62 75 66 66 65
             72 20 61 6C 6C 6F 63
             61 74 65 64 20 73 75
             63 63 65 73 73 66 75
             6C 6C 79 20 3A 20 42
             75 66 66 65 72 5B 25
             64 5D
      0001DD 0A                    2705 	.db 0x0a
      0001DE 0D                    2706 	.db 0x0d
      0001DF 00                    2707 	.db 0x00
                                   2708 	.area CSEG    (CODE)
                                   2709 	.area CONST   (CODE)
      0001E0                       2710 ___str_13:
      0001E0 1B                    2711 	.db 0x1b
      0001E1 5B 31 3B 30 6D 54 6F  2712 	.ascii "[1;0mTotal Number of Buffers including buffer0 & buffer1 = ["
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 69 6E 63 6C 75 64
             69 6E 67 20 62 75 66
             66 65 72 30 20 26 20
             62 75 66 66 65 72 31
             20 3D 20 5B
      00021D 25 64 5D              2713 	.ascii "%d]"
      000220 0A                    2714 	.db 0x0a
      000221 0D                    2715 	.db 0x0d
      000222 00                    2716 	.db 0x00
                                   2717 	.area CSEG    (CODE)
                                   2718 	.area CONST   (CODE)
      000223                       2719 ___str_14:
      000223 1B                    2720 	.db 0x1b
      000224 5B 31 3B 30 6D 54 6F  2721 	.ascii "[1;0mTotal Filled Buffers = [%d] "
             74 61 6C 20 46 69 6C
             6C 65 64 20 42 75 66
             66 65 72 73 20 3D 20
             5B 25 64 5D 20
      000245 0D                    2722 	.db 0x0d
      000246 0A                    2723 	.db 0x0a
      000247 54 6F 74 61 6C 20 45  2724 	.ascii "Total Empty Buffers = [%d] "
             6D 70 74 79 20 42 75
             66 66 65 72 73 20 3D
             20 5B 25 64 5D 20
      000262 0A                    2725 	.db 0x0a
      000263 0D                    2726 	.db 0x0d
      000264 0A                    2727 	.db 0x0a
      000265 0D                    2728 	.db 0x0d
      000266 00                    2729 	.db 0x00
                                   2730 	.area CSEG    (CODE)
                                   2731 	.area CONST   (CODE)
      000267                       2732 ___str_15:
      000267 1B                    2733 	.db 0x1b
      000268 5B 31 3B 33 33 6D 7C  2734 	.ascii "[1;33m|************ Processing [-] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2D 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00029F 0A                    2735 	.db 0x0a
      0002A0 0D                    2736 	.db 0x0d
      0002A1 00                    2737 	.db 0x00
                                   2738 	.area CSEG    (CODE)
                                   2739 	.area CONST   (CODE)
      0002A2                       2740 ___str_16:
      0002A2 1B                    2741 	.db 0x1b
      0002A3 5B 31 3B 33 36 6D 7C  2742 	.ascii "[1;36m|********* Enter buffer to be deleted **********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 45 6E 74 65
             72 20 62 75 66 66 65
             72 20 74 6F 20 62 65
             20 64 65 6C 65 74 65
             64 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0002DA 0A                    2743 	.db 0x0a
      0002DB 0D                    2744 	.db 0x0d
      0002DC 00                    2745 	.db 0x00
                                   2746 	.area CSEG    (CODE)
                                   2747 	.area CONST   (CODE)
      0002DD                       2748 ___str_17:
      0002DD 1B                    2749 	.db 0x1b
      0002DE 5B 31 3B 33 36 6D 7C  2750 	.ascii "[1;36m|********* Current No of buffers:[%d] ***********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 43 75 72 72
             65 6E 74 20 4E 6F 20
             6F 66 20 62 75 66 66
             65 72 73 3A 5B 25 64
             5D 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      000316 0A                    2751 	.db 0x0a
      000317 0D                    2752 	.db 0x0d
      000318 00                    2753 	.db 0x00
                                   2754 	.area CSEG    (CODE)
                                   2755 	.area CONST   (CODE)
      000319                       2756 ___str_18:
      000319 1B                    2757 	.db 0x1b
      00031A 5B 31 3B 33 36 6D 7C  2758 	.ascii "[1;36m|********* Note : Index Starts with 0 **********|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 20 4E 6F 74 65
             20 3A 20 49 6E 64 65
             78 20 53 74 61 72 74
             73 20 77 69 74 68 20
             30 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000351 0A                    2759 	.db 0x0a
      000352 0D                    2760 	.db 0x0d
      000353 00                    2761 	.db 0x00
                                   2762 	.area CSEG    (CODE)
                                   2763 	.area CONST   (CODE)
      000354                       2764 ___str_19:
      000354 1B                    2765 	.db 0x1b
      000355 5B 31 3B 33 31 6D 49  2766 	.ascii "[1;31mInvalid input : invalid digits entered "
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 69 6E 76 61 6C 69
             64 20 64 69 67 69 74
             73 20 65 6E 74 65 72
             65 64 20
      000382 0A                    2767 	.db 0x0a
      000383 0D                    2768 	.db 0x0d
      000384 0A                    2769 	.db 0x0a
      000385 0D                    2770 	.db 0x0d
      000386 00                    2771 	.db 0x00
                                   2772 	.area CSEG    (CODE)
                                   2773 	.area CONST   (CODE)
      000387                       2774 ___str_20:
      000387 1B                    2775 	.db 0x1b
      000388 5B 31 3B 33 31 6D 49  2776 	.ascii "[1;31mInvalid input : buffer number can't be 0"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 63 61 6E 27 74 20
             62 65 20 30
      0003B6 0A                    2777 	.db 0x0a
      0003B7 0D                    2778 	.db 0x0d
      0003B8 0A                    2779 	.db 0x0a
      0003B9 00                    2780 	.db 0x00
                                   2781 	.area CSEG    (CODE)
                                   2782 	.area CONST   (CODE)
      0003BA                       2783 ___str_21:
      0003BA 1B                    2784 	.db 0x1b
      0003BB 5B 31 3B 33 31 6D 49  2785 	.ascii "[1;31mInvalid input : buffer[%d] was already cleared earlier"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             5B 25 64 5D 20 77 61
             73 20 61 6C 72 65 61
             64 79 20 63 6C 65 61
             72 65 64 20 65 61 72
             6C 69 65 72
      0003F7 0A                    2786 	.db 0x0a
      0003F8 0D                    2787 	.db 0x0d
      0003F9 00                    2788 	.db 0x00
                                   2789 	.area CSEG    (CODE)
                                   2790 	.area CONST   (CODE)
      0003FA                       2791 ___str_22:
      0003FA 1B                    2792 	.db 0x1b
      0003FB 5B 31 3B 33 31 6D 49  2793 	.ascii "[1;31mInvalid input : buffer number doesn't exist"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 64 6F 65 73 6E 27
             74 20 65 78 69 73 74
      00042C 0A                    2794 	.db 0x0a
      00042D 0D                    2795 	.db 0x0d
      00042E 00                    2796 	.db 0x00
                                   2797 	.area CSEG    (CODE)
                                   2798 	.area CONST   (CODE)
      00042F                       2799 ___str_23:
      00042F 1B                    2800 	.db 0x1b
      000430 5B 31 3B 30 6D 42 75  2801 	.ascii "[1;0mBuffer [%d] requested to be deleted"
             66 66 65 72 20 5B 25
             64 5D 20 72 65 71 75
             65 73 74 65 64 20 74
             6F 20 62 65 20 64 65
             6C 65 74 65 64
      000458 0A                    2802 	.db 0x0a
      000459 0D                    2803 	.db 0x0d
      00045A 00                    2804 	.db 0x00
                                   2805 	.area CSEG    (CODE)
                                   2806 	.area CONST   (CODE)
      00045B                       2807 ___str_24:
      00045B 50 65 72 66 6F 72 6D  2808 	.ascii "Performing buffer freeing operation"
             69 6E 67 20 62 75 66
             66 65 72 20 66 72 65
             65 69 6E 67 20 6F 70
             65 72 61 74 69 6F 6E
      00047E 0D                    2809 	.db 0x0d
      00047F 0A                    2810 	.db 0x0a
      000480 00                    2811 	.db 0x00
                                   2812 	.area CSEG    (CODE)
                                   2813 	.area CONST   (CODE)
      000481                       2814 ___str_25:
      000481 2A 2A 2A 42 75 66 66  2815 	.ascii "***Buffer [%d] is freed****"
             65 72 20 5B 25 64 5D
             20 69 73 20 66 72 65
             65 64 2A 2A 2A 2A
      00049C 0A                    2816 	.db 0x0a
      00049D 0D                    2817 	.db 0x0d
      00049E 00                    2818 	.db 0x00
                                   2819 	.area CSEG    (CODE)
                                   2820 	.area CONST   (CODE)
      00049F                       2821 ___str_26:
      00049F 1B                    2822 	.db 0x1b
      0004A0 5B 31 3B 30 6D 42 75  2823 	.ascii "[1;0mBuffer[%d] de-allocated successfully  "
             66 66 65 72 5B 25 64
             5D 20 64 65 2D 61 6C
             6C 6F 63 61 74 65 64
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             20
      0004CB 0A                    2824 	.db 0x0a
      0004CC 0D                    2825 	.db 0x0d
      0004CD 00                    2826 	.db 0x00
                                   2827 	.area CSEG    (CODE)
                                   2828 	.area CONST   (CODE)
      0004CE                       2829 ___str_27:
      0004CE 1B                    2830 	.db 0x1b
      0004CF 5B 31 3B 30 6D 54 6F  2831 	.ascii "[1;0mTotal Number of Buffers after deallocation = [%d]"
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 61 66 74 65 72 20
             64 65 61 6C 6C 6F 63
             61 74 69 6F 6E 20 3D
             20 5B 25 64 5D
      000505 0A                    2832 	.db 0x0a
      000506 0D                    2833 	.db 0x0d
      000507 0A                    2834 	.db 0x0a
      000508 0D                    2835 	.db 0x0d
      000509 00                    2836 	.db 0x00
                                   2837 	.area CSEG    (CODE)
                                   2838 	.area CONST   (CODE)
      00050A                       2839 ___str_28:
      00050A 1B                    2840 	.db 0x1b
      00050B 5B 31 3B 33 33 6D 7C  2841 	.ascii "[1;33m|************ Processing [@] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 40 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000542 0A                    2842 	.db 0x0a
      000543 0D                    2843 	.db 0x0d
      000544 00                    2844 	.db 0x00
                                   2845 	.area CSEG    (CODE)
                                   2846 	.area CONST   (CODE)
      000545                       2847 ___str_29:
      000545 1B                    2848 	.db 0x1b
      000546 5B 31 3B 30 6D 42 75  2849 	.ascii "[1;0mBuffer[%d] freed"
             66 66 65 72 5B 25 64
             5D 20 66 72 65 65 64
      00055B 0A                    2850 	.db 0x0a
      00055C 0D                    2851 	.db 0x0d
      00055D 00                    2852 	.db 0x00
                                   2853 	.area CSEG    (CODE)
                                   2854 	.area CONST   (CODE)
      00055E                       2855 ___str_30:
      00055E 1B                    2856 	.db 0x1b
      00055F 5B 31 3B 30 6D 42 75  2857 	.ascii "[1;0mBuffer[%d] was already NULL"
             66 66 65 72 5B 25 64
             5D 20 77 61 73 20 61
             6C 72 65 61 64 79 20
             4E 55 4C 4C
      00057F 0A                    2858 	.db 0x0a
      000580 0D                    2859 	.db 0x0d
      000581 00                    2860 	.db 0x00
                                   2861 	.area CSEG    (CODE)
                                   2862 	.area CONST   (CODE)
      000582                       2863 ___str_31:
      000582 1B                    2864 	.db 0x1b
      000583 5B 31 3B 33 33 6D     2865 	.ascii "[1;33m"
      000589 0D                    2866 	.db 0x0d
      00058A 0A                    2867 	.db 0x0a
      00058B 7C 2A 2A 2A 2A 2A 2A  2868 	.ascii "|************ Processing [=] *******************|"
             2A 2A 2A 2A 2A 2A 20
             50 72 6F 63 65 73 73
             69 6E 67 20 5B 3D 5D
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      0005BC 0A                    2869 	.db 0x0a
      0005BD 0D                    2870 	.db 0x0d
      0005BE 00                    2871 	.db 0x00
                                   2872 	.area CSEG    (CODE)
                                   2873 	.area CONST   (CODE)
      0005BF                       2874 ___str_32:
      0005BF 1B                    2875 	.db 0x1b
      0005C0 5B 31 3B 33 33 6D 7C  2876 	.ascii "[1;33m|************ Processing [?] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 3F 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0005F7 0A                    2877 	.db 0x0a
      0005F8 0D                    2878 	.db 0x0d
      0005F9 00                    2879 	.db 0x00
                                   2880 	.area CSEG    (CODE)
                                   2881 	.area CONST   (CODE)
      0005FA                       2882 ___str_33:
      0005FA 20                    2883 	.ascii " "
      0005FB 1B                    2884 	.db 0x1b
      0005FC 5B 31 3B 33 34 6D     2885 	.ascii "[1;34m"
      000602 0D                    2886 	.db 0x0d
      000603 0A                    2887 	.db 0x0a
      000604 7C 2A 2A 2A 2A 2A 2A  2888 	.ascii "|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      000635 0A                    2889 	.db 0x0a
      000636 0D                    2890 	.db 0x0d
      000637 00                    2891 	.db 0x00
                                   2892 	.area CSEG    (CODE)
                                   2893 	.area CONST   (CODE)
      000638                       2894 ___str_34:
      000638 20                    2895 	.ascii " "
      000639 1B                    2896 	.db 0x1b
      00063A 5B 31 3B 33 34 6D 7C  2897 	.ascii "[1;34m|*************** HEAP REPORT *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 20 48 45 41 50 20
             52 45 50 4F 52 54 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000671 0A                    2898 	.db 0x0a
      000672 0D                    2899 	.db 0x0d
      000673 00                    2900 	.db 0x00
                                   2901 	.area CSEG    (CODE)
                                   2902 	.area CONST   (CODE)
      000674                       2903 ___str_35:
      000674 20                    2904 	.ascii " "
      000675 1B                    2905 	.db 0x1b
      000676 5B 31 3B 33 34 6D 7C  2906 	.ascii "[1;34m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0006AD 0A                    2907 	.db 0x0a
      0006AE 0D                    2908 	.db 0x0d
      0006AF 00                    2909 	.db 0x00
                                   2910 	.area CSEG    (CODE)
                                   2911 	.area CONST   (CODE)
      0006B0                       2912 ___str_36:
      0006B0 1B                    2913 	.db 0x1b
      0006B1 5B 31 3B 33 31 6D     2914 	.ascii "[1;31m"
      0006B7 0A                    2915 	.db 0x0a
      0006B8 0D                    2916 	.db 0x0d
      0006B9 42 75 66 66 65 72 20  2917 	.ascii "Buffer [%d] already cleared!!"
             5B 25 64 5D 20 61 6C
             72 65 61 64 79 20 63
             6C 65 61 72 65 64 21
             21
      0006D6 0A                    2918 	.db 0x0a
      0006D7 0D                    2919 	.db 0x0d
      0006D8 00                    2920 	.db 0x00
                                   2921 	.area CSEG    (CODE)
                                   2922 	.area CONST   (CODE)
      0006D9                       2923 ___str_37:
      0006D9 1B                    2924 	.db 0x1b
      0006DA 5B 31 3B 33 36 6D     2925 	.ascii "[1;36m"
      0006E0 0A                    2926 	.db 0x0a
      0006E1 0D                    2927 	.db 0x0d
      0006E2 2A 2A 42 75 66 66 65  2928 	.ascii "**Buffer [%d]**"
             72 20 5B 25 64 5D 2A
             2A
      0006F1 0A                    2929 	.db 0x0a
      0006F2 0D                    2930 	.db 0x0d
      0006F3 00                    2931 	.db 0x00
                                   2932 	.area CSEG    (CODE)
                                   2933 	.area CONST   (CODE)
      0006F4                       2934 ___str_38:
      0006F4 1B                    2935 	.db 0x1b
      0006F5 5B 31 3B 30 6D        2936 	.ascii "[1;0m"
      0006FA 0A                    2937 	.db 0x0a
      0006FB 0D                    2938 	.db 0x0d
      0006FC 42 75 66 66 65 72 20  2939 	.ascii "Buffer [%d] : Start Address = [%p] "
             5B 25 64 5D 20 3A 20
             53 74 61 72 74 20 41
             64 64 72 65 73 73 20
             3D 20 5B 25 70 5D 20
      00071F 0A                    2940 	.db 0x0a
      000720 0D                    2941 	.db 0x0d
      000721 00                    2942 	.db 0x00
                                   2943 	.area CSEG    (CODE)
                                   2944 	.area CONST   (CODE)
      000722                       2945 ___str_39:
      000722 1B                    2946 	.db 0x1b
      000723 5B 31 3B 30 6D        2947 	.ascii "[1;0m"
      000728 0A                    2948 	.db 0x0a
      000729 0D                    2949 	.db 0x0d
      00072A 42 75 66 66 65 72 20  2950 	.ascii "Buffer [%d] : End Address   = [%p] "
             5B 25 64 5D 20 3A 20
             45 6E 64 20 41 64 64
             72 65 73 73 20 20 20
             3D 20 5B 25 70 5D 20
      00074D 0A                    2951 	.db 0x0a
      00074E 0D                    2952 	.db 0x0d
      00074F 00                    2953 	.db 0x00
                                   2954 	.area CSEG    (CODE)
                                   2955 	.area CONST   (CODE)
      000750                       2956 ___str_40:
      000750 1B                    2957 	.db 0x1b
      000751 5B 31 3B 30 6D        2958 	.ascii "[1;0m"
      000756 0A                    2959 	.db 0x0a
      000757 0D                    2960 	.db 0x0d
      000758 42 75 66 66 65 72 20  2961 	.ascii "Buffer [%d] : Total Size    = [%d] "
             5B 25 64 5D 20 3A 20
             54 6F 74 61 6C 20 53
             69 7A 65 20 20 20 20
             3D 20 5B 25 64 5D 20
      00077B 0A                    2962 	.db 0x0a
      00077C 0D                    2963 	.db 0x0d
      00077D 00                    2964 	.db 0x00
                                   2965 	.area CSEG    (CODE)
                                   2966 	.area CONST   (CODE)
      00077E                       2967 ___str_41:
      00077E 1B                    2968 	.db 0x1b
      00077F 5B 31 3B 30 6D        2969 	.ascii "[1;0m"
      000784 0A                    2970 	.db 0x0a
      000785 0D                    2971 	.db 0x0d
      000786 42 75 66 66 65 72 5B  2972 	.ascii "Buffer[%d] : Number of storage characters since last ?= [%d]"
             25 64 5D 20 3A 20 4E
             75 6D 62 65 72 20 6F
             66 20 73 74 6F 72 61
             67 65 20 63 68 61 72
             61 63 74 65 72 73 20
             73 69 6E 63 65 20 6C
             61 73 74 20 3F 3D 20
             5B 25 64 5D
      0007C2 0A                    2973 	.db 0x0a
      0007C3 0D                    2974 	.db 0x0d
      0007C4 00                    2975 	.db 0x00
                                   2976 	.area CSEG    (CODE)
                                   2977 	.area CONST   (CODE)
      0007C5                       2978 ___str_42:
      0007C5 20                    2979 	.ascii " "
      0007C6 1B                    2980 	.db 0x1b
      0007C7 5B 31 3B 33 34 6D 7C  2981 	.ascii "[1;34m|************ REPORT ENDED  *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 52
             45 50 4F 52 54 20 45
             4E 44 45 44 20 20 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 7C
      0007FD 0A                    2982 	.db 0x0a
      0007FE 0D                    2983 	.db 0x0d
      0007FF 0A                    2984 	.db 0x0a
      000800 0D                    2985 	.db 0x0d
      000801 0A                    2986 	.db 0x0a
      000802 0D                    2987 	.db 0x0d
      000803 00                    2988 	.db 0x00
                                   2989 	.area CSEG    (CODE)
                                   2990 	.area XINIT   (CODE)
      000000                       2991 __xinit__size:
      000000 30                    2992 	.db #0x30	; 48	'0'
      000001 30                    2993 	.db #0x30	; 48	'0'
      000002 30                    2994 	.db #0x30	; 48	'0'
      000003 00                    2995 	.db #0x00	; 0
      000004                       2996 __xinit__buffer_to_delete:
      000004 00 00                 2997 	.byte #0x00, #0x00	;  0
      000006                       2998 __xinit__buff_not_cleared:
      000006 00 00                 2999 	.byte #0x00, #0x00	;  0
      000008 00                    3000 	.db 0x00
      000009 00                    3001 	.db 0x00
      00000A 00                    3002 	.db 0x00
      00000B 00                    3003 	.db 0x00
      00000C 00                    3004 	.db 0x00
      00000D 00                    3005 	.db 0x00
      00000E 00                    3006 	.db 0x00
      00000F 00                    3007 	.db 0x00
      000010 00                    3008 	.db 0x00
      000011 00                    3009 	.db 0x00
      000012 00                    3010 	.db 0x00
      000013 00                    3011 	.db 0x00
      000014 00                    3012 	.db 0x00
      000015 00                    3013 	.db 0x00
      000016 00                    3014 	.db 0x00
      000017 00                    3015 	.db 0x00
      000018 00                    3016 	.db 0x00
      000019 00                    3017 	.db 0x00
      00001A 00                    3018 	.db 0x00
      00001B 00                    3019 	.db 0x00
      00001C 00                    3020 	.db 0x00
      00001D 00                    3021 	.db 0x00
      00001E 00                    3022 	.db 0x00
      00001F 00                    3023 	.db 0x00
      000020 00                    3024 	.db 0x00
      000021 00                    3025 	.db 0x00
      000022 00                    3026 	.db 0x00
      000023 00                    3027 	.db 0x00
      000024 00                    3028 	.db 0x00
      000025 00                    3029 	.db 0x00
      000026 00                    3030 	.db 0x00
      000027 00                    3031 	.db 0x00
      000028 00                    3032 	.db 0x00
      000029 00                    3033 	.db 0x00
      00002A 00                    3034 	.db 0x00
      00002B 00                    3035 	.db 0x00
      00002C 00                    3036 	.db 0x00
      00002D 00                    3037 	.db 0x00
      00002E 00                    3038 	.db 0x00
      00002F 00                    3039 	.db 0x00
      000030 00                    3040 	.db 0x00
      000031 00                    3041 	.db 0x00
      000032 00                    3042 	.db 0x00
      000033 00                    3043 	.db 0x00
      000034 00                    3044 	.db 0x00
      000035 00                    3045 	.db 0x00
      000036 00                    3046 	.db 0x00
      000037 00                    3047 	.db 0x00
      000038 00                    3048 	.db 0x00
      000039 00                    3049 	.db 0x00
      00003A 00                    3050 	.db 0x00
      00003B 00                    3051 	.db 0x00
      00003C 00                    3052 	.db 0x00
      00003D 00                    3053 	.db 0x00
      00003E 00                    3054 	.db 0x00
      00003F 00                    3055 	.db 0x00
      000040 00                    3056 	.db 0x00
      000041 00                    3057 	.db 0x00
      000042 00                    3058 	.db 0x00
      000043 00                    3059 	.db 0x00
      000044 00                    3060 	.db 0x00
      000045 00                    3061 	.db 0x00
      000046 00                    3062 	.db 0x00
      000047 00                    3063 	.db 0x00
      000048 00                    3064 	.db 0x00
      000049 00                    3065 	.db 0x00
      00004A 00                    3066 	.db 0x00
      00004B 00                    3067 	.db 0x00
      00004C 00                    3068 	.db 0x00
      00004D 00                    3069 	.db 0x00
      00004E 00                    3070 	.db 0x00
      00004F 00                    3071 	.db 0x00
      000050 00                    3072 	.db 0x00
      000051 00                    3073 	.db 0x00
      000052 00                    3074 	.db 0x00
      000053 00                    3075 	.db 0x00
      000054 00                    3076 	.db 0x00
      000055 00                    3077 	.db 0x00
      000056 00                    3078 	.db 0x00
      000057 00                    3079 	.db 0x00
      000058 00                    3080 	.db 0x00
      000059 00                    3081 	.db 0x00
      00005A 00                    3082 	.db 0x00
      00005B 00                    3083 	.db 0x00
      00005C 00                    3084 	.db 0x00
      00005D 00                    3085 	.db 0x00
      00005E 00                    3086 	.db 0x00
      00005F 00                    3087 	.db 0x00
      000060 00                    3088 	.db 0x00
      000061 00                    3089 	.db 0x00
      000062 00                    3090 	.db 0x00
      000063 00                    3091 	.db 0x00
      000064 00                    3092 	.db 0x00
      000065 00                    3093 	.db 0x00
      000066 00                    3094 	.db 0x00
      000067 00                    3095 	.db 0x00
      000068 00                    3096 	.db 0x00
      000069 00                    3097 	.db 0x00
      00006A 00                    3098 	.db 0x00
      00006B 00                    3099 	.db 0x00
      00006C 00                    3100 	.db 0x00
      00006D 00                    3101 	.db 0x00
      00006E 00                    3102 	.db 0x00
      00006F 00                    3103 	.db 0x00
      000070 00                    3104 	.db 0x00
      000071 00                    3105 	.db 0x00
      000072 00                    3106 	.db 0x00
      000073 00                    3107 	.db 0x00
      000074 00                    3108 	.db 0x00
      000075 00                    3109 	.db 0x00
      000076 00                    3110 	.db 0x00
      000077 00                    3111 	.db 0x00
      000078 00                    3112 	.db 0x00
      000079 00                    3113 	.db 0x00
      00007A 00                    3114 	.db 0x00
      00007B 00                    3115 	.db 0x00
      00007C 00                    3116 	.db 0x00
      00007D 00                    3117 	.db 0x00
      00007E 00                    3118 	.db 0x00
      00007F 00                    3119 	.db 0x00
      000080 00                    3120 	.db 0x00
      000081 00                    3121 	.db 0x00
      000082 00                    3122 	.db 0x00
      000083 00                    3123 	.db 0x00
      000084 00                    3124 	.db 0x00
      000085 00                    3125 	.db 0x00
      000086 00                    3126 	.db 0x00
      000087 00                    3127 	.db 0x00
      000088 00                    3128 	.db 0x00
      000089 00                    3129 	.db 0x00
      00008A 00                    3130 	.db 0x00
      00008B 00                    3131 	.db 0x00
      00008C 00                    3132 	.db 0x00
      00008D 00                    3133 	.db 0x00
      00008E 00                    3134 	.db 0x00
      00008F 00                    3135 	.db 0x00
      000090 00                    3136 	.db 0x00
      000091 00                    3137 	.db 0x00
      000092 00                    3138 	.db 0x00
      000093 00                    3139 	.db 0x00
      000094 00                    3140 	.db 0x00
      000095 00                    3141 	.db 0x00
      000096 00                    3142 	.db 0x00
      000097 00                    3143 	.db 0x00
      000098 00                    3144 	.db 0x00
      000099 00                    3145 	.db 0x00
      00009A 00                    3146 	.db 0x00
      00009B 00                    3147 	.db 0x00
      00009C 00                    3148 	.db 0x00
      00009D 00                    3149 	.db 0x00
      00009E 00                    3150 	.db 0x00
      00009F 00                    3151 	.db 0x00
      0000A0 00                    3152 	.db 0x00
      0000A1 00                    3153 	.db 0x00
      0000A2 00                    3154 	.db 0x00
      0000A3 00                    3155 	.db 0x00
      0000A4 00                    3156 	.db 0x00
      0000A5 00                    3157 	.db 0x00
      0000A6 00                    3158 	.db 0x00
      0000A7 00                    3159 	.db 0x00
      0000A8 00                    3160 	.db 0x00
      0000A9 00                    3161 	.db 0x00
      0000AA 00                    3162 	.db 0x00
      0000AB 00                    3163 	.db 0x00
      0000AC 00                    3164 	.db 0x00
      0000AD 00                    3165 	.db 0x00
      0000AE 00                    3166 	.db 0x00
      0000AF 00                    3167 	.db 0x00
      0000B0 00                    3168 	.db 0x00
      0000B1 00                    3169 	.db 0x00
      0000B2 00                    3170 	.db 0x00
      0000B3 00                    3171 	.db 0x00
      0000B4 00                    3172 	.db 0x00
      0000B5 00                    3173 	.db 0x00
      0000B6 00                    3174 	.db 0x00
      0000B7 00                    3175 	.db 0x00
      0000B8 00                    3176 	.db 0x00
      0000B9 00                    3177 	.db 0x00
      0000BA 00                    3178 	.db 0x00
      0000BB 00                    3179 	.db 0x00
      0000BC 00                    3180 	.db 0x00
      0000BD 00                    3181 	.db 0x00
      0000BE 00                    3182 	.db 0x00
      0000BF 00                    3183 	.db 0x00
      0000C0 00                    3184 	.db 0x00
      0000C1 00                    3185 	.db 0x00
      0000C2 00                    3186 	.db 0x00
      0000C3 00                    3187 	.db 0x00
      0000C4 00                    3188 	.db 0x00
      0000C5 00                    3189 	.db 0x00
      0000C6 00                    3190 	.db 0x00
      0000C7 00                    3191 	.db 0x00
      0000C8 00                    3192 	.db 0x00
      0000C9 00                    3193 	.db 0x00
      0000CA 00                    3194 	.db 0x00
      0000CB 00                    3195 	.db 0x00
      0000CC 00                    3196 	.db 0x00
      0000CD 00                    3197 	.db 0x00
      0000CE                       3198 __xinit__buffer0and1_size:
      0000CE 00 00                 3199 	.byte #0x00, #0x00	;  0
                                   3200 	.area CABS    (ABS,CODE)
