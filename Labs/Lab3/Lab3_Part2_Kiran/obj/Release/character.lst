                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module character
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _gets_
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _free
                                     15 	.globl _malloc
                                     16 	.globl _atoi
                                     17 	.globl _printf_tiny
                                     18 	.globl _printf
                                     19 	.globl _CY
                                     20 	.globl _AC
                                     21 	.globl _F0
                                     22 	.globl _RS1
                                     23 	.globl _RS0
                                     24 	.globl _OV
                                     25 	.globl _F1
                                     26 	.globl _P
                                     27 	.globl _PS
                                     28 	.globl _PT1
                                     29 	.globl _PX1
                                     30 	.globl _PT0
                                     31 	.globl _PX0
                                     32 	.globl _RD
                                     33 	.globl _WR
                                     34 	.globl _T1
                                     35 	.globl _T0
                                     36 	.globl _INT1
                                     37 	.globl _INT0
                                     38 	.globl _TXD
                                     39 	.globl _RXD
                                     40 	.globl _P3_7
                                     41 	.globl _P3_6
                                     42 	.globl _P3_5
                                     43 	.globl _P3_4
                                     44 	.globl _P3_3
                                     45 	.globl _P3_2
                                     46 	.globl _P3_1
                                     47 	.globl _P3_0
                                     48 	.globl _EA
                                     49 	.globl _ES
                                     50 	.globl _ET1
                                     51 	.globl _EX1
                                     52 	.globl _ET0
                                     53 	.globl _EX0
                                     54 	.globl _P2_7
                                     55 	.globl _P2_6
                                     56 	.globl _P2_5
                                     57 	.globl _P2_4
                                     58 	.globl _P2_3
                                     59 	.globl _P2_2
                                     60 	.globl _P2_1
                                     61 	.globl _P2_0
                                     62 	.globl _SM0
                                     63 	.globl _SM1
                                     64 	.globl _SM2
                                     65 	.globl _REN
                                     66 	.globl _TB8
                                     67 	.globl _RB8
                                     68 	.globl _TI
                                     69 	.globl _RI
                                     70 	.globl _P1_7
                                     71 	.globl _P1_6
                                     72 	.globl _P1_5
                                     73 	.globl _P1_4
                                     74 	.globl _P1_3
                                     75 	.globl _P1_2
                                     76 	.globl _P1_1
                                     77 	.globl _P1_0
                                     78 	.globl _TF1
                                     79 	.globl _TR1
                                     80 	.globl _TF0
                                     81 	.globl _TR0
                                     82 	.globl _IE1
                                     83 	.globl _IT1
                                     84 	.globl _IE0
                                     85 	.globl _IT0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _TXD0
                                     95 	.globl _RXD0
                                     96 	.globl _BREG_F7
                                     97 	.globl _BREG_F6
                                     98 	.globl _BREG_F5
                                     99 	.globl _BREG_F4
                                    100 	.globl _BREG_F3
                                    101 	.globl _BREG_F2
                                    102 	.globl _BREG_F1
                                    103 	.globl _BREG_F0
                                    104 	.globl _P5_7
                                    105 	.globl _P5_6
                                    106 	.globl _P5_5
                                    107 	.globl _P5_4
                                    108 	.globl _P5_3
                                    109 	.globl _P5_2
                                    110 	.globl _P5_1
                                    111 	.globl _P5_0
                                    112 	.globl _P4_7
                                    113 	.globl _P4_6
                                    114 	.globl _P4_5
                                    115 	.globl _P4_4
                                    116 	.globl _P4_3
                                    117 	.globl _P4_2
                                    118 	.globl _P4_1
                                    119 	.globl _P4_0
                                    120 	.globl _PX0L
                                    121 	.globl _PT0L
                                    122 	.globl _PX1L
                                    123 	.globl _PT1L
                                    124 	.globl _PSL
                                    125 	.globl _PT2L
                                    126 	.globl _PPCL
                                    127 	.globl _EC
                                    128 	.globl _CCF0
                                    129 	.globl _CCF1
                                    130 	.globl _CCF2
                                    131 	.globl _CCF3
                                    132 	.globl _CCF4
                                    133 	.globl _CR
                                    134 	.globl _CF
                                    135 	.globl _TF2
                                    136 	.globl _EXF2
                                    137 	.globl _RCLK
                                    138 	.globl _TCLK
                                    139 	.globl _EXEN2
                                    140 	.globl _TR2
                                    141 	.globl _C_T2
                                    142 	.globl _CP_RL2
                                    143 	.globl _T2CON_7
                                    144 	.globl _T2CON_6
                                    145 	.globl _T2CON_5
                                    146 	.globl _T2CON_4
                                    147 	.globl _T2CON_3
                                    148 	.globl _T2CON_2
                                    149 	.globl _T2CON_1
                                    150 	.globl _T2CON_0
                                    151 	.globl _PT2
                                    152 	.globl _ET2
                                    153 	.globl _B
                                    154 	.globl _ACC
                                    155 	.globl _PSW
                                    156 	.globl _IP
                                    157 	.globl _P3
                                    158 	.globl _IE
                                    159 	.globl _P2
                                    160 	.globl _SBUF
                                    161 	.globl _SCON
                                    162 	.globl _P1
                                    163 	.globl _TH1
                                    164 	.globl _TH0
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TMOD
                                    168 	.globl _TCON
                                    169 	.globl _PCON
                                    170 	.globl _DPH
                                    171 	.globl _DPL
                                    172 	.globl _SP
                                    173 	.globl _P0
                                    174 	.globl _SBUF0
                                    175 	.globl _DP0L
                                    176 	.globl _DP0H
                                    177 	.globl _EECON
                                    178 	.globl _KBF
                                    179 	.globl _KBE
                                    180 	.globl _KBLS
                                    181 	.globl _BRL
                                    182 	.globl _BDRCON
                                    183 	.globl _T2MOD
                                    184 	.globl _SPDAT
                                    185 	.globl _SPSTA
                                    186 	.globl _SPCON
                                    187 	.globl _SADEN
                                    188 	.globl _SADDR
                                    189 	.globl _WDTPRG
                                    190 	.globl _WDTRST
                                    191 	.globl _P5
                                    192 	.globl _P4
                                    193 	.globl _IPH1
                                    194 	.globl _IPL1
                                    195 	.globl _IPH0
                                    196 	.globl _IPL0
                                    197 	.globl _IEN1
                                    198 	.globl _IEN0
                                    199 	.globl _CMOD
                                    200 	.globl _CL
                                    201 	.globl _CH
                                    202 	.globl _CCON
                                    203 	.globl _CCAPM4
                                    204 	.globl _CCAPM3
                                    205 	.globl _CCAPM2
                                    206 	.globl _CCAPM1
                                    207 	.globl _CCAPM0
                                    208 	.globl _CCAP4L
                                    209 	.globl _CCAP3L
                                    210 	.globl _CCAP2L
                                    211 	.globl _CCAP1L
                                    212 	.globl _CCAP0L
                                    213 	.globl _CCAP4H
                                    214 	.globl _CCAP3H
                                    215 	.globl _CCAP2H
                                    216 	.globl _CCAP1H
                                    217 	.globl _CCAP0H
                                    218 	.globl _CKCON1
                                    219 	.globl _CKCON0
                                    220 	.globl _CKRL
                                    221 	.globl _AUXR1
                                    222 	.globl _AUXR
                                    223 	.globl _TH2
                                    224 	.globl _TL2
                                    225 	.globl _RCAP2H
                                    226 	.globl _RCAP2L
                                    227 	.globl _T2CON
                                    228 	.globl _buffer0and1_size
                                    229 	.globl _buff_not_cleared
                                    230 	.globl _buffer_to_delete
                                    231 	.globl _size
                                    232 	.globl _command_processing_PARM_8
                                    233 	.globl _command_processing_PARM_7
                                    234 	.globl _command_processing_PARM_6
                                    235 	.globl _command_processing_PARM_5
                                    236 	.globl _command_processing_PARM_4
                                    237 	.globl _command_processing_PARM_3
                                    238 	.globl _command_processing_PARM_2
                                    239 	.globl _length
                                    240 	.globl _empty_buffer0
                                    241 	.globl _buffer0_hexdump
                                    242 	.globl _command_processing
                                    243 ;--------------------------------------------------------
                                    244 ; special function registers
                                    245 ;--------------------------------------------------------
                                    246 	.area RSEG    (ABS,DATA)
      000000                        247 	.org 0x0000
                           0000C8   248 _T2CON	=	0x00c8
                           0000CA   249 _RCAP2L	=	0x00ca
                           0000CB   250 _RCAP2H	=	0x00cb
                           0000CC   251 _TL2	=	0x00cc
                           0000CD   252 _TH2	=	0x00cd
                           00008E   253 _AUXR	=	0x008e
                           0000A2   254 _AUXR1	=	0x00a2
                           000097   255 _CKRL	=	0x0097
                           00008F   256 _CKCON0	=	0x008f
                           0000AF   257 _CKCON1	=	0x00af
                           0000FA   258 _CCAP0H	=	0x00fa
                           0000FB   259 _CCAP1H	=	0x00fb
                           0000FC   260 _CCAP2H	=	0x00fc
                           0000FD   261 _CCAP3H	=	0x00fd
                           0000FE   262 _CCAP4H	=	0x00fe
                           0000EA   263 _CCAP0L	=	0x00ea
                           0000EB   264 _CCAP1L	=	0x00eb
                           0000EC   265 _CCAP2L	=	0x00ec
                           0000ED   266 _CCAP3L	=	0x00ed
                           0000EE   267 _CCAP4L	=	0x00ee
                           0000DA   268 _CCAPM0	=	0x00da
                           0000DB   269 _CCAPM1	=	0x00db
                           0000DC   270 _CCAPM2	=	0x00dc
                           0000DD   271 _CCAPM3	=	0x00dd
                           0000DE   272 _CCAPM4	=	0x00de
                           0000D8   273 _CCON	=	0x00d8
                           0000F9   274 _CH	=	0x00f9
                           0000E9   275 _CL	=	0x00e9
                           0000D9   276 _CMOD	=	0x00d9
                           0000A8   277 _IEN0	=	0x00a8
                           0000B1   278 _IEN1	=	0x00b1
                           0000B8   279 _IPL0	=	0x00b8
                           0000B7   280 _IPH0	=	0x00b7
                           0000B2   281 _IPL1	=	0x00b2
                           0000B3   282 _IPH1	=	0x00b3
                           0000C0   283 _P4	=	0x00c0
                           0000E8   284 _P5	=	0x00e8
                           0000A6   285 _WDTRST	=	0x00a6
                           0000A7   286 _WDTPRG	=	0x00a7
                           0000A9   287 _SADDR	=	0x00a9
                           0000B9   288 _SADEN	=	0x00b9
                           0000C3   289 _SPCON	=	0x00c3
                           0000C4   290 _SPSTA	=	0x00c4
                           0000C5   291 _SPDAT	=	0x00c5
                           0000C9   292 _T2MOD	=	0x00c9
                           00009B   293 _BDRCON	=	0x009b
                           00009A   294 _BRL	=	0x009a
                           00009C   295 _KBLS	=	0x009c
                           00009D   296 _KBE	=	0x009d
                           00009E   297 _KBF	=	0x009e
                           0000D2   298 _EECON	=	0x00d2
                           000083   299 _DP0H	=	0x0083
                           000082   300 _DP0L	=	0x0082
                           000099   301 _SBUF0	=	0x0099
                           000080   302 _P0	=	0x0080
                           000081   303 _SP	=	0x0081
                           000082   304 _DPL	=	0x0082
                           000083   305 _DPH	=	0x0083
                           000087   306 _PCON	=	0x0087
                           000088   307 _TCON	=	0x0088
                           000089   308 _TMOD	=	0x0089
                           00008A   309 _TL0	=	0x008a
                           00008B   310 _TL1	=	0x008b
                           00008C   311 _TH0	=	0x008c
                           00008D   312 _TH1	=	0x008d
                           000090   313 _P1	=	0x0090
                           000098   314 _SCON	=	0x0098
                           000099   315 _SBUF	=	0x0099
                           0000A0   316 _P2	=	0x00a0
                           0000A8   317 _IE	=	0x00a8
                           0000B0   318 _P3	=	0x00b0
                           0000B8   319 _IP	=	0x00b8
                           0000D0   320 _PSW	=	0x00d0
                           0000E0   321 _ACC	=	0x00e0
                           0000F0   322 _B	=	0x00f0
                                    323 ;--------------------------------------------------------
                                    324 ; special function bits
                                    325 ;--------------------------------------------------------
                                    326 	.area RSEG    (ABS,DATA)
      000000                        327 	.org 0x0000
                           0000AD   328 _ET2	=	0x00ad
                           0000BD   329 _PT2	=	0x00bd
                           0000C8   330 _T2CON_0	=	0x00c8
                           0000C9   331 _T2CON_1	=	0x00c9
                           0000CA   332 _T2CON_2	=	0x00ca
                           0000CB   333 _T2CON_3	=	0x00cb
                           0000CC   334 _T2CON_4	=	0x00cc
                           0000CD   335 _T2CON_5	=	0x00cd
                           0000CE   336 _T2CON_6	=	0x00ce
                           0000CF   337 _T2CON_7	=	0x00cf
                           0000C8   338 _CP_RL2	=	0x00c8
                           0000C9   339 _C_T2	=	0x00c9
                           0000CA   340 _TR2	=	0x00ca
                           0000CB   341 _EXEN2	=	0x00cb
                           0000CC   342 _TCLK	=	0x00cc
                           0000CD   343 _RCLK	=	0x00cd
                           0000CE   344 _EXF2	=	0x00ce
                           0000CF   345 _TF2	=	0x00cf
                           0000DF   346 _CF	=	0x00df
                           0000DE   347 _CR	=	0x00de
                           0000DC   348 _CCF4	=	0x00dc
                           0000DB   349 _CCF3	=	0x00db
                           0000DA   350 _CCF2	=	0x00da
                           0000D9   351 _CCF1	=	0x00d9
                           0000D8   352 _CCF0	=	0x00d8
                           0000AE   353 _EC	=	0x00ae
                           0000BE   354 _PPCL	=	0x00be
                           0000BD   355 _PT2L	=	0x00bd
                           0000BC   356 _PSL	=	0x00bc
                           0000BB   357 _PT1L	=	0x00bb
                           0000BA   358 _PX1L	=	0x00ba
                           0000B9   359 _PT0L	=	0x00b9
                           0000B8   360 _PX0L	=	0x00b8
                           0000C0   361 _P4_0	=	0x00c0
                           0000C1   362 _P4_1	=	0x00c1
                           0000C2   363 _P4_2	=	0x00c2
                           0000C3   364 _P4_3	=	0x00c3
                           0000C4   365 _P4_4	=	0x00c4
                           0000C5   366 _P4_5	=	0x00c5
                           0000C6   367 _P4_6	=	0x00c6
                           0000C7   368 _P4_7	=	0x00c7
                           0000E8   369 _P5_0	=	0x00e8
                           0000E9   370 _P5_1	=	0x00e9
                           0000EA   371 _P5_2	=	0x00ea
                           0000EB   372 _P5_3	=	0x00eb
                           0000EC   373 _P5_4	=	0x00ec
                           0000ED   374 _P5_5	=	0x00ed
                           0000EE   375 _P5_6	=	0x00ee
                           0000EF   376 _P5_7	=	0x00ef
                           0000F0   377 _BREG_F0	=	0x00f0
                           0000F1   378 _BREG_F1	=	0x00f1
                           0000F2   379 _BREG_F2	=	0x00f2
                           0000F3   380 _BREG_F3	=	0x00f3
                           0000F4   381 _BREG_F4	=	0x00f4
                           0000F5   382 _BREG_F5	=	0x00f5
                           0000F6   383 _BREG_F6	=	0x00f6
                           0000F7   384 _BREG_F7	=	0x00f7
                           0000B0   385 _RXD0	=	0x00b0
                           0000B1   386 _TXD0	=	0x00b1
                           000080   387 _P0_0	=	0x0080
                           000081   388 _P0_1	=	0x0081
                           000082   389 _P0_2	=	0x0082
                           000083   390 _P0_3	=	0x0083
                           000084   391 _P0_4	=	0x0084
                           000085   392 _P0_5	=	0x0085
                           000086   393 _P0_6	=	0x0086
                           000087   394 _P0_7	=	0x0087
                           000088   395 _IT0	=	0x0088
                           000089   396 _IE0	=	0x0089
                           00008A   397 _IT1	=	0x008a
                           00008B   398 _IE1	=	0x008b
                           00008C   399 _TR0	=	0x008c
                           00008D   400 _TF0	=	0x008d
                           00008E   401 _TR1	=	0x008e
                           00008F   402 _TF1	=	0x008f
                           000090   403 _P1_0	=	0x0090
                           000091   404 _P1_1	=	0x0091
                           000092   405 _P1_2	=	0x0092
                           000093   406 _P1_3	=	0x0093
                           000094   407 _P1_4	=	0x0094
                           000095   408 _P1_5	=	0x0095
                           000096   409 _P1_6	=	0x0096
                           000097   410 _P1_7	=	0x0097
                           000098   411 _RI	=	0x0098
                           000099   412 _TI	=	0x0099
                           00009A   413 _RB8	=	0x009a
                           00009B   414 _TB8	=	0x009b
                           00009C   415 _REN	=	0x009c
                           00009D   416 _SM2	=	0x009d
                           00009E   417 _SM1	=	0x009e
                           00009F   418 _SM0	=	0x009f
                           0000A0   419 _P2_0	=	0x00a0
                           0000A1   420 _P2_1	=	0x00a1
                           0000A2   421 _P2_2	=	0x00a2
                           0000A3   422 _P2_3	=	0x00a3
                           0000A4   423 _P2_4	=	0x00a4
                           0000A5   424 _P2_5	=	0x00a5
                           0000A6   425 _P2_6	=	0x00a6
                           0000A7   426 _P2_7	=	0x00a7
                           0000A8   427 _EX0	=	0x00a8
                           0000A9   428 _ET0	=	0x00a9
                           0000AA   429 _EX1	=	0x00aa
                           0000AB   430 _ET1	=	0x00ab
                           0000AC   431 _ES	=	0x00ac
                           0000AF   432 _EA	=	0x00af
                           0000B0   433 _P3_0	=	0x00b0
                           0000B1   434 _P3_1	=	0x00b1
                           0000B2   435 _P3_2	=	0x00b2
                           0000B3   436 _P3_3	=	0x00b3
                           0000B4   437 _P3_4	=	0x00b4
                           0000B5   438 _P3_5	=	0x00b5
                           0000B6   439 _P3_6	=	0x00b6
                           0000B7   440 _P3_7	=	0x00b7
                           0000B0   441 _RXD	=	0x00b0
                           0000B1   442 _TXD	=	0x00b1
                           0000B2   443 _INT0	=	0x00b2
                           0000B3   444 _INT1	=	0x00b3
                           0000B4   445 _T0	=	0x00b4
                           0000B5   446 _T1	=	0x00b5
                           0000B6   447 _WR	=	0x00b6
                           0000B7   448 _RD	=	0x00b7
                           0000B8   449 _PX0	=	0x00b8
                           0000B9   450 _PT0	=	0x00b9
                           0000BA   451 _PX1	=	0x00ba
                           0000BB   452 _PT1	=	0x00bb
                           0000BC   453 _PS	=	0x00bc
                           0000D0   454 _P	=	0x00d0
                           0000D1   455 _F1	=	0x00d1
                           0000D2   456 _OV	=	0x00d2
                           0000D3   457 _RS0	=	0x00d3
                           0000D4   458 _RS1	=	0x00d4
                           0000D5   459 _F0	=	0x00d5
                           0000D6   460 _AC	=	0x00d6
                           0000D7   461 _CY	=	0x00d7
                                    462 ;--------------------------------------------------------
                                    463 ; overlayable register banks
                                    464 ;--------------------------------------------------------
                                    465 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        466 	.ds 8
                                    467 ;--------------------------------------------------------
                                    468 ; internal ram data
                                    469 ;--------------------------------------------------------
                                    470 	.area DSEG    (DATA)
      000000                        471 _command_processing_sloc0_1_0:
      000000                        472 	.ds 2
      000002                        473 _command_processing_sloc1_1_0:
      000002                        474 	.ds 3
      000005                        475 _command_processing_sloc2_1_0:
      000005                        476 	.ds 3
      000008                        477 _command_processing_sloc3_1_0:
      000008                        478 	.ds 3
                                    479 ;--------------------------------------------------------
                                    480 ; overlayable items in internal ram
                                    481 ;--------------------------------------------------------
                                    482 ;--------------------------------------------------------
                                    483 ; indirectly addressable internal ram data
                                    484 ;--------------------------------------------------------
                                    485 	.area ISEG    (DATA)
                                    486 ;--------------------------------------------------------
                                    487 ; absolute internal ram data
                                    488 ;--------------------------------------------------------
                                    489 	.area IABS    (ABS,DATA)
                                    490 	.area IABS    (ABS,DATA)
                                    491 ;--------------------------------------------------------
                                    492 ; bit data
                                    493 ;--------------------------------------------------------
                                    494 	.area BSEG    (BIT)
                                    495 ;--------------------------------------------------------
                                    496 ; paged external ram data
                                    497 ;--------------------------------------------------------
                                    498 	.area PSEG    (PAG,XDATA)
                                    499 ;--------------------------------------------------------
                                    500 ; external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area XSEG    (XDATA)
      000000                        503 _length::
      000000                        504 	.ds 2
      000002                        505 _buffer0_hexdump_length_65536_53:
      000002                        506 	.ds 2
      000004                        507 _buffer0_hexdump_print_address_65536_54:
      000004                        508 	.ds 1
      000005                        509 _command_processing_PARM_2:
      000005                        510 	.ds 1
      000006                        511 _command_processing_PARM_3:
      000006                        512 	.ds 3
      000009                        513 _command_processing_PARM_4:
      000009                        514 	.ds 3
      00000C                        515 _command_processing_PARM_5:
      00000C                        516 	.ds 3
      00000F                        517 _command_processing_PARM_6:
      00000F                        518 	.ds 3
      000012                        519 _command_processing_PARM_7:
      000012                        520 	.ds 3
      000015                        521 _command_processing_PARM_8:
      000015                        522 	.ds 2
      000017                        523 _command_processing_cmd_detected_65536_62:
      000017                        524 	.ds 2
                                    525 ;--------------------------------------------------------
                                    526 ; absolute external ram data
                                    527 ;--------------------------------------------------------
                                    528 	.area XABS    (ABS,XDATA)
                                    529 ;--------------------------------------------------------
                                    530 ; external initialized ram data
                                    531 ;--------------------------------------------------------
                                    532 	.area XISEG   (XDATA)
      000000                        533 _size::
      000000                        534 	.ds 4
      000004                        535 _buffer_to_delete::
      000004                        536 	.ds 2
      000006                        537 _buff_not_cleared::
      000006                        538 	.ds 200
      0000CE                        539 _buffer0and1_size::
      0000CE                        540 	.ds 2
                                    541 	.area HOME    (CODE)
                                    542 	.area GSINIT0 (CODE)
                                    543 	.area GSINIT1 (CODE)
                                    544 	.area GSINIT2 (CODE)
                                    545 	.area GSINIT3 (CODE)
                                    546 	.area GSINIT4 (CODE)
                                    547 	.area GSINIT5 (CODE)
                                    548 	.area GSINIT  (CODE)
                                    549 	.area GSFINAL (CODE)
                                    550 	.area CSEG    (CODE)
                                    551 ;--------------------------------------------------------
                                    552 ; global & static initialisations
                                    553 ;--------------------------------------------------------
                                    554 	.area HOME    (CODE)
                                    555 	.area GSINIT  (CODE)
                                    556 	.area GSFINAL (CODE)
                                    557 	.area GSINIT  (CODE)
                                    558 ;--------------------------------------------------------
                                    559 ; Home
                                    560 ;--------------------------------------------------------
                                    561 	.area HOME    (CODE)
                                    562 	.area HOME    (CODE)
                                    563 ;--------------------------------------------------------
                                    564 ; code
                                    565 ;--------------------------------------------------------
                                    566 	.area CSEG    (CODE)
                                    567 ;------------------------------------------------------------
                                    568 ;Allocation info for local variables in function 'empty_buffer0'
                                    569 ;------------------------------------------------------------
                                    570 ;i                         Allocated with name '_empty_buffer0_i_131072_51'
                                    571 ;------------------------------------------------------------
                                    572 ;	character.c:47: void empty_buffer0(void)
                                    573 ;	-----------------------------------------
                                    574 ;	 function empty_buffer0
                                    575 ;	-----------------------------------------
      000000                        576 _empty_buffer0:
                           000007   577 	ar7 = 0x07
                           000006   578 	ar6 = 0x06
                           000005   579 	ar5 = 0x05
                           000004   580 	ar4 = 0x04
                           000003   581 	ar3 = 0x03
                           000002   582 	ar2 = 0x02
                           000001   583 	ar1 = 0x01
                           000000   584 	ar0 = 0x00
                                    585 ;	character.c:49: for(int i=0;i<buffer_size_arr[0];i++)
      000000 7E 00            [12]  586 	mov	r6,#0x00
      000002 7F 00            [12]  587 	mov	r7,#0x00
      000004                        588 00103$:
      000004 90r00r00         [24]  589 	mov	dptr,#_buffer_size_arr
      000007 E0               [24]  590 	movx	a,@dptr
      000008 FC               [12]  591 	mov	r4,a
      000009 A3               [24]  592 	inc	dptr
      00000A E0               [24]  593 	movx	a,@dptr
      00000B FD               [12]  594 	mov	r5,a
      00000C C3               [12]  595 	clr	c
      00000D EE               [12]  596 	mov	a,r6
      00000E 9C               [12]  597 	subb	a,r4
      00000F EF               [12]  598 	mov	a,r7
      000010 64 80            [12]  599 	xrl	a,#0x80
      000012 8D F0            [24]  600 	mov	b,r5
      000014 63 F0 80         [24]  601 	xrl	b,#0x80
      000017 95 F0            [12]  602 	subb	a,b
      000019 50 1A            [24]  603 	jnc	00105$
                                    604 ;	character.c:51: buffer0[i] = '0';
      00001B 90r00r00         [24]  605 	mov	dptr,#_buffer0
      00001E E0               [24]  606 	movx	a,@dptr
      00001F FC               [12]  607 	mov	r4,a
      000020 A3               [24]  608 	inc	dptr
      000021 E0               [24]  609 	movx	a,@dptr
      000022 FD               [12]  610 	mov	r5,a
      000023 EE               [12]  611 	mov	a,r6
      000024 2C               [12]  612 	add	a,r4
      000025 F5 82            [12]  613 	mov	dpl,a
      000027 EF               [12]  614 	mov	a,r7
      000028 3D               [12]  615 	addc	a,r5
      000029 F5 83            [12]  616 	mov	dph,a
      00002B 74 30            [12]  617 	mov	a,#0x30
      00002D F0               [24]  618 	movx	@dptr,a
                                    619 ;	character.c:49: for(int i=0;i<buffer_size_arr[0];i++)
      00002E 0E               [12]  620 	inc	r6
      00002F BE 00 D2         [24]  621 	cjne	r6,#0x00,00103$
      000032 0F               [12]  622 	inc	r7
      000033 80 CF            [24]  623 	sjmp	00103$
      000035                        624 00105$:
                                    625 ;	character.c:53: }
      000035 22               [24]  626 	ret
                                    627 ;------------------------------------------------------------
                                    628 ;Allocation info for local variables in function 'buffer0_hexdump'
                                    629 ;------------------------------------------------------------
                                    630 ;length                    Allocated with name '_buffer0_hexdump_length_65536_53'
                                    631 ;itr                       Allocated with name '_buffer0_hexdump_itr_65536_54'
                                    632 ;print_address             Allocated with name '_buffer0_hexdump_print_address_65536_54'
                                    633 ;------------------------------------------------------------
                                    634 ;	character.c:55: void buffer0_hexdump(int length) {
                                    635 ;	-----------------------------------------
                                    636 ;	 function buffer0_hexdump
                                    637 ;	-----------------------------------------
      000036                        638 _buffer0_hexdump:
      000036 AF 83            [24]  639 	mov	r7,dph
      000038 E5 82            [12]  640 	mov	a,dpl
      00003A 90r00r02         [24]  641 	mov	dptr,#_buffer0_hexdump_length_65536_53
      00003D F0               [24]  642 	movx	@dptr,a
      00003E EF               [12]  643 	mov	a,r7
      00003F A3               [24]  644 	inc	dptr
      000040 F0               [24]  645 	movx	@dptr,a
                                    646 ;	character.c:57: bool print_address = true;
      000041 90r00r04         [24]  647 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      000044 74 01            [12]  648 	mov	a,#0x01
      000046 F0               [24]  649 	movx	@dptr,a
                                    650 ;	character.c:58: printf("\033[1;34m\n\r");
      000047 74r00            [12]  651 	mov	a,#___str_0
      000049 C0 E0            [24]  652 	push	acc
      00004B 74s00            [12]  653 	mov	a,#(___str_0 >> 8)
      00004D C0 E0            [24]  654 	push	acc
      00004F 74 80            [12]  655 	mov	a,#0x80
      000051 C0 E0            [24]  656 	push	acc
      000053 12r00r00         [24]  657 	lcall	_printf
      000056 15 81            [12]  658 	dec	sp
      000058 15 81            [12]  659 	dec	sp
      00005A 15 81            [12]  660 	dec	sp
                                    661 ;	character.c:59: while(itr < buffer0and1_size)
      00005C 90r00r02         [24]  662 	mov	dptr,#_buffer0_hexdump_length_65536_53
      00005F E0               [24]  663 	movx	a,@dptr
      000060 FE               [12]  664 	mov	r6,a
      000061 A3               [24]  665 	inc	dptr
      000062 E0               [24]  666 	movx	a,@dptr
      000063 FF               [12]  667 	mov	r7,a
      000064 E4               [12]  668 	clr	a
      000065 BE 10 04         [24]  669 	cjne	r6,#0x10,00146$
      000068 BF 00 01         [24]  670 	cjne	r7,#0x00,00146$
      00006B 04               [12]  671 	inc	a
      00006C                        672 00146$:
      00006C FD               [12]  673 	mov	r5,a
      00006D E4               [12]  674 	clr	a
      00006E BE 20 04         [24]  675 	cjne	r6,#0x20,00148$
      000071 BF 00 01         [24]  676 	cjne	r7,#0x00,00148$
      000074 04               [12]  677 	inc	a
      000075                        678 00148$:
      000075 FC               [12]  679 	mov	r4,a
      000076 7A 00            [12]  680 	mov	r2,#0x00
      000078 7B 00            [12]  681 	mov	r3,#0x00
      00007A                        682 00112$:
      00007A 90r00rCE         [24]  683 	mov	dptr,#_buffer0and1_size
      00007D E0               [24]  684 	movx	a,@dptr
      00007E F8               [12]  685 	mov	r0,a
      00007F A3               [24]  686 	inc	dptr
      000080 E0               [24]  687 	movx	a,@dptr
      000081 F9               [12]  688 	mov	r1,a
      000082 C3               [12]  689 	clr	c
      000083 EA               [12]  690 	mov	a,r2
      000084 98               [12]  691 	subb	a,r0
      000085 EB               [12]  692 	mov	a,r3
      000086 64 80            [12]  693 	xrl	a,#0x80
      000088 89 F0            [24]  694 	mov	b,r1
      00008A 63 F0 80         [24]  695 	xrl	b,#0x80
      00008D 95 F0            [12]  696 	subb	a,b
      00008F 40 01            [24]  697 	jc	00150$
      000091 22               [24]  698 	ret
      000092                        699 00150$:
                                    700 ;	character.c:62: if(print_address)
      000092 90r00r04         [24]  701 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      000095 E0               [24]  702 	movx	a,@dptr
      000096 60 4C            [24]  703 	jz	00102$
                                    704 ;	character.c:64: printf("\033[1;34m%p :",buffer0+itr);
      000098 C0 04            [24]  705 	push	ar4
      00009A 90r00r00         [24]  706 	mov	dptr,#_buffer0
      00009D E0               [24]  707 	movx	a,@dptr
      00009E F8               [12]  708 	mov	r0,a
      00009F A3               [24]  709 	inc	dptr
      0000A0 E0               [24]  710 	movx	a,@dptr
      0000A1 F9               [12]  711 	mov	r1,a
      0000A2 EA               [12]  712 	mov	a,r2
      0000A3 28               [12]  713 	add	a,r0
      0000A4 F8               [12]  714 	mov	r0,a
      0000A5 EB               [12]  715 	mov	a,r3
      0000A6 39               [12]  716 	addc	a,r1
      0000A7 F9               [12]  717 	mov	r1,a
      0000A8 7C 00            [12]  718 	mov	r4,#0x00
      0000AA C0 07            [24]  719 	push	ar7
      0000AC C0 06            [24]  720 	push	ar6
      0000AE C0 05            [24]  721 	push	ar5
      0000B0 C0 04            [24]  722 	push	ar4
      0000B2 C0 03            [24]  723 	push	ar3
      0000B4 C0 02            [24]  724 	push	ar2
      0000B6 C0 00            [24]  725 	push	ar0
      0000B8 C0 01            [24]  726 	push	ar1
      0000BA C0 04            [24]  727 	push	ar4
      0000BC 74r0A            [12]  728 	mov	a,#___str_1
      0000BE C0 E0            [24]  729 	push	acc
      0000C0 74s00            [12]  730 	mov	a,#(___str_1 >> 8)
      0000C2 C0 E0            [24]  731 	push	acc
      0000C4 74 80            [12]  732 	mov	a,#0x80
      0000C6 C0 E0            [24]  733 	push	acc
      0000C8 12r00r00         [24]  734 	lcall	_printf
      0000CB E5 81            [12]  735 	mov	a,sp
      0000CD 24 FA            [12]  736 	add	a,#0xfa
      0000CF F5 81            [12]  737 	mov	sp,a
      0000D1 D0 02            [24]  738 	pop	ar2
      0000D3 D0 03            [24]  739 	pop	ar3
      0000D5 D0 04            [24]  740 	pop	ar4
      0000D7 D0 05            [24]  741 	pop	ar5
      0000D9 D0 06            [24]  742 	pop	ar6
      0000DB D0 07            [24]  743 	pop	ar7
                                    744 ;	character.c:65: print_address =false;
      0000DD 90r00r04         [24]  745 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      0000E0 E4               [12]  746 	clr	a
      0000E1 F0               [24]  747 	movx	@dptr,a
                                    748 ;	character.c:88: itr++;
      0000E2 D0 04            [24]  749 	pop	ar4
                                    750 ;	character.c:65: print_address =false;
      0000E4                        751 00102$:
                                    752 ;	character.c:68: if(buffer0[itr] == '0')
      0000E4 90r00r00         [24]  753 	mov	dptr,#_buffer0
      0000E7 E0               [24]  754 	movx	a,@dptr
      0000E8 F8               [12]  755 	mov	r0,a
      0000E9 A3               [24]  756 	inc	dptr
      0000EA E0               [24]  757 	movx	a,@dptr
      0000EB F9               [12]  758 	mov	r1,a
      0000EC EA               [12]  759 	mov	a,r2
      0000ED 28               [12]  760 	add	a,r0
      0000EE F5 82            [12]  761 	mov	dpl,a
      0000F0 EB               [12]  762 	mov	a,r3
      0000F1 39               [12]  763 	addc	a,r1
      0000F2 F5 83            [12]  764 	mov	dph,a
      0000F4 E0               [24]  765 	movx	a,@dptr
      0000F5 F9               [12]  766 	mov	r1,a
      0000F6 B9 30 29         [24]  767 	cjne	r1,#0x30,00108$
                                    768 ;	character.c:70: printf_tiny("\033[1;34m XX");
      0000F9 C0 07            [24]  769 	push	ar7
      0000FB C0 06            [24]  770 	push	ar6
      0000FD C0 05            [24]  771 	push	ar5
      0000FF C0 04            [24]  772 	push	ar4
      000101 C0 03            [24]  773 	push	ar3
      000103 C0 02            [24]  774 	push	ar2
      000105 74r16            [12]  775 	mov	a,#___str_2
      000107 C0 E0            [24]  776 	push	acc
      000109 74s00            [12]  777 	mov	a,#(___str_2 >> 8)
      00010B C0 E0            [24]  778 	push	acc
      00010D 12r00r00         [24]  779 	lcall	_printf_tiny
      000110 15 81            [12]  780 	dec	sp
      000112 15 81            [12]  781 	dec	sp
      000114 D0 02            [24]  782 	pop	ar2
      000116 D0 03            [24]  783 	pop	ar3
      000118 D0 04            [24]  784 	pop	ar4
      00011A D0 05            [24]  785 	pop	ar5
      00011C D0 06            [24]  786 	pop	ar6
      00011E D0 07            [24]  787 	pop	ar7
      000120 80 78            [24]  788 	sjmp	00109$
      000122                        789 00108$:
                                    790 ;	character.c:74: if(length == 16){
      000122 ED               [12]  791 	mov	a,r5
      000123 60 31            [24]  792 	jz	00104$
                                    793 ;	character.c:75: printf_tiny("\033[1;34m %x", buffer0[itr]);
      000125 89 00            [24]  794 	mov	ar0,r1
      000127 79 00            [12]  795 	mov	r1,#0x00
      000129 C0 07            [24]  796 	push	ar7
      00012B C0 06            [24]  797 	push	ar6
      00012D C0 05            [24]  798 	push	ar5
      00012F C0 04            [24]  799 	push	ar4
      000131 C0 03            [24]  800 	push	ar3
      000133 C0 02            [24]  801 	push	ar2
      000135 C0 00            [24]  802 	push	ar0
      000137 C0 01            [24]  803 	push	ar1
      000139 74r21            [12]  804 	mov	a,#___str_3
      00013B C0 E0            [24]  805 	push	acc
      00013D 74s00            [12]  806 	mov	a,#(___str_3 >> 8)
      00013F C0 E0            [24]  807 	push	acc
      000141 12r00r00         [24]  808 	lcall	_printf_tiny
      000144 E5 81            [12]  809 	mov	a,sp
      000146 24 FC            [12]  810 	add	a,#0xfc
      000148 F5 81            [12]  811 	mov	sp,a
      00014A D0 02            [24]  812 	pop	ar2
      00014C D0 03            [24]  813 	pop	ar3
      00014E D0 04            [24]  814 	pop	ar4
      000150 D0 05            [24]  815 	pop	ar5
      000152 D0 06            [24]  816 	pop	ar6
      000154 D0 07            [24]  817 	pop	ar7
      000156                        818 00104$:
                                    819 ;	character.c:77: if(length == 32)
      000156 EC               [12]  820 	mov	a,r4
      000157 60 41            [24]  821 	jz	00109$
                                    822 ;	character.c:78: {   printf_tiny("\033[1;34m %d", buffer0[itr]);
      000159 90r00r00         [24]  823 	mov	dptr,#_buffer0
      00015C E0               [24]  824 	movx	a,@dptr
      00015D F8               [12]  825 	mov	r0,a
      00015E A3               [24]  826 	inc	dptr
      00015F E0               [24]  827 	movx	a,@dptr
      000160 F9               [12]  828 	mov	r1,a
      000161 EA               [12]  829 	mov	a,r2
      000162 28               [12]  830 	add	a,r0
      000163 F5 82            [12]  831 	mov	dpl,a
      000165 EB               [12]  832 	mov	a,r3
      000166 39               [12]  833 	addc	a,r1
      000167 F5 83            [12]  834 	mov	dph,a
      000169 E0               [24]  835 	movx	a,@dptr
      00016A F8               [12]  836 	mov	r0,a
      00016B 79 00            [12]  837 	mov	r1,#0x00
      00016D C0 07            [24]  838 	push	ar7
      00016F C0 06            [24]  839 	push	ar6
      000171 C0 05            [24]  840 	push	ar5
      000173 C0 04            [24]  841 	push	ar4
      000175 C0 03            [24]  842 	push	ar3
      000177 C0 02            [24]  843 	push	ar2
      000179 C0 00            [24]  844 	push	ar0
      00017B C0 01            [24]  845 	push	ar1
      00017D 74r2C            [12]  846 	mov	a,#___str_4
      00017F C0 E0            [24]  847 	push	acc
      000181 74s00            [12]  848 	mov	a,#(___str_4 >> 8)
      000183 C0 E0            [24]  849 	push	acc
      000185 12r00r00         [24]  850 	lcall	_printf_tiny
      000188 E5 81            [12]  851 	mov	a,sp
      00018A 24 FC            [12]  852 	add	a,#0xfc
      00018C F5 81            [12]  853 	mov	sp,a
      00018E D0 02            [24]  854 	pop	ar2
      000190 D0 03            [24]  855 	pop	ar3
      000192 D0 04            [24]  856 	pop	ar4
      000194 D0 05            [24]  857 	pop	ar5
      000196 D0 06            [24]  858 	pop	ar6
      000198 D0 07            [24]  859 	pop	ar7
      00019A                        860 00109$:
                                    861 ;	character.c:82: if((itr+1) % length == 0)
      00019A 74 01            [12]  862 	mov	a,#0x01
      00019C 2A               [12]  863 	add	a,r2
      00019D F8               [12]  864 	mov	r0,a
      00019E E4               [12]  865 	clr	a
      00019F 3B               [12]  866 	addc	a,r3
      0001A0 F9               [12]  867 	mov	r1,a
      0001A1 90r00r00         [24]  868 	mov	dptr,#__modsint_PARM_2
      0001A4 EE               [12]  869 	mov	a,r6
      0001A5 F0               [24]  870 	movx	@dptr,a
      0001A6 EF               [12]  871 	mov	a,r7
      0001A7 A3               [24]  872 	inc	dptr
      0001A8 F0               [24]  873 	movx	@dptr,a
      0001A9 88 82            [24]  874 	mov	dpl,r0
      0001AB 89 83            [24]  875 	mov	dph,r1
      0001AD C0 07            [24]  876 	push	ar7
      0001AF C0 06            [24]  877 	push	ar6
      0001B1 C0 05            [24]  878 	push	ar5
      0001B3 C0 04            [24]  879 	push	ar4
      0001B5 C0 03            [24]  880 	push	ar3
      0001B7 C0 02            [24]  881 	push	ar2
      0001B9 12r00r00         [24]  882 	lcall	__modsint
      0001BC E5 82            [12]  883 	mov	a,dpl
      0001BE 85 83 F0         [24]  884 	mov	b,dph
      0001C1 D0 02            [24]  885 	pop	ar2
      0001C3 D0 03            [24]  886 	pop	ar3
      0001C5 D0 04            [24]  887 	pop	ar4
      0001C7 D0 05            [24]  888 	pop	ar5
      0001C9 D0 06            [24]  889 	pop	ar6
      0001CB D0 07            [24]  890 	pop	ar7
      0001CD 45 F0            [12]  891 	orl	a,b
      0001CF 70 2D            [24]  892 	jnz	00111$
                                    893 ;	character.c:84: printf_tiny("\033[1;34m\n\r");
      0001D1 C0 07            [24]  894 	push	ar7
      0001D3 C0 06            [24]  895 	push	ar6
      0001D5 C0 05            [24]  896 	push	ar5
      0001D7 C0 04            [24]  897 	push	ar4
      0001D9 C0 03            [24]  898 	push	ar3
      0001DB C0 02            [24]  899 	push	ar2
      0001DD 74r00            [12]  900 	mov	a,#___str_0
      0001DF C0 E0            [24]  901 	push	acc
      0001E1 74s00            [12]  902 	mov	a,#(___str_0 >> 8)
      0001E3 C0 E0            [24]  903 	push	acc
      0001E5 12r00r00         [24]  904 	lcall	_printf_tiny
      0001E8 15 81            [12]  905 	dec	sp
      0001EA 15 81            [12]  906 	dec	sp
      0001EC D0 02            [24]  907 	pop	ar2
      0001EE D0 03            [24]  908 	pop	ar3
      0001F0 D0 04            [24]  909 	pop	ar4
      0001F2 D0 05            [24]  910 	pop	ar5
      0001F4 D0 06            [24]  911 	pop	ar6
      0001F6 D0 07            [24]  912 	pop	ar7
                                    913 ;	character.c:85: print_address = true;
      0001F8 90r00r04         [24]  914 	mov	dptr,#_buffer0_hexdump_print_address_65536_54
      0001FB 74 01            [12]  915 	mov	a,#0x01
      0001FD F0               [24]  916 	movx	@dptr,a
      0001FE                        917 00111$:
                                    918 ;	character.c:88: itr++;
      0001FE 0A               [12]  919 	inc	r2
      0001FF BA 00 01         [24]  920 	cjne	r2,#0x00,00157$
      000202 0B               [12]  921 	inc	r3
      000203                        922 00157$:
                                    923 ;	character.c:90: }
      000203 02r00r7A         [24]  924 	ljmp	00112$
                                    925 ;------------------------------------------------------------
                                    926 ;Allocation info for local variables in function 'command_processing'
                                    927 ;------------------------------------------------------------
                                    928 ;sloc0                     Allocated with name '_command_processing_sloc0_1_0'
                                    929 ;sloc1                     Allocated with name '_command_processing_sloc1_1_0'
                                    930 ;sloc2                     Allocated with name '_command_processing_sloc2_1_0'
                                    931 ;sloc3                     Allocated with name '_command_processing_sloc3_1_0'
                                    932 ;ch                        Allocated with name '_command_processing_PARM_2'
                                    933 ;new_buffer_index          Allocated with name '_command_processing_PARM_3'
                                    934 ;free_buffer_count         Allocated with name '_command_processing_PARM_4'
                                    935 ;filled_buffer_count       Allocated with name '_command_processing_PARM_5'
                                    936 ;storage_character_count   Allocated with name '_command_processing_PARM_6'
                                    937 ;total_characters_count    Allocated with name '_command_processing_PARM_7'
                                    938 ;buffer0_size              Allocated with name '_command_processing_PARM_8'
                                    939 ;cmd_detected              Allocated with name '_command_processing_cmd_detected_65536_62'
                                    940 ;buffer_size               Allocated with name '_command_processing_buffer_size_196609_66'
                                    941 ;buffer_ptr                Allocated with name '_command_processing_buffer_ptr_196610_68'
                                    942 ;ch                        Allocated with name '_command_processing_ch_196611_70'
                                    943 ;temp                      Allocated with name '_command_processing_temp_262148_73'
                                    944 ;i                         Allocated with name '_command_processing_i_262147_78'
                                    945 ;buffer_to_free            Allocated with name '_command_processing_buffer_to_free_327683_79'
                                    946 ;i                         Allocated with name '_command_processing_i_262147_82'
                                    947 ;------------------------------------------------------------
                                    948 ;	character.c:94: int command_processing(int cmd_detected, char ch, int * new_buffer_index,
                                    949 ;	-----------------------------------------
                                    950 ;	 function command_processing
                                    951 ;	-----------------------------------------
      000206                        952 _command_processing:
      000206 AF 83            [24]  953 	mov	r7,dph
      000208 E5 82            [12]  954 	mov	a,dpl
      00020A 90r00r17         [24]  955 	mov	dptr,#_command_processing_cmd_detected_65536_62
      00020D F0               [24]  956 	movx	@dptr,a
      00020E EF               [12]  957 	mov	a,r7
      00020F A3               [24]  958 	inc	dptr
      000210 F0               [24]  959 	movx	@dptr,a
                                    960 ;	character.c:97: buffer0and1_size = buffer0_size;
      000211 90r00r15         [24]  961 	mov	dptr,#_command_processing_PARM_8
      000214 E0               [24]  962 	movx	a,@dptr
      000215 FE               [12]  963 	mov	r6,a
      000216 A3               [24]  964 	inc	dptr
      000217 E0               [24]  965 	movx	a,@dptr
      000218 FF               [12]  966 	mov	r7,a
      000219 90r00rCE         [24]  967 	mov	dptr,#_buffer0and1_size
      00021C EE               [12]  968 	mov	a,r6
      00021D F0               [24]  969 	movx	@dptr,a
      00021E EF               [12]  970 	mov	a,r7
      00021F A3               [24]  971 	inc	dptr
      000220 F0               [24]  972 	movx	@dptr,a
                                    973 ;	character.c:98: if(cmd_detected)
      000221 90r00r17         [24]  974 	mov	dptr,#_command_processing_cmd_detected_65536_62
      000224 E0               [24]  975 	movx	a,@dptr
      000225 F5 F0            [12]  976 	mov	b,a
      000227 A3               [24]  977 	inc	dptr
      000228 E0               [24]  978 	movx	a,@dptr
      000229 45 F0            [12]  979 	orl	a,b
      00022B 70 03            [24]  980 	jnz	00228$
      00022D 02r0BrE0         [24]  981 	ljmp	00138$
      000230                        982 00228$:
                                    983 ;	character.c:100: switch(ch)
      000230 90r00r05         [24]  984 	mov	dptr,#_command_processing_PARM_2
      000233 E0               [24]  985 	movx	a,@dptr
      000234 FF               [12]  986 	mov	r7,a
      000235 BF 2B 02         [24]  987 	cjne	r7,#0x2b,00229$
      000238 80 1B            [24]  988 	sjmp	00101$
      00023A                        989 00229$:
      00023A BF 2D 03         [24]  990 	cjne	r7,#0x2d,00230$
      00023D 02r05r02         [24]  991 	ljmp	00107$
      000240                        992 00230$:
      000240 BF 3D 03         [24]  993 	cjne	r7,#0x3d,00231$
      000243 02r09r0D         [24]  994 	ljmp	00128$
      000246                        995 00231$:
      000246 BF 3F 03         [24]  996 	cjne	r7,#0x3f,00232$
      000249 02r09r2E         [24]  997 	ljmp	00129$
      00024C                        998 00232$:
      00024C BF 40 03         [24]  999 	cjne	r7,#0x40,00233$
      00024F 02r07rD6         [24] 1000 	ljmp	00123$
      000252                       1001 00233$:
      000252 02r0BrE0         [24] 1002 	ljmp	00138$
                                   1003 ;	character.c:103: case '+':
      000255                       1004 00101$:
                                   1005 ;	character.c:104: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000255 74r37            [12] 1006 	mov	a,#___str_5
      000257 C0 E0            [24] 1007 	push	acc
      000259 74s00            [12] 1008 	mov	a,#(___str_5 >> 8)
      00025B C0 E0            [24] 1009 	push	acc
      00025D 12r00r00         [24] 1010 	lcall	_printf_tiny
      000260 15 81            [12] 1011 	dec	sp
      000262 15 81            [12] 1012 	dec	sp
                                   1013 ;	character.c:105: printf_tiny("\033[1;33m|************ Processing [+] *******************|\n\r");
      000264 74r72            [12] 1014 	mov	a,#___str_6
      000266 C0 E0            [24] 1015 	push	acc
      000268 74s00            [12] 1016 	mov	a,#(___str_6 >> 8)
      00026A C0 E0            [24] 1017 	push	acc
      00026C 12r00r00         [24] 1018 	lcall	_printf_tiny
      00026F 15 81            [12] 1019 	dec	sp
      000271 15 81            [12] 1020 	dec	sp
                                   1021 ;	character.c:106: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000273 74r37            [12] 1022 	mov	a,#___str_5
      000275 C0 E0            [24] 1023 	push	acc
      000277 74s00            [12] 1024 	mov	a,#(___str_5 >> 8)
      000279 C0 E0            [24] 1025 	push	acc
      00027B 12r00r00         [24] 1026 	lcall	_printf_tiny
      00027E 15 81            [12] 1027 	dec	sp
      000280 15 81            [12] 1028 	dec	sp
                                   1029 ;	character.c:108: (*new_buffer_index)++;
      000282 90r00r06         [24] 1030 	mov	dptr,#_command_processing_PARM_3
      000285 E0               [24] 1031 	movx	a,@dptr
      000286 FD               [12] 1032 	mov	r5,a
      000287 A3               [24] 1033 	inc	dptr
      000288 E0               [24] 1034 	movx	a,@dptr
      000289 FE               [12] 1035 	mov	r6,a
      00028A A3               [24] 1036 	inc	dptr
      00028B E0               [24] 1037 	movx	a,@dptr
      00028C FF               [12] 1038 	mov	r7,a
      00028D 8D 82            [24] 1039 	mov	dpl,r5
      00028F 8E 83            [24] 1040 	mov	dph,r6
      000291 8F F0            [24] 1041 	mov	b,r7
      000293 12r00r00         [24] 1042 	lcall	__gptrget
      000296 FB               [12] 1043 	mov	r3,a
      000297 A3               [24] 1044 	inc	dptr
      000298 12r00r00         [24] 1045 	lcall	__gptrget
      00029B FC               [12] 1046 	mov	r4,a
      00029C 0B               [12] 1047 	inc	r3
      00029D BB 00 01         [24] 1048 	cjne	r3,#0x00,00234$
      0002A0 0C               [12] 1049 	inc	r4
      0002A1                       1050 00234$:
      0002A1 8D 82            [24] 1051 	mov	dpl,r5
      0002A3 8E 83            [24] 1052 	mov	dph,r6
      0002A5 8F F0            [24] 1053 	mov	b,r7
      0002A7 EB               [12] 1054 	mov	a,r3
      0002A8 12r00r00         [24] 1055 	lcall	__gptrput
      0002AB A3               [24] 1056 	inc	dptr
      0002AC EC               [12] 1057 	mov	a,r4
      0002AD 12r00r00         [24] 1058 	lcall	__gptrput
                                   1059 ;	character.c:109: printf_tiny("\033[1;0\n\rEnter size:");
      0002B0 C0 07            [24] 1060 	push	ar7
      0002B2 C0 06            [24] 1061 	push	ar6
      0002B4 C0 05            [24] 1062 	push	ar5
      0002B6 74rAD            [12] 1063 	mov	a,#___str_7
      0002B8 C0 E0            [24] 1064 	push	acc
      0002BA 74s00            [12] 1065 	mov	a,#(___str_7 >> 8)
      0002BC C0 E0            [24] 1066 	push	acc
      0002BE 12r00r00         [24] 1067 	lcall	_printf_tiny
      0002C1 15 81            [12] 1068 	dec	sp
      0002C3 15 81            [12] 1069 	dec	sp
                                   1070 ;	character.c:110: gets_(size);
      0002C5 90r00r00         [24] 1071 	mov	dptr,#_size
      0002C8 12r00r00         [24] 1072 	lcall	_gets_
                                   1073 ;	character.c:111: int buffer_size = atoi(size);
      0002CB 90r00r00         [24] 1074 	mov	dptr,#_size
      0002CE 75 F0 00         [24] 1075 	mov	b,#0x00
      0002D1 12r00r00         [24] 1076 	lcall	_atoi
      0002D4 AB 82            [24] 1077 	mov	r3,dpl
      0002D6 AC 83            [24] 1078 	mov	r4,dph
                                   1079 ;	character.c:112: printf("\033[1;0mSize after atoi = %d\r\n",buffer_size);
      0002D8 C0 04            [24] 1080 	push	ar4
      0002DA C0 03            [24] 1081 	push	ar3
      0002DC C0 03            [24] 1082 	push	ar3
      0002DE C0 04            [24] 1083 	push	ar4
      0002E0 74rC0            [12] 1084 	mov	a,#___str_8
      0002E2 C0 E0            [24] 1085 	push	acc
      0002E4 74s00            [12] 1086 	mov	a,#(___str_8 >> 8)
      0002E6 C0 E0            [24] 1087 	push	acc
      0002E8 74 80            [12] 1088 	mov	a,#0x80
      0002EA C0 E0            [24] 1089 	push	acc
      0002EC 12r00r00         [24] 1090 	lcall	_printf
      0002EF E5 81            [12] 1091 	mov	a,sp
      0002F1 24 FB            [12] 1092 	add	a,#0xfb
      0002F3 F5 81            [12] 1093 	mov	sp,a
      0002F5 D0 03            [24] 1094 	pop	ar3
      0002F7 D0 04            [24] 1095 	pop	ar4
      0002F9 D0 05            [24] 1096 	pop	ar5
      0002FB D0 06            [24] 1097 	pop	ar6
      0002FD D0 07            [24] 1098 	pop	ar7
                                   1099 ;	character.c:113: if (buffer_size < 30 || buffer_size > 300) {
      0002FF C3               [12] 1100 	clr	c
      000300 EB               [12] 1101 	mov	a,r3
      000301 94 1E            [12] 1102 	subb	a,#0x1e
      000303 EC               [12] 1103 	mov	a,r4
      000304 64 80            [12] 1104 	xrl	a,#0x80
      000306 94 80            [12] 1105 	subb	a,#0x80
      000308 40 0E            [24] 1106 	jc	00102$
      00030A 74 2C            [12] 1107 	mov	a,#0x2c
      00030C 9B               [12] 1108 	subb	a,r3
      00030D 74 81            [12] 1109 	mov	a,#(0x01 ^ 0x80)
      00030F 8C F0            [24] 1110 	mov	b,r4
      000311 63 F0 80         [24] 1111 	xrl	b,#0x80
      000314 95 F0            [12] 1112 	subb	a,b
      000316 50 12            [24] 1113 	jnc	00103$
      000318                       1114 00102$:
                                   1115 ;	character.c:114: printf_tiny("\033[1;31mInvalid Input : The buffer size should be in the range [30, 300]\n\r\n\r");
      000318 74rDD            [12] 1116 	mov	a,#___str_9
      00031A C0 E0            [24] 1117 	push	acc
      00031C 74s00            [12] 1118 	mov	a,#(___str_9 >> 8)
      00031E C0 E0            [24] 1119 	push	acc
      000320 12r00r00         [24] 1120 	lcall	_printf_tiny
      000323 15 81            [12] 1121 	dec	sp
      000325 15 81            [12] 1122 	dec	sp
                                   1123 ;	character.c:115: break;
      000327 02r0BrE0         [24] 1124 	ljmp	00138$
      00032A                       1125 00103$:
                                   1126 ;	character.c:117: __xdata char* buffer_ptr = (__xdata char*)malloc(buffer_size);
      00032A 8B 82            [24] 1127 	mov	dpl,r3
      00032C 8C 83            [24] 1128 	mov	dph,r4
      00032E C0 07            [24] 1129 	push	ar7
      000330 C0 06            [24] 1130 	push	ar6
      000332 C0 05            [24] 1131 	push	ar5
      000334 C0 04            [24] 1132 	push	ar4
      000336 C0 03            [24] 1133 	push	ar3
      000338 12r00r00         [24] 1134 	lcall	_malloc
      00033B A9 82            [24] 1135 	mov	r1,dpl
      00033D AA 83            [24] 1136 	mov	r2,dph
      00033F D0 03            [24] 1137 	pop	ar3
      000341 D0 04            [24] 1138 	pop	ar4
      000343 D0 05            [24] 1139 	pop	ar5
      000345 D0 06            [24] 1140 	pop	ar6
      000347 D0 07            [24] 1141 	pop	ar7
      000349 89*00            [24] 1142 	mov	_command_processing_sloc0_1_0,r1
      00034B 8A*01            [24] 1143 	mov	(_command_processing_sloc0_1_0 + 1),r2
                                   1144 ;	character.c:119: if (buffer_ptr == NULL) {
      00034D E5*00            [12] 1145 	mov	a,_command_processing_sloc0_1_0
      00034F 45*01            [12] 1146 	orl	a,(_command_processing_sloc0_1_0 + 1)
      000351 70 12            [24] 1147 	jnz	00106$
                                   1148 ;	character.c:120: printf_tiny("\033[1;31mInvalid input : Failed to allocate buffer\n\r\n\r");
      000353 74r29            [12] 1149 	mov	a,#___str_10
      000355 C0 E0            [24] 1150 	push	acc
      000357 74s01            [12] 1151 	mov	a,#(___str_10 >> 8)
      000359 C0 E0            [24] 1152 	push	acc
      00035B 12r00r00         [24] 1153 	lcall	_printf_tiny
      00035E 15 81            [12] 1154 	dec	sp
      000360 15 81            [12] 1155 	dec	sp
                                   1156 ;	character.c:121: break;
      000362 02r0BrE0         [24] 1157 	ljmp	00138$
      000365                       1158 00106$:
                                   1159 ;	character.c:124: buffer_size_arr[(*new_buffer_index)-1] = buffer_size;
      000365 8D 82            [24] 1160 	mov	dpl,r5
      000367 8E 83            [24] 1161 	mov	dph,r6
      000369 8F F0            [24] 1162 	mov	b,r7
      00036B 12r00r00         [24] 1163 	lcall	__gptrget
      00036E F8               [12] 1164 	mov	r0,a
      00036F A3               [24] 1165 	inc	dptr
      000370 12r00r00         [24] 1166 	lcall	__gptrget
      000373 FA               [12] 1167 	mov	r2,a
      000374 18               [12] 1168 	dec	r0
      000375 B8 FF 01         [24] 1169 	cjne	r0,#0xff,00238$
      000378 1A               [12] 1170 	dec	r2
      000379                       1171 00238$:
      000379 E8               [12] 1172 	mov	a,r0
      00037A 28               [12] 1173 	add	a,r0
      00037B F8               [12] 1174 	mov	r0,a
      00037C EA               [12] 1175 	mov	a,r2
      00037D 33               [12] 1176 	rlc	a
      00037E FA               [12] 1177 	mov	r2,a
      00037F E8               [12] 1178 	mov	a,r0
      000380 24r00            [12] 1179 	add	a,#_buffer_size_arr
      000382 F5 82            [12] 1180 	mov	dpl,a
      000384 EA               [12] 1181 	mov	a,r2
      000385 34s00            [12] 1182 	addc	a,#(_buffer_size_arr >> 8)
      000387 F5 83            [12] 1183 	mov	dph,a
      000389 EB               [12] 1184 	mov	a,r3
      00038A F0               [24] 1185 	movx	@dptr,a
      00038B EC               [12] 1186 	mov	a,r4
      00038C A3               [24] 1187 	inc	dptr
      00038D F0               [24] 1188 	movx	@dptr,a
                                   1189 ;	character.c:125: ++(*filled_buffer_count);
      00038E 90r00r0C         [24] 1190 	mov	dptr,#_command_processing_PARM_5
      000391 E0               [24] 1191 	movx	a,@dptr
      000392 FA               [12] 1192 	mov	r2,a
      000393 A3               [24] 1193 	inc	dptr
      000394 E0               [24] 1194 	movx	a,@dptr
      000395 FB               [12] 1195 	mov	r3,a
      000396 A3               [24] 1196 	inc	dptr
      000397 E0               [24] 1197 	movx	a,@dptr
      000398 FC               [12] 1198 	mov	r4,a
      000399 8A 82            [24] 1199 	mov	dpl,r2
      00039B 8B 83            [24] 1200 	mov	dph,r3
      00039D 8C F0            [24] 1201 	mov	b,r4
      00039F 12r00r00         [24] 1202 	lcall	__gptrget
      0003A2 F8               [12] 1203 	mov	r0,a
      0003A3 A3               [24] 1204 	inc	dptr
      0003A4 12r00r00         [24] 1205 	lcall	__gptrget
      0003A7 F9               [12] 1206 	mov	r1,a
      0003A8 08               [12] 1207 	inc	r0
      0003A9 B8 00 01         [24] 1208 	cjne	r0,#0x00,00239$
      0003AC 09               [12] 1209 	inc	r1
      0003AD                       1210 00239$:
      0003AD 8A 82            [24] 1211 	mov	dpl,r2
      0003AF 8B 83            [24] 1212 	mov	dph,r3
      0003B1 8C F0            [24] 1213 	mov	b,r4
      0003B3 E8               [12] 1214 	mov	a,r0
      0003B4 12r00r00         [24] 1215 	lcall	__gptrput
      0003B7 A3               [24] 1216 	inc	dptr
      0003B8 E9               [12] 1217 	mov	a,r1
      0003B9 12r00r00         [24] 1218 	lcall	__gptrput
                                   1219 ;	character.c:127: new_buffer_arr[(*new_buffer_index)-1] = buffer_ptr;
      0003BC 8D 82            [24] 1220 	mov	dpl,r5
      0003BE 8E 83            [24] 1221 	mov	dph,r6
      0003C0 8F F0            [24] 1222 	mov	b,r7
      0003C2 12r00r00         [24] 1223 	lcall	__gptrget
      0003C5 F8               [12] 1224 	mov	r0,a
      0003C6 A3               [24] 1225 	inc	dptr
      0003C7 12r00r00         [24] 1226 	lcall	__gptrget
      0003CA F9               [12] 1227 	mov	r1,a
      0003CB 18               [12] 1228 	dec	r0
      0003CC B8 FF 01         [24] 1229 	cjne	r0,#0xff,00240$
      0003CF 19               [12] 1230 	dec	r1
      0003D0                       1231 00240$:
      0003D0 E8               [12] 1232 	mov	a,r0
      0003D1 28               [12] 1233 	add	a,r0
      0003D2 F8               [12] 1234 	mov	r0,a
      0003D3 E9               [12] 1235 	mov	a,r1
      0003D4 33               [12] 1236 	rlc	a
      0003D5 F9               [12] 1237 	mov	r1,a
      0003D6 E8               [12] 1238 	mov	a,r0
      0003D7 24r00            [12] 1239 	add	a,#_new_buffer_arr
      0003D9 F5 82            [12] 1240 	mov	dpl,a
      0003DB E9               [12] 1241 	mov	a,r1
      0003DC 34s00            [12] 1242 	addc	a,#(_new_buffer_arr >> 8)
      0003DE F5 83            [12] 1243 	mov	dph,a
      0003E0 E5*00            [12] 1244 	mov	a,_command_processing_sloc0_1_0
      0003E2 F0               [24] 1245 	movx	@dptr,a
      0003E3 E5*01            [12] 1246 	mov	a,(_command_processing_sloc0_1_0 + 1)
      0003E5 A3               [24] 1247 	inc	dptr
      0003E6 F0               [24] 1248 	movx	@dptr,a
                                   1249 ;	character.c:128: buff_not_cleared[(*new_buffer_index)] = 1; // indicating buff bo new_buffer_index is created
      0003E7 8D 82            [24] 1250 	mov	dpl,r5
      0003E9 8E 83            [24] 1251 	mov	dph,r6
      0003EB 8F F0            [24] 1252 	mov	b,r7
      0003ED 12r00r00         [24] 1253 	lcall	__gptrget
      0003F0 F8               [12] 1254 	mov	r0,a
      0003F1 A3               [24] 1255 	inc	dptr
      0003F2 12r00r00         [24] 1256 	lcall	__gptrget
      0003F5 F9               [12] 1257 	mov	r1,a
      0003F6 E8               [12] 1258 	mov	a,r0
      0003F7 28               [12] 1259 	add	a,r0
      0003F8 F8               [12] 1260 	mov	r0,a
      0003F9 E9               [12] 1261 	mov	a,r1
      0003FA 33               [12] 1262 	rlc	a
      0003FB F9               [12] 1263 	mov	r1,a
      0003FC E8               [12] 1264 	mov	a,r0
      0003FD 24r06            [12] 1265 	add	a,#_buff_not_cleared
      0003FF F5 82            [12] 1266 	mov	dpl,a
      000401 E9               [12] 1267 	mov	a,r1
      000402 34s00            [12] 1268 	addc	a,#(_buff_not_cleared >> 8)
      000404 F5 83            [12] 1269 	mov	dph,a
      000406 74 01            [12] 1270 	mov	a,#0x01
      000408 F0               [24] 1271 	movx	@dptr,a
      000409 E4               [12] 1272 	clr	a
      00040A A3               [24] 1273 	inc	dptr
      00040B F0               [24] 1274 	movx	@dptr,a
                                   1275 ;	character.c:130: printf("\033[1;0mNew buffer index = %d\n\r",(*new_buffer_index));
      00040C 8D 82            [24] 1276 	mov	dpl,r5
      00040E 8E 83            [24] 1277 	mov	dph,r6
      000410 8F F0            [24] 1278 	mov	b,r7
      000412 12r00r00         [24] 1279 	lcall	__gptrget
      000415 F8               [12] 1280 	mov	r0,a
      000416 A3               [24] 1281 	inc	dptr
      000417 12r00r00         [24] 1282 	lcall	__gptrget
      00041A F9               [12] 1283 	mov	r1,a
      00041B C0 07            [24] 1284 	push	ar7
      00041D C0 06            [24] 1285 	push	ar6
      00041F C0 05            [24] 1286 	push	ar5
      000421 C0 04            [24] 1287 	push	ar4
      000423 C0 03            [24] 1288 	push	ar3
      000425 C0 02            [24] 1289 	push	ar2
      000427 C0 00            [24] 1290 	push	ar0
      000429 C0 01            [24] 1291 	push	ar1
      00042B 74r5E            [12] 1292 	mov	a,#___str_11
      00042D C0 E0            [24] 1293 	push	acc
      00042F 74s01            [12] 1294 	mov	a,#(___str_11 >> 8)
      000431 C0 E0            [24] 1295 	push	acc
      000433 74 80            [12] 1296 	mov	a,#0x80
      000435 C0 E0            [24] 1297 	push	acc
      000437 12r00r00         [24] 1298 	lcall	_printf
      00043A E5 81            [12] 1299 	mov	a,sp
      00043C 24 FB            [12] 1300 	add	a,#0xfb
      00043E F5 81            [12] 1301 	mov	sp,a
      000440 D0 02            [24] 1302 	pop	ar2
      000442 D0 03            [24] 1303 	pop	ar3
      000444 D0 04            [24] 1304 	pop	ar4
      000446 D0 05            [24] 1305 	pop	ar5
      000448 D0 06            [24] 1306 	pop	ar6
      00044A D0 07            [24] 1307 	pop	ar7
                                   1308 ;	character.c:131: printf_tiny("\033[1;0mNew buffer allocated successfully : Buffer[%d]\n\r", ((*new_buffer_index)-1));
      00044C 8D 82            [24] 1309 	mov	dpl,r5
      00044E 8E 83            [24] 1310 	mov	dph,r6
      000450 8F F0            [24] 1311 	mov	b,r7
      000452 12r00r00         [24] 1312 	lcall	__gptrget
      000455 F8               [12] 1313 	mov	r0,a
      000456 A3               [24] 1314 	inc	dptr
      000457 12r00r00         [24] 1315 	lcall	__gptrget
      00045A F9               [12] 1316 	mov	r1,a
      00045B 18               [12] 1317 	dec	r0
      00045C B8 FF 01         [24] 1318 	cjne	r0,#0xff,00241$
      00045F 19               [12] 1319 	dec	r1
      000460                       1320 00241$:
      000460 C0 07            [24] 1321 	push	ar7
      000462 C0 06            [24] 1322 	push	ar6
      000464 C0 05            [24] 1323 	push	ar5
      000466 C0 04            [24] 1324 	push	ar4
      000468 C0 03            [24] 1325 	push	ar3
      00046A C0 02            [24] 1326 	push	ar2
      00046C C0 00            [24] 1327 	push	ar0
      00046E C0 01            [24] 1328 	push	ar1
      000470 74r7C            [12] 1329 	mov	a,#___str_12
      000472 C0 E0            [24] 1330 	push	acc
      000474 74s01            [12] 1331 	mov	a,#(___str_12 >> 8)
      000476 C0 E0            [24] 1332 	push	acc
      000478 12r00r00         [24] 1333 	lcall	_printf_tiny
      00047B E5 81            [12] 1334 	mov	a,sp
      00047D 24 FC            [12] 1335 	add	a,#0xfc
      00047F F5 81            [12] 1336 	mov	sp,a
      000481 D0 02            [24] 1337 	pop	ar2
      000483 D0 03            [24] 1338 	pop	ar3
      000485 D0 04            [24] 1339 	pop	ar4
      000487 D0 05            [24] 1340 	pop	ar5
      000489 D0 06            [24] 1341 	pop	ar6
      00048B D0 07            [24] 1342 	pop	ar7
                                   1343 ;	character.c:132: printf_tiny("\033[1;0mTotal Number of Buffers including buffer0 & buffer1 = [%d]\n\r",(*new_buffer_index));
      00048D 8D 82            [24] 1344 	mov	dpl,r5
      00048F 8E 83            [24] 1345 	mov	dph,r6
      000491 8F F0            [24] 1346 	mov	b,r7
      000493 12r00r00         [24] 1347 	lcall	__gptrget
      000496 FD               [12] 1348 	mov	r5,a
      000497 A3               [24] 1349 	inc	dptr
      000498 12r00r00         [24] 1350 	lcall	__gptrget
      00049B FE               [12] 1351 	mov	r6,a
      00049C C0 04            [24] 1352 	push	ar4
      00049E C0 03            [24] 1353 	push	ar3
      0004A0 C0 02            [24] 1354 	push	ar2
      0004A2 C0 05            [24] 1355 	push	ar5
      0004A4 C0 06            [24] 1356 	push	ar6
      0004A6 74rB3            [12] 1357 	mov	a,#___str_13
      0004A8 C0 E0            [24] 1358 	push	acc
      0004AA 74s01            [12] 1359 	mov	a,#(___str_13 >> 8)
      0004AC C0 E0            [24] 1360 	push	acc
      0004AE 12r00r00         [24] 1361 	lcall	_printf_tiny
      0004B1 E5 81            [12] 1362 	mov	a,sp
      0004B3 24 FC            [12] 1363 	add	a,#0xfc
      0004B5 F5 81            [12] 1364 	mov	sp,a
      0004B7 D0 02            [24] 1365 	pop	ar2
      0004B9 D0 03            [24] 1366 	pop	ar3
      0004BB D0 04            [24] 1367 	pop	ar4
                                   1368 ;	character.c:133: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \t Total Empty Buffers = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count));
      0004BD 90r00r09         [24] 1369 	mov	dptr,#_command_processing_PARM_4
      0004C0 E0               [24] 1370 	movx	a,@dptr
      0004C1 FD               [12] 1371 	mov	r5,a
      0004C2 A3               [24] 1372 	inc	dptr
      0004C3 E0               [24] 1373 	movx	a,@dptr
      0004C4 FE               [12] 1374 	mov	r6,a
      0004C5 A3               [24] 1375 	inc	dptr
      0004C6 E0               [24] 1376 	movx	a,@dptr
      0004C7 FF               [12] 1377 	mov	r7,a
      0004C8 8D 82            [24] 1378 	mov	dpl,r5
      0004CA 8E 83            [24] 1379 	mov	dph,r6
      0004CC 8F F0            [24] 1380 	mov	b,r7
      0004CE 12r00r00         [24] 1381 	lcall	__gptrget
      0004D1 FD               [12] 1382 	mov	r5,a
      0004D2 A3               [24] 1383 	inc	dptr
      0004D3 12r00r00         [24] 1384 	lcall	__gptrget
      0004D6 FE               [12] 1385 	mov	r6,a
      0004D7 8A 82            [24] 1386 	mov	dpl,r2
      0004D9 8B 83            [24] 1387 	mov	dph,r3
      0004DB 8C F0            [24] 1388 	mov	b,r4
      0004DD 12r00r00         [24] 1389 	lcall	__gptrget
      0004E0 FA               [12] 1390 	mov	r2,a
      0004E1 A3               [24] 1391 	inc	dptr
      0004E2 12r00r00         [24] 1392 	lcall	__gptrget
      0004E5 FB               [12] 1393 	mov	r3,a
      0004E6 C0 05            [24] 1394 	push	ar5
      0004E8 C0 06            [24] 1395 	push	ar6
      0004EA C0 02            [24] 1396 	push	ar2
      0004EC C0 03            [24] 1397 	push	ar3
      0004EE 74rF6            [12] 1398 	mov	a,#___str_14
      0004F0 C0 E0            [24] 1399 	push	acc
      0004F2 74s01            [12] 1400 	mov	a,#(___str_14 >> 8)
      0004F4 C0 E0            [24] 1401 	push	acc
      0004F6 12r00r00         [24] 1402 	lcall	_printf_tiny
      0004F9 E5 81            [12] 1403 	mov	a,sp
      0004FB 24 FA            [12] 1404 	add	a,#0xfa
      0004FD F5 81            [12] 1405 	mov	sp,a
                                   1406 ;	character.c:134: break;
      0004FF 02r0BrE0         [24] 1407 	ljmp	00138$
                                   1408 ;	character.c:137: case '-':
      000502                       1409 00107$:
                                   1410 ;	character.c:138: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000502 74r37            [12] 1411 	mov	a,#___str_5
      000504 C0 E0            [24] 1412 	push	acc
      000506 74s00            [12] 1413 	mov	a,#(___str_5 >> 8)
      000508 C0 E0            [24] 1414 	push	acc
      00050A 12r00r00         [24] 1415 	lcall	_printf_tiny
      00050D 15 81            [12] 1416 	dec	sp
      00050F 15 81            [12] 1417 	dec	sp
                                   1418 ;	character.c:139: printf_tiny("\033[1;33m|************ Processing [-] *******************|\n\r");
      000511 74r3A            [12] 1419 	mov	a,#___str_15
      000513 C0 E0            [24] 1420 	push	acc
      000515 74s02            [12] 1421 	mov	a,#(___str_15 >> 8)
      000517 C0 E0            [24] 1422 	push	acc
      000519 12r00r00         [24] 1423 	lcall	_printf_tiny
      00051C 15 81            [12] 1424 	dec	sp
      00051E 15 81            [12] 1425 	dec	sp
                                   1426 ;	character.c:140: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000520 74r37            [12] 1427 	mov	a,#___str_5
      000522 C0 E0            [24] 1428 	push	acc
      000524 74s00            [12] 1429 	mov	a,#(___str_5 >> 8)
      000526 C0 E0            [24] 1430 	push	acc
      000528 12r00r00         [24] 1431 	lcall	_printf_tiny
      00052B 15 81            [12] 1432 	dec	sp
      00052D 15 81            [12] 1433 	dec	sp
                                   1434 ;	character.c:141: buffer_to_delete = 0;
      00052F 90r00r04         [24] 1435 	mov	dptr,#_buffer_to_delete
      000532 E4               [12] 1436 	clr	a
      000533 F0               [24] 1437 	movx	@dptr,a
      000534 A3               [24] 1438 	inc	dptr
      000535 F0               [24] 1439 	movx	@dptr,a
                                   1440 ;	character.c:142: printf_tiny("\033[1;0m\n\rEnter buffer number to be deleted:\n\r");
      000536 74r75            [12] 1441 	mov	a,#___str_16
      000538 C0 E0            [24] 1442 	push	acc
      00053A 74s02            [12] 1443 	mov	a,#(___str_16 >> 8)
      00053C C0 E0            [24] 1444 	push	acc
      00053E 12r00r00         [24] 1445 	lcall	_printf_tiny
      000541 15 81            [12] 1446 	dec	sp
      000543 15 81            [12] 1447 	dec	sp
                                   1448 ;	character.c:143: printf_tiny("\033[1;0m\Current number of buffers are [%d] (index starting from 0):\n\r\n\r",*new_buffer_index);
      000545 90r00r06         [24] 1449 	mov	dptr,#_command_processing_PARM_3
      000548 E0               [24] 1450 	movx	a,@dptr
      000549 FD               [12] 1451 	mov	r5,a
      00054A A3               [24] 1452 	inc	dptr
      00054B E0               [24] 1453 	movx	a,@dptr
      00054C FE               [12] 1454 	mov	r6,a
      00054D A3               [24] 1455 	inc	dptr
      00054E E0               [24] 1456 	movx	a,@dptr
      00054F FF               [12] 1457 	mov	r7,a
      000550 8D 82            [24] 1458 	mov	dpl,r5
      000552 8E 83            [24] 1459 	mov	dph,r6
      000554 8F F0            [24] 1460 	mov	b,r7
      000556 12r00r00         [24] 1461 	lcall	__gptrget
      000559 FB               [12] 1462 	mov	r3,a
      00055A A3               [24] 1463 	inc	dptr
      00055B 12r00r00         [24] 1464 	lcall	__gptrget
      00055E FC               [12] 1465 	mov	r4,a
      00055F C0 07            [24] 1466 	push	ar7
      000561 C0 06            [24] 1467 	push	ar6
      000563 C0 05            [24] 1468 	push	ar5
      000565 C0 03            [24] 1469 	push	ar3
      000567 C0 04            [24] 1470 	push	ar4
      000569 74rA2            [12] 1471 	mov	a,#___str_17
      00056B C0 E0            [24] 1472 	push	acc
      00056D 74s02            [12] 1473 	mov	a,#(___str_17 >> 8)
      00056F C0 E0            [24] 1474 	push	acc
      000571 12r00r00         [24] 1475 	lcall	_printf_tiny
      000574 E5 81            [12] 1476 	mov	a,sp
      000576 24 FC            [12] 1477 	add	a,#0xfc
      000578 F5 81            [12] 1478 	mov	sp,a
      00057A D0 05            [24] 1479 	pop	ar5
      00057C D0 06            [24] 1480 	pop	ar6
      00057E D0 07            [24] 1481 	pop	ar7
                                   1482 ;	character.c:146: do{
      000580                       1483 00111$:
                                   1484 ;	character.c:147: ch = getchar();
      000580 C0 07            [24] 1485 	push	ar7
      000582 C0 06            [24] 1486 	push	ar6
      000584 C0 05            [24] 1487 	push	ar5
      000586 12r00r00         [24] 1488 	lcall	_getchar
      000589 AB 82            [24] 1489 	mov	r3,dpl
                                   1490 ;	character.c:148: putchar(ch);
      00058B 8B 02            [24] 1491 	mov	ar2,r3
      00058D 7C 00            [12] 1492 	mov	r4,#0x00
      00058F 8A 82            [24] 1493 	mov	dpl,r2
      000591 8C 83            [24] 1494 	mov	dph,r4
      000593 C0 04            [24] 1495 	push	ar4
      000595 C0 03            [24] 1496 	push	ar3
      000597 C0 02            [24] 1497 	push	ar2
      000599 12r00r00         [24] 1498 	lcall	_putchar
      00059C D0 02            [24] 1499 	pop	ar2
      00059E D0 03            [24] 1500 	pop	ar3
      0005A0 D0 04            [24] 1501 	pop	ar4
      0005A2 D0 05            [24] 1502 	pop	ar5
      0005A4 D0 06            [24] 1503 	pop	ar6
      0005A6 D0 07            [24] 1504 	pop	ar7
                                   1505 ;	character.c:150: if (ch < '0' || ch > '9') {
      0005A8 BB 30 00         [24] 1506 	cjne	r3,#0x30,00242$
      0005AB                       1507 00242$:
      0005AB 40 05            [24] 1508 	jc	00108$
      0005AD EB               [12] 1509 	mov	a,r3
      0005AE 24 C6            [12] 1510 	add	a,#0xff - 0x39
      0005B0 50 1D            [24] 1511 	jnc	00109$
      0005B2                       1512 00108$:
                                   1513 ;	character.c:151: printf_tiny("\033[1;31mInvalid input : invalid digits entered \n\r\n\r");
      0005B2 C0 07            [24] 1514 	push	ar7
      0005B4 C0 06            [24] 1515 	push	ar6
      0005B6 C0 05            [24] 1516 	push	ar5
      0005B8 74rE8            [12] 1517 	mov	a,#___str_18
      0005BA C0 E0            [24] 1518 	push	acc
      0005BC 74s02            [12] 1519 	mov	a,#(___str_18 >> 8)
      0005BE C0 E0            [24] 1520 	push	acc
      0005C0 12r00r00         [24] 1521 	lcall	_printf_tiny
      0005C3 15 81            [12] 1522 	dec	sp
      0005C5 15 81            [12] 1523 	dec	sp
      0005C7 D0 05            [24] 1524 	pop	ar5
      0005C9 D0 06            [24] 1525 	pop	ar6
      0005CB D0 07            [24] 1526 	pop	ar7
                                   1527 ;	character.c:152: break;
      0005CD 80 50            [24] 1528 	sjmp	00113$
      0005CF                       1529 00109$:
                                   1530 ;	character.c:155: int temp = ch - '0';
      0005CF EA               [12] 1531 	mov	a,r2
      0005D0 24 D0            [12] 1532 	add	a,#0xd0
      0005D2 FA               [12] 1533 	mov	r2,a
      0005D3 EC               [12] 1534 	mov	a,r4
      0005D4 34 FF            [12] 1535 	addc	a,#0xff
      0005D6 FC               [12] 1536 	mov	r4,a
                                   1537 ;	character.c:156: buffer_to_delete = buffer_to_delete * 10 + temp;
      0005D7 90r00r04         [24] 1538 	mov	dptr,#_buffer_to_delete
      0005DA E0               [24] 1539 	movx	a,@dptr
      0005DB F9               [12] 1540 	mov	r1,a
      0005DC A3               [24] 1541 	inc	dptr
      0005DD E0               [24] 1542 	movx	a,@dptr
      0005DE FB               [12] 1543 	mov	r3,a
      0005DF 90r00r00         [24] 1544 	mov	dptr,#__mulint_PARM_2
      0005E2 E9               [12] 1545 	mov	a,r1
      0005E3 F0               [24] 1546 	movx	@dptr,a
      0005E4 EB               [12] 1547 	mov	a,r3
      0005E5 A3               [24] 1548 	inc	dptr
      0005E6 F0               [24] 1549 	movx	@dptr,a
      0005E7 90 00 0A         [24] 1550 	mov	dptr,#0x000a
      0005EA C0 07            [24] 1551 	push	ar7
      0005EC C0 06            [24] 1552 	push	ar6
      0005EE C0 05            [24] 1553 	push	ar5
      0005F0 C0 04            [24] 1554 	push	ar4
      0005F2 C0 02            [24] 1555 	push	ar2
      0005F4 12r00r00         [24] 1556 	lcall	__mulint
      0005F7 E5 82            [12] 1557 	mov	a,dpl
      0005F9 85 83 F0         [24] 1558 	mov	b,dph
      0005FC D0 02            [24] 1559 	pop	ar2
      0005FE D0 04            [24] 1560 	pop	ar4
      000600 90r00r04         [24] 1561 	mov	dptr,#_buffer_to_delete
      000603 2A               [12] 1562 	add	a,r2
      000604 F0               [24] 1563 	movx	@dptr,a
      000605 EC               [12] 1564 	mov	a,r4
      000606 35 F0            [12] 1565 	addc	a,b
      000608 A3               [24] 1566 	inc	dptr
      000609 F0               [24] 1567 	movx	@dptr,a
                                   1568 ;	character.c:158: ch = getchar();
      00060A 12r00r00         [24] 1569 	lcall	_getchar
      00060D AB 82            [24] 1570 	mov	r3,dpl
      00060F AC 83            [24] 1571 	mov	r4,dph
      000611 D0 05            [24] 1572 	pop	ar5
      000613 D0 06            [24] 1573 	pop	ar6
      000615 D0 07            [24] 1574 	pop	ar7
                                   1575 ;	character.c:160: }while(ch != '\r');
      000617 BB 0D 02         [24] 1576 	cjne	r3,#0x0d,00245$
      00061A 80 03            [24] 1577 	sjmp	00246$
      00061C                       1578 00245$:
      00061C 02r05r80         [24] 1579 	ljmp	00111$
      00061F                       1580 00246$:
      00061F                       1581 00113$:
                                   1582 ;	character.c:162: if (buffer_to_delete == 0)
      00061F 90r00r04         [24] 1583 	mov	dptr,#_buffer_to_delete
      000622 E0               [24] 1584 	movx	a,@dptr
      000623 FB               [12] 1585 	mov	r3,a
      000624 A3               [24] 1586 	inc	dptr
      000625 E0               [24] 1587 	movx	a,@dptr
      000626 FC               [12] 1588 	mov	r4,a
      000627 4B               [12] 1589 	orl	a,r3
      000628 70 12            [24] 1590 	jnz	00121$
                                   1591 ;	character.c:164: printf_tiny("\033[1;31mInvalid input : buffer number can't be 0\n\r\n");break;
      00062A 74r1B            [12] 1592 	mov	a,#___str_19
      00062C C0 E0            [24] 1593 	push	acc
      00062E 74s03            [12] 1594 	mov	a,#(___str_19 >> 8)
      000630 C0 E0            [24] 1595 	push	acc
      000632 12r00r00         [24] 1596 	lcall	_printf_tiny
      000635 15 81            [12] 1597 	dec	sp
      000637 15 81            [12] 1598 	dec	sp
      000639 02r0BrE0         [24] 1599 	ljmp	00138$
      00063C                       1600 00121$:
                                   1601 ;	character.c:166: } else if(buff_not_cleared[buffer_to_delete] == 0){
      00063C EB               [12] 1602 	mov	a,r3
      00063D 2B               [12] 1603 	add	a,r3
      00063E F9               [12] 1604 	mov	r1,a
      00063F EC               [12] 1605 	mov	a,r4
      000640 33               [12] 1606 	rlc	a
      000641 FA               [12] 1607 	mov	r2,a
      000642 E9               [12] 1608 	mov	a,r1
      000643 24r06            [12] 1609 	add	a,#_buff_not_cleared
      000645 F5 82            [12] 1610 	mov	dpl,a
      000647 EA               [12] 1611 	mov	a,r2
      000648 34s00            [12] 1612 	addc	a,#(_buff_not_cleared >> 8)
      00064A F5 83            [12] 1613 	mov	dph,a
      00064C E0               [24] 1614 	movx	a,@dptr
      00064D F9               [12] 1615 	mov	r1,a
      00064E A3               [24] 1616 	inc	dptr
      00064F E0               [24] 1617 	movx	a,@dptr
      000650 49               [12] 1618 	orl	a,r1
      000651 70 18            [24] 1619 	jnz	00118$
                                   1620 ;	character.c:167: printf_tiny("\033[1;31mInvalid input : buffer[%d] was already cleared earlier\n\r",buffer_to_delete);break;
      000653 C0 03            [24] 1621 	push	ar3
      000655 C0 04            [24] 1622 	push	ar4
      000657 74r4E            [12] 1623 	mov	a,#___str_20
      000659 C0 E0            [24] 1624 	push	acc
      00065B 74s03            [12] 1625 	mov	a,#(___str_20 >> 8)
      00065D C0 E0            [24] 1626 	push	acc
      00065F 12r00r00         [24] 1627 	lcall	_printf_tiny
      000662 E5 81            [12] 1628 	mov	a,sp
      000664 24 FC            [12] 1629 	add	a,#0xfc
      000666 F5 81            [12] 1630 	mov	sp,a
      000668 02r0BrE0         [24] 1631 	ljmp	00138$
      00066B                       1632 00118$:
                                   1633 ;	character.c:169: } else if ((buffer_to_delete) >= *new_buffer_index) {
      00066B 8D 82            [24] 1634 	mov	dpl,r5
      00066D 8E 83            [24] 1635 	mov	dph,r6
      00066F 8F F0            [24] 1636 	mov	b,r7
      000671 12r00r00         [24] 1637 	lcall	__gptrget
      000674 F9               [12] 1638 	mov	r1,a
      000675 A3               [24] 1639 	inc	dptr
      000676 12r00r00         [24] 1640 	lcall	__gptrget
      000679 FA               [12] 1641 	mov	r2,a
      00067A C3               [12] 1642 	clr	c
      00067B EB               [12] 1643 	mov	a,r3
      00067C 99               [12] 1644 	subb	a,r1
      00067D EC               [12] 1645 	mov	a,r4
      00067E 64 80            [12] 1646 	xrl	a,#0x80
      000680 8A F0            [24] 1647 	mov	b,r2
      000682 63 F0 80         [24] 1648 	xrl	b,#0x80
      000685 95 F0            [12] 1649 	subb	a,b
      000687 40 12            [24] 1650 	jc	00115$
                                   1651 ;	character.c:170: printf_tiny("\033[1;31mInvalid input : buffer number doesn't exist\n\r");break;
      000689 74r8E            [12] 1652 	mov	a,#___str_21
      00068B C0 E0            [24] 1653 	push	acc
      00068D 74s03            [12] 1654 	mov	a,#(___str_21 >> 8)
      00068F C0 E0            [24] 1655 	push	acc
      000691 12r00r00         [24] 1656 	lcall	_printf_tiny
      000694 15 81            [12] 1657 	dec	sp
      000696 15 81            [12] 1658 	dec	sp
      000698 02r0BrE0         [24] 1659 	ljmp	00138$
      00069B                       1660 00115$:
                                   1661 ;	character.c:173: printf_tiny("\033[1;0mBuffer [%d] requested to be deleted\n\r",buffer_to_delete);
      00069B C0 07            [24] 1662 	push	ar7
      00069D C0 06            [24] 1663 	push	ar6
      00069F C0 05            [24] 1664 	push	ar5
      0006A1 C0 03            [24] 1665 	push	ar3
      0006A3 C0 04            [24] 1666 	push	ar4
      0006A5 74rC3            [12] 1667 	mov	a,#___str_22
      0006A7 C0 E0            [24] 1668 	push	acc
      0006A9 74s03            [12] 1669 	mov	a,#(___str_22 >> 8)
      0006AB C0 E0            [24] 1670 	push	acc
      0006AD 12r00r00         [24] 1671 	lcall	_printf_tiny
      0006B0 E5 81            [12] 1672 	mov	a,sp
      0006B2 24 FC            [12] 1673 	add	a,#0xfc
      0006B4 F5 81            [12] 1674 	mov	sp,a
                                   1675 ;	character.c:174: free(new_buffer_arr[buffer_to_delete]);
      0006B6 90r00r04         [24] 1676 	mov	dptr,#_buffer_to_delete
      0006B9 E0               [24] 1677 	movx	a,@dptr
      0006BA FB               [12] 1678 	mov	r3,a
      0006BB A3               [24] 1679 	inc	dptr
      0006BC E0               [24] 1680 	movx	a,@dptr
      0006BD FC               [12] 1681 	mov	r4,a
      0006BE EB               [12] 1682 	mov	a,r3
      0006BF 2B               [12] 1683 	add	a,r3
      0006C0 FB               [12] 1684 	mov	r3,a
      0006C1 EC               [12] 1685 	mov	a,r4
      0006C2 33               [12] 1686 	rlc	a
      0006C3 FC               [12] 1687 	mov	r4,a
      0006C4 EB               [12] 1688 	mov	a,r3
      0006C5 24r00            [12] 1689 	add	a,#_new_buffer_arr
      0006C7 F5 82            [12] 1690 	mov	dpl,a
      0006C9 EC               [12] 1691 	mov	a,r4
      0006CA 34s00            [12] 1692 	addc	a,#(_new_buffer_arr >> 8)
      0006CC F5 83            [12] 1693 	mov	dph,a
      0006CE E0               [24] 1694 	movx	a,@dptr
      0006CF FB               [12] 1695 	mov	r3,a
      0006D0 A3               [24] 1696 	inc	dptr
      0006D1 E0               [24] 1697 	movx	a,@dptr
      0006D2 FC               [12] 1698 	mov	r4,a
      0006D3 7A 00            [12] 1699 	mov	r2,#0x00
      0006D5 8B 82            [24] 1700 	mov	dpl,r3
      0006D7 8C 83            [24] 1701 	mov	dph,r4
      0006D9 8A F0            [24] 1702 	mov	b,r2
      0006DB 12r00r00         [24] 1703 	lcall	_free
      0006DE D0 05            [24] 1704 	pop	ar5
      0006E0 D0 06            [24] 1705 	pop	ar6
      0006E2 D0 07            [24] 1706 	pop	ar7
                                   1707 ;	character.c:175: buff_not_cleared[buffer_to_delete] =0;
      0006E4 90r00r04         [24] 1708 	mov	dptr,#_buffer_to_delete
      0006E7 E0               [24] 1709 	movx	a,@dptr
      0006E8 FB               [12] 1710 	mov	r3,a
      0006E9 A3               [24] 1711 	inc	dptr
      0006EA E0               [24] 1712 	movx	a,@dptr
      0006EB FC               [12] 1713 	mov	r4,a
      0006EC EB               [12] 1714 	mov	a,r3
      0006ED 2B               [12] 1715 	add	a,r3
      0006EE FB               [12] 1716 	mov	r3,a
      0006EF EC               [12] 1717 	mov	a,r4
      0006F0 33               [12] 1718 	rlc	a
      0006F1 FC               [12] 1719 	mov	r4,a
      0006F2 EB               [12] 1720 	mov	a,r3
      0006F3 24r06            [12] 1721 	add	a,#_buff_not_cleared
      0006F5 F5 82            [12] 1722 	mov	dpl,a
      0006F7 EC               [12] 1723 	mov	a,r4
      0006F8 34s00            [12] 1724 	addc	a,#(_buff_not_cleared >> 8)
      0006FA F5 83            [12] 1725 	mov	dph,a
      0006FC E4               [12] 1726 	clr	a
      0006FD F0               [24] 1727 	movx	@dptr,a
      0006FE A3               [24] 1728 	inc	dptr
      0006FF F0               [24] 1729 	movx	@dptr,a
                                   1730 ;	character.c:176: ++(*free_buffer_count);
      000700 90r00r09         [24] 1731 	mov	dptr,#_command_processing_PARM_4
      000703 E0               [24] 1732 	movx	a,@dptr
      000704 FA               [12] 1733 	mov	r2,a
      000705 A3               [24] 1734 	inc	dptr
      000706 E0               [24] 1735 	movx	a,@dptr
      000707 FB               [12] 1736 	mov	r3,a
      000708 A3               [24] 1737 	inc	dptr
      000709 E0               [24] 1738 	movx	a,@dptr
      00070A FC               [12] 1739 	mov	r4,a
      00070B 8A 82            [24] 1740 	mov	dpl,r2
      00070D 8B 83            [24] 1741 	mov	dph,r3
      00070F 8C F0            [24] 1742 	mov	b,r4
      000711 12r00r00         [24] 1743 	lcall	__gptrget
      000714 F8               [12] 1744 	mov	r0,a
      000715 A3               [24] 1745 	inc	dptr
      000716 12r00r00         [24] 1746 	lcall	__gptrget
      000719 F9               [12] 1747 	mov	r1,a
      00071A 08               [12] 1748 	inc	r0
      00071B B8 00 01         [24] 1749 	cjne	r0,#0x00,00250$
      00071E 09               [12] 1750 	inc	r1
      00071F                       1751 00250$:
      00071F 8A 82            [24] 1752 	mov	dpl,r2
      000721 8B 83            [24] 1753 	mov	dph,r3
      000723 8C F0            [24] 1754 	mov	b,r4
      000725 E8               [12] 1755 	mov	a,r0
      000726 12r00r00         [24] 1756 	lcall	__gptrput
      000729 A3               [24] 1757 	inc	dptr
      00072A E9               [12] 1758 	mov	a,r1
      00072B 12r00r00         [24] 1759 	lcall	__gptrput
                                   1760 ;	character.c:177: printf_tiny("\033[1;0mBuffer[%d] de-allocated successfully  \n\r", buffer_to_delete);
      00072E C0 07            [24] 1761 	push	ar7
      000730 C0 06            [24] 1762 	push	ar6
      000732 C0 05            [24] 1763 	push	ar5
      000734 C0 04            [24] 1764 	push	ar4
      000736 C0 03            [24] 1765 	push	ar3
      000738 C0 02            [24] 1766 	push	ar2
      00073A 90r00r04         [24] 1767 	mov	dptr,#_buffer_to_delete
      00073D E0               [24] 1768 	movx	a,@dptr
      00073E C0 E0            [24] 1769 	push	acc
      000740 A3               [24] 1770 	inc	dptr
      000741 E0               [24] 1771 	movx	a,@dptr
      000742 C0 E0            [24] 1772 	push	acc
      000744 74rEF            [12] 1773 	mov	a,#___str_23
      000746 C0 E0            [24] 1774 	push	acc
      000748 74s03            [12] 1775 	mov	a,#(___str_23 >> 8)
      00074A C0 E0            [24] 1776 	push	acc
      00074C 12r00r00         [24] 1777 	lcall	_printf_tiny
      00074F E5 81            [12] 1778 	mov	a,sp
      000751 24 FC            [12] 1779 	add	a,#0xfc
      000753 F5 81            [12] 1780 	mov	sp,a
      000755 D0 02            [24] 1781 	pop	ar2
      000757 D0 03            [24] 1782 	pop	ar3
      000759 D0 04            [24] 1783 	pop	ar4
      00075B D0 05            [24] 1784 	pop	ar5
      00075D D0 06            [24] 1785 	pop	ar6
      00075F D0 07            [24] 1786 	pop	ar7
                                   1787 ;	character.c:178: printf_tiny("\033[1;0mTotal Number of Buffers after deallocation = [%d]\n\r\n\r",*new_buffer_index);
      000761 8D 82            [24] 1788 	mov	dpl,r5
      000763 8E 83            [24] 1789 	mov	dph,r6
      000765 8F F0            [24] 1790 	mov	b,r7
      000767 12r00r00         [24] 1791 	lcall	__gptrget
      00076A FD               [12] 1792 	mov	r5,a
      00076B A3               [24] 1793 	inc	dptr
      00076C 12r00r00         [24] 1794 	lcall	__gptrget
      00076F FE               [12] 1795 	mov	r6,a
      000770 C0 04            [24] 1796 	push	ar4
      000772 C0 03            [24] 1797 	push	ar3
      000774 C0 02            [24] 1798 	push	ar2
      000776 C0 05            [24] 1799 	push	ar5
      000778 C0 06            [24] 1800 	push	ar6
      00077A 74r1E            [12] 1801 	mov	a,#___str_24
      00077C C0 E0            [24] 1802 	push	acc
      00077E 74s04            [12] 1803 	mov	a,#(___str_24 >> 8)
      000780 C0 E0            [24] 1804 	push	acc
      000782 12r00r00         [24] 1805 	lcall	_printf_tiny
      000785 E5 81            [12] 1806 	mov	a,sp
      000787 24 FC            [12] 1807 	add	a,#0xfc
      000789 F5 81            [12] 1808 	mov	sp,a
      00078B D0 02            [24] 1809 	pop	ar2
      00078D D0 03            [24] 1810 	pop	ar3
      00078F D0 04            [24] 1811 	pop	ar4
                                   1812 ;	character.c:179: printf_tiny("\033[1;0mTotal Filled Buffers = [%d] \t Total Empty Buffers = [%d] \n\r\n\r",(*filled_buffer_count),(*free_buffer_count));
      000791 8A 82            [24] 1813 	mov	dpl,r2
      000793 8B 83            [24] 1814 	mov	dph,r3
      000795 8C F0            [24] 1815 	mov	b,r4
      000797 12r00r00         [24] 1816 	lcall	__gptrget
      00079A FA               [12] 1817 	mov	r2,a
      00079B A3               [24] 1818 	inc	dptr
      00079C 12r00r00         [24] 1819 	lcall	__gptrget
      00079F FB               [12] 1820 	mov	r3,a
      0007A0 90r00r0C         [24] 1821 	mov	dptr,#_command_processing_PARM_5
      0007A3 E0               [24] 1822 	movx	a,@dptr
      0007A4 FD               [12] 1823 	mov	r5,a
      0007A5 A3               [24] 1824 	inc	dptr
      0007A6 E0               [24] 1825 	movx	a,@dptr
      0007A7 FE               [12] 1826 	mov	r6,a
      0007A8 A3               [24] 1827 	inc	dptr
      0007A9 E0               [24] 1828 	movx	a,@dptr
      0007AA FF               [12] 1829 	mov	r7,a
      0007AB 8D 82            [24] 1830 	mov	dpl,r5
      0007AD 8E 83            [24] 1831 	mov	dph,r6
      0007AF 8F F0            [24] 1832 	mov	b,r7
      0007B1 12r00r00         [24] 1833 	lcall	__gptrget
      0007B4 FD               [12] 1834 	mov	r5,a
      0007B5 A3               [24] 1835 	inc	dptr
      0007B6 12r00r00         [24] 1836 	lcall	__gptrget
      0007B9 FE               [12] 1837 	mov	r6,a
      0007BA C0 02            [24] 1838 	push	ar2
      0007BC C0 03            [24] 1839 	push	ar3
      0007BE C0 05            [24] 1840 	push	ar5
      0007C0 C0 06            [24] 1841 	push	ar6
      0007C2 74rF6            [12] 1842 	mov	a,#___str_14
      0007C4 C0 E0            [24] 1843 	push	acc
      0007C6 74s01            [12] 1844 	mov	a,#(___str_14 >> 8)
      0007C8 C0 E0            [24] 1845 	push	acc
      0007CA 12r00r00         [24] 1846 	lcall	_printf_tiny
      0007CD E5 81            [12] 1847 	mov	a,sp
      0007CF 24 FA            [12] 1848 	add	a,#0xfa
      0007D1 F5 81            [12] 1849 	mov	sp,a
                                   1850 ;	character.c:181: break;
      0007D3 02r0BrE0         [24] 1851 	ljmp	00138$
                                   1852 ;	character.c:183: case '@':
      0007D6                       1853 00123$:
                                   1854 ;	character.c:184: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0007D6 74r37            [12] 1855 	mov	a,#___str_5
      0007D8 C0 E0            [24] 1856 	push	acc
      0007DA 74s00            [12] 1857 	mov	a,#(___str_5 >> 8)
      0007DC C0 E0            [24] 1858 	push	acc
      0007DE 12r00r00         [24] 1859 	lcall	_printf_tiny
      0007E1 15 81            [12] 1860 	dec	sp
      0007E3 15 81            [12] 1861 	dec	sp
                                   1862 ;	character.c:185: printf_tiny("\033[1;33m|************ Processing [@] *******************|\n\r");
      0007E5 74r5A            [12] 1863 	mov	a,#___str_25
      0007E7 C0 E0            [24] 1864 	push	acc
      0007E9 74s04            [12] 1865 	mov	a,#(___str_25 >> 8)
      0007EB C0 E0            [24] 1866 	push	acc
      0007ED 12r00r00         [24] 1867 	lcall	_printf_tiny
      0007F0 15 81            [12] 1868 	dec	sp
      0007F2 15 81            [12] 1869 	dec	sp
                                   1870 ;	character.c:186: printf_tiny("\033[1;33m|***********************************************|\n\r");
      0007F4 74r37            [12] 1871 	mov	a,#___str_5
      0007F6 C0 E0            [24] 1872 	push	acc
      0007F8 74s00            [12] 1873 	mov	a,#(___str_5 >> 8)
      0007FA C0 E0            [24] 1874 	push	acc
      0007FC 12r00r00         [24] 1875 	lcall	_printf_tiny
      0007FF 15 81            [12] 1876 	dec	sp
      000801 15 81            [12] 1877 	dec	sp
                                   1878 ;	character.c:187: for(int i = 0; i < *new_buffer_index; i++) {
      000803 90r00r06         [24] 1879 	mov	dptr,#_command_processing_PARM_3
      000806 E0               [24] 1880 	movx	a,@dptr
      000807 F5*02            [12] 1881 	mov	_command_processing_sloc1_1_0,a
      000809 A3               [24] 1882 	inc	dptr
      00080A E0               [24] 1883 	movx	a,@dptr
      00080B F5*03            [12] 1884 	mov	(_command_processing_sloc1_1_0 + 1),a
      00080D A3               [24] 1885 	inc	dptr
      00080E E0               [24] 1886 	movx	a,@dptr
      00080F F5*04            [12] 1887 	mov	(_command_processing_sloc1_1_0 + 2),a
      000811 7B 00            [12] 1888 	mov	r3,#0x00
      000813 7C 00            [12] 1889 	mov	r4,#0x00
      000815                       1890 00140$:
      000815 85*02 82         [24] 1891 	mov	dpl,_command_processing_sloc1_1_0
      000818 85*03 83         [24] 1892 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      00081B 85*04 F0         [24] 1893 	mov	b,(_command_processing_sloc1_1_0 + 2)
      00081E 12r00r00         [24] 1894 	lcall	__gptrget
      000821 F9               [12] 1895 	mov	r1,a
      000822 A3               [24] 1896 	inc	dptr
      000823 12r00r00         [24] 1897 	lcall	__gptrget
      000826 FA               [12] 1898 	mov	r2,a
      000827 C3               [12] 1899 	clr	c
      000828 EB               [12] 1900 	mov	a,r3
      000829 99               [12] 1901 	subb	a,r1
      00082A EC               [12] 1902 	mov	a,r4
      00082B 64 80            [12] 1903 	xrl	a,#0x80
      00082D 8A F0            [24] 1904 	mov	b,r2
      00082F 63 F0 80         [24] 1905 	xrl	b,#0x80
      000832 95 F0            [12] 1906 	subb	a,b
      000834 40 03            [24] 1907 	jc	00251$
      000836 02r08rC6         [24] 1908 	ljmp	00127$
      000839                       1909 00251$:
                                   1910 ;	character.c:188: char* buffer_to_free = new_buffer_arr[i];
      000839 EB               [12] 1911 	mov	a,r3
      00083A 2B               [12] 1912 	add	a,r3
      00083B F9               [12] 1913 	mov	r1,a
      00083C EC               [12] 1914 	mov	a,r4
      00083D 33               [12] 1915 	rlc	a
      00083E FA               [12] 1916 	mov	r2,a
      00083F E9               [12] 1917 	mov	a,r1
      000840 24r00            [12] 1918 	add	a,#_new_buffer_arr
      000842 F9               [12] 1919 	mov	r1,a
      000843 EA               [12] 1920 	mov	a,r2
      000844 34s00            [12] 1921 	addc	a,#(_new_buffer_arr >> 8)
      000846 FA               [12] 1922 	mov	r2,a
      000847 89 82            [24] 1923 	mov	dpl,r1
      000849 8A 83            [24] 1924 	mov	dph,r2
      00084B E0               [24] 1925 	movx	a,@dptr
      00084C F8               [12] 1926 	mov	r0,a
      00084D A3               [24] 1927 	inc	dptr
      00084E E0               [24] 1928 	movx	a,@dptr
      00084F FF               [12] 1929 	mov	r7,a
      000850 88*05            [24] 1930 	mov	_command_processing_sloc2_1_0,r0
      000852 8F*06            [24] 1931 	mov	(_command_processing_sloc2_1_0 + 1),r7
      000854 75*07 00         [24] 1932 	mov	(_command_processing_sloc2_1_0 + 2),#0x00
                                   1933 ;	character.c:189: if(buffer_to_free != NULL) {
      000857 E8               [12] 1934 	mov	a,r0
      000858 4F               [12] 1935 	orl	a,r7
      000859 60 46            [24] 1936 	jz	00125$
                                   1937 ;	character.c:190: free(buffer_to_free);
      00085B AD*05            [24] 1938 	mov	r5,_command_processing_sloc2_1_0
      00085D AE*06            [24] 1939 	mov	r6,(_command_processing_sloc2_1_0 + 1)
      00085F AF*07            [24] 1940 	mov	r7,(_command_processing_sloc2_1_0 + 2)
      000861 8D 82            [24] 1941 	mov	dpl,r5
      000863 8E 83            [24] 1942 	mov	dph,r6
      000865 8F F0            [24] 1943 	mov	b,r7
      000867 C0 04            [24] 1944 	push	ar4
      000869 C0 03            [24] 1945 	push	ar3
      00086B C0 02            [24] 1946 	push	ar2
      00086D C0 01            [24] 1947 	push	ar1
      00086F 12r00r00         [24] 1948 	lcall	_free
      000872 D0 01            [24] 1949 	pop	ar1
      000874 D0 02            [24] 1950 	pop	ar2
      000876 D0 03            [24] 1951 	pop	ar3
      000878 D0 04            [24] 1952 	pop	ar4
                                   1953 ;	character.c:191: new_buffer_arr[i] = NULL;
      00087A 89 82            [24] 1954 	mov	dpl,r1
      00087C 8A 83            [24] 1955 	mov	dph,r2
      00087E E4               [12] 1956 	clr	a
      00087F F0               [24] 1957 	movx	@dptr,a
      000880 A3               [24] 1958 	inc	dptr
      000881 F0               [24] 1959 	movx	@dptr,a
                                   1960 ;	character.c:192: printf_tiny("\033[1;0mBuffer[%d] freed\n\r",i);
      000882 C0 04            [24] 1961 	push	ar4
      000884 C0 03            [24] 1962 	push	ar3
      000886 C0 03            [24] 1963 	push	ar3
      000888 C0 04            [24] 1964 	push	ar4
      00088A 74r95            [12] 1965 	mov	a,#___str_26
      00088C C0 E0            [24] 1966 	push	acc
      00088E 74s04            [12] 1967 	mov	a,#(___str_26 >> 8)
      000890 C0 E0            [24] 1968 	push	acc
      000892 12r00r00         [24] 1969 	lcall	_printf_tiny
      000895 E5 81            [12] 1970 	mov	a,sp
      000897 24 FC            [12] 1971 	add	a,#0xfc
      000899 F5 81            [12] 1972 	mov	sp,a
      00089B D0 03            [24] 1973 	pop	ar3
      00089D D0 04            [24] 1974 	pop	ar4
      00089F 80 1D            [24] 1975 	sjmp	00141$
      0008A1                       1976 00125$:
                                   1977 ;	character.c:194: printf_tiny("\033[1;0mBuffer[%d] was already NULL\n\r",i);
      0008A1 C0 04            [24] 1978 	push	ar4
      0008A3 C0 03            [24] 1979 	push	ar3
      0008A5 C0 03            [24] 1980 	push	ar3
      0008A7 C0 04            [24] 1981 	push	ar4
      0008A9 74rAE            [12] 1982 	mov	a,#___str_27
      0008AB C0 E0            [24] 1983 	push	acc
      0008AD 74s04            [12] 1984 	mov	a,#(___str_27 >> 8)
      0008AF C0 E0            [24] 1985 	push	acc
      0008B1 12r00r00         [24] 1986 	lcall	_printf_tiny
      0008B4 E5 81            [12] 1987 	mov	a,sp
      0008B6 24 FC            [12] 1988 	add	a,#0xfc
      0008B8 F5 81            [12] 1989 	mov	sp,a
      0008BA D0 03            [24] 1990 	pop	ar3
      0008BC D0 04            [24] 1991 	pop	ar4
      0008BE                       1992 00141$:
                                   1993 ;	character.c:187: for(int i = 0; i < *new_buffer_index; i++) {
      0008BE 0B               [12] 1994 	inc	r3
      0008BF BB 00 01         [24] 1995 	cjne	r3,#0x00,00253$
      0008C2 0C               [12] 1996 	inc	r4
      0008C3                       1997 00253$:
      0008C3 02r08r15         [24] 1998 	ljmp	00140$
      0008C6                       1999 00127$:
                                   2000 ;	character.c:198: *new_buffer_index = 0;
      0008C6 85*02 82         [24] 2001 	mov	dpl,_command_processing_sloc1_1_0
      0008C9 85*03 83         [24] 2002 	mov	dph,(_command_processing_sloc1_1_0 + 1)
      0008CC 85*04 F0         [24] 2003 	mov	b,(_command_processing_sloc1_1_0 + 2)
      0008CF E4               [12] 2004 	clr	a
      0008D0 12r00r00         [24] 2005 	lcall	__gptrput
      0008D3 A3               [24] 2006 	inc	dptr
      0008D4 12r00r00         [24] 2007 	lcall	__gptrput
                                   2008 ;	character.c:199: (*filled_buffer_count) = 0;
      0008D7 90r00r0C         [24] 2009 	mov	dptr,#_command_processing_PARM_5
      0008DA E0               [24] 2010 	movx	a,@dptr
      0008DB FD               [12] 2011 	mov	r5,a
      0008DC A3               [24] 2012 	inc	dptr
      0008DD E0               [24] 2013 	movx	a,@dptr
      0008DE FE               [12] 2014 	mov	r6,a
      0008DF A3               [24] 2015 	inc	dptr
      0008E0 E0               [24] 2016 	movx	a,@dptr
      0008E1 FF               [12] 2017 	mov	r7,a
      0008E2 8D 82            [24] 2018 	mov	dpl,r5
      0008E4 8E 83            [24] 2019 	mov	dph,r6
      0008E6 8F F0            [24] 2020 	mov	b,r7
      0008E8 E4               [12] 2021 	clr	a
      0008E9 12r00r00         [24] 2022 	lcall	__gptrput
      0008EC A3               [24] 2023 	inc	dptr
      0008ED 12r00r00         [24] 2024 	lcall	__gptrput
                                   2025 ;	character.c:200: (*free_buffer_count) = 0;
      0008F0 90r00r09         [24] 2026 	mov	dptr,#_command_processing_PARM_4
      0008F3 E0               [24] 2027 	movx	a,@dptr
      0008F4 FD               [12] 2028 	mov	r5,a
      0008F5 A3               [24] 2029 	inc	dptr
      0008F6 E0               [24] 2030 	movx	a,@dptr
      0008F7 FE               [12] 2031 	mov	r6,a
      0008F8 A3               [24] 2032 	inc	dptr
      0008F9 E0               [24] 2033 	movx	a,@dptr
      0008FA FF               [12] 2034 	mov	r7,a
      0008FB 8D 82            [24] 2035 	mov	dpl,r5
      0008FD 8E 83            [24] 2036 	mov	dph,r6
      0008FF 8F F0            [24] 2037 	mov	b,r7
      000901 E4               [12] 2038 	clr	a
      000902 12r00r00         [24] 2039 	lcall	__gptrput
      000905 A3               [24] 2040 	inc	dptr
      000906 12r00r00         [24] 2041 	lcall	__gptrput
                                   2042 ;	character.c:201: return ALL_BUFFER_CLEARED;
      000909 90 00 01         [24] 2043 	mov	dptr,#0x0001
      00090C 22               [24] 2044 	ret
                                   2045 ;	character.c:203: case '=':
      00090D                       2046 00128$:
                                   2047 ;	character.c:204: printf_tiny("\033[1;33m\r\n|************ Processing [=] *******************|\n\r");
      00090D 74rD2            [12] 2048 	mov	a,#___str_28
      00090F C0 E0            [24] 2049 	push	acc
      000911 74s04            [12] 2050 	mov	a,#(___str_28 >> 8)
      000913 C0 E0            [24] 2051 	push	acc
      000915 12r00r00         [24] 2052 	lcall	_printf_tiny
      000918 15 81            [12] 2053 	dec	sp
      00091A 15 81            [12] 2054 	dec	sp
                                   2055 ;	character.c:205: length = 16;
      00091C 90r00r00         [24] 2056 	mov	dptr,#_length
      00091F 74 10            [12] 2057 	mov	a,#0x10
      000921 F0               [24] 2058 	movx	@dptr,a
      000922 E4               [12] 2059 	clr	a
      000923 A3               [24] 2060 	inc	dptr
      000924 F0               [24] 2061 	movx	@dptr,a
                                   2062 ;	character.c:206: buffer0_hexdump(length);
      000925 90 00 10         [24] 2063 	mov	dptr,#0x0010
      000928 12r00r36         [24] 2064 	lcall	_buffer0_hexdump
                                   2065 ;	character.c:207: break;
      00092B 02r0BrE0         [24] 2066 	ljmp	00138$
                                   2067 ;	character.c:209: case '?':
      00092E                       2068 00129$:
                                   2069 ;	character.c:210: printf_tiny("\033[1;33m|***********************************************|\n\r");
      00092E 74r37            [12] 2070 	mov	a,#___str_5
      000930 C0 E0            [24] 2071 	push	acc
      000932 74s00            [12] 2072 	mov	a,#(___str_5 >> 8)
      000934 C0 E0            [24] 2073 	push	acc
      000936 12r00r00         [24] 2074 	lcall	_printf_tiny
      000939 15 81            [12] 2075 	dec	sp
      00093B 15 81            [12] 2076 	dec	sp
                                   2077 ;	character.c:211: printf_tiny("\033[1;33m|************ Processing [?] *******************|\n\r");
      00093D 74r0F            [12] 2078 	mov	a,#___str_29
      00093F C0 E0            [24] 2079 	push	acc
      000941 74s05            [12] 2080 	mov	a,#(___str_29 >> 8)
      000943 C0 E0            [24] 2081 	push	acc
      000945 12r00r00         [24] 2082 	lcall	_printf_tiny
      000948 15 81            [12] 2083 	dec	sp
      00094A 15 81            [12] 2084 	dec	sp
                                   2085 ;	character.c:212: printf_tiny("\033[1;33m|***********************************************|\n\r");
      00094C 74r37            [12] 2086 	mov	a,#___str_5
      00094E C0 E0            [24] 2087 	push	acc
      000950 74s00            [12] 2088 	mov	a,#(___str_5 >> 8)
      000952 C0 E0            [24] 2089 	push	acc
      000954 12r00r00         [24] 2090 	lcall	_printf_tiny
      000957 15 81            [12] 2091 	dec	sp
      000959 15 81            [12] 2092 	dec	sp
                                   2093 ;	character.c:213: printf_tiny(" \033[1;34m\r\n|***********************************************|\n\r");
      00095B 74r4A            [12] 2094 	mov	a,#___str_30
      00095D C0 E0            [24] 2095 	push	acc
      00095F 74s05            [12] 2096 	mov	a,#(___str_30 >> 8)
      000961 C0 E0            [24] 2097 	push	acc
      000963 12r00r00         [24] 2098 	lcall	_printf_tiny
      000966 15 81            [12] 2099 	dec	sp
      000968 15 81            [12] 2100 	dec	sp
                                   2101 ;	character.c:214: printf_tiny(" \033[1;34m|*************** HEAP REPORT *******************|\n\r");
      00096A 74r88            [12] 2102 	mov	a,#___str_31
      00096C C0 E0            [24] 2103 	push	acc
      00096E 74s05            [12] 2104 	mov	a,#(___str_31 >> 8)
      000970 C0 E0            [24] 2105 	push	acc
      000972 12r00r00         [24] 2106 	lcall	_printf_tiny
      000975 15 81            [12] 2107 	dec	sp
      000977 15 81            [12] 2108 	dec	sp
                                   2109 ;	character.c:215: printf_tiny(" \033[1;34m|***********************************************|\n\r");
      000979 74rC4            [12] 2110 	mov	a,#___str_32
      00097B C0 E0            [24] 2111 	push	acc
      00097D 74s05            [12] 2112 	mov	a,#(___str_32 >> 8)
      00097F C0 E0            [24] 2113 	push	acc
      000981 12r00r00         [24] 2114 	lcall	_printf_tiny
      000984 15 81            [12] 2115 	dec	sp
      000986 15 81            [12] 2116 	dec	sp
                                   2117 ;	character.c:216: for(int i=0;i<*new_buffer_index;i++)
      000988 90r00r0F         [24] 2118 	mov	dptr,#_command_processing_PARM_6
      00098B E0               [24] 2119 	movx	a,@dptr
      00098C FD               [12] 2120 	mov	r5,a
      00098D A3               [24] 2121 	inc	dptr
      00098E E0               [24] 2122 	movx	a,@dptr
      00098F FE               [12] 2123 	mov	r6,a
      000990 A3               [24] 2124 	inc	dptr
      000991 E0               [24] 2125 	movx	a,@dptr
      000992 FF               [12] 2126 	mov	r7,a
      000993 90r00r12         [24] 2127 	mov	dptr,#_command_processing_PARM_7
      000996 E0               [24] 2128 	movx	a,@dptr
      000997 F5*08            [12] 2129 	mov	_command_processing_sloc3_1_0,a
      000999 A3               [24] 2130 	inc	dptr
      00099A E0               [24] 2131 	movx	a,@dptr
      00099B F5*09            [12] 2132 	mov	(_command_processing_sloc3_1_0 + 1),a
      00099D A3               [24] 2133 	inc	dptr
      00099E E0               [24] 2134 	movx	a,@dptr
      00099F F5*0A            [12] 2135 	mov	(_command_processing_sloc3_1_0 + 2),a
      0009A1 90r00r06         [24] 2136 	mov	dptr,#_command_processing_PARM_3
      0009A4 E0               [24] 2137 	movx	a,@dptr
      0009A5 F5*05            [12] 2138 	mov	_command_processing_sloc2_1_0,a
      0009A7 A3               [24] 2139 	inc	dptr
      0009A8 E0               [24] 2140 	movx	a,@dptr
      0009A9 F5*06            [12] 2141 	mov	(_command_processing_sloc2_1_0 + 1),a
      0009AB A3               [24] 2142 	inc	dptr
      0009AC E0               [24] 2143 	movx	a,@dptr
      0009AD F5*07            [12] 2144 	mov	(_command_processing_sloc2_1_0 + 2),a
      0009AF 78 00            [12] 2145 	mov	r0,#0x00
      0009B1 79 00            [12] 2146 	mov	r1,#0x00
      0009B3                       2147 00143$:
      0009B3 85*05 82         [24] 2148 	mov	dpl,_command_processing_sloc2_1_0
      0009B6 85*06 83         [24] 2149 	mov	dph,(_command_processing_sloc2_1_0 + 1)
      0009B9 85*07 F0         [24] 2150 	mov	b,(_command_processing_sloc2_1_0 + 2)
      0009BC 12r00r00         [24] 2151 	lcall	__gptrget
      0009BF FB               [12] 2152 	mov	r3,a
      0009C0 A3               [24] 2153 	inc	dptr
      0009C1 12r00r00         [24] 2154 	lcall	__gptrget
      0009C4 FC               [12] 2155 	mov	r4,a
      0009C5 C3               [12] 2156 	clr	c
      0009C6 E8               [12] 2157 	mov	a,r0
      0009C7 9B               [12] 2158 	subb	a,r3
      0009C8 E9               [12] 2159 	mov	a,r1
      0009C9 64 80            [12] 2160 	xrl	a,#0x80
      0009CB 8C F0            [24] 2161 	mov	b,r4
      0009CD 63 F0 80         [24] 2162 	xrl	b,#0x80
      0009D0 95 F0            [12] 2163 	subb	a,b
      0009D2 40 03            [24] 2164 	jc	00254$
      0009D4 02r0Br95         [24] 2165 	ljmp	00134$
      0009D7                       2166 00254$:
                                   2167 ;	character.c:219: if(new_buffer_arr[i] == NULL)
      0009D7 E8               [12] 2168 	mov	a,r0
      0009D8 28               [12] 2169 	add	a,r0
      0009D9 F5*02            [12] 2170 	mov	_command_processing_sloc1_1_0,a
      0009DB E9               [12] 2171 	mov	a,r1
      0009DC 33               [12] 2172 	rlc	a
      0009DD F5*03            [12] 2173 	mov	(_command_processing_sloc1_1_0 + 1),a
      0009DF E5*02            [12] 2174 	mov	a,_command_processing_sloc1_1_0
      0009E1 24r00            [12] 2175 	add	a,#_new_buffer_arr
      0009E3 F5*00            [12] 2176 	mov	_command_processing_sloc0_1_0,a
      0009E5 E5*03            [12] 2177 	mov	a,(_command_processing_sloc1_1_0 + 1)
      0009E7 34s00            [12] 2178 	addc	a,#(_new_buffer_arr >> 8)
      0009E9 F5*01            [12] 2179 	mov	(_command_processing_sloc0_1_0 + 1),a
      0009EB 85*00 82         [24] 2180 	mov	dpl,_command_processing_sloc0_1_0
      0009EE 85*01 83         [24] 2181 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      0009F1 E0               [24] 2182 	movx	a,@dptr
      0009F2 FB               [12] 2183 	mov	r3,a
      0009F3 A3               [24] 2184 	inc	dptr
      0009F4 E0               [24] 2185 	movx	a,@dptr
      0009F5 4B               [12] 2186 	orl	a,r3
      0009F6 70 1E            [24] 2187 	jnz	00131$
                                   2188 ;	character.c:221: printf_tiny("\033[1;36m\n\rBuffer [%d] already cleared!!\n\r");
      0009F8 C0 07            [24] 2189 	push	ar7
      0009FA C0 06            [24] 2190 	push	ar6
      0009FC C0 05            [24] 2191 	push	ar5
      0009FE 74r00            [12] 2192 	mov	a,#___str_33
      000A00 C0 E0            [24] 2193 	push	acc
      000A02 74s06            [12] 2194 	mov	a,#(___str_33 >> 8)
      000A04 C0 E0            [24] 2195 	push	acc
      000A06 12r00r00         [24] 2196 	lcall	_printf_tiny
      000A09 15 81            [12] 2197 	dec	sp
      000A0B 15 81            [12] 2198 	dec	sp
      000A0D D0 05            [24] 2199 	pop	ar5
      000A0F D0 06            [24] 2200 	pop	ar6
      000A11 D0 07            [24] 2201 	pop	ar7
                                   2202 ;	character.c:222: break;
      000A13 02r0Br95         [24] 2203 	ljmp	00134$
      000A16                       2204 00131$:
                                   2205 ;	character.c:224: printf("\033[1;36m\n\r**Buffer [%d]**\n\r",i);
      000A16 C0 05            [24] 2206 	push	ar5
      000A18 C0 06            [24] 2207 	push	ar6
      000A1A C0 07            [24] 2208 	push	ar7
      000A1C C0 07            [24] 2209 	push	ar7
      000A1E C0 06            [24] 2210 	push	ar6
      000A20 C0 05            [24] 2211 	push	ar5
      000A22 C0 01            [24] 2212 	push	ar1
      000A24 C0 00            [24] 2213 	push	ar0
      000A26 C0 00            [24] 2214 	push	ar0
      000A28 C0 01            [24] 2215 	push	ar1
      000A2A 74r29            [12] 2216 	mov	a,#___str_34
      000A2C C0 E0            [24] 2217 	push	acc
      000A2E 74s06            [12] 2218 	mov	a,#(___str_34 >> 8)
      000A30 C0 E0            [24] 2219 	push	acc
      000A32 74 80            [12] 2220 	mov	a,#0x80
      000A34 C0 E0            [24] 2221 	push	acc
      000A36 12r00r00         [24] 2222 	lcall	_printf
      000A39 E5 81            [12] 2223 	mov	a,sp
      000A3B 24 FB            [12] 2224 	add	a,#0xfb
      000A3D F5 81            [12] 2225 	mov	sp,a
      000A3F D0 00            [24] 2226 	pop	ar0
      000A41 D0 01            [24] 2227 	pop	ar1
                                   2228 ;	character.c:225: printf("\033[1;0m\n\rBuffer [%d] : Start Address = [%p] \n\r",i,new_buffer_arr[i]);
      000A43 85*00 82         [24] 2229 	mov	dpl,_command_processing_sloc0_1_0
      000A46 85*01 83         [24] 2230 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000A49 E0               [24] 2231 	movx	a,@dptr
      000A4A FB               [12] 2232 	mov	r3,a
      000A4B A3               [24] 2233 	inc	dptr
      000A4C E0               [24] 2234 	movx	a,@dptr
      000A4D FC               [12] 2235 	mov	r4,a
      000A4E 7A 00            [12] 2236 	mov	r2,#0x00
      000A50 C0 01            [24] 2237 	push	ar1
      000A52 C0 00            [24] 2238 	push	ar0
      000A54 C0 03            [24] 2239 	push	ar3
      000A56 C0 04            [24] 2240 	push	ar4
      000A58 C0 02            [24] 2241 	push	ar2
      000A5A C0 00            [24] 2242 	push	ar0
      000A5C C0 01            [24] 2243 	push	ar1
      000A5E 74r44            [12] 2244 	mov	a,#___str_35
      000A60 C0 E0            [24] 2245 	push	acc
      000A62 74s06            [12] 2246 	mov	a,#(___str_35 >> 8)
      000A64 C0 E0            [24] 2247 	push	acc
      000A66 74 80            [12] 2248 	mov	a,#0x80
      000A68 C0 E0            [24] 2249 	push	acc
      000A6A 12r00r00         [24] 2250 	lcall	_printf
      000A6D E5 81            [12] 2251 	mov	a,sp
      000A6F 24 F8            [12] 2252 	add	a,#0xf8
      000A71 F5 81            [12] 2253 	mov	sp,a
      000A73 D0 00            [24] 2254 	pop	ar0
      000A75 D0 01            [24] 2255 	pop	ar1
      000A77 D0 05            [24] 2256 	pop	ar5
      000A79 D0 06            [24] 2257 	pop	ar6
      000A7B D0 07            [24] 2258 	pop	ar7
                                   2259 ;	character.c:226: printf("\033[1;0m\n\rBuffer [%d] : End Address   = [%p] \n\r",i,new_buffer_arr[i] + buffer_size_arr[i]);
      000A7D 85*00 82         [24] 2260 	mov	dpl,_command_processing_sloc0_1_0
      000A80 85*01 83         [24] 2261 	mov	dph,(_command_processing_sloc0_1_0 + 1)
      000A83 E0               [24] 2262 	movx	a,@dptr
      000A84 FB               [12] 2263 	mov	r3,a
      000A85 A3               [24] 2264 	inc	dptr
      000A86 E0               [24] 2265 	movx	a,@dptr
      000A87 FC               [12] 2266 	mov	r4,a
      000A88 E5*02            [12] 2267 	mov	a,_command_processing_sloc1_1_0
      000A8A 24r00            [12] 2268 	add	a,#_buffer_size_arr
      000A8C FA               [12] 2269 	mov	r2,a
      000A8D E5*03            [12] 2270 	mov	a,(_command_processing_sloc1_1_0 + 1)
      000A8F 34s00            [12] 2271 	addc	a,#(_buffer_size_arr >> 8)
      000A91 FF               [12] 2272 	mov	r7,a
      000A92 8A 82            [24] 2273 	mov	dpl,r2
      000A94 8F 83            [24] 2274 	mov	dph,r7
      000A96 E0               [24] 2275 	movx	a,@dptr
      000A97 FD               [12] 2276 	mov	r5,a
      000A98 A3               [24] 2277 	inc	dptr
      000A99 E0               [24] 2278 	movx	a,@dptr
      000A9A FE               [12] 2279 	mov	r6,a
      000A9B ED               [12] 2280 	mov	a,r5
      000A9C 2B               [12] 2281 	add	a,r3
      000A9D FB               [12] 2282 	mov	r3,a
      000A9E EE               [12] 2283 	mov	a,r6
      000A9F 3C               [12] 2284 	addc	a,r4
      000AA0 FC               [12] 2285 	mov	r4,a
      000AA1 7E 00            [12] 2286 	mov	r6,#0x00
      000AA3 C0 07            [24] 2287 	push	ar7
      000AA5 C0 06            [24] 2288 	push	ar6
      000AA7 C0 05            [24] 2289 	push	ar5
      000AA9 C0 02            [24] 2290 	push	ar2
      000AAB C0 01            [24] 2291 	push	ar1
      000AAD C0 00            [24] 2292 	push	ar0
      000AAF C0 03            [24] 2293 	push	ar3
      000AB1 C0 04            [24] 2294 	push	ar4
      000AB3 C0 06            [24] 2295 	push	ar6
      000AB5 C0 00            [24] 2296 	push	ar0
      000AB7 C0 01            [24] 2297 	push	ar1
      000AB9 74r72            [12] 2298 	mov	a,#___str_36
      000ABB C0 E0            [24] 2299 	push	acc
      000ABD 74s06            [12] 2300 	mov	a,#(___str_36 >> 8)
      000ABF C0 E0            [24] 2301 	push	acc
      000AC1 74 80            [12] 2302 	mov	a,#0x80
      000AC3 C0 E0            [24] 2303 	push	acc
      000AC5 12r00r00         [24] 2304 	lcall	_printf
      000AC8 E5 81            [12] 2305 	mov	a,sp
      000ACA 24 F8            [12] 2306 	add	a,#0xf8
      000ACC F5 81            [12] 2307 	mov	sp,a
      000ACE D0 00            [24] 2308 	pop	ar0
      000AD0 D0 01            [24] 2309 	pop	ar1
      000AD2 D0 02            [24] 2310 	pop	ar2
      000AD4 D0 05            [24] 2311 	pop	ar5
      000AD6 D0 06            [24] 2312 	pop	ar6
      000AD8 D0 07            [24] 2313 	pop	ar7
                                   2314 ;	character.c:227: printf("\033[1;0m\n\rBuffer [%d] : Total Size    = [%d] \n\r",i,buffer_size_arr[i]);
      000ADA 8A 82            [24] 2315 	mov	dpl,r2
      000ADC 8F 83            [24] 2316 	mov	dph,r7
      000ADE E0               [24] 2317 	movx	a,@dptr
      000ADF FA               [12] 2318 	mov	r2,a
      000AE0 A3               [24] 2319 	inc	dptr
      000AE1 E0               [24] 2320 	movx	a,@dptr
      000AE2 FF               [12] 2321 	mov	r7,a
      000AE3 C0 07            [24] 2322 	push	ar7
      000AE5 C0 06            [24] 2323 	push	ar6
      000AE7 C0 05            [24] 2324 	push	ar5
      000AE9 C0 01            [24] 2325 	push	ar1
      000AEB C0 00            [24] 2326 	push	ar0
      000AED C0 02            [24] 2327 	push	ar2
      000AEF C0 07            [24] 2328 	push	ar7
      000AF1 C0 00            [24] 2329 	push	ar0
      000AF3 C0 01            [24] 2330 	push	ar1
      000AF5 74rA0            [12] 2331 	mov	a,#___str_37
      000AF7 C0 E0            [24] 2332 	push	acc
      000AF9 74s06            [12] 2333 	mov	a,#(___str_37 >> 8)
      000AFB C0 E0            [24] 2334 	push	acc
      000AFD 74 80            [12] 2335 	mov	a,#0x80
      000AFF C0 E0            [24] 2336 	push	acc
      000B01 12r00r00         [24] 2337 	lcall	_printf
      000B04 E5 81            [12] 2338 	mov	a,sp
      000B06 24 F9            [12] 2339 	add	a,#0xf9
      000B08 F5 81            [12] 2340 	mov	sp,a
      000B0A D0 00            [24] 2341 	pop	ar0
      000B0C D0 01            [24] 2342 	pop	ar1
      000B0E D0 05            [24] 2343 	pop	ar5
      000B10 D0 06            [24] 2344 	pop	ar6
      000B12 D0 07            [24] 2345 	pop	ar7
                                   2346 ;	character.c:228: if(i == 0)
      000B14 D0 07            [24] 2347 	pop	ar7
      000B16 D0 06            [24] 2348 	pop	ar6
      000B18 D0 05            [24] 2349 	pop	ar5
      000B1A E8               [12] 2350 	mov	a,r0
      000B1B 49               [12] 2351 	orl	a,r1
      000B1C 70 6F            [24] 2352 	jnz	00144$
                                   2353 ;	character.c:230: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*storage_character_count);
      000B1E 8D 82            [24] 2354 	mov	dpl,r5
      000B20 8E 83            [24] 2355 	mov	dph,r6
      000B22 8F F0            [24] 2356 	mov	b,r7
      000B24 12r00r00         [24] 2357 	lcall	__gptrget
      000B27 FB               [12] 2358 	mov	r3,a
      000B28 A3               [24] 2359 	inc	dptr
      000B29 12r00r00         [24] 2360 	lcall	__gptrget
      000B2C FC               [12] 2361 	mov	r4,a
      000B2D C0 07            [24] 2362 	push	ar7
      000B2F C0 06            [24] 2363 	push	ar6
      000B31 C0 05            [24] 2364 	push	ar5
      000B33 C0 01            [24] 2365 	push	ar1
      000B35 C0 00            [24] 2366 	push	ar0
      000B37 C0 03            [24] 2367 	push	ar3
      000B39 C0 04            [24] 2368 	push	ar4
      000B3B C0 00            [24] 2369 	push	ar0
      000B3D C0 01            [24] 2370 	push	ar1
      000B3F 74rCE            [12] 2371 	mov	a,#___str_38
      000B41 C0 E0            [24] 2372 	push	acc
      000B43 74s06            [12] 2373 	mov	a,#(___str_38 >> 8)
      000B45 C0 E0            [24] 2374 	push	acc
      000B47 12r00r00         [24] 2375 	lcall	_printf_tiny
      000B4A E5 81            [12] 2376 	mov	a,sp
      000B4C 24 FA            [12] 2377 	add	a,#0xfa
      000B4E F5 81            [12] 2378 	mov	sp,a
      000B50 D0 00            [24] 2379 	pop	ar0
      000B52 D0 01            [24] 2380 	pop	ar1
                                   2381 ;	character.c:231: printf_tiny("\033[1;0m\n\rBuffer[%d] : Number of storage characters since last ?= [%d]\n\r",i,*total_characters_count);
      000B54 85*08 82         [24] 2382 	mov	dpl,_command_processing_sloc3_1_0
      000B57 85*09 83         [24] 2383 	mov	dph,(_command_processing_sloc3_1_0 + 1)
      000B5A 85*0A F0         [24] 2384 	mov	b,(_command_processing_sloc3_1_0 + 2)
      000B5D 12r00r00         [24] 2385 	lcall	__gptrget
      000B60 FB               [12] 2386 	mov	r3,a
      000B61 A3               [24] 2387 	inc	dptr
      000B62 12r00r00         [24] 2388 	lcall	__gptrget
      000B65 FC               [12] 2389 	mov	r4,a
      000B66 C0 01            [24] 2390 	push	ar1
      000B68 C0 00            [24] 2391 	push	ar0
      000B6A C0 03            [24] 2392 	push	ar3
      000B6C C0 04            [24] 2393 	push	ar4
      000B6E C0 00            [24] 2394 	push	ar0
      000B70 C0 01            [24] 2395 	push	ar1
      000B72 74rCE            [12] 2396 	mov	a,#___str_38
      000B74 C0 E0            [24] 2397 	push	acc
      000B76 74s06            [12] 2398 	mov	a,#(___str_38 >> 8)
      000B78 C0 E0            [24] 2399 	push	acc
      000B7A 12r00r00         [24] 2400 	lcall	_printf_tiny
      000B7D E5 81            [12] 2401 	mov	a,sp
      000B7F 24 FA            [12] 2402 	add	a,#0xfa
      000B81 F5 81            [12] 2403 	mov	sp,a
      000B83 D0 00            [24] 2404 	pop	ar0
      000B85 D0 01            [24] 2405 	pop	ar1
      000B87 D0 05            [24] 2406 	pop	ar5
      000B89 D0 06            [24] 2407 	pop	ar6
      000B8B D0 07            [24] 2408 	pop	ar7
      000B8D                       2409 00144$:
                                   2410 ;	character.c:216: for(int i=0;i<*new_buffer_index;i++)
      000B8D 08               [12] 2411 	inc	r0
      000B8E B8 00 01         [24] 2412 	cjne	r0,#0x00,00257$
      000B91 09               [12] 2413 	inc	r1
      000B92                       2414 00257$:
      000B92 02r09rB3         [24] 2415 	ljmp	00143$
      000B95                       2416 00134$:
                                   2417 ;	character.c:235: printf_tiny("\033[1;33m|***********************************************|\n\r");
      000B95 C0 07            [24] 2418 	push	ar7
      000B97 C0 06            [24] 2419 	push	ar6
      000B99 C0 05            [24] 2420 	push	ar5
      000B9B 74r37            [12] 2421 	mov	a,#___str_5
      000B9D C0 E0            [24] 2422 	push	acc
      000B9F 74s00            [12] 2423 	mov	a,#(___str_5 >> 8)
      000BA1 C0 E0            [24] 2424 	push	acc
      000BA3 12r00r00         [24] 2425 	lcall	_printf_tiny
      000BA6 15 81            [12] 2426 	dec	sp
      000BA8 15 81            [12] 2427 	dec	sp
      000BAA D0 05            [24] 2428 	pop	ar5
      000BAC D0 06            [24] 2429 	pop	ar6
      000BAE D0 07            [24] 2430 	pop	ar7
                                   2431 ;	character.c:236: *storage_character_count = 0;
      000BB0 8D 82            [24] 2432 	mov	dpl,r5
      000BB2 8E 83            [24] 2433 	mov	dph,r6
      000BB4 8F F0            [24] 2434 	mov	b,r7
      000BB6 E4               [12] 2435 	clr	a
      000BB7 12r00r00         [24] 2436 	lcall	__gptrput
      000BBA A3               [24] 2437 	inc	dptr
      000BBB 12r00r00         [24] 2438 	lcall	__gptrput
                                   2439 ;	character.c:237: *total_characters_count = 0;
      000BBE 85*08 82         [24] 2440 	mov	dpl,_command_processing_sloc3_1_0
      000BC1 85*09 83         [24] 2441 	mov	dph,(_command_processing_sloc3_1_0 + 1)
      000BC4 85*0A F0         [24] 2442 	mov	b,(_command_processing_sloc3_1_0 + 2)
      000BC7 12r00r00         [24] 2443 	lcall	__gptrput
      000BCA A3               [24] 2444 	inc	dptr
      000BCB 12r00r00         [24] 2445 	lcall	__gptrput
                                   2446 ;	character.c:239: length = 32;
      000BCE 90r00r00         [24] 2447 	mov	dptr,#_length
      000BD1 74 20            [12] 2448 	mov	a,#0x20
      000BD3 F0               [24] 2449 	movx	@dptr,a
      000BD4 E4               [12] 2450 	clr	a
      000BD5 A3               [24] 2451 	inc	dptr
      000BD6 F0               [24] 2452 	movx	@dptr,a
                                   2453 ;	character.c:240: buffer0_hexdump(length);
      000BD7 90 00 20         [24] 2454 	mov	dptr,#0x0020
      000BDA 12r00r36         [24] 2455 	lcall	_buffer0_hexdump
                                   2456 ;	character.c:241: empty_buffer0();
      000BDD 12r00r00         [24] 2457 	lcall	_empty_buffer0
                                   2458 ;	character.c:245: }
      000BE0                       2459 00138$:
                                   2460 ;	character.c:247: return ALL_BUFFER_NOT_CLEARED;
      000BE0 90 00 02         [24] 2461 	mov	dptr,#0x0002
                                   2462 ;	character.c:248: }
      000BE3 22               [24] 2463 	ret
                                   2464 	.area CSEG    (CODE)
                                   2465 	.area CONST   (CODE)
                                   2466 	.area CONST   (CODE)
      000000                       2467 ___str_0:
      000000 1B                    2468 	.db 0x1b
      000001 5B 31 3B 33 34 6D     2469 	.ascii "[1;34m"
      000007 0A                    2470 	.db 0x0a
      000008 0D                    2471 	.db 0x0d
      000009 00                    2472 	.db 0x00
                                   2473 	.area CSEG    (CODE)
                                   2474 	.area CONST   (CODE)
      00000A                       2475 ___str_1:
      00000A 1B                    2476 	.db 0x1b
      00000B 5B 31 3B 33 34 6D 25  2477 	.ascii "[1;34m%p :"
             70 20 3A
      000015 00                    2478 	.db 0x00
                                   2479 	.area CSEG    (CODE)
                                   2480 	.area CONST   (CODE)
      000016                       2481 ___str_2:
      000016 1B                    2482 	.db 0x1b
      000017 5B 31 3B 33 34 6D 20  2483 	.ascii "[1;34m XX"
             58 58
      000020 00                    2484 	.db 0x00
                                   2485 	.area CSEG    (CODE)
                                   2486 	.area CONST   (CODE)
      000021                       2487 ___str_3:
      000021 1B                    2488 	.db 0x1b
      000022 5B 31 3B 33 34 6D 20  2489 	.ascii "[1;34m %x"
             25 78
      00002B 00                    2490 	.db 0x00
                                   2491 	.area CSEG    (CODE)
                                   2492 	.area CONST   (CODE)
      00002C                       2493 ___str_4:
      00002C 1B                    2494 	.db 0x1b
      00002D 5B 31 3B 33 34 6D 20  2495 	.ascii "[1;34m %d"
             25 64
      000036 00                    2496 	.db 0x00
                                   2497 	.area CSEG    (CODE)
                                   2498 	.area CONST   (CODE)
      000037                       2499 ___str_5:
      000037 1B                    2500 	.db 0x1b
      000038 5B 31 3B 33 33 6D 7C  2501 	.ascii "[1;33m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      00006F 0A                    2502 	.db 0x0a
      000070 0D                    2503 	.db 0x0d
      000071 00                    2504 	.db 0x00
                                   2505 	.area CSEG    (CODE)
                                   2506 	.area CONST   (CODE)
      000072                       2507 ___str_6:
      000072 1B                    2508 	.db 0x1b
      000073 5B 31 3B 33 33 6D 7C  2509 	.ascii "[1;33m|************ Processing [+] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2B 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0000AA 0A                    2510 	.db 0x0a
      0000AB 0D                    2511 	.db 0x0d
      0000AC 00                    2512 	.db 0x00
                                   2513 	.area CSEG    (CODE)
                                   2514 	.area CONST   (CODE)
      0000AD                       2515 ___str_7:
      0000AD 1B                    2516 	.db 0x1b
      0000AE 5B 31 3B 30           2517 	.ascii "[1;0"
      0000B2 0A                    2518 	.db 0x0a
      0000B3 0D                    2519 	.db 0x0d
      0000B4 45 6E 74 65 72 20 73  2520 	.ascii "Enter size:"
             69 7A 65 3A
      0000BF 00                    2521 	.db 0x00
                                   2522 	.area CSEG    (CODE)
                                   2523 	.area CONST   (CODE)
      0000C0                       2524 ___str_8:
      0000C0 1B                    2525 	.db 0x1b
      0000C1 5B 31 3B 30 6D 53 69  2526 	.ascii "[1;0mSize after atoi = %d"
             7A 65 20 61 66 74 65
             72 20 61 74 6F 69 20
             3D 20 25 64
      0000DA 0D                    2527 	.db 0x0d
      0000DB 0A                    2528 	.db 0x0a
      0000DC 00                    2529 	.db 0x00
                                   2530 	.area CSEG    (CODE)
                                   2531 	.area CONST   (CODE)
      0000DD                       2532 ___str_9:
      0000DD 1B                    2533 	.db 0x1b
      0000DE 5B 31 3B 33 31 6D 49  2534 	.ascii "[1;31mInvalid Input : The buffer size should be in the range"
             6E 76 61 6C 69 64 20
             49 6E 70 75 74 20 3A
             20 54 68 65 20 62 75
             66 66 65 72 20 73 69
             7A 65 20 73 68 6F 75
             6C 64 20 62 65 20 69
             6E 20 74 68 65 20 72
             61 6E 67 65
      00011A 20 5B 33 30 2C 20 33  2535 	.ascii " [30, 300]"
             30 30 5D
      000124 0A                    2536 	.db 0x0a
      000125 0D                    2537 	.db 0x0d
      000126 0A                    2538 	.db 0x0a
      000127 0D                    2539 	.db 0x0d
      000128 00                    2540 	.db 0x00
                                   2541 	.area CSEG    (CODE)
                                   2542 	.area CONST   (CODE)
      000129                       2543 ___str_10:
      000129 1B                    2544 	.db 0x1b
      00012A 5B 31 3B 33 31 6D 49  2545 	.ascii "[1;31mInvalid input : Failed to allocate buffer"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 46 61 69 6C 65 64
             20 74 6F 20 61 6C 6C
             6F 63 61 74 65 20 62
             75 66 66 65 72
      000159 0A                    2546 	.db 0x0a
      00015A 0D                    2547 	.db 0x0d
      00015B 0A                    2548 	.db 0x0a
      00015C 0D                    2549 	.db 0x0d
      00015D 00                    2550 	.db 0x00
                                   2551 	.area CSEG    (CODE)
                                   2552 	.area CONST   (CODE)
      00015E                       2553 ___str_11:
      00015E 1B                    2554 	.db 0x1b
      00015F 5B 31 3B 30 6D 4E 65  2555 	.ascii "[1;0mNew buffer index = %d"
             77 20 62 75 66 66 65
             72 20 69 6E 64 65 78
             20 3D 20 25 64
      000179 0A                    2556 	.db 0x0a
      00017A 0D                    2557 	.db 0x0d
      00017B 00                    2558 	.db 0x00
                                   2559 	.area CSEG    (CODE)
                                   2560 	.area CONST   (CODE)
      00017C                       2561 ___str_12:
      00017C 1B                    2562 	.db 0x1b
      00017D 5B 31 3B 30 6D 4E 65  2563 	.ascii "[1;0mNew buffer allocated successfully : Buffer[%d]"
             77 20 62 75 66 66 65
             72 20 61 6C 6C 6F 63
             61 74 65 64 20 73 75
             63 63 65 73 73 66 75
             6C 6C 79 20 3A 20 42
             75 66 66 65 72 5B 25
             64 5D
      0001B0 0A                    2564 	.db 0x0a
      0001B1 0D                    2565 	.db 0x0d
      0001B2 00                    2566 	.db 0x00
                                   2567 	.area CSEG    (CODE)
                                   2568 	.area CONST   (CODE)
      0001B3                       2569 ___str_13:
      0001B3 1B                    2570 	.db 0x1b
      0001B4 5B 31 3B 30 6D 54 6F  2571 	.ascii "[1;0mTotal Number of Buffers including buffer0 & buffer1 = ["
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 69 6E 63 6C 75 64
             69 6E 67 20 62 75 66
             66 65 72 30 20 26 20
             62 75 66 66 65 72 31
             20 3D 20 5B
      0001F0 25 64 5D              2572 	.ascii "%d]"
      0001F3 0A                    2573 	.db 0x0a
      0001F4 0D                    2574 	.db 0x0d
      0001F5 00                    2575 	.db 0x00
                                   2576 	.area CSEG    (CODE)
                                   2577 	.area CONST   (CODE)
      0001F6                       2578 ___str_14:
      0001F6 1B                    2579 	.db 0x1b
      0001F7 5B 31 3B 30 6D 54 6F  2580 	.ascii "[1;0mTotal Filled Buffers = [%d] "
             74 61 6C 20 46 69 6C
             6C 65 64 20 42 75 66
             66 65 72 73 20 3D 20
             5B 25 64 5D 20
      000218 09                    2581 	.db 0x09
      000219 20 54 6F 74 61 6C 20  2582 	.ascii " Total Empty Buffers = [%d] "
             45 6D 70 74 79 20 42
             75 66 66 65 72 73 20
             3D 20 5B 25 64 5D 20
      000235 0A                    2583 	.db 0x0a
      000236 0D                    2584 	.db 0x0d
      000237 0A                    2585 	.db 0x0a
      000238 0D                    2586 	.db 0x0d
      000239 00                    2587 	.db 0x00
                                   2588 	.area CSEG    (CODE)
                                   2589 	.area CONST   (CODE)
      00023A                       2590 ___str_15:
      00023A 1B                    2591 	.db 0x1b
      00023B 5B 31 3B 33 33 6D 7C  2592 	.ascii "[1;33m|************ Processing [-] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 2D 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000272 0A                    2593 	.db 0x0a
      000273 0D                    2594 	.db 0x0d
      000274 00                    2595 	.db 0x00
                                   2596 	.area CSEG    (CODE)
                                   2597 	.area CONST   (CODE)
      000275                       2598 ___str_16:
      000275 1B                    2599 	.db 0x1b
      000276 5B 31 3B 30 6D        2600 	.ascii "[1;0m"
      00027B 0A                    2601 	.db 0x0a
      00027C 0D                    2602 	.db 0x0d
      00027D 45 6E 74 65 72 20 62  2603 	.ascii "Enter buffer number to be deleted:"
             75 66 66 65 72 20 6E
             75 6D 62 65 72 20 74
             6F 20 62 65 20 64 65
             6C 65 74 65 64 3A
      00029F 0A                    2604 	.db 0x0a
      0002A0 0D                    2605 	.db 0x0d
      0002A1 00                    2606 	.db 0x00
                                   2607 	.area CSEG    (CODE)
                                   2608 	.area CONST   (CODE)
      0002A2                       2609 ___str_17:
      0002A2 1B                    2610 	.db 0x1b
      0002A3 5B 31 3B 30 6D 43 75  2611 	.ascii "[1;0mCurrent number of buffers are [%d] (index starting from"
             72 72 65 6E 74 20 6E
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 61 72 65 20
             5B 25 64 5D 20 28 69
             6E 64 65 78 20 73 74
             61 72 74 69 6E 67 20
             66 72 6F 6D
      0002DF 20 30 29 3A           2612 	.ascii " 0):"
      0002E3 0A                    2613 	.db 0x0a
      0002E4 0D                    2614 	.db 0x0d
      0002E5 0A                    2615 	.db 0x0a
      0002E6 0D                    2616 	.db 0x0d
      0002E7 00                    2617 	.db 0x00
                                   2618 	.area CSEG    (CODE)
                                   2619 	.area CONST   (CODE)
      0002E8                       2620 ___str_18:
      0002E8 1B                    2621 	.db 0x1b
      0002E9 5B 31 3B 33 31 6D 49  2622 	.ascii "[1;31mInvalid input : invalid digits entered "
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 69 6E 76 61 6C 69
             64 20 64 69 67 69 74
             73 20 65 6E 74 65 72
             65 64 20
      000316 0A                    2623 	.db 0x0a
      000317 0D                    2624 	.db 0x0d
      000318 0A                    2625 	.db 0x0a
      000319 0D                    2626 	.db 0x0d
      00031A 00                    2627 	.db 0x00
                                   2628 	.area CSEG    (CODE)
                                   2629 	.area CONST   (CODE)
      00031B                       2630 ___str_19:
      00031B 1B                    2631 	.db 0x1b
      00031C 5B 31 3B 33 31 6D 49  2632 	.ascii "[1;31mInvalid input : buffer number can't be 0"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 63 61 6E 27 74 20
             62 65 20 30
      00034A 0A                    2633 	.db 0x0a
      00034B 0D                    2634 	.db 0x0d
      00034C 0A                    2635 	.db 0x0a
      00034D 00                    2636 	.db 0x00
                                   2637 	.area CSEG    (CODE)
                                   2638 	.area CONST   (CODE)
      00034E                       2639 ___str_20:
      00034E 1B                    2640 	.db 0x1b
      00034F 5B 31 3B 33 31 6D 49  2641 	.ascii "[1;31mInvalid input : buffer[%d] was already cleared earlier"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             5B 25 64 5D 20 77 61
             73 20 61 6C 72 65 61
             64 79 20 63 6C 65 61
             72 65 64 20 65 61 72
             6C 69 65 72
      00038B 0A                    2642 	.db 0x0a
      00038C 0D                    2643 	.db 0x0d
      00038D 00                    2644 	.db 0x00
                                   2645 	.area CSEG    (CODE)
                                   2646 	.area CONST   (CODE)
      00038E                       2647 ___str_21:
      00038E 1B                    2648 	.db 0x1b
      00038F 5B 31 3B 33 31 6D 49  2649 	.ascii "[1;31mInvalid input : buffer number doesn't exist"
             6E 76 61 6C 69 64 20
             69 6E 70 75 74 20 3A
             20 62 75 66 66 65 72
             20 6E 75 6D 62 65 72
             20 64 6F 65 73 6E 27
             74 20 65 78 69 73 74
      0003C0 0A                    2650 	.db 0x0a
      0003C1 0D                    2651 	.db 0x0d
      0003C2 00                    2652 	.db 0x00
                                   2653 	.area CSEG    (CODE)
                                   2654 	.area CONST   (CODE)
      0003C3                       2655 ___str_22:
      0003C3 1B                    2656 	.db 0x1b
      0003C4 5B 31 3B 30 6D 42 75  2657 	.ascii "[1;0mBuffer [%d] requested to be deleted"
             66 66 65 72 20 5B 25
             64 5D 20 72 65 71 75
             65 73 74 65 64 20 74
             6F 20 62 65 20 64 65
             6C 65 74 65 64
      0003EC 0A                    2658 	.db 0x0a
      0003ED 0D                    2659 	.db 0x0d
      0003EE 00                    2660 	.db 0x00
                                   2661 	.area CSEG    (CODE)
                                   2662 	.area CONST   (CODE)
      0003EF                       2663 ___str_23:
      0003EF 1B                    2664 	.db 0x1b
      0003F0 5B 31 3B 30 6D 42 75  2665 	.ascii "[1;0mBuffer[%d] de-allocated successfully  "
             66 66 65 72 5B 25 64
             5D 20 64 65 2D 61 6C
             6C 6F 63 61 74 65 64
             20 73 75 63 63 65 73
             73 66 75 6C 6C 79 20
             20
      00041B 0A                    2666 	.db 0x0a
      00041C 0D                    2667 	.db 0x0d
      00041D 00                    2668 	.db 0x00
                                   2669 	.area CSEG    (CODE)
                                   2670 	.area CONST   (CODE)
      00041E                       2671 ___str_24:
      00041E 1B                    2672 	.db 0x1b
      00041F 5B 31 3B 30 6D 54 6F  2673 	.ascii "[1;0mTotal Number of Buffers after deallocation = [%d]"
             74 61 6C 20 4E 75 6D
             62 65 72 20 6F 66 20
             42 75 66 66 65 72 73
             20 61 66 74 65 72 20
             64 65 61 6C 6C 6F 63
             61 74 69 6F 6E 20 3D
             20 5B 25 64 5D
      000455 0A                    2674 	.db 0x0a
      000456 0D                    2675 	.db 0x0d
      000457 0A                    2676 	.db 0x0a
      000458 0D                    2677 	.db 0x0d
      000459 00                    2678 	.db 0x00
                                   2679 	.area CSEG    (CODE)
                                   2680 	.area CONST   (CODE)
      00045A                       2681 ___str_25:
      00045A 1B                    2682 	.db 0x1b
      00045B 5B 31 3B 33 33 6D 7C  2683 	.ascii "[1;33m|************ Processing [@] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 40 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000492 0A                    2684 	.db 0x0a
      000493 0D                    2685 	.db 0x0d
      000494 00                    2686 	.db 0x00
                                   2687 	.area CSEG    (CODE)
                                   2688 	.area CONST   (CODE)
      000495                       2689 ___str_26:
      000495 1B                    2690 	.db 0x1b
      000496 5B 31 3B 30 6D 42 75  2691 	.ascii "[1;0mBuffer[%d] freed"
             66 66 65 72 5B 25 64
             5D 20 66 72 65 65 64
      0004AB 0A                    2692 	.db 0x0a
      0004AC 0D                    2693 	.db 0x0d
      0004AD 00                    2694 	.db 0x00
                                   2695 	.area CSEG    (CODE)
                                   2696 	.area CONST   (CODE)
      0004AE                       2697 ___str_27:
      0004AE 1B                    2698 	.db 0x1b
      0004AF 5B 31 3B 30 6D 42 75  2699 	.ascii "[1;0mBuffer[%d] was already NULL"
             66 66 65 72 5B 25 64
             5D 20 77 61 73 20 61
             6C 72 65 61 64 79 20
             4E 55 4C 4C
      0004CF 0A                    2700 	.db 0x0a
      0004D0 0D                    2701 	.db 0x0d
      0004D1 00                    2702 	.db 0x00
                                   2703 	.area CSEG    (CODE)
                                   2704 	.area CONST   (CODE)
      0004D2                       2705 ___str_28:
      0004D2 1B                    2706 	.db 0x1b
      0004D3 5B 31 3B 33 33 6D     2707 	.ascii "[1;33m"
      0004D9 0D                    2708 	.db 0x0d
      0004DA 0A                    2709 	.db 0x0a
      0004DB 7C 2A 2A 2A 2A 2A 2A  2710 	.ascii "|************ Processing [=] *******************|"
             2A 2A 2A 2A 2A 2A 20
             50 72 6F 63 65 73 73
             69 6E 67 20 5B 3D 5D
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      00050C 0A                    2711 	.db 0x0a
      00050D 0D                    2712 	.db 0x0d
      00050E 00                    2713 	.db 0x00
                                   2714 	.area CSEG    (CODE)
                                   2715 	.area CONST   (CODE)
      00050F                       2716 ___str_29:
      00050F 1B                    2717 	.db 0x1b
      000510 5B 31 3B 33 33 6D 7C  2718 	.ascii "[1;33m|************ Processing [?] *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 20 50
             72 6F 63 65 73 73 69
             6E 67 20 5B 3F 5D 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      000547 0A                    2719 	.db 0x0a
      000548 0D                    2720 	.db 0x0d
      000549 00                    2721 	.db 0x00
                                   2722 	.area CSEG    (CODE)
                                   2723 	.area CONST   (CODE)
      00054A                       2724 ___str_30:
      00054A 20                    2725 	.ascii " "
      00054B 1B                    2726 	.db 0x1b
      00054C 5B 31 3B 33 34 6D     2727 	.ascii "[1;34m"
      000552 0D                    2728 	.db 0x0d
      000553 0A                    2729 	.db 0x0a
      000554 7C 2A 2A 2A 2A 2A 2A  2730 	.ascii "|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      000585 0A                    2731 	.db 0x0a
      000586 0D                    2732 	.db 0x0d
      000587 00                    2733 	.db 0x00
                                   2734 	.area CSEG    (CODE)
                                   2735 	.area CONST   (CODE)
      000588                       2736 ___str_31:
      000588 20                    2737 	.ascii " "
      000589 1B                    2738 	.db 0x1b
      00058A 5B 31 3B 33 34 6D 7C  2739 	.ascii "[1;34m|*************** HEAP REPORT *******************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 20 48 45 41 50 20
             52 45 50 4F 52 54 20
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0005C1 0A                    2740 	.db 0x0a
      0005C2 0D                    2741 	.db 0x0d
      0005C3 00                    2742 	.db 0x00
                                   2743 	.area CSEG    (CODE)
                                   2744 	.area CONST   (CODE)
      0005C4                       2745 ___str_32:
      0005C4 20                    2746 	.ascii " "
      0005C5 1B                    2747 	.db 0x1b
      0005C6 5B 31 3B 33 34 6D 7C  2748 	.ascii "[1;34m|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 7C
      0005FD 0A                    2749 	.db 0x0a
      0005FE 0D                    2750 	.db 0x0d
      0005FF 00                    2751 	.db 0x00
                                   2752 	.area CSEG    (CODE)
                                   2753 	.area CONST   (CODE)
      000600                       2754 ___str_33:
      000600 1B                    2755 	.db 0x1b
      000601 5B 31 3B 33 36 6D     2756 	.ascii "[1;36m"
      000607 0A                    2757 	.db 0x0a
      000608 0D                    2758 	.db 0x0d
      000609 42 75 66 66 65 72 20  2759 	.ascii "Buffer [%d] already cleared!!"
             5B 25 64 5D 20 61 6C
             72 65 61 64 79 20 63
             6C 65 61 72 65 64 21
             21
      000626 0A                    2760 	.db 0x0a
      000627 0D                    2761 	.db 0x0d
      000628 00                    2762 	.db 0x00
                                   2763 	.area CSEG    (CODE)
                                   2764 	.area CONST   (CODE)
      000629                       2765 ___str_34:
      000629 1B                    2766 	.db 0x1b
      00062A 5B 31 3B 33 36 6D     2767 	.ascii "[1;36m"
      000630 0A                    2768 	.db 0x0a
      000631 0D                    2769 	.db 0x0d
      000632 2A 2A 42 75 66 66 65  2770 	.ascii "**Buffer [%d]**"
             72 20 5B 25 64 5D 2A
             2A
      000641 0A                    2771 	.db 0x0a
      000642 0D                    2772 	.db 0x0d
      000643 00                    2773 	.db 0x00
                                   2774 	.area CSEG    (CODE)
                                   2775 	.area CONST   (CODE)
      000644                       2776 ___str_35:
      000644 1B                    2777 	.db 0x1b
      000645 5B 31 3B 30 6D        2778 	.ascii "[1;0m"
      00064A 0A                    2779 	.db 0x0a
      00064B 0D                    2780 	.db 0x0d
      00064C 42 75 66 66 65 72 20  2781 	.ascii "Buffer [%d] : Start Address = [%p] "
             5B 25 64 5D 20 3A 20
             53 74 61 72 74 20 41
             64 64 72 65 73 73 20
             3D 20 5B 25 70 5D 20
      00066F 0A                    2782 	.db 0x0a
      000670 0D                    2783 	.db 0x0d
      000671 00                    2784 	.db 0x00
                                   2785 	.area CSEG    (CODE)
                                   2786 	.area CONST   (CODE)
      000672                       2787 ___str_36:
      000672 1B                    2788 	.db 0x1b
      000673 5B 31 3B 30 6D        2789 	.ascii "[1;0m"
      000678 0A                    2790 	.db 0x0a
      000679 0D                    2791 	.db 0x0d
      00067A 42 75 66 66 65 72 20  2792 	.ascii "Buffer [%d] : End Address   = [%p] "
             5B 25 64 5D 20 3A 20
             45 6E 64 20 41 64 64
             72 65 73 73 20 20 20
             3D 20 5B 25 70 5D 20
      00069D 0A                    2793 	.db 0x0a
      00069E 0D                    2794 	.db 0x0d
      00069F 00                    2795 	.db 0x00
                                   2796 	.area CSEG    (CODE)
                                   2797 	.area CONST   (CODE)
      0006A0                       2798 ___str_37:
      0006A0 1B                    2799 	.db 0x1b
      0006A1 5B 31 3B 30 6D        2800 	.ascii "[1;0m"
      0006A6 0A                    2801 	.db 0x0a
      0006A7 0D                    2802 	.db 0x0d
      0006A8 42 75 66 66 65 72 20  2803 	.ascii "Buffer [%d] : Total Size    = [%d] "
             5B 25 64 5D 20 3A 20
             54 6F 74 61 6C 20 53
             69 7A 65 20 20 20 20
             3D 20 5B 25 64 5D 20
      0006CB 0A                    2804 	.db 0x0a
      0006CC 0D                    2805 	.db 0x0d
      0006CD 00                    2806 	.db 0x00
                                   2807 	.area CSEG    (CODE)
                                   2808 	.area CONST   (CODE)
      0006CE                       2809 ___str_38:
      0006CE 1B                    2810 	.db 0x1b
      0006CF 5B 31 3B 30 6D        2811 	.ascii "[1;0m"
      0006D4 0A                    2812 	.db 0x0a
      0006D5 0D                    2813 	.db 0x0d
      0006D6 42 75 66 66 65 72 5B  2814 	.ascii "Buffer[%d] : Number of storage characters since last ?= [%d]"
             25 64 5D 20 3A 20 4E
             75 6D 62 65 72 20 6F
             66 20 73 74 6F 72 61
             67 65 20 63 68 61 72
             61 63 74 65 72 73 20
             73 69 6E 63 65 20 6C
             61 73 74 20 3F 3D 20
             5B 25 64 5D
      000712 0A                    2815 	.db 0x0a
      000713 0D                    2816 	.db 0x0d
      000714 00                    2817 	.db 0x00
                                   2818 	.area CSEG    (CODE)
                                   2819 	.area XINIT   (CODE)
      000000                       2820 __xinit__size:
      000000 30                    2821 	.db #0x30	; 48	'0'
      000001 30                    2822 	.db #0x30	; 48	'0'
      000002 30                    2823 	.db #0x30	; 48	'0'
      000003 00                    2824 	.db #0x00	; 0
      000004                       2825 __xinit__buffer_to_delete:
      000004 00 00                 2826 	.byte #0x00, #0x00	;  0
      000006                       2827 __xinit__buff_not_cleared:
      000006 00 00                 2828 	.byte #0x00, #0x00	;  0
      000008 00                    2829 	.db 0x00
      000009 00                    2830 	.db 0x00
      00000A 00                    2831 	.db 0x00
      00000B 00                    2832 	.db 0x00
      00000C 00                    2833 	.db 0x00
      00000D 00                    2834 	.db 0x00
      00000E 00                    2835 	.db 0x00
      00000F 00                    2836 	.db 0x00
      000010 00                    2837 	.db 0x00
      000011 00                    2838 	.db 0x00
      000012 00                    2839 	.db 0x00
      000013 00                    2840 	.db 0x00
      000014 00                    2841 	.db 0x00
      000015 00                    2842 	.db 0x00
      000016 00                    2843 	.db 0x00
      000017 00                    2844 	.db 0x00
      000018 00                    2845 	.db 0x00
      000019 00                    2846 	.db 0x00
      00001A 00                    2847 	.db 0x00
      00001B 00                    2848 	.db 0x00
      00001C 00                    2849 	.db 0x00
      00001D 00                    2850 	.db 0x00
      00001E 00                    2851 	.db 0x00
      00001F 00                    2852 	.db 0x00
      000020 00                    2853 	.db 0x00
      000021 00                    2854 	.db 0x00
      000022 00                    2855 	.db 0x00
      000023 00                    2856 	.db 0x00
      000024 00                    2857 	.db 0x00
      000025 00                    2858 	.db 0x00
      000026 00                    2859 	.db 0x00
      000027 00                    2860 	.db 0x00
      000028 00                    2861 	.db 0x00
      000029 00                    2862 	.db 0x00
      00002A 00                    2863 	.db 0x00
      00002B 00                    2864 	.db 0x00
      00002C 00                    2865 	.db 0x00
      00002D 00                    2866 	.db 0x00
      00002E 00                    2867 	.db 0x00
      00002F 00                    2868 	.db 0x00
      000030 00                    2869 	.db 0x00
      000031 00                    2870 	.db 0x00
      000032 00                    2871 	.db 0x00
      000033 00                    2872 	.db 0x00
      000034 00                    2873 	.db 0x00
      000035 00                    2874 	.db 0x00
      000036 00                    2875 	.db 0x00
      000037 00                    2876 	.db 0x00
      000038 00                    2877 	.db 0x00
      000039 00                    2878 	.db 0x00
      00003A 00                    2879 	.db 0x00
      00003B 00                    2880 	.db 0x00
      00003C 00                    2881 	.db 0x00
      00003D 00                    2882 	.db 0x00
      00003E 00                    2883 	.db 0x00
      00003F 00                    2884 	.db 0x00
      000040 00                    2885 	.db 0x00
      000041 00                    2886 	.db 0x00
      000042 00                    2887 	.db 0x00
      000043 00                    2888 	.db 0x00
      000044 00                    2889 	.db 0x00
      000045 00                    2890 	.db 0x00
      000046 00                    2891 	.db 0x00
      000047 00                    2892 	.db 0x00
      000048 00                    2893 	.db 0x00
      000049 00                    2894 	.db 0x00
      00004A 00                    2895 	.db 0x00
      00004B 00                    2896 	.db 0x00
      00004C 00                    2897 	.db 0x00
      00004D 00                    2898 	.db 0x00
      00004E 00                    2899 	.db 0x00
      00004F 00                    2900 	.db 0x00
      000050 00                    2901 	.db 0x00
      000051 00                    2902 	.db 0x00
      000052 00                    2903 	.db 0x00
      000053 00                    2904 	.db 0x00
      000054 00                    2905 	.db 0x00
      000055 00                    2906 	.db 0x00
      000056 00                    2907 	.db 0x00
      000057 00                    2908 	.db 0x00
      000058 00                    2909 	.db 0x00
      000059 00                    2910 	.db 0x00
      00005A 00                    2911 	.db 0x00
      00005B 00                    2912 	.db 0x00
      00005C 00                    2913 	.db 0x00
      00005D 00                    2914 	.db 0x00
      00005E 00                    2915 	.db 0x00
      00005F 00                    2916 	.db 0x00
      000060 00                    2917 	.db 0x00
      000061 00                    2918 	.db 0x00
      000062 00                    2919 	.db 0x00
      000063 00                    2920 	.db 0x00
      000064 00                    2921 	.db 0x00
      000065 00                    2922 	.db 0x00
      000066 00                    2923 	.db 0x00
      000067 00                    2924 	.db 0x00
      000068 00                    2925 	.db 0x00
      000069 00                    2926 	.db 0x00
      00006A 00                    2927 	.db 0x00
      00006B 00                    2928 	.db 0x00
      00006C 00                    2929 	.db 0x00
      00006D 00                    2930 	.db 0x00
      00006E 00                    2931 	.db 0x00
      00006F 00                    2932 	.db 0x00
      000070 00                    2933 	.db 0x00
      000071 00                    2934 	.db 0x00
      000072 00                    2935 	.db 0x00
      000073 00                    2936 	.db 0x00
      000074 00                    2937 	.db 0x00
      000075 00                    2938 	.db 0x00
      000076 00                    2939 	.db 0x00
      000077 00                    2940 	.db 0x00
      000078 00                    2941 	.db 0x00
      000079 00                    2942 	.db 0x00
      00007A 00                    2943 	.db 0x00
      00007B 00                    2944 	.db 0x00
      00007C 00                    2945 	.db 0x00
      00007D 00                    2946 	.db 0x00
      00007E 00                    2947 	.db 0x00
      00007F 00                    2948 	.db 0x00
      000080 00                    2949 	.db 0x00
      000081 00                    2950 	.db 0x00
      000082 00                    2951 	.db 0x00
      000083 00                    2952 	.db 0x00
      000084 00                    2953 	.db 0x00
      000085 00                    2954 	.db 0x00
      000086 00                    2955 	.db 0x00
      000087 00                    2956 	.db 0x00
      000088 00                    2957 	.db 0x00
      000089 00                    2958 	.db 0x00
      00008A 00                    2959 	.db 0x00
      00008B 00                    2960 	.db 0x00
      00008C 00                    2961 	.db 0x00
      00008D 00                    2962 	.db 0x00
      00008E 00                    2963 	.db 0x00
      00008F 00                    2964 	.db 0x00
      000090 00                    2965 	.db 0x00
      000091 00                    2966 	.db 0x00
      000092 00                    2967 	.db 0x00
      000093 00                    2968 	.db 0x00
      000094 00                    2969 	.db 0x00
      000095 00                    2970 	.db 0x00
      000096 00                    2971 	.db 0x00
      000097 00                    2972 	.db 0x00
      000098 00                    2973 	.db 0x00
      000099 00                    2974 	.db 0x00
      00009A 00                    2975 	.db 0x00
      00009B 00                    2976 	.db 0x00
      00009C 00                    2977 	.db 0x00
      00009D 00                    2978 	.db 0x00
      00009E 00                    2979 	.db 0x00
      00009F 00                    2980 	.db 0x00
      0000A0 00                    2981 	.db 0x00
      0000A1 00                    2982 	.db 0x00
      0000A2 00                    2983 	.db 0x00
      0000A3 00                    2984 	.db 0x00
      0000A4 00                    2985 	.db 0x00
      0000A5 00                    2986 	.db 0x00
      0000A6 00                    2987 	.db 0x00
      0000A7 00                    2988 	.db 0x00
      0000A8 00                    2989 	.db 0x00
      0000A9 00                    2990 	.db 0x00
      0000AA 00                    2991 	.db 0x00
      0000AB 00                    2992 	.db 0x00
      0000AC 00                    2993 	.db 0x00
      0000AD 00                    2994 	.db 0x00
      0000AE 00                    2995 	.db 0x00
      0000AF 00                    2996 	.db 0x00
      0000B0 00                    2997 	.db 0x00
      0000B1 00                    2998 	.db 0x00
      0000B2 00                    2999 	.db 0x00
      0000B3 00                    3000 	.db 0x00
      0000B4 00                    3001 	.db 0x00
      0000B5 00                    3002 	.db 0x00
      0000B6 00                    3003 	.db 0x00
      0000B7 00                    3004 	.db 0x00
      0000B8 00                    3005 	.db 0x00
      0000B9 00                    3006 	.db 0x00
      0000BA 00                    3007 	.db 0x00
      0000BB 00                    3008 	.db 0x00
      0000BC 00                    3009 	.db 0x00
      0000BD 00                    3010 	.db 0x00
      0000BE 00                    3011 	.db 0x00
      0000BF 00                    3012 	.db 0x00
      0000C0 00                    3013 	.db 0x00
      0000C1 00                    3014 	.db 0x00
      0000C2 00                    3015 	.db 0x00
      0000C3 00                    3016 	.db 0x00
      0000C4 00                    3017 	.db 0x00
      0000C5 00                    3018 	.db 0x00
      0000C6 00                    3019 	.db 0x00
      0000C7 00                    3020 	.db 0x00
      0000C8 00                    3021 	.db 0x00
      0000C9 00                    3022 	.db 0x00
      0000CA 00                    3023 	.db 0x00
      0000CB 00                    3024 	.db 0x00
      0000CC 00                    3025 	.db 0x00
      0000CD 00                    3026 	.db 0x00
      0000CE                       3027 __xinit__buffer0and1_size:
      0000CE 00 00                 3028 	.byte #0x00, #0x00	;  0
                                   3029 	.area CABS    (ABS,CODE)
