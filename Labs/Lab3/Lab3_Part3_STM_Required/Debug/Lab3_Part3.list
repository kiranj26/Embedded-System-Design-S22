
Lab3_Part3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cdc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002f78  08002f78  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f78  08002f78  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f78  08002f78  00012f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002f80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  20000068  08002fe8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  08002fe8  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000962b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad5  00000000  00000000  000296c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  0002b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753c  00000000  00000000  0002bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7fa  00000000  00000000  0004344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b319  00000000  00000000  0004dc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8f5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f94  00000000  00000000  000d8fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e64 	.word	0x08002e64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08002e64 	.word	0x08002e64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <PWM_GPIO_init>:

/**
 * @brief Configures GPIO Pin D15 as alternate function output.
 */
void PWM_GPIO_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port D
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <PWM_GPIO_init+0x40>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <PWM_GPIO_init+0x40>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set GPIO Pin D15 to alternate function mode
	GPIOD->MODER |= GPIO_MODER_MODE15_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(GPIO_MODER_MODE15_0);
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002b6:	6013      	str	r3, [r2, #0]

	// Select TIM4 as alternate function for Pin D15
	GPIOD->AFR[1] |= (2 << GPIO_AFRH_AFSEL15_Pos);
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002c2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020c00 	.word	0x40020c00

080002d8 <PWM_init>:

/**
 * @brief Configures TIM4 to generate PWM output on Pin D15.
 */
void PWM_init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	// Enable clock for TIM4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <PWM_init+0x64>)
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	4a16      	ldr	r2, [pc, #88]	; (800033c <PWM_init+0x64>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40

	// Set prescaler to achieve a timer clock frequency of 100 kHz
	TIM4->PSC = 839;
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <PWM_init+0x68>)
 80002ea:	f240 3247 	movw	r2, #839	; 0x347
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto-reload value to achieve a PWM frequency of 100 Hz
	TIM4->ARR = 999;
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <PWM_init+0x68>)
 80002f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the initial duty cycle to achieve a 60% duty cycle
	TIM4->CCR4 = 600;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <PWM_init+0x68>)
 80002fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40

	// Configure output compare mode for PWM mode 1 on channel 4
	TIM4->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <PWM_init+0x68>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <PWM_init+0x68>)
 8000306:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800030a:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~(TIM_CCMR2_OC4M_0);
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <PWM_init+0x68>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <PWM_init+0x68>)
 8000312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000316:	61d3      	str	r3, [r2, #28]

	// Enable the output compare channel 4
	TIM4->CCER |= TIM_CCER_CC4E;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <PWM_init+0x68>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a08      	ldr	r2, [pc, #32]	; (8000340 <PWM_init+0x68>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6213      	str	r3, [r2, #32]

	// Enable the timer counter
	TIM4->CR1 |= TIM_CR1_CEN;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <PWM_init+0x68>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <PWM_init+0x68>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40000800 	.word	0x40000800

08000344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	2b00      	cmp	r3, #0
 8000354:	db0b      	blt.n	800036e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 021f 	and.w	r2, r3, #31
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <__NVIC_EnableIRQ+0x38>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	095b      	lsrs	r3, r3, #5
 8000364:	2001      	movs	r0, #1
 8000366:	fa00 f202 	lsl.w	r2, r0, r2
 800036a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000e100 	.word	0xe000e100

08000380 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	db0c      	blt.n	80003ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f003 021f 	and.w	r2, r3, #31
 8000398:	4907      	ldr	r1, [pc, #28]	; (80003b8 <__NVIC_ClearPendingIRQ+0x38>)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	2001      	movs	r0, #1
 80003a2:	fa00 f202 	lsl.w	r2, r0, r2
 80003a6:	3360      	adds	r3, #96	; 0x60
 80003a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	e000e100 	.word	0xe000e100

080003bc <Uart_init>:
 * @note   Uses GPIOA Pin 2 (TX) and Pin 3 (RX) for communication
 * @param  None
 * @retval None
 */
void Uart_init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	// Enable USART2 and GPIOA clocks
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <Uart_init+0xcc>)
 80003c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <Uart_init+0xcc>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003cc:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <Uart_init+0xcc>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <Uart_init+0xcc>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30

	// Set GPIO alternate function to USART2 for PA2 (TX) and PA3 (RX)
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	; (800048c <Uart_init+0xd0>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <Uart_init+0xd0>)
 80003de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_1 | GPIO_AFRL_AFSEL3_2;
 80003e4:	4b29      	ldr	r3, [pc, #164]	; (800048c <Uart_init+0xd0>)
 80003e6:	6a1b      	ldr	r3, [r3, #32]
 80003e8:	4a28      	ldr	r2, [pc, #160]	; (800048c <Uart_init+0xd0>)
 80003ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003ee:	6213      	str	r3, [r2, #32]

	// Set GPIO pins PA2 (TX) and PA3 (RX) to alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODE2_1;
 80003f0:	4b26      	ldr	r3, [pc, #152]	; (800048c <Uart_init+0xd0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <Uart_init+0xd0>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE3_1;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <Uart_init+0xd0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a22      	ldr	r2, [pc, #136]	; (800048c <Uart_init+0xd0>)
 8000402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000406:	6013      	str	r3, [r2, #0]

	// Enable USART2 peripheral
	USART2->CR1 |= USART_CR1_UE;
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <Uart_init+0xd4>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a20      	ldr	r2, [pc, #128]	; (8000490 <Uart_init+0xd4>)
 800040e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000412:	60d3      	str	r3, [r2, #12]

	// Configure PA2 (TX) and PA3 (RX) for external interrupts
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA | SYSCFG_EXTICR1_EXTI3_PA;
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <Uart_init+0xd8>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <Uart_init+0xd8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	6093      	str	r3, [r2, #8]

	// Enable interrupt for PA2 (TX) and PA3 (RX)
	EXTI->IMR |= EXTI_IMR_MR2 | EXTI_IMR_MR3 ;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <Uart_init+0xdc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <Uart_init+0xdc>)
 8000422:	f043 030c 	orr.w	r3, r3, #12
 8000426:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_MR2 | EXTI_EMR_MR3 ;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <Uart_init+0xdc>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <Uart_init+0xdc>)
 800042e:	f043 030c 	orr.w	r3, r3, #12
 8000432:	6053      	str	r3, [r2, #4]

	// Clear interrupt flags for USART2
	USART2->SR &= ~USART_SR_TXE;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <Uart_init+0xd4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a15      	ldr	r2, [pc, #84]	; (8000490 <Uart_init+0xd4>)
 800043a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043e:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <Uart_init+0xd4>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <Uart_init+0xd4>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(38);
 800044c:	2026      	movs	r0, #38	; 0x26
 800044e:	f7ff ff97 	bl	8000380 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(38);
 8000452:	2026      	movs	r0, #38	; 0x26
 8000454:	f7ff ff76 	bl	8000344 <__NVIC_EnableIRQ>

	// Set baud rate to 9600
	USART2->BRR = 52 << 4;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <Uart_init+0xd4>)
 800045a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800045e:	609a      	str	r2, [r3, #8]
	USART2->BRR |= 15 ;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <Uart_init+0xd4>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <Uart_init+0xd4>)
 8000466:	f043 030f 	orr.w	r3, r3, #15
 800046a:	6093      	str	r3, [r2, #8]

	// Enable transmitter and receiver for USART2
	USART2->CR1 |= USART_CR1_TE;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <Uart_init+0xd4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <Uart_init+0xd4>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <Uart_init+0xd4>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <Uart_init+0xd4>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40023800 	.word	0x40023800
 800048c:	40020000 	.word	0x40020000
 8000490:	40004400 	.word	0x40004400
 8000494:	40013800 	.word	0x40013800
 8000498:	40013c00 	.word	0x40013c00

0800049c <my_putchar>:
 * @brief  Transmits a single character over UART2
 * @param  c: Character to transmit
 * @retval None
 */
void my_putchar(char c)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
    USART2->DR = c;
 80004a6:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <my_putchar+0x1c>)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	6053      	str	r3, [r2, #4]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40004400 	.word	0x40004400

080004bc <my_putstring>:
 * @brief  Transmits a string over UART2
 * @param  str: String to transmit
 * @retval None
 */
void my_putstring(char * str)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	for(int i = 0; str[i] != '\0'; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e014      	b.n	80004f4 <my_putstring+0x38>
	{
		for(int i=0;i<5000;i++); // Delay to allow time for previous transmission to complete
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	e002      	b.n	80004d6 <my_putstring+0x1a>
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80004dc:	4293      	cmp	r3, r2
 80004de:	ddf7      	ble.n	80004d0 <my_putstring+0x14>
		my_putchar(str[i]);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ffd7 	bl	800049c <my_putchar>
	for(int i = 0; str[i] != '\0'; i++)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1e4      	bne.n	80004ca <my_putstring+0xe>
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <Clock_init>:

#include "clock.h"
/**
 * @brief Initializes clock and enables the MAIN PLL.
 */
void Clock_init(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	// Enable HSI clock
	RCC->CR |= RCC_CR_HSION;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <Clock_init+0x44>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <Clock_init+0x44>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]

	// Wait for HSI to stabilize
	while (!(RCC->CR & RCC_CR_HSIRDY));
 800051c:	bf00      	nop
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <Clock_init+0x44>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <Clock_init+0x12>

	// Enable MAIN PLL
	RCC->CR |= RCC_CR_PLLON;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <Clock_init+0x44>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <Clock_init+0x44>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]

	// Wait for MAIN PLL to stabilize
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000536:	bf00      	nop
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <Clock_init+0x44>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <Clock_init+0x2c>
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40023800 	.word	0x40023800

08000554 <duty_cycle_processing>:
/**
 * @brief Processes the received UART command and updates the duty cycle accordingly.
 */

void duty_cycle_processing(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
    char c = rx_buffer[rx_tail++];                      // Get the next character from UART receive buffer
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <duty_cycle_processing+0xc4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	492d      	ldr	r1, [pc, #180]	; (8000618 <duty_cycle_processing+0xc4>)
 8000562:	600a      	str	r2, [r1, #0]
 8000564:	4a2d      	ldr	r2, [pc, #180]	; (800061c <duty_cycle_processing+0xc8>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	71fb      	strb	r3, [r7, #7]
    if (c == 'A')                                      // If 'A' is received, increase duty cycle by 50
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b41      	cmp	r3, #65	; 0x41
 800056e:	d110      	bne.n	8000592 <duty_cycle_processing+0x3e>
    {
        current_duty_cycle += 50;
 8000570:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <duty_cycle_processing+0xcc>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	b29b      	uxth	r3, r3
 8000576:	3332      	adds	r3, #50	; 0x32
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <duty_cycle_processing+0xcc>)
 800057c:	801a      	strh	r2, [r3, #0]
        if (current_duty_cycle >= 1000) {
 800057e:	4b28      	ldr	r3, [pc, #160]	; (8000620 <duty_cycle_processing+0xcc>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	b29b      	uxth	r3, r3
 8000584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000588:	d303      	bcc.n	8000592 <duty_cycle_processing+0x3e>
            // Reached maximum duty cycle, set to 1000 and stop increasing
            current_duty_cycle = 1000;
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <duty_cycle_processing+0xcc>)
 800058c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000590:	801a      	strh	r2, [r3, #0]
        }
    }
    if (c == 'B')                                      // If 'B' is received, decrease duty cycle by 50
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	2b42      	cmp	r3, #66	; 0x42
 8000596:	d10e      	bne.n	80005b6 <duty_cycle_processing+0x62>
    {
        current_duty_cycle -= 50;
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <duty_cycle_processing+0xcc>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	b29b      	uxth	r3, r3
 800059e:	3b32      	subs	r3, #50	; 0x32
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <duty_cycle_processing+0xcc>)
 80005a4:	801a      	strh	r2, [r3, #0]
        if (current_duty_cycle == 0) {
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <duty_cycle_processing+0xcc>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <duty_cycle_processing+0x62>
            // Reached minimum duty cycle, set to 0 and stop decreasing
            current_duty_cycle = 0;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <duty_cycle_processing+0xcc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	801a      	strh	r2, [r3, #0]
        }
    }
    if (c == 'P')                                      // If 'P' is received, print current duty cycle
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b50      	cmp	r3, #80	; 0x50
 80005ba:	d124      	bne.n	8000606 <duty_cycle_processing+0xb2>
    {
        sprintf(dec, "%d", current_duty_cycle);        // Convert duty cycle to string
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <duty_cycle_processing+0xcc>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	4917      	ldr	r1, [pc, #92]	; (8000624 <duty_cycle_processing+0xd0>)
 80005c6:	4818      	ldr	r0, [pc, #96]	; (8000628 <duty_cycle_processing+0xd4>)
 80005c8:	f002 f8be 	bl	8002748 <siprintf>
        strcpy(str, "\n\rCurrent Duty Cycle = ");      // Print message
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <duty_cycle_processing+0xd8>)
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <duty_cycle_processing+0xdc>)
 80005d0:	4614      	mov	r4, r2
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005dc:	e884 0003 	stmia.w	r4, {r0, r1}
        strcat(dec,"\n\r");
 80005e0:	4811      	ldr	r0, [pc, #68]	; (8000628 <duty_cycle_processing+0xd4>)
 80005e2:	f7ff fdfd 	bl	80001e0 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <duty_cycle_processing+0xd4>)
 80005ec:	4413      	add	r3, r2
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <duty_cycle_processing+0xe0>)
 80005f0:	8811      	ldrh	r1, [r2, #0]
 80005f2:	7892      	ldrb	r2, [r2, #2]
 80005f4:	8019      	strh	r1, [r3, #0]
 80005f6:	709a      	strb	r2, [r3, #2]
        strcat(str,dec);
 80005f8:	490b      	ldr	r1, [pc, #44]	; (8000628 <duty_cycle_processing+0xd4>)
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <duty_cycle_processing+0xd8>)
 80005fc:	f002 f8c4 	bl	8002788 <strcat>
        my_putstring(str);
 8000600:	480a      	ldr	r0, [pc, #40]	; (800062c <duty_cycle_processing+0xd8>)
 8000602:	f7ff ff5b 	bl	80004bc <my_putstring>
    }
    TIM4->CCR4 = current_duty_cycle;                    // Update the duty cycle of TIM4
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <duty_cycle_processing+0xcc>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	b29a      	uxth	r2, r3
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <duty_cycle_processing+0xe4>)
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	200000ec 	.word	0x200000ec
 800061c:	20000084 	.word	0x20000084
 8000620:	20000000 	.word	0x20000000
 8000624:	08002e7c 	.word	0x08002e7c
 8000628:	20000154 	.word	0x20000154
 800062c:	200000f0 	.word	0x200000f0
 8000630:	08002e80 	.word	0x08002e80
 8000634:	08002e98 	.word	0x08002e98
 8000638:	40000800 	.word	0x40000800

0800063c <EXTI0_IRQHandler>:


/**
 * @brief Interrupt handler for EXTI0. Processes button press and updates duty cycle.
 */
void EXTI0_IRQHandler(void) {
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	af00      	add	r7, sp, #0
  // Clear the interrupt flag
  EXTI->PR |= EXTI_PR_PR0;
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <EXTI0_IRQHandler+0x150>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4a51      	ldr	r2, [pc, #324]	; (800078c <EXTI0_IRQHandler+0x150>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6153      	str	r3, [r2, #20]

  // Print message indicating button press
  strcpy(str, "\n\rButton Pressed!\n\r");
 800064c:	4a50      	ldr	r2, [pc, #320]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800064e:	4b51      	ldr	r3, [pc, #324]	; (8000794 <EXTI0_IRQHandler+0x158>)
 8000650:	4614      	mov	r4, r2
 8000652:	461d      	mov	r5, r3
 8000654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000658:	682b      	ldr	r3, [r5, #0]
 800065a:	6023      	str	r3, [r4, #0]
  my_putstring(str);
 800065c:	484c      	ldr	r0, [pc, #304]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800065e:	f7ff ff2d 	bl	80004bc <my_putstring>

  // Increase or decrease duty cycle by 10%
  if (increase_duty_cycle) {
 8000662:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <EXTI0_IRQHandler+0x15c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d044      	beq.n	80006f6 <EXTI0_IRQHandler+0xba>
    // Increase duty cycle
    strcpy(str, "Increasing Duty Cycle !\n\r");
 800066c:	4a48      	ldr	r2, [pc, #288]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800066e:	4b4b      	ldr	r3, [pc, #300]	; (800079c <EXTI0_IRQHandler+0x160>)
 8000670:	4614      	mov	r4, r2
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	c403      	stmia	r4!, {r0, r1}
 800067e:	8022      	strh	r2, [r4, #0]
    my_putstring(str);
 8000680:	4843      	ldr	r0, [pc, #268]	; (8000790 <EXTI0_IRQHandler+0x154>)
 8000682:	f7ff ff1b 	bl	80004bc <my_putstring>
    current_duty_cycle += 100;
 8000686:	4b46      	ldr	r3, [pc, #280]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	3364      	adds	r3, #100	; 0x64
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000692:	801a      	strh	r2, [r3, #0]
    sprintf(dec, "%d", current_duty_cycle);
 8000694:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	b29b      	uxth	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4941      	ldr	r1, [pc, #260]	; (80007a4 <EXTI0_IRQHandler+0x168>)
 800069e:	4842      	ldr	r0, [pc, #264]	; (80007a8 <EXTI0_IRQHandler+0x16c>)
 80006a0:	f002 f852 	bl	8002748 <siprintf>
    strcpy(str, "Current Duty Cycle = ");
 80006a4:	4a3a      	ldr	r2, [pc, #232]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006a6:	4b41      	ldr	r3, [pc, #260]	; (80007ac <EXTI0_IRQHandler+0x170>)
 80006a8:	4614      	mov	r4, r2
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b4:	6020      	str	r0, [r4, #0]
 80006b6:	3404      	adds	r4, #4
 80006b8:	8021      	strh	r1, [r4, #0]
    strcat(str,dec);
 80006ba:	493b      	ldr	r1, [pc, #236]	; (80007a8 <EXTI0_IRQHandler+0x16c>)
 80006bc:	4834      	ldr	r0, [pc, #208]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006be:	f002 f863 	bl	8002788 <strcat>
    my_putstring(str);
 80006c2:	4833      	ldr	r0, [pc, #204]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006c4:	f7ff fefa 	bl	80004bc <my_putstring>
    // Check if maximum duty cycle is reached
    if (current_duty_cycle >= 1000) {
 80006c8:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006d2:	d353      	bcc.n	800077c <EXTI0_IRQHandler+0x140>
      // Reached maximum duty cycle, start decreasing
      strcpy(str, "\n\r!! Max Duty Cycle Reached !!\n\r");
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006d6:	4b36      	ldr	r3, [pc, #216]	; (80007b0 <EXTI0_IRQHandler+0x174>)
 80006d8:	4614      	mov	r4, r2
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	7023      	strb	r3, [r4, #0]
      my_putstring(str);
 80006e8:	4829      	ldr	r0, [pc, #164]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006ea:	f7ff fee7 	bl	80004bc <my_putstring>
      increase_duty_cycle = 0;
 80006ee:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <EXTI0_IRQHandler+0x15c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e042      	b.n	800077c <EXTI0_IRQHandler+0x140>
    }
  } else {
    // Decrease duty cycle
    strcpy(str, "Decreasing Duty Cycle !\n\r");
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <EXTI0_IRQHandler+0x154>)
 80006f8:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <EXTI0_IRQHandler+0x178>)
 80006fa:	4614      	mov	r4, r2
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	c403      	stmia	r4!, {r0, r1}
 8000708:	8022      	strh	r2, [r4, #0]
    my_putstring(str);
 800070a:	4821      	ldr	r0, [pc, #132]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800070c:	f7ff fed6 	bl	80004bc <my_putstring>
    current_duty_cycle -= 100;
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	b29b      	uxth	r3, r3
 8000716:	3b64      	subs	r3, #100	; 0x64
 8000718:	b29a      	uxth	r2, r3
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 800071c:	801a      	strh	r2, [r3, #0]
    sprintf(dec, "%d", current_duty_cycle);
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	491f      	ldr	r1, [pc, #124]	; (80007a4 <EXTI0_IRQHandler+0x168>)
 8000728:	481f      	ldr	r0, [pc, #124]	; (80007a8 <EXTI0_IRQHandler+0x16c>)
 800072a:	f002 f80d 	bl	8002748 <siprintf>
    strcpy(str, "Current Duty Cycle = ");
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <EXTI0_IRQHandler+0x154>)
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <EXTI0_IRQHandler+0x170>)
 8000732:	4614      	mov	r4, r2
 8000734:	461d      	mov	r5, r3
 8000736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800073a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800073e:	6020      	str	r0, [r4, #0]
 8000740:	3404      	adds	r4, #4
 8000742:	8021      	strh	r1, [r4, #0]
    strcat(str,dec);
 8000744:	4918      	ldr	r1, [pc, #96]	; (80007a8 <EXTI0_IRQHandler+0x16c>)
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <EXTI0_IRQHandler+0x154>)
 8000748:	f002 f81e 	bl	8002788 <strcat>
    my_putstring(str);
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800074e:	f7ff feb5 	bl	80004bc <my_putstring>
    // Check if minimum duty cycle is reached
    if (current_duty_cycle == 0) {
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b29b      	uxth	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d10f      	bne.n	800077c <EXTI0_IRQHandler+0x140>
      // Reached minimum duty cycle, start increasing
      strcpy(str, "\n\r!! Min Duty Cycle Reached !!\n\r");
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <EXTI0_IRQHandler+0x154>)
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <EXTI0_IRQHandler+0x17c>)
 8000760:	4614      	mov	r4, r2
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	7023      	strb	r3, [r4, #0]
      my_putstring(str);
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <EXTI0_IRQHandler+0x154>)
 8000772:	f7ff fea3 	bl	80004bc <my_putstring>
      increase_duty_cycle = 1;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <EXTI0_IRQHandler+0x15c>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
    }
  }

  // Update the duty cycle of TIM3
  TIM4->CCR4 = current_duty_cycle;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <EXTI0_IRQHandler+0x164>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <EXTI0_IRQHandler+0x180>)
 8000784:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000786:	bf00      	nop
 8000788:	bdb0      	pop	{r4, r5, r7, pc}
 800078a:	bf00      	nop
 800078c:	40013c00 	.word	0x40013c00
 8000790:	200000f0 	.word	0x200000f0
 8000794:	08002e9c 	.word	0x08002e9c
 8000798:	20000002 	.word	0x20000002
 800079c:	08002eb0 	.word	0x08002eb0
 80007a0:	20000000 	.word	0x20000000
 80007a4:	08002e7c 	.word	0x08002e7c
 80007a8:	20000154 	.word	0x20000154
 80007ac:	08002ecc 	.word	0x08002ecc
 80007b0:	08002ee4 	.word	0x08002ee4
 80007b4:	08002f08 	.word	0x08002f08
 80007b8:	08002f24 	.word	0x08002f24
 80007bc:	40000800 	.word	0x40000800

080007c0 <USART2_IRQHandler>:
/**
 * @brief Interrupt handler for USART2. Handles received data and stores in buffer.
 */
void USART2_IRQHandler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
    // Check if receive interrupt flag is set
    if (USART2->SR & USART_SR_RXNE )
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <USART2_IRQHandler+0x30>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d009      	beq.n	80007e4 <USART2_IRQHandler+0x24>
    {
        rx_buffer[rx_head++] = USART2->DR; // Store received byte
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <USART2_IRQHandler+0x30>)
 80007d2:	6858      	ldr	r0, [r3, #4]
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <USART2_IRQHandler+0x34>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	4906      	ldr	r1, [pc, #24]	; (80007f4 <USART2_IRQHandler+0x34>)
 80007dc:	600a      	str	r2, [r1, #0]
 80007de:	b2c1      	uxtb	r1, r0
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <USART2_IRQHandler+0x38>)
 80007e2:	54d1      	strb	r1, [r2, r3]
        // No need to clear flag since it is cleared by a read
    }
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40004400 	.word	0x40004400
 80007f4:	200000e8 	.word	0x200000e8
 80007f8:	20000084 	.word	0x20000084

080007fc <main>:

/**
 * @brief Main function that initializes clock, switches, PWM, and UART. Receives data and processes duty cycle.
 */
int main(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    // Initialize clock and peripherals
    Clock_init();
 8000800:	f7ff fe84 	bl	800050c <Clock_init>
    Switch_init();
 8000804:	f000 f87e 	bl	8000904 <Switch_init>
    PWM_GPIO_init();
 8000808:	f7ff fd42 	bl	8000290 <PWM_GPIO_init>
    PWM_init();
 800080c:	f7ff fd64 	bl	80002d8 <PWM_init>
    Uart_init();
 8000810:	f7ff fdd4 	bl	80003bc <Uart_init>

    while (1) {
        // Check for received data
        if (rx_tail < rx_head) {
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <main+0x58>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <main+0x5c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	da0d      	bge.n	800083c <main+0x40>
            my_putchar(rx_buffer[rx_tail++]);
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <main+0x58>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	490b      	ldr	r1, [pc, #44]	; (8000854 <main+0x58>)
 8000828:	600a      	str	r2, [r1, #0]
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <main+0x60>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fe33 	bl	800049c <my_putchar>
            duty_cycle_processing();
 8000836:	f7ff fe8d 	bl	8000554 <duty_cycle_processing>
 800083a:	e7eb      	b.n	8000814 <main+0x18>
        } else if (rx_tail == rx_head) {
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <main+0x58>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <main+0x5c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	429a      	cmp	r2, r3
 8000846:	d1e5      	bne.n	8000814 <main+0x18>
            // Reset tail and head if buffer is empty
            rx_tail = rx_head = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	4a03      	ldr	r2, [pc, #12]	; (8000858 <main+0x5c>)
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4a01      	ldr	r2, [pc, #4]	; (8000854 <main+0x58>)
 8000850:	6013      	str	r3, [r2, #0]
        if (rx_tail < rx_head) {
 8000852:	e7df      	b.n	8000814 <main+0x18>
 8000854:	200000ec 	.word	0x200000ec
 8000858:	200000e8 	.word	0x200000e8
 800085c:	20000084 	.word	0x20000084

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f8e0 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <OTG_FS_IRQHandler+0x10>)
 80008ba:	f000 f8ed 	bl	8000a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200001c0 	.word	0x200001c0

080008c8 <__NVIC_EnableIRQ>:
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	db0b      	blt.n	80008f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	f003 021f 	and.w	r2, r3, #31
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <__NVIC_EnableIRQ+0x38>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	2001      	movs	r0, #1
 80008ea:	fa00 f202 	lsl.w	r2, r0, r2
 80008ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000e100 	.word	0xe000e100

08000904 <Switch_init>:
 *         the state of an LED on Pin D14.
 * @param  None
 * @retval None
 */
void Switch_init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
    // Enable the clock for the GPIOA peripheral and the SYSCFG peripheral
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <Switch_init+0x78>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <Switch_init+0x78>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <Switch_init+0x78>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	4a18      	ldr	r2, [pc, #96]	; (800097c <Switch_init+0x78>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure Pin A0 as input with pull-up
    GPIOA->MODER &= ~GPIO_MODER_MODE0;
 8000920:	4b17      	ldr	r3, [pc, #92]	; (8000980 <Switch_init+0x7c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a16      	ldr	r2, [pc, #88]	; (8000980 <Switch_init+0x7c>)
 8000926:	f023 0303 	bic.w	r3, r3, #3
 800092a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPD0_0;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <Switch_init+0x7c>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <Switch_init+0x7c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	60d3      	str	r3, [r2, #12]

    // Configure EXTI0 to map to Pin A0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <Switch_init+0x80>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <Switch_init+0x80>)
 800093e:	f023 030f 	bic.w	r3, r3, #15
 8000942:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <Switch_init+0x80>)
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <Switch_init+0x80>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	6093      	str	r3, [r2, #8]

    // Enable the interrupt and trigger on rising edge
    EXTI->IMR |= EXTI_IMR_MR0;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <Switch_init+0x84>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <Switch_init+0x84>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= EXTI_RTSR_TR0_Msk;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <Switch_init+0x84>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <Switch_init+0x84>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6093      	str	r3, [r2, #8]

    // Clear the interrupt flag
    EXTI->SWIER |= EXTI_SWIER_SWIER0;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <Switch_init+0x84>)
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <Switch_init+0x84>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6113      	str	r3, [r2, #16]

    // Enable the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000970:	2006      	movs	r0, #6
 8000972:	f7ff ffa9 	bl	80008c8 <__NVIC_EnableIRQ>
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40013800 	.word	0x40013800
 8000988:	40013c00 	.word	0x40013c00

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f001 fdaa 	bl	8002514 <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20020000 	.word	0x20020000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	200001b8 	.word	0x200001b8
 80009f4:	200004d8 	.word	0x200004d8

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd7 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f001 fd69 	bl	8002520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fed5 	bl	80007fc <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a60:	08002f80 	.word	0x08002f80
  ldr r2, =_sbss
 8000a64:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a68:	200004d4 	.word	0x200004d4

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000003 	.word	0x20000003
 8000a94:	200001bc 	.word	0x200001bc

08000a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fa0f 	bl	8001ed2 <USB_GetMode>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	f040 80f6 	bne.w	8000ca8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f9f3 	bl	8001eac <USB_ReadInterrupts>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80ec 	beq.w	8000ca6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f9ea 	bl	8001eac <USB_ReadInterrupts>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000ae2:	d104      	bne.n	8000aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f9da 	bl	8001eac <USB_ReadInterrupts>
 8000af8:	4603      	mov	r3, r0
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b02:	d104      	bne.n	8000b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f9ca 	bl	8001eac <USB_ReadInterrupts>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000b22:	d104      	bne.n	8000b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f9ba 	bl	8001eac <USB_ReadInterrupts>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d103      	bne.n	8000b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2202      	movs	r2, #2
 8000b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f9ac 	bl	8001eac <USB_ReadInterrupts>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b5e:	d11c      	bne.n	8000b9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10f      	bne.n	8000b9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	6938      	ldr	r0, [r7, #16]
 8000b7e:	f001 f8d9 	bl	8001d34 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000b82:	6938      	ldr	r0, [r7, #16]
 8000b84:	f001 f90a 	bl	8001d9c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 f9ad 	bl	8001eee <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f001 fc3e 	bl	8002416 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f984 	bl	8001eac <USB_ReadInterrupts>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bae:	d102      	bne.n	8000bb6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f001 f829 	bl	8001c08 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f976 	bl	8001eac <USB_ReadInterrupts>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d106      	bne.n	8000bd8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f001 fc07 	bl	80023de <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 f965 	bl	8001eac <USB_ReadInterrupts>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f003 0310 	and.w	r3, r3, #16
 8000be8:	2b10      	cmp	r3, #16
 8000bea:	d101      	bne.n	8000bf0 <HAL_HCD_IRQHandler+0x158>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <HAL_HCD_IRQHandler+0x15a>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d012      	beq.n	8000c1c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	699a      	ldr	r2, [r3, #24]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0210 	bic.w	r2, r2, #16
 8000c04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 ff2c 	bl	8001a64 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	699a      	ldr	r2, [r3, #24]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 0210 	orr.w	r2, r2, #16
 8000c1a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f943 	bl	8001eac <USB_ReadInterrupts>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c30:	d13a      	bne.n	8000ca8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f993 	bl	8001f62 <USB_HC_ReadInterrupt>
 8000c3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e025      	b.n	8000c90 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d018      	beq.n	8000c8a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c6e:	d106      	bne.n	8000c7e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 f836 	bl	8000ce8 <HCD_HC_IN_IRQHandler>
 8000c7c:	e005      	b.n	8000c8a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 fb84 	bl	8001392 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3d4      	bcc.n	8000c44 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	e000      	b.n	8000ca8 <HAL_HCD_IRQHandler+0x210>
      return;
 8000ca6:	bf00      	nop
    }
  }
}
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_HCD_Stop+0x16>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e00d      	b.n	8000ce0 <HAL_HCD_Stop+0x32>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 fa53 	bl	800217c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	015a      	lsls	r2, r3, #5
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4413      	add	r3, r2
 8000d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d11a      	bne.n	8000d4e <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	015a      	lsls	r2, r3, #5
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	4413      	add	r3, r2
 8000d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d24:	461a      	mov	r2, r3
 8000d26:	2304      	movs	r3, #4
 8000d28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	212c      	movs	r1, #44	; 0x2c
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	3361      	adds	r3, #97	; 0x61
 8000d38:	2206      	movs	r2, #6
 8000d3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 f91c 	bl	8001f84 <USB_HC_Halt>
 8000d4c:	e0af      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	015a      	lsls	r2, r3, #5
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4413      	add	r3, r2
 8000d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d64:	d11b      	bne.n	8000d9e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	015a      	lsls	r2, r3, #5
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d72:	461a      	mov	r2, r3
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	212c      	movs	r1, #44	; 0x2c
 8000d80:	fb01 f303 	mul.w	r3, r1, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	3361      	adds	r3, #97	; 0x61
 8000d88:	2207      	movs	r2, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f8f4 	bl	8001f84 <USB_HC_Halt>
 8000d9c:	e087      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	015a      	lsls	r2, r3, #5
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 0320 	and.w	r3, r3, #32
 8000db0:	2b20      	cmp	r3, #32
 8000db2:	d109      	bne.n	8000dc8 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	015a      	lsls	r2, r3, #5
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4413      	add	r3, r2
 8000dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2320      	movs	r3, #32
 8000dc4:	6093      	str	r3, [r2, #8]
 8000dc6:	e072      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	015a      	lsls	r2, r3, #5
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4413      	add	r3, r2
 8000dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b08      	cmp	r3, #8
 8000ddc:	d11a      	bne.n	8000e14 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	015a      	lsls	r2, r3, #5
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4413      	add	r3, r2
 8000de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dea:	461a      	mov	r2, r3
 8000dec:	2308      	movs	r3, #8
 8000dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	212c      	movs	r1, #44	; 0x2c
 8000df6:	fb01 f303 	mul.w	r3, r1, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3361      	adds	r3, #97	; 0x61
 8000dfe:	2205      	movs	r2, #5
 8000e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f8b9 	bl	8001f84 <USB_HC_Halt>
 8000e12:	e04c      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	015a      	lsls	r2, r3, #5
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2a:	d11b      	bne.n	8000e64 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	015a      	lsls	r2, r3, #5
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4413      	add	r3, r2
 8000e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e38:	461a      	mov	r2, r3
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	212c      	movs	r1, #44	; 0x2c
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3361      	adds	r3, #97	; 0x61
 8000e4e:	2208      	movs	r2, #8
 8000e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 f891 	bl	8001f84 <USB_HC_Halt>
 8000e62:	e024      	b.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	015a      	lsls	r2, r3, #5
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	2b80      	cmp	r3, #128	; 0x80
 8000e78:	d119      	bne.n	8000eae <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	015a      	lsls	r2, r3, #5
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4413      	add	r3, r2
 8000e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e86:	461a      	mov	r2, r3
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	212c      	movs	r1, #44	; 0x2c
 8000e92:	fb01 f303 	mul.w	r3, r1, r3
 8000e96:	4413      	add	r3, r2
 8000e98:	3361      	adds	r3, #97	; 0x61
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 f86b 	bl	8001f84 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	015a      	lsls	r2, r3, #5
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ec4:	d112      	bne.n	8000eec <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f857 	bl	8001f84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	015a      	lsls	r2, r3, #5
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4413      	add	r3, r2
 8000ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8000eea:	e24e      	b.n	800138a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	f040 80df 	bne.w	80010c2 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d019      	beq.n	8000f40 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	212c      	movs	r1, #44	; 0x2c
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	3348      	adds	r3, #72	; 0x48
 8000f1a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	0159      	lsls	r1, r3, #5
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	440b      	add	r3, r1
 8000f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8000f2e:	1ad2      	subs	r2, r2, r3
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	202c      	movs	r0, #44	; 0x2c
 8000f36:	fb00 f303 	mul.w	r3, r0, r3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3350      	adds	r3, #80	; 0x50
 8000f3e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	212c      	movs	r1, #44	; 0x2c
 8000f46:	fb01 f303 	mul.w	r3, r1, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3361      	adds	r3, #97	; 0x61
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	212c      	movs	r1, #44	; 0x2c
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	335c      	adds	r3, #92	; 0x5c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	015a      	lsls	r2, r3, #5
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f70:	461a      	mov	r2, r3
 8000f72:	2301      	movs	r3, #1
 8000f74:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	212c      	movs	r1, #44	; 0x2c
 8000f7c:	fb01 f303 	mul.w	r3, r1, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	333f      	adds	r3, #63	; 0x3f
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d009      	beq.n	8000f9e <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	212c      	movs	r1, #44	; 0x2c
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	333f      	adds	r3, #63	; 0x3f
 8000f98:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d111      	bne.n	8000fc2 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 ffeb 	bl	8001f84 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	015a      	lsls	r2, r3, #5
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	6093      	str	r3, [r2, #8]
 8000fc0:	e03a      	b.n	8001038 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	212c      	movs	r1, #44	; 0x2c
 8000fc8:	fb01 f303 	mul.w	r3, r1, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	333f      	adds	r3, #63	; 0x3f
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d009      	beq.n	8000fea <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	212c      	movs	r1, #44	; 0x2c
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	333f      	adds	r3, #63	; 0x3f
 8000fe4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d126      	bne.n	8001038 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	015a      	lsls	r2, r3, #5
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	0151      	lsls	r1, r2, #5
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	440a      	add	r2, r1
 8001000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001008:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	212c      	movs	r1, #44	; 0x2c
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	4413      	add	r3, r2
 8001016:	3360      	adds	r3, #96	; 0x60
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	b2d9      	uxtb	r1, r3
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	202c      	movs	r0, #44	; 0x2c
 8001026:	fb00 f303 	mul.w	r3, r0, r3
 800102a:	4413      	add	r3, r2
 800102c:	3360      	adds	r3, #96	; 0x60
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f001 f9fd 	bl	8002432 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d12b      	bne.n	8001098 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	212c      	movs	r1, #44	; 0x2c
 8001046:	fb01 f303 	mul.w	r3, r1, r3
 800104a:	4413      	add	r3, r2
 800104c:	3348      	adds	r3, #72	; 0x48
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	202c      	movs	r0, #44	; 0x2c
 8001056:	fb00 f202 	mul.w	r2, r0, r2
 800105a:	440a      	add	r2, r1
 800105c:	3240      	adds	r2, #64	; 0x40
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	fbb3 f3f2 	udiv	r3, r3, r2
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 818e 	beq.w	800138a <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	212c      	movs	r1, #44	; 0x2c
 8001074:	fb01 f303 	mul.w	r3, r1, r3
 8001078:	4413      	add	r3, r2
 800107a:	3354      	adds	r3, #84	; 0x54
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	f083 0301 	eor.w	r3, r3, #1
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	212c      	movs	r1, #44	; 0x2c
 800108a:	fb01 f303 	mul.w	r3, r1, r3
 800108e:	4413      	add	r3, r2
 8001090:	3354      	adds	r3, #84	; 0x54
 8001092:	4602      	mov	r2, r0
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	e178      	b.n	800138a <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	212c      	movs	r1, #44	; 0x2c
 800109e:	fb01 f303 	mul.w	r3, r1, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	3354      	adds	r3, #84	; 0x54
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f083 0301 	eor.w	r3, r3, #1
 80010ac:	b2d8      	uxtb	r0, r3
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	212c      	movs	r1, #44	; 0x2c
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	4413      	add	r3, r2
 80010ba:	3354      	adds	r3, #84	; 0x54
 80010bc:	4602      	mov	r2, r0
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	e163      	b.n	800138a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	015a      	lsls	r2, r3, #5
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4413      	add	r3, r2
 80010ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	f040 80f6 	bne.w	80012c6 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	212c      	movs	r1, #44	; 0x2c
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	4413      	add	r3, r2
 80010e6:	3361      	adds	r3, #97	; 0x61
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d109      	bne.n	8001102 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	212c      	movs	r1, #44	; 0x2c
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	3360      	adds	r3, #96	; 0x60
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e0c9      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	212c      	movs	r1, #44	; 0x2c
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	3361      	adds	r3, #97	; 0x61
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b05      	cmp	r3, #5
 8001114:	d109      	bne.n	800112a <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	212c      	movs	r1, #44	; 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	3360      	adds	r3, #96	; 0x60
 8001124:	2205      	movs	r2, #5
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e0b5      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	212c      	movs	r1, #44	; 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	3361      	adds	r3, #97	; 0x61
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d009      	beq.n	8001152 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	212c      	movs	r1, #44	; 0x2c
 8001144:	fb01 f303 	mul.w	r3, r1, r3
 8001148:	4413      	add	r3, r2
 800114a:	3361      	adds	r3, #97	; 0x61
 800114c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800114e:	2b08      	cmp	r3, #8
 8001150:	d150      	bne.n	80011f4 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	212c      	movs	r1, #44	; 0x2c
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	335c      	adds	r3, #92	; 0x5c
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	202c      	movs	r0, #44	; 0x2c
 800116a:	fb00 f303 	mul.w	r3, r0, r3
 800116e:	440b      	add	r3, r1
 8001170:	335c      	adds	r3, #92	; 0x5c
 8001172:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	212c      	movs	r1, #44	; 0x2c
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	4413      	add	r3, r2
 8001180:	335c      	adds	r3, #92	; 0x5c
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d912      	bls.n	80011ae <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	4413      	add	r3, r2
 8001194:	335c      	adds	r3, #92	; 0x5c
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	3360      	adds	r3, #96	; 0x60
 80011a8:	2204      	movs	r2, #4
 80011aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011ac:	e073      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	212c      	movs	r1, #44	; 0x2c
 80011b4:	fb01 f303 	mul.w	r3, r1, r3
 80011b8:	4413      	add	r3, r2
 80011ba:	3360      	adds	r3, #96	; 0x60
 80011bc:	2202      	movs	r2, #2
 80011be:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	015a      	lsls	r2, r3, #5
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80011d6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011de:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80011f2:	e050      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	212c      	movs	r1, #44	; 0x2c
 80011fa:	fb01 f303 	mul.w	r3, r1, r3
 80011fe:	4413      	add	r3, r2
 8001200:	3361      	adds	r3, #97	; 0x61
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d122      	bne.n	800124e <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	212c      	movs	r1, #44	; 0x2c
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	3360      	adds	r3, #96	; 0x60
 8001216:	2202      	movs	r2, #2
 8001218:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	015a      	lsls	r2, r3, #5
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4413      	add	r3, r2
 8001222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001230:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001238:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	015a      	lsls	r2, r3, #5
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001246:	461a      	mov	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e023      	b.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	212c      	movs	r1, #44	; 0x2c
 8001254:	fb01 f303 	mul.w	r3, r1, r3
 8001258:	4413      	add	r3, r2
 800125a:	3361      	adds	r3, #97	; 0x61
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d119      	bne.n	8001296 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	212c      	movs	r1, #44	; 0x2c
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	4413      	add	r3, r2
 800126e:	335c      	adds	r3, #92	; 0x5c
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	202c      	movs	r0, #44	; 0x2c
 800127a:	fb00 f303 	mul.w	r3, r0, r3
 800127e:	440b      	add	r3, r1
 8001280:	335c      	adds	r3, #92	; 0x5c
 8001282:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	212c      	movs	r1, #44	; 0x2c
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	3360      	adds	r3, #96	; 0x60
 8001292:	2204      	movs	r2, #4
 8001294:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	015a      	lsls	r2, r3, #5
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012a2:	461a      	mov	r2, r3
 80012a4:	2302      	movs	r3, #2
 80012a6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b2d9      	uxtb	r1, r3
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	202c      	movs	r0, #44	; 0x2c
 80012b2:	fb00 f303 	mul.w	r3, r0, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	3360      	adds	r3, #96	; 0x60
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f001 f8b7 	bl	8002432 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80012c4:	e061      	b.n	800138a <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d156      	bne.n	800138a <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	333f      	adds	r3, #63	; 0x3f
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d111      	bne.n	8001314 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	335c      	adds	r3, #92	; 0x5c
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fe39 	bl	8001f84 <USB_HC_Halt>
 8001312:	e031      	b.n	8001378 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	fb01 f303 	mul.w	r3, r1, r3
 800131e:	4413      	add	r3, r2
 8001320:	333f      	adds	r3, #63	; 0x3f
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	212c      	movs	r1, #44	; 0x2c
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	4413      	add	r3, r2
 8001334:	333f      	adds	r3, #63	; 0x3f
 8001336:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001338:	2b02      	cmp	r3, #2
 800133a:	d11d      	bne.n	8001378 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	212c      	movs	r1, #44	; 0x2c
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	4413      	add	r3, r2
 8001348:	335c      	adds	r3, #92	; 0x5c
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d110      	bne.n	8001378 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	212c      	movs	r1, #44	; 0x2c
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	4413      	add	r3, r2
 8001362:	3361      	adds	r3, #97	; 0x61
 8001364:	2203      	movs	r2, #3
 8001366:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe06 	bl	8001f84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	015a      	lsls	r2, r3, #5
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4413      	add	r3, r2
 8001380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001384:	461a      	mov	r2, r3
 8001386:	2310      	movs	r3, #16
 8001388:	6093      	str	r3, [r2, #8]
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b088      	sub	sp, #32
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	015a      	lsls	r2, r3, #5
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d11a      	bne.n	80013f8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ce:	461a      	mov	r2, r3
 80013d0:	2304      	movs	r3, #4
 80013d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	3361      	adds	r3, #97	; 0x61
 80013e2:	2206      	movs	r2, #6
 80013e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 fdc7 	bl	8001f84 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80013f6:	e331      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4413      	add	r3, r2
 8001400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	2b20      	cmp	r3, #32
 800140c:	d12e      	bne.n	800146c <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4413      	add	r3, r2
 8001416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141a:	461a      	mov	r2, r3
 800141c:	2320      	movs	r3, #32
 800141e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	212c      	movs	r1, #44	; 0x2c
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	4413      	add	r3, r2
 800142c:	333d      	adds	r3, #61	; 0x3d
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	f040 8313 	bne.w	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	212c      	movs	r1, #44	; 0x2c
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	4413      	add	r3, r2
 8001442:	333d      	adds	r3, #61	; 0x3d
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	212c      	movs	r1, #44	; 0x2c
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	4413      	add	r3, r2
 8001454:	3360      	adds	r3, #96	; 0x60
 8001456:	2202      	movs	r2, #2
 8001458:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fd8d 	bl	8001f84 <USB_HC_Halt>
}
 800146a:	e2f7      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4413      	add	r3, r2
 8001474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800147e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001482:	d112      	bne.n	80014aa <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	4413      	add	r3, r2
 800148c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001490:	461a      	mov	r2, r3
 8001492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001496:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fd6e 	bl	8001f84 <USB_HC_Halt>
}
 80014a8:	e2d8      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d140      	bne.n	8001542 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	335c      	adds	r3, #92	; 0x5c
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e4:	2b40      	cmp	r3, #64	; 0x40
 80014e6:	d111      	bne.n	800150c <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	333d      	adds	r3, #61	; 0x3d
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4413      	add	r3, r2
 8001502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001506:	461a      	mov	r2, r3
 8001508:	2340      	movs	r3, #64	; 0x40
 800150a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	015a      	lsls	r2, r3, #5
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	4413      	add	r3, r2
 8001514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001518:	461a      	mov	r2, r3
 800151a:	2301      	movs	r3, #1
 800151c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	212c      	movs	r1, #44	; 0x2c
 8001524:	fb01 f303 	mul.w	r3, r1, r3
 8001528:	4413      	add	r3, r2
 800152a:	3361      	adds	r3, #97	; 0x61
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fd22 	bl	8001f84 <USB_HC_Halt>
}
 8001540:	e28c      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001554:	2b40      	cmp	r3, #64	; 0x40
 8001556:	d12c      	bne.n	80015b2 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	212c      	movs	r1, #44	; 0x2c
 800155e:	fb01 f303 	mul.w	r3, r1, r3
 8001562:	4413      	add	r3, r2
 8001564:	3361      	adds	r3, #97	; 0x61
 8001566:	2204      	movs	r2, #4
 8001568:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	333d      	adds	r3, #61	; 0x3d
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	335c      	adds	r3, #92	; 0x5c
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fcf3 	bl	8001f84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015aa:	461a      	mov	r2, r3
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	6093      	str	r3, [r2, #8]
}
 80015b0:	e254      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d11a      	bne.n	80015fe <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d4:	461a      	mov	r2, r3
 80015d6:	2308      	movs	r3, #8
 80015d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	212c      	movs	r1, #44	; 0x2c
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3361      	adds	r3, #97	; 0x61
 80015e8:	2205      	movs	r2, #5
 80015ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fcc4 	bl	8001f84 <USB_HC_Halt>
}
 80015fc:	e22e      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4413      	add	r3, r2
 8001606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b10      	cmp	r3, #16
 8001612:	d140      	bne.n	8001696 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	335c      	adds	r3, #92	; 0x5c
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	212c      	movs	r1, #44	; 0x2c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	3361      	adds	r3, #97	; 0x61
 8001634:	2203      	movs	r2, #3
 8001636:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	212c      	movs	r1, #44	; 0x2c
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	4413      	add	r3, r2
 8001644:	333d      	adds	r3, #61	; 0x3d
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d112      	bne.n	8001672 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	212c      	movs	r1, #44	; 0x2c
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	4413      	add	r3, r2
 8001658:	333c      	adds	r3, #60	; 0x3c
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	212c      	movs	r1, #44	; 0x2c
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	333d      	adds	r3, #61	; 0x3d
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fc81 	bl	8001f84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4413      	add	r3, r2
 800168a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168e:	461a      	mov	r2, r3
 8001690:	2310      	movs	r3, #16
 8001692:	6093      	str	r3, [r2, #8]
}
 8001694:	e1e2      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4413      	add	r3, r2
 800169e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b80      	cmp	r3, #128	; 0x80
 80016aa:	d164      	bne.n	8001776 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d111      	bne.n	80016d8 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	212c      	movs	r1, #44	; 0x2c
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3361      	adds	r3, #97	; 0x61
 80016c2:	2206      	movs	r2, #6
 80016c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fc57 	bl	8001f84 <USB_HC_Halt>
 80016d6:	e044      	b.n	8001762 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	335c      	adds	r3, #92	; 0x5c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	202c      	movs	r0, #44	; 0x2c
 80016f0:	fb00 f303 	mul.w	r3, r0, r3
 80016f4:	440b      	add	r3, r1
 80016f6:	335c      	adds	r3, #92	; 0x5c
 80016f8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	335c      	adds	r3, #92	; 0x5c
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d920      	bls.n	8001750 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	335c      	adds	r3, #92	; 0x5c
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3360      	adds	r3, #96	; 0x60
 800172e:	2204      	movs	r2, #4
 8001730:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	b2d9      	uxtb	r1, r3
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	202c      	movs	r0, #44	; 0x2c
 800173c:	fb00 f303 	mul.w	r3, r0, r3
 8001740:	4413      	add	r3, r2
 8001742:	3360      	adds	r3, #96	; 0x60
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fe72 	bl	8002432 <HAL_HCD_HC_NotifyURBChange_Callback>
 800174e:	e008      	b.n	8001762 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	212c      	movs	r1, #44	; 0x2c
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	3360      	adds	r3, #96	; 0x60
 800175e:	2202      	movs	r2, #2
 8001760:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4413      	add	r3, r2
 800176a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800176e:	461a      	mov	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	6093      	str	r3, [r2, #8]
}
 8001774:	e172      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4413      	add	r3, r2
 800177e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d11b      	bne.n	80017c6 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	3361      	adds	r3, #97	; 0x61
 800179c:	2208      	movs	r2, #8
 800179e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fbea 	bl	8001f84 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017bc:	461a      	mov	r2, r3
 80017be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c2:	6093      	str	r3, [r2, #8]
}
 80017c4:	e14a      	b.n	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b02      	cmp	r3, #2
 80017da:	f040 813f 	bne.w	8001a5c <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	212c      	movs	r1, #44	; 0x2c
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	3361      	adds	r3, #97	; 0x61
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d17d      	bne.n	80018ee <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3360      	adds	r3, #96	; 0x60
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	212c      	movs	r1, #44	; 0x2c
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	333f      	adds	r3, #63	; 0x3f
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b02      	cmp	r3, #2
 8001816:	d00a      	beq.n	800182e <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	212c      	movs	r1, #44	; 0x2c
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	333f      	adds	r3, #63	; 0x3f
 8001826:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001828:	2b03      	cmp	r3, #3
 800182a:	f040 8100 	bne.w	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d113      	bne.n	800185e <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3355      	adds	r3, #85	; 0x55
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	f083 0301 	eor.w	r3, r3, #1
 800184a:	b2d8      	uxtb	r0, r3
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3355      	adds	r3, #85	; 0x55
 800185a:	4602      	mov	r2, r0
 800185c:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b01      	cmp	r3, #1
 8001864:	f040 80e3 	bne.w	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	334c      	adds	r3, #76	; 0x4c
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80d8 	beq.w	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	334c      	adds	r3, #76	; 0x4c
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	202c      	movs	r0, #44	; 0x2c
 8001894:	fb00 f202 	mul.w	r2, r0, r2
 8001898:	440a      	add	r2, r1
 800189a:	3240      	adds	r2, #64	; 0x40
 800189c:	8812      	ldrh	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	3b01      	subs	r3, #1
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	202c      	movs	r0, #44	; 0x2c
 80018a8:	fb00 f202 	mul.w	r2, r0, r2
 80018ac:	440a      	add	r2, r1
 80018ae:	3240      	adds	r2, #64	; 0x40
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80b5 	beq.w	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	212c      	movs	r1, #44	; 0x2c
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	4413      	add	r3, r2
 80018d0:	3355      	adds	r3, #85	; 0x55
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2d8      	uxtb	r0, r3
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	212c      	movs	r1, #44	; 0x2c
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	3355      	adds	r3, #85	; 0x55
 80018e8:	4602      	mov	r2, r0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e09f      	b.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3361      	adds	r3, #97	; 0x61
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d109      	bne.n	8001916 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3360      	adds	r3, #96	; 0x60
 8001910:	2202      	movs	r2, #2
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e08b      	b.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3361      	adds	r3, #97	; 0x61
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d109      	bne.n	800193e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3360      	adds	r3, #96	; 0x60
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e077      	b.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3361      	adds	r3, #97	; 0x61
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d109      	bne.n	8001966 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	212c      	movs	r1, #44	; 0x2c
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	4413      	add	r3, r2
 800195e:	3360      	adds	r3, #96	; 0x60
 8001960:	2205      	movs	r2, #5
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e063      	b.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	212c      	movs	r1, #44	; 0x2c
 800196c:	fb01 f303 	mul.w	r3, r1, r3
 8001970:	4413      	add	r3, r2
 8001972:	3361      	adds	r3, #97	; 0x61
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b06      	cmp	r3, #6
 8001978:	d009      	beq.n	800198e <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	212c      	movs	r1, #44	; 0x2c
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	4413      	add	r3, r2
 8001986:	3361      	adds	r3, #97	; 0x61
 8001988:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800198a:	2b08      	cmp	r3, #8
 800198c:	d14f      	bne.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	335c      	adds	r3, #92	; 0x5c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	202c      	movs	r0, #44	; 0x2c
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	440b      	add	r3, r1
 80019ac:	335c      	adds	r3, #92	; 0x5c
 80019ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	335c      	adds	r3, #92	; 0x5c
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d912      	bls.n	80019ea <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	335c      	adds	r3, #92	; 0x5c
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	2204      	movs	r2, #4
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e021      	b.n	8001a2e <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	015a      	lsls	r2, r3, #5
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	4413      	add	r3, r2
 8001a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a12:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a1a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	461a      	mov	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	015a      	lsls	r2, r3, #5
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	b2d9      	uxtb	r1, r3
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	202c      	movs	r0, #44	; 0x2c
 8001a4a:	fb00 f303 	mul.w	r3, r0, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	3360      	adds	r3, #96	; 0x60
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 fceb 	bl	8002432 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	0c5b      	lsrs	r3, r3, #17
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a98:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d004      	beq.n	8001aaa <HCD_RXQLVL_IRQHandler+0x46>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	f000 80a9 	beq.w	8001bfa <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001aa8:	e0aa      	b.n	8001c00 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a6 	beq.w	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3344      	adds	r3, #68	; 0x44
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 809b 	beq.w	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	212c      	movs	r1, #44	; 0x2c
 8001ace:	fb01 f303 	mul.w	r3, r1, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3350      	adds	r3, #80	; 0x50
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	441a      	add	r2, r3
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	202c      	movs	r0, #44	; 0x2c
 8001ae2:	fb00 f303 	mul.w	r3, r0, r3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	334c      	adds	r3, #76	; 0x4c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d87a      	bhi.n	8001be6 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	3344      	adds	r3, #68	; 0x44
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	b292      	uxth	r2, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f000 f977 	bl	8001dfc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3344      	adds	r3, #68	; 0x44
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	441a      	add	r2, r3
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	202c      	movs	r0, #44	; 0x2c
 8001b28:	fb00 f303 	mul.w	r3, r0, r3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3344      	adds	r3, #68	; 0x44
 8001b30:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3350      	adds	r3, #80	; 0x50
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	441a      	add	r2, r3
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	202c      	movs	r0, #44	; 0x2c
 8001b4c:	fb00 f303 	mul.w	r3, r0, r3
 8001b50:	440b      	add	r3, r1
 8001b52:	3350      	adds	r3, #80	; 0x50
 8001b54:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	0cdb      	lsrs	r3, r3, #19
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	212c      	movs	r1, #44	; 0x2c
 8001b72:	fb01 f303 	mul.w	r3, r1, r3
 8001b76:	4413      	add	r3, r2
 8001b78:	3340      	adds	r3, #64	; 0x40
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d13c      	bne.n	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d039      	beq.n	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001ba0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	015a      	lsls	r2, r3, #5
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	212c      	movs	r1, #44	; 0x2c
 8001bc2:	fb01 f303 	mul.w	r3, r1, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3354      	adds	r3, #84	; 0x54
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2d8      	uxtb	r0, r3
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3354      	adds	r3, #84	; 0x54
 8001be0:	4602      	mov	r2, r0
 8001be2:	701a      	strb	r2, [r3, #0]
      break;
 8001be4:	e00b      	b.n	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3360      	adds	r3, #96	; 0x60
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	701a      	strb	r2, [r3, #0]
      break;
 8001bf8:	e001      	b.n	8001bfe <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e000      	b.n	8001c00 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001bfe:	bf00      	nop
  }
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c34:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d10b      	bne.n	8001c58 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fbd5 	bl	80023fa <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d132      	bne.n	8001cc8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d126      	bne.n	8001cc2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d113      	bne.n	8001ca4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001c82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c86:	d106      	bne.n	8001c96 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f92d 	bl	8001eee <USB_InitFSLSPClkSel>
 8001c94:	e011      	b.n	8001cba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f926 	bl	8001eee <USB_InitFSLSPClkSel>
 8001ca2:	e00a      	b.n	8001cba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d106      	bne.n	8001cba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001cb8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fbc7 	bl	800244e <HAL_HCD_PortEnabled_Callback>
 8001cc0:	e002      	b.n	8001cc8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fbd1 	bl	800246a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d103      	bne.n	8001cda <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f043 0320 	orr.w	r3, r3, #32
 8001cd8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f043 0201 	orr.w	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 0201 	bic.w	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3301      	adds	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <USB_FlushTxFifo+0x64>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e01b      	b.n	8001d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	daf2      	bge.n	8001d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	019b      	lsls	r3, r3, #6
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <USB_FlushTxFifo+0x64>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e006      	b.n	8001d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b20      	cmp	r3, #32
 8001d88:	d0f0      	beq.n	8001d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	00030d40 	.word	0x00030d40

08001d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <USB_FlushRxFifo+0x5c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e018      	b.n	8001dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	daf2      	bge.n	8001da8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <USB_FlushRxFifo+0x5c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e006      	b.n	8001dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b10      	cmp	r3, #16
 8001de8:	d0f0      	beq.n	8001dcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	00030d40 	.word	0x00030d40

08001dfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b08b      	sub	sp, #44	; 0x2c
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
 8001e26:	e014      	b.n	8001e52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	601a      	str	r2, [r3, #0]
    pDest++;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3301      	adds	r3, #1
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	3301      	adds	r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	6a3a      	ldr	r2, [r7, #32]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3e6      	bcc.n	8001e28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8001e5a:	8bfb      	ldrh	r3, [r7, #30]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01e      	beq.n	8001e9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	701a      	strb	r2, [r3, #0]
      i++;
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3301      	adds	r3, #1
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8001e98:	8bfb      	ldrh	r3, [r7, #30]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ea      	bne.n	8001e74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	372c      	adds	r7, #44	; 0x2c
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0301 	and.w	r3, r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f0c:	f023 0303 	bic.w	r3, r3, #3
 8001f10:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f36:	461a      	mov	r2, r3
 8001f38:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001f3c:	6053      	str	r3, [r2, #4]
 8001f3e:	e009      	b.n	8001f54 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d106      	bne.n	8001f54 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f241 7370 	movw	r3, #6000	; 0x1770
 8001f52:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	b29b      	uxth	r3, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	015a      	lsls	r2, r3, #5
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0fdb      	lsrs	r3, r3, #31
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d104      	bne.n	8001fde <USB_HC_Halt+0x5a>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e0c8      	b.n	8002170 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <USB_HC_Halt+0x66>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d163      	bne.n	80020b2 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	015a      	lsls	r2, r3, #5
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	0151      	lsls	r1, r2, #5
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	440a      	add	r2, r1
 8002000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002008:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0320 	and.w	r3, r3, #32
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 80ab 	bne.w	800216e <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d133      	bne.n	800208c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	0151      	lsls	r1, r2, #5
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	440a      	add	r2, r1
 800203a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002042:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4413      	add	r3, r2
 800204c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	0151      	lsls	r1, r2, #5
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	440a      	add	r2, r1
 800205a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800205e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002062:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3301      	adds	r3, #1
 8002068:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002070:	d81d      	bhi.n	80020ae <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002088:	d0ec      	beq.n	8002064 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800208a:	e070      	b.n	800216e <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	0151      	lsls	r1, r2, #5
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	440a      	add	r2, r1
 80020a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80020ac:	e05f      	b.n	800216e <USB_HC_Halt+0x1ea>
            break;
 80020ae:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80020b0:	e05d      	b.n	800216e <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	0151      	lsls	r1, r2, #5
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	440a      	add	r2, r1
 80020c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020d0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d133      	bne.n	800214a <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	0151      	lsls	r1, r2, #5
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	440a      	add	r2, r1
 80020f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002100:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002120:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800212e:	d81d      	bhi.n	800216c <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002146:	d0ec      	beq.n	8002122 <USB_HC_Halt+0x19e>
 8002148:	e011      	b.n	800216e <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	0151      	lsls	r1, r2, #5
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	440a      	add	r2, r1
 8002160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e000      	b.n	800216e <USB_HC_Halt+0x1ea>
          break;
 800216c:	bf00      	nop
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3724      	adds	r7, #36	; 0x24
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fdbd 	bl	8001d10 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002196:	2110      	movs	r1, #16
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fdcb 	bl	8001d34 <USB_FlushTxFifo>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fdf7 	bl	8001d9c <USB_FlushRxFifo>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e01f      	b.n	80021fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d9dc      	bls.n	80021be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e034      	b.n	8002274 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002220:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002230:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	461a      	mov	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002250:	d80c      	bhi.n	800226c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002268:	d0ec      	beq.n	8002244 <USB_StopHost+0xc8>
 800226a:	e000      	b.n	800226e <USB_StopHost+0xf2>
        break;
 800226c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	3301      	adds	r3, #1
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	d9c7      	bls.n	800220a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002280:	461a      	mov	r2, r3
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002286:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff fd2c 	bl	8001cee <USB_EnableGlobalInt>

  return ret;
 8002296:	7ffb      	ldrb	r3, [r7, #31]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f804 	bl	80022c4 <USBH_HandleSof>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b0b      	cmp	r3, #11
 80022d4:	d10a      	bne.n	80022ec <USBH_HandleSof+0x28>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002304:	bf00      	nop
}
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002320:	bf00      	nop
}
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f883 	bl	8002486 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	4619      	mov	r1, r3
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f80b 	bl	80023a2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	795b      	ldrb	r3, [r3, #5]
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f805 	bl	80023a2 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80d      	bhi.n	80023d0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	33e0      	adds	r3, #224	; 0xe0
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	33e0      	adds	r3, #224	; 0xe0
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff57 	bl	80022a0 <USBH_LL_IncTimer>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff8f 	bl	800232c <USBH_LL_Connect>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff98 	bl	800235a <USBH_LL_Disconnect>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
 800243e:	4613      	mov	r3, r2
 8002440:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff49 	bl	80022f4 <USBH_LL_PortEnabled>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff49 	bl	8002310 <USBH_LL_PortDisabled>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc06 	bl	8000cae <HAL_HCD_Stop>
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f807 	bl	80024bc <USBH_Get_USB_Status>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80024b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d817      	bhi.n	8002500 <USBH_Get_USB_Status+0x44>
 80024d0:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <USBH_Get_USB_Status+0x1c>)
 80024d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d6:	bf00      	nop
 80024d8:	080024e9 	.word	0x080024e9
 80024dc:	080024ef 	.word	0x080024ef
 80024e0:	080024f5 	.word	0x080024f5
 80024e4:	080024fb 	.word	0x080024fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
    break;
 80024ec:	e00b      	b.n	8002506 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80024ee:	2302      	movs	r3, #2
 80024f0:	73fb      	strb	r3, [r7, #15]
    break;
 80024f2:	e008      	b.n	8002506 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
    break;
 80024f8:	e005      	b.n	8002506 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80024fa:	2302      	movs	r3, #2
 80024fc:	73fb      	strb	r3, [r7, #15]
    break;
 80024fe:	e002      	b.n	8002506 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8002500:	2302      	movs	r3, #2
 8002502:	73fb      	strb	r3, [r7, #15]
    break;
 8002504:	bf00      	nop
  }
  return usb_status;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <__errno>:
 8002514:	4b01      	ldr	r3, [pc, #4]	; (800251c <__errno+0x8>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000004 	.word	0x20000004

08002520 <__libc_init_array>:
 8002520:	b570      	push	{r4, r5, r6, lr}
 8002522:	4d0d      	ldr	r5, [pc, #52]	; (8002558 <__libc_init_array+0x38>)
 8002524:	4c0d      	ldr	r4, [pc, #52]	; (800255c <__libc_init_array+0x3c>)
 8002526:	1b64      	subs	r4, r4, r5
 8002528:	10a4      	asrs	r4, r4, #2
 800252a:	2600      	movs	r6, #0
 800252c:	42a6      	cmp	r6, r4
 800252e:	d109      	bne.n	8002544 <__libc_init_array+0x24>
 8002530:	4d0b      	ldr	r5, [pc, #44]	; (8002560 <__libc_init_array+0x40>)
 8002532:	4c0c      	ldr	r4, [pc, #48]	; (8002564 <__libc_init_array+0x44>)
 8002534:	f000 fc96 	bl	8002e64 <_init>
 8002538:	1b64      	subs	r4, r4, r5
 800253a:	10a4      	asrs	r4, r4, #2
 800253c:	2600      	movs	r6, #0
 800253e:	42a6      	cmp	r6, r4
 8002540:	d105      	bne.n	800254e <__libc_init_array+0x2e>
 8002542:	bd70      	pop	{r4, r5, r6, pc}
 8002544:	f855 3b04 	ldr.w	r3, [r5], #4
 8002548:	4798      	blx	r3
 800254a:	3601      	adds	r6, #1
 800254c:	e7ee      	b.n	800252c <__libc_init_array+0xc>
 800254e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002552:	4798      	blx	r3
 8002554:	3601      	adds	r6, #1
 8002556:	e7f2      	b.n	800253e <__libc_init_array+0x1e>
 8002558:	08002f78 	.word	0x08002f78
 800255c:	08002f78 	.word	0x08002f78
 8002560:	08002f78 	.word	0x08002f78
 8002564:	08002f7c 	.word	0x08002f7c

08002568 <_free_r>:
 8002568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800256a:	2900      	cmp	r1, #0
 800256c:	d044      	beq.n	80025f8 <_free_r+0x90>
 800256e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002572:	9001      	str	r0, [sp, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f1a1 0404 	sub.w	r4, r1, #4
 800257a:	bfb8      	it	lt
 800257c:	18e4      	addlt	r4, r4, r3
 800257e:	f000 f913 	bl	80027a8 <__malloc_lock>
 8002582:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <_free_r+0x94>)
 8002584:	9801      	ldr	r0, [sp, #4]
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	b933      	cbnz	r3, 8002598 <_free_r+0x30>
 800258a:	6063      	str	r3, [r4, #4]
 800258c:	6014      	str	r4, [r2, #0]
 800258e:	b003      	add	sp, #12
 8002590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002594:	f000 b90e 	b.w	80027b4 <__malloc_unlock>
 8002598:	42a3      	cmp	r3, r4
 800259a:	d908      	bls.n	80025ae <_free_r+0x46>
 800259c:	6825      	ldr	r5, [r4, #0]
 800259e:	1961      	adds	r1, r4, r5
 80025a0:	428b      	cmp	r3, r1
 80025a2:	bf01      	itttt	eq
 80025a4:	6819      	ldreq	r1, [r3, #0]
 80025a6:	685b      	ldreq	r3, [r3, #4]
 80025a8:	1949      	addeq	r1, r1, r5
 80025aa:	6021      	streq	r1, [r4, #0]
 80025ac:	e7ed      	b.n	800258a <_free_r+0x22>
 80025ae:	461a      	mov	r2, r3
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	b10b      	cbz	r3, 80025b8 <_free_r+0x50>
 80025b4:	42a3      	cmp	r3, r4
 80025b6:	d9fa      	bls.n	80025ae <_free_r+0x46>
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	1855      	adds	r5, r2, r1
 80025bc:	42a5      	cmp	r5, r4
 80025be:	d10b      	bne.n	80025d8 <_free_r+0x70>
 80025c0:	6824      	ldr	r4, [r4, #0]
 80025c2:	4421      	add	r1, r4
 80025c4:	1854      	adds	r4, r2, r1
 80025c6:	42a3      	cmp	r3, r4
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	d1e0      	bne.n	800258e <_free_r+0x26>
 80025cc:	681c      	ldr	r4, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	6053      	str	r3, [r2, #4]
 80025d2:	4421      	add	r1, r4
 80025d4:	6011      	str	r1, [r2, #0]
 80025d6:	e7da      	b.n	800258e <_free_r+0x26>
 80025d8:	d902      	bls.n	80025e0 <_free_r+0x78>
 80025da:	230c      	movs	r3, #12
 80025dc:	6003      	str	r3, [r0, #0]
 80025de:	e7d6      	b.n	800258e <_free_r+0x26>
 80025e0:	6825      	ldr	r5, [r4, #0]
 80025e2:	1961      	adds	r1, r4, r5
 80025e4:	428b      	cmp	r3, r1
 80025e6:	bf04      	itt	eq
 80025e8:	6819      	ldreq	r1, [r3, #0]
 80025ea:	685b      	ldreq	r3, [r3, #4]
 80025ec:	6063      	str	r3, [r4, #4]
 80025ee:	bf04      	itt	eq
 80025f0:	1949      	addeq	r1, r1, r5
 80025f2:	6021      	streq	r1, [r4, #0]
 80025f4:	6054      	str	r4, [r2, #4]
 80025f6:	e7ca      	b.n	800258e <_free_r+0x26>
 80025f8:	b003      	add	sp, #12
 80025fa:	bd30      	pop	{r4, r5, pc}
 80025fc:	200004c4 	.word	0x200004c4

08002600 <sbrk_aligned>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	4e0e      	ldr	r6, [pc, #56]	; (800263c <sbrk_aligned+0x3c>)
 8002604:	460c      	mov	r4, r1
 8002606:	6831      	ldr	r1, [r6, #0]
 8002608:	4605      	mov	r5, r0
 800260a:	b911      	cbnz	r1, 8002612 <sbrk_aligned+0x12>
 800260c:	f000 f88c 	bl	8002728 <_sbrk_r>
 8002610:	6030      	str	r0, [r6, #0]
 8002612:	4621      	mov	r1, r4
 8002614:	4628      	mov	r0, r5
 8002616:	f000 f887 	bl	8002728 <_sbrk_r>
 800261a:	1c43      	adds	r3, r0, #1
 800261c:	d00a      	beq.n	8002634 <sbrk_aligned+0x34>
 800261e:	1cc4      	adds	r4, r0, #3
 8002620:	f024 0403 	bic.w	r4, r4, #3
 8002624:	42a0      	cmp	r0, r4
 8002626:	d007      	beq.n	8002638 <sbrk_aligned+0x38>
 8002628:	1a21      	subs	r1, r4, r0
 800262a:	4628      	mov	r0, r5
 800262c:	f000 f87c 	bl	8002728 <_sbrk_r>
 8002630:	3001      	adds	r0, #1
 8002632:	d101      	bne.n	8002638 <sbrk_aligned+0x38>
 8002634:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002638:	4620      	mov	r0, r4
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	200004c8 	.word	0x200004c8

08002640 <_malloc_r>:
 8002640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002644:	1ccd      	adds	r5, r1, #3
 8002646:	f025 0503 	bic.w	r5, r5, #3
 800264a:	3508      	adds	r5, #8
 800264c:	2d0c      	cmp	r5, #12
 800264e:	bf38      	it	cc
 8002650:	250c      	movcc	r5, #12
 8002652:	2d00      	cmp	r5, #0
 8002654:	4607      	mov	r7, r0
 8002656:	db01      	blt.n	800265c <_malloc_r+0x1c>
 8002658:	42a9      	cmp	r1, r5
 800265a:	d905      	bls.n	8002668 <_malloc_r+0x28>
 800265c:	230c      	movs	r3, #12
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	2600      	movs	r6, #0
 8002662:	4630      	mov	r0, r6
 8002664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002668:	4e2e      	ldr	r6, [pc, #184]	; (8002724 <_malloc_r+0xe4>)
 800266a:	f000 f89d 	bl	80027a8 <__malloc_lock>
 800266e:	6833      	ldr	r3, [r6, #0]
 8002670:	461c      	mov	r4, r3
 8002672:	bb34      	cbnz	r4, 80026c2 <_malloc_r+0x82>
 8002674:	4629      	mov	r1, r5
 8002676:	4638      	mov	r0, r7
 8002678:	f7ff ffc2 	bl	8002600 <sbrk_aligned>
 800267c:	1c43      	adds	r3, r0, #1
 800267e:	4604      	mov	r4, r0
 8002680:	d14d      	bne.n	800271e <_malloc_r+0xde>
 8002682:	6834      	ldr	r4, [r6, #0]
 8002684:	4626      	mov	r6, r4
 8002686:	2e00      	cmp	r6, #0
 8002688:	d140      	bne.n	800270c <_malloc_r+0xcc>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	4631      	mov	r1, r6
 800268e:	4638      	mov	r0, r7
 8002690:	eb04 0803 	add.w	r8, r4, r3
 8002694:	f000 f848 	bl	8002728 <_sbrk_r>
 8002698:	4580      	cmp	r8, r0
 800269a:	d13a      	bne.n	8002712 <_malloc_r+0xd2>
 800269c:	6821      	ldr	r1, [r4, #0]
 800269e:	3503      	adds	r5, #3
 80026a0:	1a6d      	subs	r5, r5, r1
 80026a2:	f025 0503 	bic.w	r5, r5, #3
 80026a6:	3508      	adds	r5, #8
 80026a8:	2d0c      	cmp	r5, #12
 80026aa:	bf38      	it	cc
 80026ac:	250c      	movcc	r5, #12
 80026ae:	4629      	mov	r1, r5
 80026b0:	4638      	mov	r0, r7
 80026b2:	f7ff ffa5 	bl	8002600 <sbrk_aligned>
 80026b6:	3001      	adds	r0, #1
 80026b8:	d02b      	beq.n	8002712 <_malloc_r+0xd2>
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	442b      	add	r3, r5
 80026be:	6023      	str	r3, [r4, #0]
 80026c0:	e00e      	b.n	80026e0 <_malloc_r+0xa0>
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	1b52      	subs	r2, r2, r5
 80026c6:	d41e      	bmi.n	8002706 <_malloc_r+0xc6>
 80026c8:	2a0b      	cmp	r2, #11
 80026ca:	d916      	bls.n	80026fa <_malloc_r+0xba>
 80026cc:	1961      	adds	r1, r4, r5
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	6025      	str	r5, [r4, #0]
 80026d2:	bf18      	it	ne
 80026d4:	6059      	strne	r1, [r3, #4]
 80026d6:	6863      	ldr	r3, [r4, #4]
 80026d8:	bf08      	it	eq
 80026da:	6031      	streq	r1, [r6, #0]
 80026dc:	5162      	str	r2, [r4, r5]
 80026de:	604b      	str	r3, [r1, #4]
 80026e0:	4638      	mov	r0, r7
 80026e2:	f104 060b 	add.w	r6, r4, #11
 80026e6:	f000 f865 	bl	80027b4 <__malloc_unlock>
 80026ea:	f026 0607 	bic.w	r6, r6, #7
 80026ee:	1d23      	adds	r3, r4, #4
 80026f0:	1af2      	subs	r2, r6, r3
 80026f2:	d0b6      	beq.n	8002662 <_malloc_r+0x22>
 80026f4:	1b9b      	subs	r3, r3, r6
 80026f6:	50a3      	str	r3, [r4, r2]
 80026f8:	e7b3      	b.n	8002662 <_malloc_r+0x22>
 80026fa:	6862      	ldr	r2, [r4, #4]
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	bf0c      	ite	eq
 8002700:	6032      	streq	r2, [r6, #0]
 8002702:	605a      	strne	r2, [r3, #4]
 8002704:	e7ec      	b.n	80026e0 <_malloc_r+0xa0>
 8002706:	4623      	mov	r3, r4
 8002708:	6864      	ldr	r4, [r4, #4]
 800270a:	e7b2      	b.n	8002672 <_malloc_r+0x32>
 800270c:	4634      	mov	r4, r6
 800270e:	6876      	ldr	r6, [r6, #4]
 8002710:	e7b9      	b.n	8002686 <_malloc_r+0x46>
 8002712:	230c      	movs	r3, #12
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4638      	mov	r0, r7
 8002718:	f000 f84c 	bl	80027b4 <__malloc_unlock>
 800271c:	e7a1      	b.n	8002662 <_malloc_r+0x22>
 800271e:	6025      	str	r5, [r4, #0]
 8002720:	e7de      	b.n	80026e0 <_malloc_r+0xa0>
 8002722:	bf00      	nop
 8002724:	200004c4 	.word	0x200004c4

08002728 <_sbrk_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4d06      	ldr	r5, [pc, #24]	; (8002744 <_sbrk_r+0x1c>)
 800272c:	2300      	movs	r3, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	602b      	str	r3, [r5, #0]
 8002734:	f7fe f92a 	bl	800098c <_sbrk>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d102      	bne.n	8002742 <_sbrk_r+0x1a>
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	b103      	cbz	r3, 8002742 <_sbrk_r+0x1a>
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	200004cc 	.word	0x200004cc

08002748 <siprintf>:
 8002748:	b40e      	push	{r1, r2, r3}
 800274a:	b500      	push	{lr}
 800274c:	b09c      	sub	sp, #112	; 0x70
 800274e:	ab1d      	add	r3, sp, #116	; 0x74
 8002750:	9002      	str	r0, [sp, #8]
 8002752:	9006      	str	r0, [sp, #24]
 8002754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <siprintf+0x38>)
 800275a:	9107      	str	r1, [sp, #28]
 800275c:	9104      	str	r1, [sp, #16]
 800275e:	4909      	ldr	r1, [pc, #36]	; (8002784 <siprintf+0x3c>)
 8002760:	f853 2b04 	ldr.w	r2, [r3], #4
 8002764:	9105      	str	r1, [sp, #20]
 8002766:	6800      	ldr	r0, [r0, #0]
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	a902      	add	r1, sp, #8
 800276c:	f000 f884 	bl	8002878 <_svfiprintf_r>
 8002770:	9b02      	ldr	r3, [sp, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	b01c      	add	sp, #112	; 0x70
 8002778:	f85d eb04 	ldr.w	lr, [sp], #4
 800277c:	b003      	add	sp, #12
 800277e:	4770      	bx	lr
 8002780:	20000004 	.word	0x20000004
 8002784:	ffff0208 	.word	0xffff0208

08002788 <strcat>:
 8002788:	b510      	push	{r4, lr}
 800278a:	4602      	mov	r2, r0
 800278c:	7814      	ldrb	r4, [r2, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	3201      	adds	r2, #1
 8002792:	2c00      	cmp	r4, #0
 8002794:	d1fa      	bne.n	800278c <strcat+0x4>
 8002796:	3b01      	subs	r3, #1
 8002798:	f811 2b01 	ldrb.w	r2, [r1], #1
 800279c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	d1f9      	bne.n	8002798 <strcat+0x10>
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <__malloc_lock>:
 80027a8:	4801      	ldr	r0, [pc, #4]	; (80027b0 <__malloc_lock+0x8>)
 80027aa:	f000 baf9 	b.w	8002da0 <__retarget_lock_acquire_recursive>
 80027ae:	bf00      	nop
 80027b0:	200004d0 	.word	0x200004d0

080027b4 <__malloc_unlock>:
 80027b4:	4801      	ldr	r0, [pc, #4]	; (80027bc <__malloc_unlock+0x8>)
 80027b6:	f000 baf4 	b.w	8002da2 <__retarget_lock_release_recursive>
 80027ba:	bf00      	nop
 80027bc:	200004d0 	.word	0x200004d0

080027c0 <__ssputs_r>:
 80027c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c4:	688e      	ldr	r6, [r1, #8]
 80027c6:	429e      	cmp	r6, r3
 80027c8:	4682      	mov	sl, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4690      	mov	r8, r2
 80027ce:	461f      	mov	r7, r3
 80027d0:	d838      	bhi.n	8002844 <__ssputs_r+0x84>
 80027d2:	898a      	ldrh	r2, [r1, #12]
 80027d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027d8:	d032      	beq.n	8002840 <__ssputs_r+0x80>
 80027da:	6825      	ldr	r5, [r4, #0]
 80027dc:	6909      	ldr	r1, [r1, #16]
 80027de:	eba5 0901 	sub.w	r9, r5, r1
 80027e2:	6965      	ldr	r5, [r4, #20]
 80027e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80027ec:	3301      	adds	r3, #1
 80027ee:	444b      	add	r3, r9
 80027f0:	106d      	asrs	r5, r5, #1
 80027f2:	429d      	cmp	r5, r3
 80027f4:	bf38      	it	cc
 80027f6:	461d      	movcc	r5, r3
 80027f8:	0553      	lsls	r3, r2, #21
 80027fa:	d531      	bpl.n	8002860 <__ssputs_r+0xa0>
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7ff ff1f 	bl	8002640 <_malloc_r>
 8002802:	4606      	mov	r6, r0
 8002804:	b950      	cbnz	r0, 800281c <__ssputs_r+0x5c>
 8002806:	230c      	movs	r3, #12
 8002808:	f8ca 3000 	str.w	r3, [sl]
 800280c:	89a3      	ldrh	r3, [r4, #12]
 800280e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002812:	81a3      	strh	r3, [r4, #12]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800281c:	6921      	ldr	r1, [r4, #16]
 800281e:	464a      	mov	r2, r9
 8002820:	f000 fac0 	bl	8002da4 <memcpy>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	81a3      	strh	r3, [r4, #12]
 8002830:	6126      	str	r6, [r4, #16]
 8002832:	6165      	str	r5, [r4, #20]
 8002834:	444e      	add	r6, r9
 8002836:	eba5 0509 	sub.w	r5, r5, r9
 800283a:	6026      	str	r6, [r4, #0]
 800283c:	60a5      	str	r5, [r4, #8]
 800283e:	463e      	mov	r6, r7
 8002840:	42be      	cmp	r6, r7
 8002842:	d900      	bls.n	8002846 <__ssputs_r+0x86>
 8002844:	463e      	mov	r6, r7
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	4632      	mov	r2, r6
 800284a:	4641      	mov	r1, r8
 800284c:	f000 fab8 	bl	8002dc0 <memmove>
 8002850:	68a3      	ldr	r3, [r4, #8]
 8002852:	1b9b      	subs	r3, r3, r6
 8002854:	60a3      	str	r3, [r4, #8]
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	4433      	add	r3, r6
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	2000      	movs	r0, #0
 800285e:	e7db      	b.n	8002818 <__ssputs_r+0x58>
 8002860:	462a      	mov	r2, r5
 8002862:	f000 fac7 	bl	8002df4 <_realloc_r>
 8002866:	4606      	mov	r6, r0
 8002868:	2800      	cmp	r0, #0
 800286a:	d1e1      	bne.n	8002830 <__ssputs_r+0x70>
 800286c:	6921      	ldr	r1, [r4, #16]
 800286e:	4650      	mov	r0, sl
 8002870:	f7ff fe7a 	bl	8002568 <_free_r>
 8002874:	e7c7      	b.n	8002806 <__ssputs_r+0x46>
	...

08002878 <_svfiprintf_r>:
 8002878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287c:	4698      	mov	r8, r3
 800287e:	898b      	ldrh	r3, [r1, #12]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	b09d      	sub	sp, #116	; 0x74
 8002884:	4607      	mov	r7, r0
 8002886:	460d      	mov	r5, r1
 8002888:	4614      	mov	r4, r2
 800288a:	d50e      	bpl.n	80028aa <_svfiprintf_r+0x32>
 800288c:	690b      	ldr	r3, [r1, #16]
 800288e:	b963      	cbnz	r3, 80028aa <_svfiprintf_r+0x32>
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	f7ff fed5 	bl	8002640 <_malloc_r>
 8002896:	6028      	str	r0, [r5, #0]
 8002898:	6128      	str	r0, [r5, #16]
 800289a:	b920      	cbnz	r0, 80028a6 <_svfiprintf_r+0x2e>
 800289c:	230c      	movs	r3, #12
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	e0d1      	b.n	8002a4a <_svfiprintf_r+0x1d2>
 80028a6:	2340      	movs	r3, #64	; 0x40
 80028a8:	616b      	str	r3, [r5, #20]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9309      	str	r3, [sp, #36]	; 0x24
 80028ae:	2320      	movs	r3, #32
 80028b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80028b8:	2330      	movs	r3, #48	; 0x30
 80028ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002a64 <_svfiprintf_r+0x1ec>
 80028be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c2:	f04f 0901 	mov.w	r9, #1
 80028c6:	4623      	mov	r3, r4
 80028c8:	469a      	mov	sl, r3
 80028ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028ce:	b10a      	cbz	r2, 80028d4 <_svfiprintf_r+0x5c>
 80028d0:	2a25      	cmp	r2, #37	; 0x25
 80028d2:	d1f9      	bne.n	80028c8 <_svfiprintf_r+0x50>
 80028d4:	ebba 0b04 	subs.w	fp, sl, r4
 80028d8:	d00b      	beq.n	80028f2 <_svfiprintf_r+0x7a>
 80028da:	465b      	mov	r3, fp
 80028dc:	4622      	mov	r2, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	4638      	mov	r0, r7
 80028e2:	f7ff ff6d 	bl	80027c0 <__ssputs_r>
 80028e6:	3001      	adds	r0, #1
 80028e8:	f000 80aa 	beq.w	8002a40 <_svfiprintf_r+0x1c8>
 80028ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ee:	445a      	add	r2, fp
 80028f0:	9209      	str	r2, [sp, #36]	; 0x24
 80028f2:	f89a 3000 	ldrb.w	r3, [sl]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80a2 	beq.w	8002a40 <_svfiprintf_r+0x1c8>
 80028fc:	2300      	movs	r3, #0
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002906:	f10a 0a01 	add.w	sl, sl, #1
 800290a:	9304      	str	r3, [sp, #16]
 800290c:	9307      	str	r3, [sp, #28]
 800290e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002912:	931a      	str	r3, [sp, #104]	; 0x68
 8002914:	4654      	mov	r4, sl
 8002916:	2205      	movs	r2, #5
 8002918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800291c:	4851      	ldr	r0, [pc, #324]	; (8002a64 <_svfiprintf_r+0x1ec>)
 800291e:	f7fd fc67 	bl	80001f0 <memchr>
 8002922:	9a04      	ldr	r2, [sp, #16]
 8002924:	b9d8      	cbnz	r0, 800295e <_svfiprintf_r+0xe6>
 8002926:	06d0      	lsls	r0, r2, #27
 8002928:	bf44      	itt	mi
 800292a:	2320      	movmi	r3, #32
 800292c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002930:	0711      	lsls	r1, r2, #28
 8002932:	bf44      	itt	mi
 8002934:	232b      	movmi	r3, #43	; 0x2b
 8002936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800293a:	f89a 3000 	ldrb.w	r3, [sl]
 800293e:	2b2a      	cmp	r3, #42	; 0x2a
 8002940:	d015      	beq.n	800296e <_svfiprintf_r+0xf6>
 8002942:	9a07      	ldr	r2, [sp, #28]
 8002944:	4654      	mov	r4, sl
 8002946:	2000      	movs	r0, #0
 8002948:	f04f 0c0a 	mov.w	ip, #10
 800294c:	4621      	mov	r1, r4
 800294e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002952:	3b30      	subs	r3, #48	; 0x30
 8002954:	2b09      	cmp	r3, #9
 8002956:	d94e      	bls.n	80029f6 <_svfiprintf_r+0x17e>
 8002958:	b1b0      	cbz	r0, 8002988 <_svfiprintf_r+0x110>
 800295a:	9207      	str	r2, [sp, #28]
 800295c:	e014      	b.n	8002988 <_svfiprintf_r+0x110>
 800295e:	eba0 0308 	sub.w	r3, r0, r8
 8002962:	fa09 f303 	lsl.w	r3, r9, r3
 8002966:	4313      	orrs	r3, r2
 8002968:	9304      	str	r3, [sp, #16]
 800296a:	46a2      	mov	sl, r4
 800296c:	e7d2      	b.n	8002914 <_svfiprintf_r+0x9c>
 800296e:	9b03      	ldr	r3, [sp, #12]
 8002970:	1d19      	adds	r1, r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	9103      	str	r1, [sp, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	bfbb      	ittet	lt
 800297a:	425b      	neglt	r3, r3
 800297c:	f042 0202 	orrlt.w	r2, r2, #2
 8002980:	9307      	strge	r3, [sp, #28]
 8002982:	9307      	strlt	r3, [sp, #28]
 8002984:	bfb8      	it	lt
 8002986:	9204      	strlt	r2, [sp, #16]
 8002988:	7823      	ldrb	r3, [r4, #0]
 800298a:	2b2e      	cmp	r3, #46	; 0x2e
 800298c:	d10c      	bne.n	80029a8 <_svfiprintf_r+0x130>
 800298e:	7863      	ldrb	r3, [r4, #1]
 8002990:	2b2a      	cmp	r3, #42	; 0x2a
 8002992:	d135      	bne.n	8002a00 <_svfiprintf_r+0x188>
 8002994:	9b03      	ldr	r3, [sp, #12]
 8002996:	1d1a      	adds	r2, r3, #4
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	9203      	str	r2, [sp, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bfb8      	it	lt
 80029a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80029a4:	3402      	adds	r4, #2
 80029a6:	9305      	str	r3, [sp, #20]
 80029a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002a74 <_svfiprintf_r+0x1fc>
 80029ac:	7821      	ldrb	r1, [r4, #0]
 80029ae:	2203      	movs	r2, #3
 80029b0:	4650      	mov	r0, sl
 80029b2:	f7fd fc1d 	bl	80001f0 <memchr>
 80029b6:	b140      	cbz	r0, 80029ca <_svfiprintf_r+0x152>
 80029b8:	2340      	movs	r3, #64	; 0x40
 80029ba:	eba0 000a 	sub.w	r0, r0, sl
 80029be:	fa03 f000 	lsl.w	r0, r3, r0
 80029c2:	9b04      	ldr	r3, [sp, #16]
 80029c4:	4303      	orrs	r3, r0
 80029c6:	3401      	adds	r4, #1
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029ce:	4826      	ldr	r0, [pc, #152]	; (8002a68 <_svfiprintf_r+0x1f0>)
 80029d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d4:	2206      	movs	r2, #6
 80029d6:	f7fd fc0b 	bl	80001f0 <memchr>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d038      	beq.n	8002a50 <_svfiprintf_r+0x1d8>
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <_svfiprintf_r+0x1f4>)
 80029e0:	bb1b      	cbnz	r3, 8002a2a <_svfiprintf_r+0x1b2>
 80029e2:	9b03      	ldr	r3, [sp, #12]
 80029e4:	3307      	adds	r3, #7
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	3308      	adds	r3, #8
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	4433      	add	r3, r6
 80029f2:	9309      	str	r3, [sp, #36]	; 0x24
 80029f4:	e767      	b.n	80028c6 <_svfiprintf_r+0x4e>
 80029f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80029fa:	460c      	mov	r4, r1
 80029fc:	2001      	movs	r0, #1
 80029fe:	e7a5      	b.n	800294c <_svfiprintf_r+0xd4>
 8002a00:	2300      	movs	r3, #0
 8002a02:	3401      	adds	r4, #1
 8002a04:	9305      	str	r3, [sp, #20]
 8002a06:	4619      	mov	r1, r3
 8002a08:	f04f 0c0a 	mov.w	ip, #10
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a12:	3a30      	subs	r2, #48	; 0x30
 8002a14:	2a09      	cmp	r2, #9
 8002a16:	d903      	bls.n	8002a20 <_svfiprintf_r+0x1a8>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0c5      	beq.n	80029a8 <_svfiprintf_r+0x130>
 8002a1c:	9105      	str	r1, [sp, #20]
 8002a1e:	e7c3      	b.n	80029a8 <_svfiprintf_r+0x130>
 8002a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a24:	4604      	mov	r4, r0
 8002a26:	2301      	movs	r3, #1
 8002a28:	e7f0      	b.n	8002a0c <_svfiprintf_r+0x194>
 8002a2a:	ab03      	add	r3, sp, #12
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	462a      	mov	r2, r5
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <_svfiprintf_r+0x1f8>)
 8002a32:	a904      	add	r1, sp, #16
 8002a34:	4638      	mov	r0, r7
 8002a36:	f3af 8000 	nop.w
 8002a3a:	1c42      	adds	r2, r0, #1
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	d1d6      	bne.n	80029ee <_svfiprintf_r+0x176>
 8002a40:	89ab      	ldrh	r3, [r5, #12]
 8002a42:	065b      	lsls	r3, r3, #25
 8002a44:	f53f af2c 	bmi.w	80028a0 <_svfiprintf_r+0x28>
 8002a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4a:	b01d      	add	sp, #116	; 0x74
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a50:	ab03      	add	r3, sp, #12
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	462a      	mov	r2, r5
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <_svfiprintf_r+0x1f8>)
 8002a58:	a904      	add	r1, sp, #16
 8002a5a:	4638      	mov	r0, r7
 8002a5c:	f000 f87a 	bl	8002b54 <_printf_i>
 8002a60:	e7eb      	b.n	8002a3a <_svfiprintf_r+0x1c2>
 8002a62:	bf00      	nop
 8002a64:	08002f45 	.word	0x08002f45
 8002a68:	08002f4f 	.word	0x08002f4f
 8002a6c:	00000000 	.word	0x00000000
 8002a70:	080027c1 	.word	0x080027c1
 8002a74:	08002f4b 	.word	0x08002f4b

08002a78 <_printf_common>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	4616      	mov	r6, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bfb8      	it	lt
 8002a8c:	4613      	movlt	r3, r2
 8002a8e:	6033      	str	r3, [r6, #0]
 8002a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a94:	4607      	mov	r7, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	b10a      	cbz	r2, 8002a9e <_printf_common+0x26>
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	0699      	lsls	r1, r3, #26
 8002aa2:	bf42      	ittt	mi
 8002aa4:	6833      	ldrmi	r3, [r6, #0]
 8002aa6:	3302      	addmi	r3, #2
 8002aa8:	6033      	strmi	r3, [r6, #0]
 8002aaa:	6825      	ldr	r5, [r4, #0]
 8002aac:	f015 0506 	ands.w	r5, r5, #6
 8002ab0:	d106      	bne.n	8002ac0 <_printf_common+0x48>
 8002ab2:	f104 0a19 	add.w	sl, r4, #25
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	6832      	ldr	r2, [r6, #0]
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	42ab      	cmp	r3, r5
 8002abe:	dc26      	bgt.n	8002b0e <_printf_common+0x96>
 8002ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac4:	1e13      	subs	r3, r2, #0
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	bf18      	it	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	0692      	lsls	r2, r2, #26
 8002ace:	d42b      	bmi.n	8002b28 <_printf_common+0xb0>
 8002ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	47c0      	blx	r8
 8002ada:	3001      	adds	r0, #1
 8002adc:	d01e      	beq.n	8002b1c <_printf_common+0xa4>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	68e5      	ldr	r5, [r4, #12]
 8002ae2:	6832      	ldr	r2, [r6, #0]
 8002ae4:	f003 0306 	and.w	r3, r3, #6
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	bf08      	it	eq
 8002aec:	1aad      	subeq	r5, r5, r2
 8002aee:	68a3      	ldr	r3, [r4, #8]
 8002af0:	6922      	ldr	r2, [r4, #16]
 8002af2:	bf0c      	ite	eq
 8002af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af8:	2500      	movne	r5, #0
 8002afa:	4293      	cmp	r3, r2
 8002afc:	bfc4      	itt	gt
 8002afe:	1a9b      	subgt	r3, r3, r2
 8002b00:	18ed      	addgt	r5, r5, r3
 8002b02:	2600      	movs	r6, #0
 8002b04:	341a      	adds	r4, #26
 8002b06:	42b5      	cmp	r5, r6
 8002b08:	d11a      	bne.n	8002b40 <_printf_common+0xc8>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e008      	b.n	8002b20 <_printf_common+0xa8>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4652      	mov	r2, sl
 8002b12:	4649      	mov	r1, r9
 8002b14:	4638      	mov	r0, r7
 8002b16:	47c0      	blx	r8
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d103      	bne.n	8002b24 <_printf_common+0xac>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7c6      	b.n	8002ab6 <_printf_common+0x3e>
 8002b28:	18e1      	adds	r1, r4, r3
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	2030      	movs	r0, #48	; 0x30
 8002b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b32:	4422      	add	r2, r4
 8002b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	e7c7      	b.n	8002ad0 <_printf_common+0x58>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4622      	mov	r2, r4
 8002b44:	4649      	mov	r1, r9
 8002b46:	4638      	mov	r0, r7
 8002b48:	47c0      	blx	r8
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d0e6      	beq.n	8002b1c <_printf_common+0xa4>
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7d9      	b.n	8002b06 <_printf_common+0x8e>
	...

08002b54 <_printf_i>:
 8002b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	7e0f      	ldrb	r7, [r1, #24]
 8002b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b5c:	2f78      	cmp	r7, #120	; 0x78
 8002b5e:	4691      	mov	r9, r2
 8002b60:	4680      	mov	r8, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	469a      	mov	sl, r3
 8002b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b6a:	d807      	bhi.n	8002b7c <_printf_i+0x28>
 8002b6c:	2f62      	cmp	r7, #98	; 0x62
 8002b6e:	d80a      	bhi.n	8002b86 <_printf_i+0x32>
 8002b70:	2f00      	cmp	r7, #0
 8002b72:	f000 80d8 	beq.w	8002d26 <_printf_i+0x1d2>
 8002b76:	2f58      	cmp	r7, #88	; 0x58
 8002b78:	f000 80a3 	beq.w	8002cc2 <_printf_i+0x16e>
 8002b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b84:	e03a      	b.n	8002bfc <_printf_i+0xa8>
 8002b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8a:	2b15      	cmp	r3, #21
 8002b8c:	d8f6      	bhi.n	8002b7c <_printf_i+0x28>
 8002b8e:	a101      	add	r1, pc, #4	; (adr r1, 8002b94 <_printf_i+0x40>)
 8002b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b94:	08002bed 	.word	0x08002bed
 8002b98:	08002c01 	.word	0x08002c01
 8002b9c:	08002b7d 	.word	0x08002b7d
 8002ba0:	08002b7d 	.word	0x08002b7d
 8002ba4:	08002b7d 	.word	0x08002b7d
 8002ba8:	08002b7d 	.word	0x08002b7d
 8002bac:	08002c01 	.word	0x08002c01
 8002bb0:	08002b7d 	.word	0x08002b7d
 8002bb4:	08002b7d 	.word	0x08002b7d
 8002bb8:	08002b7d 	.word	0x08002b7d
 8002bbc:	08002b7d 	.word	0x08002b7d
 8002bc0:	08002d0d 	.word	0x08002d0d
 8002bc4:	08002c31 	.word	0x08002c31
 8002bc8:	08002cef 	.word	0x08002cef
 8002bcc:	08002b7d 	.word	0x08002b7d
 8002bd0:	08002b7d 	.word	0x08002b7d
 8002bd4:	08002d2f 	.word	0x08002d2f
 8002bd8:	08002b7d 	.word	0x08002b7d
 8002bdc:	08002c31 	.word	0x08002c31
 8002be0:	08002b7d 	.word	0x08002b7d
 8002be4:	08002b7d 	.word	0x08002b7d
 8002be8:	08002cf7 	.word	0x08002cf7
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	602a      	str	r2, [r5, #0]
 8002bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0a3      	b.n	8002d48 <_printf_i+0x1f4>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	6829      	ldr	r1, [r5, #0]
 8002c04:	0606      	lsls	r6, r0, #24
 8002c06:	f101 0304 	add.w	r3, r1, #4
 8002c0a:	d50a      	bpl.n	8002c22 <_printf_i+0xce>
 8002c0c:	680e      	ldr	r6, [r1, #0]
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	2e00      	cmp	r6, #0
 8002c12:	da03      	bge.n	8002c1c <_printf_i+0xc8>
 8002c14:	232d      	movs	r3, #45	; 0x2d
 8002c16:	4276      	negs	r6, r6
 8002c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c1c:	485e      	ldr	r0, [pc, #376]	; (8002d98 <_printf_i+0x244>)
 8002c1e:	230a      	movs	r3, #10
 8002c20:	e019      	b.n	8002c56 <_printf_i+0x102>
 8002c22:	680e      	ldr	r6, [r1, #0]
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c2a:	bf18      	it	ne
 8002c2c:	b236      	sxthne	r6, r6
 8002c2e:	e7ef      	b.n	8002c10 <_printf_i+0xbc>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	6820      	ldr	r0, [r4, #0]
 8002c34:	1d19      	adds	r1, r3, #4
 8002c36:	6029      	str	r1, [r5, #0]
 8002c38:	0601      	lsls	r1, r0, #24
 8002c3a:	d501      	bpl.n	8002c40 <_printf_i+0xec>
 8002c3c:	681e      	ldr	r6, [r3, #0]
 8002c3e:	e002      	b.n	8002c46 <_printf_i+0xf2>
 8002c40:	0646      	lsls	r6, r0, #25
 8002c42:	d5fb      	bpl.n	8002c3c <_printf_i+0xe8>
 8002c44:	881e      	ldrh	r6, [r3, #0]
 8002c46:	4854      	ldr	r0, [pc, #336]	; (8002d98 <_printf_i+0x244>)
 8002c48:	2f6f      	cmp	r7, #111	; 0x6f
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2308      	moveq	r3, #8
 8002c4e:	230a      	movne	r3, #10
 8002c50:	2100      	movs	r1, #0
 8002c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c56:	6865      	ldr	r5, [r4, #4]
 8002c58:	60a5      	str	r5, [r4, #8]
 8002c5a:	2d00      	cmp	r5, #0
 8002c5c:	bfa2      	ittt	ge
 8002c5e:	6821      	ldrge	r1, [r4, #0]
 8002c60:	f021 0104 	bicge.w	r1, r1, #4
 8002c64:	6021      	strge	r1, [r4, #0]
 8002c66:	b90e      	cbnz	r6, 8002c6c <_printf_i+0x118>
 8002c68:	2d00      	cmp	r5, #0
 8002c6a:	d04d      	beq.n	8002d08 <_printf_i+0x1b4>
 8002c6c:	4615      	mov	r5, r2
 8002c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c72:	fb03 6711 	mls	r7, r3, r1, r6
 8002c76:	5dc7      	ldrb	r7, [r0, r7]
 8002c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c7c:	4637      	mov	r7, r6
 8002c7e:	42bb      	cmp	r3, r7
 8002c80:	460e      	mov	r6, r1
 8002c82:	d9f4      	bls.n	8002c6e <_printf_i+0x11a>
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d10b      	bne.n	8002ca0 <_printf_i+0x14c>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	07de      	lsls	r6, r3, #31
 8002c8c:	d508      	bpl.n	8002ca0 <_printf_i+0x14c>
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	6861      	ldr	r1, [r4, #4]
 8002c92:	4299      	cmp	r1, r3
 8002c94:	bfde      	ittt	le
 8002c96:	2330      	movle	r3, #48	; 0x30
 8002c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ca0:	1b52      	subs	r2, r2, r5
 8002ca2:	6122      	str	r2, [r4, #16]
 8002ca4:	f8cd a000 	str.w	sl, [sp]
 8002ca8:	464b      	mov	r3, r9
 8002caa:	aa03      	add	r2, sp, #12
 8002cac:	4621      	mov	r1, r4
 8002cae:	4640      	mov	r0, r8
 8002cb0:	f7ff fee2 	bl	8002a78 <_printf_common>
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d14c      	bne.n	8002d52 <_printf_i+0x1fe>
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cbc:	b004      	add	sp, #16
 8002cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc2:	4835      	ldr	r0, [pc, #212]	; (8002d98 <_printf_i+0x244>)
 8002cc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002cc8:	6829      	ldr	r1, [r5, #0]
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd0:	6029      	str	r1, [r5, #0]
 8002cd2:	061d      	lsls	r5, r3, #24
 8002cd4:	d514      	bpl.n	8002d00 <_printf_i+0x1ac>
 8002cd6:	07df      	lsls	r7, r3, #31
 8002cd8:	bf44      	itt	mi
 8002cda:	f043 0320 	orrmi.w	r3, r3, #32
 8002cde:	6023      	strmi	r3, [r4, #0]
 8002ce0:	b91e      	cbnz	r6, 8002cea <_printf_i+0x196>
 8002ce2:	6823      	ldr	r3, [r4, #0]
 8002ce4:	f023 0320 	bic.w	r3, r3, #32
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	2310      	movs	r3, #16
 8002cec:	e7b0      	b.n	8002c50 <_printf_i+0xfc>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f043 0320 	orr.w	r3, r3, #32
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	2378      	movs	r3, #120	; 0x78
 8002cf8:	4828      	ldr	r0, [pc, #160]	; (8002d9c <_printf_i+0x248>)
 8002cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cfe:	e7e3      	b.n	8002cc8 <_printf_i+0x174>
 8002d00:	0659      	lsls	r1, r3, #25
 8002d02:	bf48      	it	mi
 8002d04:	b2b6      	uxthmi	r6, r6
 8002d06:	e7e6      	b.n	8002cd6 <_printf_i+0x182>
 8002d08:	4615      	mov	r5, r2
 8002d0a:	e7bb      	b.n	8002c84 <_printf_i+0x130>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	6826      	ldr	r6, [r4, #0]
 8002d10:	6961      	ldr	r1, [r4, #20]
 8002d12:	1d18      	adds	r0, r3, #4
 8002d14:	6028      	str	r0, [r5, #0]
 8002d16:	0635      	lsls	r5, r6, #24
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	d501      	bpl.n	8002d20 <_printf_i+0x1cc>
 8002d1c:	6019      	str	r1, [r3, #0]
 8002d1e:	e002      	b.n	8002d26 <_printf_i+0x1d2>
 8002d20:	0670      	lsls	r0, r6, #25
 8002d22:	d5fb      	bpl.n	8002d1c <_printf_i+0x1c8>
 8002d24:	8019      	strh	r1, [r3, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	6123      	str	r3, [r4, #16]
 8002d2a:	4615      	mov	r5, r2
 8002d2c:	e7ba      	b.n	8002ca4 <_printf_i+0x150>
 8002d2e:	682b      	ldr	r3, [r5, #0]
 8002d30:	1d1a      	adds	r2, r3, #4
 8002d32:	602a      	str	r2, [r5, #0]
 8002d34:	681d      	ldr	r5, [r3, #0]
 8002d36:	6862      	ldr	r2, [r4, #4]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7fd fa58 	bl	80001f0 <memchr>
 8002d40:	b108      	cbz	r0, 8002d46 <_printf_i+0x1f2>
 8002d42:	1b40      	subs	r0, r0, r5
 8002d44:	6060      	str	r0, [r4, #4]
 8002d46:	6863      	ldr	r3, [r4, #4]
 8002d48:	6123      	str	r3, [r4, #16]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d50:	e7a8      	b.n	8002ca4 <_printf_i+0x150>
 8002d52:	6923      	ldr	r3, [r4, #16]
 8002d54:	462a      	mov	r2, r5
 8002d56:	4649      	mov	r1, r9
 8002d58:	4640      	mov	r0, r8
 8002d5a:	47d0      	blx	sl
 8002d5c:	3001      	adds	r0, #1
 8002d5e:	d0ab      	beq.n	8002cb8 <_printf_i+0x164>
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	079b      	lsls	r3, r3, #30
 8002d64:	d413      	bmi.n	8002d8e <_printf_i+0x23a>
 8002d66:	68e0      	ldr	r0, [r4, #12]
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	bfb8      	it	lt
 8002d6e:	4618      	movlt	r0, r3
 8002d70:	e7a4      	b.n	8002cbc <_printf_i+0x168>
 8002d72:	2301      	movs	r3, #1
 8002d74:	4632      	mov	r2, r6
 8002d76:	4649      	mov	r1, r9
 8002d78:	4640      	mov	r0, r8
 8002d7a:	47d0      	blx	sl
 8002d7c:	3001      	adds	r0, #1
 8002d7e:	d09b      	beq.n	8002cb8 <_printf_i+0x164>
 8002d80:	3501      	adds	r5, #1
 8002d82:	68e3      	ldr	r3, [r4, #12]
 8002d84:	9903      	ldr	r1, [sp, #12]
 8002d86:	1a5b      	subs	r3, r3, r1
 8002d88:	42ab      	cmp	r3, r5
 8002d8a:	dcf2      	bgt.n	8002d72 <_printf_i+0x21e>
 8002d8c:	e7eb      	b.n	8002d66 <_printf_i+0x212>
 8002d8e:	2500      	movs	r5, #0
 8002d90:	f104 0619 	add.w	r6, r4, #25
 8002d94:	e7f5      	b.n	8002d82 <_printf_i+0x22e>
 8002d96:	bf00      	nop
 8002d98:	08002f56 	.word	0x08002f56
 8002d9c:	08002f67 	.word	0x08002f67

08002da0 <__retarget_lock_acquire_recursive>:
 8002da0:	4770      	bx	lr

08002da2 <__retarget_lock_release_recursive>:
 8002da2:	4770      	bx	lr

08002da4 <memcpy>:
 8002da4:	440a      	add	r2, r1
 8002da6:	4291      	cmp	r1, r2
 8002da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002dac:	d100      	bne.n	8002db0 <memcpy+0xc>
 8002dae:	4770      	bx	lr
 8002db0:	b510      	push	{r4, lr}
 8002db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dba:	4291      	cmp	r1, r2
 8002dbc:	d1f9      	bne.n	8002db2 <memcpy+0xe>
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <memmove>:
 8002dc0:	4288      	cmp	r0, r1
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	eb01 0402 	add.w	r4, r1, r2
 8002dc8:	d902      	bls.n	8002dd0 <memmove+0x10>
 8002dca:	4284      	cmp	r4, r0
 8002dcc:	4623      	mov	r3, r4
 8002dce:	d807      	bhi.n	8002de0 <memmove+0x20>
 8002dd0:	1e43      	subs	r3, r0, #1
 8002dd2:	42a1      	cmp	r1, r4
 8002dd4:	d008      	beq.n	8002de8 <memmove+0x28>
 8002dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dde:	e7f8      	b.n	8002dd2 <memmove+0x12>
 8002de0:	4402      	add	r2, r0
 8002de2:	4601      	mov	r1, r0
 8002de4:	428a      	cmp	r2, r1
 8002de6:	d100      	bne.n	8002dea <memmove+0x2a>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002df2:	e7f7      	b.n	8002de4 <memmove+0x24>

08002df4 <_realloc_r>:
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	4680      	mov	r8, r0
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	460e      	mov	r6, r1
 8002dfe:	b921      	cbnz	r1, 8002e0a <_realloc_r+0x16>
 8002e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e04:	4611      	mov	r1, r2
 8002e06:	f7ff bc1b 	b.w	8002640 <_malloc_r>
 8002e0a:	b92a      	cbnz	r2, 8002e18 <_realloc_r+0x24>
 8002e0c:	f7ff fbac 	bl	8002568 <_free_r>
 8002e10:	4625      	mov	r5, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e18:	f000 f81b 	bl	8002e52 <_malloc_usable_size_r>
 8002e1c:	4284      	cmp	r4, r0
 8002e1e:	4607      	mov	r7, r0
 8002e20:	d802      	bhi.n	8002e28 <_realloc_r+0x34>
 8002e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e26:	d812      	bhi.n	8002e4e <_realloc_r+0x5a>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f7ff fc08 	bl	8002640 <_malloc_r>
 8002e30:	4605      	mov	r5, r0
 8002e32:	2800      	cmp	r0, #0
 8002e34:	d0ed      	beq.n	8002e12 <_realloc_r+0x1e>
 8002e36:	42bc      	cmp	r4, r7
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	bf28      	it	cs
 8002e3e:	463a      	movcs	r2, r7
 8002e40:	f7ff ffb0 	bl	8002da4 <memcpy>
 8002e44:	4631      	mov	r1, r6
 8002e46:	4640      	mov	r0, r8
 8002e48:	f7ff fb8e 	bl	8002568 <_free_r>
 8002e4c:	e7e1      	b.n	8002e12 <_realloc_r+0x1e>
 8002e4e:	4635      	mov	r5, r6
 8002e50:	e7df      	b.n	8002e12 <_realloc_r+0x1e>

08002e52 <_malloc_usable_size_r>:
 8002e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e56:	1f18      	subs	r0, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bfbc      	itt	lt
 8002e5c:	580b      	ldrlt	r3, [r1, r0]
 8002e5e:	18c0      	addlt	r0, r0, r3
 8002e60:	4770      	bx	lr
	...

08002e64 <_init>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

08002e70 <_fini>:
 8002e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e72:	bf00      	nop
 8002e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e76:	bc08      	pop	{r3}
 8002e78:	469e      	mov	lr, r3
 8002e7a:	4770      	bx	lr
