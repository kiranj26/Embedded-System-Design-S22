
Lab3_Part3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e50  08003e50  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e50  08003e50  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e50  08003e50  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000068  08003ec0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08003ec0  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d4f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c80  00000000  00000000  00029de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e0  00000000  00000000  0002c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e58  00000000  00000000  0002c920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b04f  00000000  00000000  00044778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c50c  00000000  00000000  0004f7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbcd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000dbd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a50 	.word	0x08003a50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003a50 	.word	0x08003a50

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <PWM_GPIO_init>:

/**
 * @brief Configures GPIO Pin D15 as alternate function output.
 */
void PWM_GPIO_init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	// Enable clock for GPIO Port D
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <PWM_GPIO_init+0x40>)
 8000296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <PWM_GPIO_init+0x40>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6313      	str	r3, [r2, #48]	; 0x30

	// Set GPIO Pin D15 to alternate function mode
	GPIOD->MODER |= GPIO_MODER_MODE15_1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(GPIO_MODER_MODE15_0);
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a08      	ldr	r2, [pc, #32]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002b6:	6013      	str	r3, [r2, #0]

	// Select TIM4 as alternate function for Pin D15
	GPIOD->AFR[1] |= (2 << GPIO_AFRH_AFSEL15_Pos);
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <PWM_GPIO_init+0x44>)
 80002be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002c2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	40023800 	.word	0x40023800
 80002d4:	40020c00 	.word	0x40020c00

080002d8 <PWM_init>:

/**
 * @brief Configures TIM4 to generate PWM output on Pin D15.
 */
void PWM_init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	// Enable clock for TIM4
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <PWM_init+0x64>)
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	4a16      	ldr	r2, [pc, #88]	; (800033c <PWM_init+0x64>)
 80002e2:	f043 0304 	orr.w	r3, r3, #4
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40

	// Set prescaler to achieve a timer clock frequency of 100 kHz
	TIM4->PSC = 839;
 80002e8:	4b15      	ldr	r3, [pc, #84]	; (8000340 <PWM_init+0x68>)
 80002ea:	f240 3247 	movw	r2, #839	; 0x347
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	// Set auto-reload value to achieve a PWM frequency of 100 Hz
	TIM4->ARR = 999;
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <PWM_init+0x68>)
 80002f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the initial duty cycle to achieve a 60% duty cycle
	TIM4->CCR4 = 600;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <PWM_init+0x68>)
 80002fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40

	// Configure output compare mode for PWM mode 1 on channel 4
	TIM4->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <PWM_init+0x68>)
 8000302:	69db      	ldr	r3, [r3, #28]
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <PWM_init+0x68>)
 8000306:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800030a:	61d3      	str	r3, [r2, #28]
	TIM4->CCMR2 &= ~(TIM_CCMR2_OC4M_0);
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <PWM_init+0x68>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <PWM_init+0x68>)
 8000312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000316:	61d3      	str	r3, [r2, #28]

	// Enable the output compare channel 4
	TIM4->CCER |= TIM_CCER_CC4E;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <PWM_init+0x68>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a08      	ldr	r2, [pc, #32]	; (8000340 <PWM_init+0x68>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6213      	str	r3, [r2, #32]

	// Enable the timer counter
	TIM4->CR1 |= TIM_CR1_CEN;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <PWM_init+0x68>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <PWM_init+0x68>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800
 8000340:	40000800 	.word	0x40000800

08000344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	2b00      	cmp	r3, #0
 8000354:	db0b      	blt.n	800036e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 021f 	and.w	r2, r3, #31
 800035c:	4907      	ldr	r1, [pc, #28]	; (800037c <__NVIC_EnableIRQ+0x38>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	095b      	lsrs	r3, r3, #5
 8000364:	2001      	movs	r0, #1
 8000366:	fa00 f202 	lsl.w	r2, r0, r2
 800036a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	e000e100 	.word	0xe000e100

08000380 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	2b00      	cmp	r3, #0
 8000390:	db0c      	blt.n	80003ac <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	f003 021f 	and.w	r2, r3, #31
 8000398:	4907      	ldr	r1, [pc, #28]	; (80003b8 <__NVIC_ClearPendingIRQ+0x38>)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	095b      	lsrs	r3, r3, #5
 80003a0:	2001      	movs	r0, #1
 80003a2:	fa00 f202 	lsl.w	r2, r0, r2
 80003a6:	3360      	adds	r3, #96	; 0x60
 80003a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	e000e100 	.word	0xe000e100

080003bc <Uart_init>:
 * @note   Uses GPIOA Pin 2 (TX) and Pin 3 (RX) for communication
 * @param  None
 * @retval None
 */
void Uart_init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	// Enable USART2 and GPIOA clocks
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80003c0:	4b31      	ldr	r3, [pc, #196]	; (8000488 <Uart_init+0xcc>)
 80003c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c4:	4a30      	ldr	r2, [pc, #192]	; (8000488 <Uart_init+0xcc>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ca:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003cc:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <Uart_init+0xcc>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <Uart_init+0xcc>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30

	// Set GPIO alternate function to USART2 for PA2 (TX) and PA3 (RX)
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2;
 80003d8:	4b2c      	ldr	r3, [pc, #176]	; (800048c <Uart_init+0xd0>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	4a2b      	ldr	r2, [pc, #172]	; (800048c <Uart_init+0xd0>)
 80003de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_1 | GPIO_AFRL_AFSEL3_2;
 80003e4:	4b29      	ldr	r3, [pc, #164]	; (800048c <Uart_init+0xd0>)
 80003e6:	6a1b      	ldr	r3, [r3, #32]
 80003e8:	4a28      	ldr	r2, [pc, #160]	; (800048c <Uart_init+0xd0>)
 80003ea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80003ee:	6213      	str	r3, [r2, #32]

	// Set GPIO pins PA2 (TX) and PA3 (RX) to alternate function mode
	GPIOA->MODER |= GPIO_MODER_MODE2_1;
 80003f0:	4b26      	ldr	r3, [pc, #152]	; (800048c <Uart_init+0xd0>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a25      	ldr	r2, [pc, #148]	; (800048c <Uart_init+0xd0>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE3_1;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <Uart_init+0xd0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a22      	ldr	r2, [pc, #136]	; (800048c <Uart_init+0xd0>)
 8000402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000406:	6013      	str	r3, [r2, #0]

	// Enable USART2 peripheral
	USART2->CR1 |= USART_CR1_UE;
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <Uart_init+0xd4>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4a20      	ldr	r2, [pc, #128]	; (8000490 <Uart_init+0xd4>)
 800040e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000412:	60d3      	str	r3, [r2, #12]

	// Configure PA2 (TX) and PA3 (RX) for external interrupts
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI2_PA | SYSCFG_EXTICR1_EXTI3_PA;
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <Uart_init+0xd8>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <Uart_init+0xd8>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	6093      	str	r3, [r2, #8]

	// Enable interrupt for PA2 (TX) and PA3 (RX)
	EXTI->IMR |= EXTI_IMR_MR2 | EXTI_IMR_MR3 ;
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <Uart_init+0xdc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <Uart_init+0xdc>)
 8000422:	f043 030c 	orr.w	r3, r3, #12
 8000426:	6013      	str	r3, [r2, #0]
	EXTI->EMR |= EXTI_EMR_MR2 | EXTI_EMR_MR3 ;
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <Uart_init+0xdc>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <Uart_init+0xdc>)
 800042e:	f043 030c 	orr.w	r3, r3, #12
 8000432:	6053      	str	r3, [r2, #4]

	// Clear interrupt flags for USART2
	USART2->SR &= ~USART_SR_TXE;
 8000434:	4b16      	ldr	r3, [pc, #88]	; (8000490 <Uart_init+0xd4>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a15      	ldr	r2, [pc, #84]	; (8000490 <Uart_init+0xd4>)
 800043a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800043e:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <Uart_init+0xd4>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <Uart_init+0xd4>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(38);
 800044c:	2026      	movs	r0, #38	; 0x26
 800044e:	f7ff ff97 	bl	8000380 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(38);
 8000452:	2026      	movs	r0, #38	; 0x26
 8000454:	f7ff ff76 	bl	8000344 <__NVIC_EnableIRQ>

	// Set baud rate to 9600
	USART2->BRR = 52 << 4;
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <Uart_init+0xd4>)
 800045a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800045e:	609a      	str	r2, [r3, #8]
	USART2->BRR |= 15 ;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <Uart_init+0xd4>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <Uart_init+0xd4>)
 8000466:	f043 030f 	orr.w	r3, r3, #15
 800046a:	6093      	str	r3, [r2, #8]

	// Enable transmitter and receiver for USART2
	USART2->CR1 |= USART_CR1_TE;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <Uart_init+0xd4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <Uart_init+0xd4>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RE;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <Uart_init+0xd4>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <Uart_init+0xd4>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40023800 	.word	0x40023800
 800048c:	40020000 	.word	0x40020000
 8000490:	40004400 	.word	0x40004400
 8000494:	40013800 	.word	0x40013800
 8000498:	40013c00 	.word	0x40013c00

0800049c <my_putchar>:
 * @brief  Transmits a single character over UART2
 * @param  c: Character to transmit
 * @retval None
 */
void my_putchar(char c)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
    USART2->DR = c;
 80004a6:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <my_putchar+0x1c>)
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	6053      	str	r3, [r2, #4]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40004400 	.word	0x40004400

080004bc <my_putstring>:
 * @brief  Transmits a string over UART2
 * @param  str: String to transmit
 * @retval None
 */
void my_putstring(char * str)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	for(int i = 0; str[i] != '\0'; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	e014      	b.n	80004f4 <my_putstring+0x38>
	{
		for(int i=0;i<5000;i++); // Delay to allow time for previous transmission to complete
 80004ca:	2300      	movs	r3, #0
 80004cc:	60bb      	str	r3, [r7, #8]
 80004ce:	e002      	b.n	80004d6 <my_putstring+0x1a>
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	3301      	adds	r3, #1
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80004dc:	4293      	cmp	r3, r2
 80004de:	ddf7      	ble.n	80004d0 <my_putstring+0x14>
		my_putchar(str[i]);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff ffd7 	bl	800049c <my_putchar>
	for(int i = 0; str[i] != '\0'; i++)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	3301      	adds	r3, #1
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1e4      	bne.n	80004ca <my_putstring+0xe>
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <Clock_init>:

#include "clock.h"
/**
 * @brief Initializes clock and enables the MAIN PLL.
 */
void Clock_init(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
	// Enable HSI clock
	RCC->CR |= RCC_CR_HSION;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <Clock_init+0x44>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <Clock_init+0x44>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]

	// Wait for HSI to stabilize
	while (!(RCC->CR & RCC_CR_HSIRDY));
 800051c:	bf00      	nop
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <Clock_init+0x44>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <Clock_init+0x12>

	// Enable MAIN PLL
	RCC->CR |= RCC_CR_PLLON;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <Clock_init+0x44>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <Clock_init+0x44>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]

	// Wait for MAIN PLL to stabilize
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000536:	bf00      	nop
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <Clock_init+0x44>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <Clock_init+0x2c>
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40023800 	.word	0x40023800

08000554 <duty_cycle_processing>:
/**
 * @brief Processes the received UART command and updates the duty cycle accordingly.
 */

void duty_cycle_processing(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
    char c = rx_buffer[rx_tail++];                      // Get the next character from UART receive buffer
 800055a:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <duty_cycle_processing+0x16c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	1c5a      	adds	r2, r3, #1
 8000560:	4957      	ldr	r1, [pc, #348]	; (80006c0 <duty_cycle_processing+0x16c>)
 8000562:	600a      	str	r2, [r1, #0]
 8000564:	4a57      	ldr	r2, [pc, #348]	; (80006c4 <duty_cycle_processing+0x170>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	71fb      	strb	r3, [r7, #7]
    if (c == 'A')                                      // If 'A' is received, increase duty cycle by 50
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b41      	cmp	r3, #65	; 0x41
 800056e:	d12a      	bne.n	80005c6 <duty_cycle_processing+0x72>
    {
    	strcpy(str, "\n\rCharacter A Detected\n\r");
 8000570:	4a55      	ldr	r2, [pc, #340]	; (80006c8 <duty_cycle_processing+0x174>)
 8000572:	4b56      	ldr	r3, [pc, #344]	; (80006cc <duty_cycle_processing+0x178>)
 8000574:	4614      	mov	r4, r2
 8000576:	461d      	mov	r5, r3
 8000578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000580:	c403      	stmia	r4!, {r0, r1}
 8000582:	7022      	strb	r2, [r4, #0]
    	my_putstring(str);
 8000584:	4850      	ldr	r0, [pc, #320]	; (80006c8 <duty_cycle_processing+0x174>)
 8000586:	f7ff ff99 	bl	80004bc <my_putstring>
    	strcpy(str, "\n\Increasing duty cycle by 5% \n\r\n\r");
 800058a:	4a4f      	ldr	r2, [pc, #316]	; (80006c8 <duty_cycle_processing+0x174>)
 800058c:	4b50      	ldr	r3, [pc, #320]	; (80006d0 <duty_cycle_processing+0x17c>)
 800058e:	4614      	mov	r4, r2
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	682b      	ldr	r3, [r5, #0]
 800059c:	8023      	strh	r3, [r4, #0]
    	my_putstring(str);
 800059e:	484a      	ldr	r0, [pc, #296]	; (80006c8 <duty_cycle_processing+0x174>)
 80005a0:	f7ff ff8c 	bl	80004bc <my_putstring>
        current_duty_cycle += 50;
 80005a4:	4b4b      	ldr	r3, [pc, #300]	; (80006d4 <duty_cycle_processing+0x180>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	3332      	adds	r3, #50	; 0x32
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b49      	ldr	r3, [pc, #292]	; (80006d4 <duty_cycle_processing+0x180>)
 80005b0:	801a      	strh	r2, [r3, #0]
        if (current_duty_cycle >= 1000) {
 80005b2:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <duty_cycle_processing+0x180>)
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005bc:	d303      	bcc.n	80005c6 <duty_cycle_processing+0x72>
            // Reached maximum duty cycle, set to 1000 and stop increasing
            current_duty_cycle = 1000;
 80005be:	4b45      	ldr	r3, [pc, #276]	; (80006d4 <duty_cycle_processing+0x180>)
 80005c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c4:	801a      	strh	r2, [r3, #0]
        }
    }
    if (c == 'B')                                      // If 'B' is received, decrease duty cycle by 50
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b42      	cmp	r3, #66	; 0x42
 80005ca:	d128      	bne.n	800061e <duty_cycle_processing+0xca>
    {
    	strcpy(str, "\n\rCharacter B Detected\n\r");
 80005cc:	4a3e      	ldr	r2, [pc, #248]	; (80006c8 <duty_cycle_processing+0x174>)
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <duty_cycle_processing+0x184>)
 80005d0:	4614      	mov	r4, r2
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	c403      	stmia	r4!, {r0, r1}
 80005de:	7022      	strb	r2, [r4, #0]
    	my_putstring(str);
 80005e0:	4839      	ldr	r0, [pc, #228]	; (80006c8 <duty_cycle_processing+0x174>)
 80005e2:	f7ff ff6b 	bl	80004bc <my_putstring>
    	strcpy(str, "\n\Decreasing duty cycle by 5% \n\r\n\r");
 80005e6:	4a38      	ldr	r2, [pc, #224]	; (80006c8 <duty_cycle_processing+0x174>)
 80005e8:	4b3c      	ldr	r3, [pc, #240]	; (80006dc <duty_cycle_processing+0x188>)
 80005ea:	4614      	mov	r4, r2
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	682b      	ldr	r3, [r5, #0]
 80005f8:	8023      	strh	r3, [r4, #0]
    	my_putstring(str);
 80005fa:	4833      	ldr	r0, [pc, #204]	; (80006c8 <duty_cycle_processing+0x174>)
 80005fc:	f7ff ff5e 	bl	80004bc <my_putstring>
        current_duty_cycle -= 50;
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <duty_cycle_processing+0x180>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b29b      	uxth	r3, r3
 8000606:	3b32      	subs	r3, #50	; 0x32
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <duty_cycle_processing+0x180>)
 800060c:	801a      	strh	r2, [r3, #0]
        if (current_duty_cycle == 0) {
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <duty_cycle_processing+0x180>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	b29b      	uxth	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <duty_cycle_processing+0xca>
            // Reached minimum duty cycle, set to 0 and stop decreasing
            current_duty_cycle = 0;
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <duty_cycle_processing+0x180>)
 800061a:	2200      	movs	r2, #0
 800061c:	801a      	strh	r2, [r3, #0]
        }
    }
    if (c == 'P')                                      // If 'P' is received, print current duty cycle
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b50      	cmp	r3, #80	; 0x50
 8000622:	d143      	bne.n	80006ac <duty_cycle_processing+0x158>
    {
    	strcpy(str, "\n\rCharacter P Detected\n\r");
 8000624:	4a28      	ldr	r2, [pc, #160]	; (80006c8 <duty_cycle_processing+0x174>)
 8000626:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <duty_cycle_processing+0x18c>)
 8000628:	4614      	mov	r4, r2
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	c403      	stmia	r4!, {r0, r1}
 8000636:	7022      	strb	r2, [r4, #0]
    	my_putstring(str);
 8000638:	4823      	ldr	r0, [pc, #140]	; (80006c8 <duty_cycle_processing+0x174>)
 800063a:	f7ff ff3f 	bl	80004bc <my_putstring>
    	strcpy(str, "\n\Printing current cycle !\n\r");
 800063e:	4a22      	ldr	r2, [pc, #136]	; (80006c8 <duty_cycle_processing+0x174>)
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <duty_cycle_processing+0x190>)
 8000642:	4614      	mov	r4, r2
 8000644:	461d      	mov	r5, r3
 8000646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	my_putstring(str);
 8000652:	481d      	ldr	r0, [pc, #116]	; (80006c8 <duty_cycle_processing+0x174>)
 8000654:	f7ff ff32 	bl	80004bc <my_putstring>
        sprintf(dec, "%d", current_duty_cycle/10);     // Convert duty cycle to string
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <duty_cycle_processing+0x180>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <duty_cycle_processing+0x194>)
 8000660:	fba2 2303 	umull	r2, r3, r2, r3
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4920      	ldr	r1, [pc, #128]	; (80006ec <duty_cycle_processing+0x198>)
 800066c:	4820      	ldr	r0, [pc, #128]	; (80006f0 <duty_cycle_processing+0x19c>)
 800066e:	f002 f97d 	bl	800296c <siprintf>
        strcpy(str, "\n\rCurrent Duty Cycle = ");      // Print message
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <duty_cycle_processing+0x174>)
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <duty_cycle_processing+0x1a0>)
 8000676:	4614      	mov	r4, r2
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000682:	e884 0003 	stmia.w	r4, {r0, r1}
        strcat(dec," % \n\r");
 8000686:	481a      	ldr	r0, [pc, #104]	; (80006f0 <duty_cycle_processing+0x19c>)
 8000688:	f7ff fdaa 	bl	80001e0 <strlen>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <duty_cycle_processing+0x19c>)
 8000692:	4413      	add	r3, r2
 8000694:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <duty_cycle_processing+0x1a4>)
 8000696:	6810      	ldr	r0, [r2, #0]
 8000698:	6018      	str	r0, [r3, #0]
 800069a:	8892      	ldrh	r2, [r2, #4]
 800069c:	809a      	strh	r2, [r3, #4]
        strcat(str,dec);
 800069e:	4914      	ldr	r1, [pc, #80]	; (80006f0 <duty_cycle_processing+0x19c>)
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <duty_cycle_processing+0x174>)
 80006a2:	f002 f983 	bl	80029ac <strcat>
        my_putstring(str);
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <duty_cycle_processing+0x174>)
 80006a8:	f7ff ff08 	bl	80004bc <my_putstring>
    }
    TIM4->CCR4 = current_duty_cycle;                    // Update the duty cycle of TIM4
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <duty_cycle_processing+0x180>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <duty_cycle_processing+0x1a8>)
 80006b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bdb0      	pop	{r4, r5, r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	20000084 	.word	0x20000084
 80006c8:	200000f0 	.word	0x200000f0
 80006cc:	08003a68 	.word	0x08003a68
 80006d0:	08003a84 	.word	0x08003a84
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08003aa8 	.word	0x08003aa8
 80006dc:	08003ac4 	.word	0x08003ac4
 80006e0:	08003ae8 	.word	0x08003ae8
 80006e4:	08003b04 	.word	0x08003b04
 80006e8:	cccccccd 	.word	0xcccccccd
 80006ec:	08003b20 	.word	0x08003b20
 80006f0:	200004d8 	.word	0x200004d8
 80006f4:	08003b24 	.word	0x08003b24
 80006f8:	08003b3c 	.word	0x08003b3c
 80006fc:	40000800 	.word	0x40000800

08000700 <EXTI0_IRQHandler>:


/**
 * @brief Interrupt handler for EXTI0. Processes button press and updates duty cycle.
 */
void EXTI0_IRQHandler(void) {
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

  for(int i=0;i<100000;i++){}
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	e002      	b.n	8000712 <EXTI0_IRQHandler+0x12>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3301      	adds	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a54      	ldr	r2, [pc, #336]	; (8000868 <EXTI0_IRQHandler+0x168>)
 8000716:	4293      	cmp	r3, r2
 8000718:	ddf8      	ble.n	800070c <EXTI0_IRQHandler+0xc>
  // Clear the interrupt flag
  EXTI->PR |= EXTI_PR_PR0;
 800071a:	4b54      	ldr	r3, [pc, #336]	; (800086c <EXTI0_IRQHandler+0x16c>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a53      	ldr	r2, [pc, #332]	; (800086c <EXTI0_IRQHandler+0x16c>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6153      	str	r3, [r2, #20]

  // Print message indicating button press
  strcpy(str, "\n\rButton Pressed!\n\r");
 8000726:	4a52      	ldr	r2, [pc, #328]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <EXTI0_IRQHandler+0x174>)
 800072a:	4614      	mov	r4, r2
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	6023      	str	r3, [r4, #0]
  my_putstring(str);
 8000736:	484e      	ldr	r0, [pc, #312]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000738:	f7ff fec0 	bl	80004bc <my_putstring>

  // Increase or decrease duty cycle by 10%
  if (increase_duty_cycle) {
 800073c:	4b4e      	ldr	r3, [pc, #312]	; (8000878 <EXTI0_IRQHandler+0x178>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d044      	beq.n	80007d0 <EXTI0_IRQHandler+0xd0>
    // Increase duty cycle
    strcpy(str, "Increasing Duty Cycle !\n\r");
 8000746:	4a4a      	ldr	r2, [pc, #296]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000748:	4b4c      	ldr	r3, [pc, #304]	; (800087c <EXTI0_IRQHandler+0x17c>)
 800074a:	4614      	mov	r4, r2
 800074c:	461d      	mov	r5, r3
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000756:	c403      	stmia	r4!, {r0, r1}
 8000758:	8022      	strh	r2, [r4, #0]
    my_putstring(str);
 800075a:	4845      	ldr	r0, [pc, #276]	; (8000870 <EXTI0_IRQHandler+0x170>)
 800075c:	f7ff feae 	bl	80004bc <my_putstring>
    current_duty_cycle += 100;
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <EXTI0_IRQHandler+0x180>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
 8000766:	3364      	adds	r3, #100	; 0x64
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b45      	ldr	r3, [pc, #276]	; (8000880 <EXTI0_IRQHandler+0x180>)
 800076c:	801a      	strh	r2, [r3, #0]
    sprintf(dec, "%d", current_duty_cycle);
 800076e:	4b44      	ldr	r3, [pc, #272]	; (8000880 <EXTI0_IRQHandler+0x180>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	4943      	ldr	r1, [pc, #268]	; (8000884 <EXTI0_IRQHandler+0x184>)
 8000778:	4843      	ldr	r0, [pc, #268]	; (8000888 <EXTI0_IRQHandler+0x188>)
 800077a:	f002 f8f7 	bl	800296c <siprintf>
    strcpy(str, "Current Duty Cycle = ");
 800077e:	4a3c      	ldr	r2, [pc, #240]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000780:	4b42      	ldr	r3, [pc, #264]	; (800088c <EXTI0_IRQHandler+0x18c>)
 8000782:	4614      	mov	r4, r2
 8000784:	461d      	mov	r5, r3
 8000786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800078e:	6020      	str	r0, [r4, #0]
 8000790:	3404      	adds	r4, #4
 8000792:	8021      	strh	r1, [r4, #0]
    strcat(str,dec);
 8000794:	493c      	ldr	r1, [pc, #240]	; (8000888 <EXTI0_IRQHandler+0x188>)
 8000796:	4836      	ldr	r0, [pc, #216]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000798:	f002 f908 	bl	80029ac <strcat>
    my_putstring(str);
 800079c:	4834      	ldr	r0, [pc, #208]	; (8000870 <EXTI0_IRQHandler+0x170>)
 800079e:	f7ff fe8d 	bl	80004bc <my_putstring>
    // Check if maximum duty cycle is reached
    if (current_duty_cycle >= 1000) {
 80007a2:	4b37      	ldr	r3, [pc, #220]	; (8000880 <EXTI0_IRQHandler+0x180>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ac:	d353      	bcc.n	8000856 <EXTI0_IRQHandler+0x156>
      // Reached maximum duty cycle, start decreasing
      strcpy(str, "\n\r!! Max Duty Cycle Reached !!\n\r");
 80007ae:	4a30      	ldr	r2, [pc, #192]	; (8000870 <EXTI0_IRQHandler+0x170>)
 80007b0:	4b37      	ldr	r3, [pc, #220]	; (8000890 <EXTI0_IRQHandler+0x190>)
 80007b2:	4614      	mov	r4, r2
 80007b4:	461d      	mov	r5, r3
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	682b      	ldr	r3, [r5, #0]
 80007c0:	7023      	strb	r3, [r4, #0]
      my_putstring(str);
 80007c2:	482b      	ldr	r0, [pc, #172]	; (8000870 <EXTI0_IRQHandler+0x170>)
 80007c4:	f7ff fe7a 	bl	80004bc <my_putstring>
      increase_duty_cycle = 0;
 80007c8:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <EXTI0_IRQHandler+0x178>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
 80007ce:	e042      	b.n	8000856 <EXTI0_IRQHandler+0x156>
    }
  } else {
    // Decrease duty cycle
    strcpy(str, "Decreasing Duty Cycle !\n\r");
 80007d0:	4a27      	ldr	r2, [pc, #156]	; (8000870 <EXTI0_IRQHandler+0x170>)
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <EXTI0_IRQHandler+0x194>)
 80007d4:	4614      	mov	r4, r2
 80007d6:	461d      	mov	r5, r3
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e0:	c403      	stmia	r4!, {r0, r1}
 80007e2:	8022      	strh	r2, [r4, #0]
    my_putstring(str);
 80007e4:	4822      	ldr	r0, [pc, #136]	; (8000870 <EXTI0_IRQHandler+0x170>)
 80007e6:	f7ff fe69 	bl	80004bc <my_putstring>
    current_duty_cycle -= 100;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <EXTI0_IRQHandler+0x180>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b64      	subs	r3, #100	; 0x64
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <EXTI0_IRQHandler+0x180>)
 80007f6:	801a      	strh	r2, [r3, #0]
    sprintf(dec, "%d", current_duty_cycle);
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <EXTI0_IRQHandler+0x180>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	4920      	ldr	r1, [pc, #128]	; (8000884 <EXTI0_IRQHandler+0x184>)
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <EXTI0_IRQHandler+0x188>)
 8000804:	f002 f8b2 	bl	800296c <siprintf>
    strcpy(str, "Current Duty Cycle = ");
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <EXTI0_IRQHandler+0x170>)
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <EXTI0_IRQHandler+0x18c>)
 800080c:	4614      	mov	r4, r2
 800080e:	461d      	mov	r5, r3
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000818:	6020      	str	r0, [r4, #0]
 800081a:	3404      	adds	r4, #4
 800081c:	8021      	strh	r1, [r4, #0]
    strcat(str,dec);
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <EXTI0_IRQHandler+0x188>)
 8000820:	4813      	ldr	r0, [pc, #76]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000822:	f002 f8c3 	bl	80029ac <strcat>
    my_putstring(str);
 8000826:	4812      	ldr	r0, [pc, #72]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000828:	f7ff fe48 	bl	80004bc <my_putstring>
    // Check if minimum duty cycle is reached
    if (current_duty_cycle == 0) {
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <EXTI0_IRQHandler+0x180>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10f      	bne.n	8000856 <EXTI0_IRQHandler+0x156>
      // Reached minimum duty cycle, start increasing
      strcpy(str, "\n\r!! Min Duty Cycle Reached !!\n\r");
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <EXTI0_IRQHandler+0x170>)
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <EXTI0_IRQHandler+0x198>)
 800083a:	4614      	mov	r4, r2
 800083c:	461d      	mov	r5, r3
 800083e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000846:	682b      	ldr	r3, [r5, #0]
 8000848:	7023      	strb	r3, [r4, #0]
      my_putstring(str);
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <EXTI0_IRQHandler+0x170>)
 800084c:	f7ff fe36 	bl	80004bc <my_putstring>
      increase_duty_cycle = 1;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <EXTI0_IRQHandler+0x178>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
    }
  }

  // Update the duty cycle of TIM3
  TIM4->CCR4 = current_duty_cycle;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <EXTI0_IRQHandler+0x180>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <EXTI0_IRQHandler+0x19c>)
 800085e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bdb0      	pop	{r4, r5, r7, pc}
 8000868:	0001869f 	.word	0x0001869f
 800086c:	40013c00 	.word	0x40013c00
 8000870:	200000f0 	.word	0x200000f0
 8000874:	08003b44 	.word	0x08003b44
 8000878:	20000002 	.word	0x20000002
 800087c:	08003b58 	.word	0x08003b58
 8000880:	20000000 	.word	0x20000000
 8000884:	08003b20 	.word	0x08003b20
 8000888:	200004d8 	.word	0x200004d8
 800088c:	08003b74 	.word	0x08003b74
 8000890:	08003b8c 	.word	0x08003b8c
 8000894:	08003bb0 	.word	0x08003bb0
 8000898:	08003bcc 	.word	0x08003bcc
 800089c:	40000800 	.word	0x40000800

080008a0 <USART2_IRQHandler>:
/**
 * @brief Interrupt handler for USART2. Handles received data and stores in buffer.
 */
void USART2_IRQHandler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
    // Check if receive interrupt flag is set
    if (USART2->SR & USART_SR_RXNE )
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <USART2_IRQHandler+0x30>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f003 0320 	and.w	r3, r3, #32
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <USART2_IRQHandler+0x24>
    {
        rx_buffer[rx_head++] = USART2->DR; // Store received byte
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <USART2_IRQHandler+0x30>)
 80008b2:	6858      	ldr	r0, [r3, #4]
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <USART2_IRQHandler+0x34>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	4906      	ldr	r1, [pc, #24]	; (80008d4 <USART2_IRQHandler+0x34>)
 80008bc:	600a      	str	r2, [r1, #0]
 80008be:	b2c1      	uxtb	r1, r0
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <USART2_IRQHandler+0x38>)
 80008c2:	54d1      	strb	r1, [r2, r3]
        // No need to clear flag since it is cleared by a read
    }
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40004400 	.word	0x40004400
 80008d4:	200000e8 	.word	0x200000e8
 80008d8:	20000084 	.word	0x20000084

080008dc <main>:

/**
 * @brief Main function that initializes clock, switches, PWM, and UART. Receives data and processes duty cycle.
 */
int main(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
    // Initialize clock and peripherals
    Clock_init();
 80008e0:	f7ff fe14 	bl	800050c <Clock_init>
    Switch_init();
 80008e4:	f000 f898 	bl	8000a18 <Switch_init>
    PWM_GPIO_init();
 80008e8:	f7ff fcd2 	bl	8000290 <PWM_GPIO_init>
    PWM_init();
 80008ec:	f7ff fcf4 	bl	80002d8 <PWM_init>
    Uart_init();
 80008f0:	f7ff fd64 	bl	80003bc <Uart_init>
    // Print welcome message
    printf("\n\r\n\rHello! Welcome to Lab3 Part3 STM32F4 PWM program\n\r");
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <main+0x78>)
 80008f6:	f002 f811 	bl	800291c <iprintf>
    printf("After every switch press, duty cycle will be incremented by 10%% until it reaches its maximum value of 100%%, and then decremented by 10%% until it reaches its minimum value of 0%%.\n\r");
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <main+0x7c>)
 80008fc:	f002 f80e 	bl	800291c <iprintf>
    printf("If 'A' is available on UART, duty cycle will be incremented by 5%%.\n\r");
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <main+0x80>)
 8000902:	f002 f80b 	bl	800291c <iprintf>
    printf("If 'B' is available on UART, duty cycle will be decremented by 5%%.\n\r");
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <main+0x84>)
 8000908:	f002 f808 	bl	800291c <iprintf>
    printf("If 'P' is available on UART, the current duty cycle will be printed.\n\r");
 800090c:	4815      	ldr	r0, [pc, #84]	; (8000964 <main+0x88>)
 800090e:	f002 f805 	bl	800291c <iprintf>

    while (1) {
        // Check for received data
        if (rx_tail < rx_head) {
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <main+0x8c>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <main+0x90>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	da0d      	bge.n	800093a <main+0x5e>
            my_putchar(rx_buffer[rx_tail++]);
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <main+0x8c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	4910      	ldr	r1, [pc, #64]	; (8000968 <main+0x8c>)
 8000926:	600a      	str	r2, [r1, #0]
 8000928:	4a11      	ldr	r2, [pc, #68]	; (8000970 <main+0x94>)
 800092a:	5cd3      	ldrb	r3, [r2, r3]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fdb4 	bl	800049c <my_putchar>
            duty_cycle_processing();
 8000934:	f7ff fe0e 	bl	8000554 <duty_cycle_processing>
 8000938:	e7eb      	b.n	8000912 <main+0x36>
        } else if (rx_tail == rx_head) {
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <main+0x8c>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <main+0x90>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	429a      	cmp	r2, r3
 8000944:	d1e5      	bne.n	8000912 <main+0x36>
            // Reset tail and head if buffer is empty
            rx_tail = rx_head = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	4a08      	ldr	r2, [pc, #32]	; (800096c <main+0x90>)
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <main+0x8c>)
 800094e:	6013      	str	r3, [r2, #0]
        if (rx_tail < rx_head) {
 8000950:	e7df      	b.n	8000912 <main+0x36>
 8000952:	bf00      	nop
 8000954:	08003bf0 	.word	0x08003bf0
 8000958:	08003c28 	.word	0x08003c28
 800095c:	08003ce0 	.word	0x08003ce0
 8000960:	08003d28 	.word	0x08003d28
 8000964:	08003d70 	.word	0x08003d70
 8000968:	200000ec 	.word	0x200000ec
 800096c:	200000e8 	.word	0x200000e8
 8000970:	20000084 	.word	0x20000084

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f948 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <OTG_FS_IRQHandler+0x10>)
 80009ce:	f000 f955 	bl	8000c7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000544 	.word	0x20000544

080009dc <__NVIC_EnableIRQ>:
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <__NVIC_EnableIRQ+0x38>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100

08000a18 <Switch_init>:
 *         the state of an LED on Pin D14.
 * @param  None
 * @retval None
 */
void Switch_init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

    // Enable the clock for the GPIOA peripheral and the SYSCFG peripheral
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <Switch_init+0x6c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a18      	ldr	r2, [pc, #96]	; (8000a84 <Switch_init+0x6c>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <Switch_init+0x6c>)
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <Switch_init+0x6c>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure Pin A0 as input with pull-up
    GPIOA->MODER &= ~GPIO_MODER_MODE0;
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <Switch_init+0x70>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <Switch_init+0x70>)
 8000a3a:	f023 0303 	bic.w	r3, r3, #3
 8000a3e:	6013      	str	r3, [r2, #0]

    // Configure EXTI0 to map to Pin A0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <Switch_init+0x74>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	4a11      	ldr	r2, [pc, #68]	; (8000a8c <Switch_init+0x74>)
 8000a46:	f023 030f 	bic.w	r3, r3, #15
 8000a4a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <Switch_init+0x74>)
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <Switch_init+0x74>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	6093      	str	r3, [r2, #8]

    // Enable the interrupt and trigger on rising edge
    EXTI->IMR |= EXTI_IMR_MR0;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <Switch_init+0x78>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <Switch_init+0x78>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]
    // EXTI->RTSR |= EXTI_RTSR_TR0_Msk;
    // Enable falling edge trigger for EXTI line 0
	EXTI->FTSR |= EXTI_FTSR_TR0_Msk;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <Switch_init+0x78>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <Switch_init+0x78>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	60d3      	str	r3, [r2, #12]

    // Clear the interrupt flag
    EXTI->SWIER |= EXTI_SWIER_SWIER0;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <Switch_init+0x78>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <Switch_init+0x78>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6113      	str	r3, [r2, #16]

    // Enable the interrupt in the NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f7ff ffaf 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	40013c00 	.word	0x40013c00

08000a94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
	}

return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
	}
	return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
	return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f001 fdaa 	bl	80026f8 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	2000053c 	.word	0x2000053c
 8000bd8:	20000858 	.word	0x20000858

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f001 fd69 	bl	8002704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fe53 	bl	80008dc <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c44:	08003e58 	.word	0x08003e58
  ldr r2, =_sbss
 8000c48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c4c:	20000858 	.word	0x20000858

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000003 	.word	0x20000003
 8000c78:	20000540 	.word	0x20000540

08000c7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fa0f 	bl	80020b6 <USB_GetMode>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 80f6 	bne.w	8000e8c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 f9f3 	bl	8002090 <USB_ReadInterrupts>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 80ec 	beq.w	8000e8a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f9ea 	bl	8002090 <USB_ReadInterrupts>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000cc6:	d104      	bne.n	8000cd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f9da 	bl	8002090 <USB_ReadInterrupts>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000ce6:	d104      	bne.n	8000cf2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000cf0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 f9ca 	bl	8002090 <USB_ReadInterrupts>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000d06:	d104      	bne.n	8000d12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 f9ba 	bl	8002090 <USB_ReadInterrupts>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d103      	bne.n	8000d2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f9ac 	bl	8002090 <USB_ReadInterrupts>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d42:	d11c      	bne.n	8000d7e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d10f      	bne.n	8000d7e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8000d5e:	2110      	movs	r1, #16
 8000d60:	6938      	ldr	r0, [r7, #16]
 8000d62:	f001 f8d9 	bl	8001f18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8000d66:	6938      	ldr	r0, [r7, #16]
 8000d68:	f001 f90a 	bl	8001f80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f9ad 	bl	80020d2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f001 fc3e 	bl	80025fa <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f984 	bl	8002090 <USB_ReadInterrupts>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d92:	d102      	bne.n	8000d9a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f001 f829 	bl	8001dec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f976 	bl	8002090 <USB_ReadInterrupts>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d106      	bne.n	8000dbc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f001 fc07 	bl	80025c2 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2208      	movs	r2, #8
 8000dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 f965 	bl	8002090 <USB_ReadInterrupts>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d101      	bne.n	8000dd4 <HAL_HCD_IRQHandler+0x158>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <HAL_HCD_IRQHandler+0x15a>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d012      	beq.n	8000e00 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	699a      	ldr	r2, [r3, #24]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0210 	bic.w	r2, r2, #16
 8000de8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 ff2c 	bl	8001c48 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	699a      	ldr	r2, [r3, #24]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0210 	orr.w	r2, r2, #16
 8000dfe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 f943 	bl	8002090 <USB_ReadInterrupts>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e14:	d13a      	bne.n	8000e8c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 f993 	bl	8002146 <USB_HC_ReadInterrupt>
 8000e20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e025      	b.n	8000e74 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d018      	beq.n	8000e6e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	015a      	lsls	r2, r3, #5
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e52:	d106      	bne.n	8000e62 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f836 	bl	8000ecc <HCD_HC_IN_IRQHandler>
 8000e60:	e005      	b.n	8000e6e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	4619      	mov	r1, r3
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fb84 	bl	8001576 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d3d4      	bcc.n	8000e28 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	e000      	b.n	8000e8c <HAL_HCD_IRQHandler+0x210>
      return;
 8000e8a:	bf00      	nop
    }
  }
}
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <HAL_HCD_Stop+0x16>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e00d      	b.n	8000ec4 <HAL_HCD_Stop+0x32>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fa53 	bl	8002360 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	015a      	lsls	r2, r3, #5
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d11a      	bne.n	8000f32 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	015a      	lsls	r2, r3, #5
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4413      	add	r3, r2
 8000f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	212c      	movs	r1, #44	; 0x2c
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	3361      	adds	r3, #97	; 0x61
 8000f1c:	2206      	movs	r2, #6
 8000f1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 f91c 	bl	8002168 <USB_HC_Halt>
 8000f30:	e0af      	b.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	015a      	lsls	r2, r3, #5
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f48:	d11b      	bne.n	8000f82 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	015a      	lsls	r2, r3, #5
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4413      	add	r3, r2
 8000f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f56:	461a      	mov	r2, r3
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	212c      	movs	r1, #44	; 0x2c
 8000f64:	fb01 f303 	mul.w	r3, r1, r3
 8000f68:	4413      	add	r3, r2
 8000f6a:	3361      	adds	r3, #97	; 0x61
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f8f4 	bl	8002168 <USB_HC_Halt>
 8000f80:	e087      	b.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	015a      	lsls	r2, r3, #5
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	2b20      	cmp	r3, #32
 8000f96:	d109      	bne.n	8000fac <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	015a      	lsls	r2, r3, #5
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	6093      	str	r3, [r2, #8]
 8000faa:	e072      	b.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	015a      	lsls	r2, r3, #5
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11a      	bne.n	8000ff8 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	015a      	lsls	r2, r3, #5
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4413      	add	r3, r2
 8000fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	212c      	movs	r1, #44	; 0x2c
 8000fda:	fb01 f303 	mul.w	r3, r1, r3
 8000fde:	4413      	add	r3, r2
 8000fe0:	3361      	adds	r3, #97	; 0x61
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 f8b9 	bl	8002168 <USB_HC_Halt>
 8000ff6:	e04c      	b.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	015a      	lsls	r2, r3, #5
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4413      	add	r3, r2
 8001000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100e:	d11b      	bne.n	8001048 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	015a      	lsls	r2, r3, #5
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4413      	add	r3, r2
 8001018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800101c:	461a      	mov	r2, r3
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	212c      	movs	r1, #44	; 0x2c
 800102a:	fb01 f303 	mul.w	r3, r1, r3
 800102e:	4413      	add	r3, r2
 8001030:	3361      	adds	r3, #97	; 0x61
 8001032:	2208      	movs	r2, #8
 8001034:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f891 	bl	8002168 <USB_HC_Halt>
 8001046:	e024      	b.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	015a      	lsls	r2, r3, #5
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4413      	add	r3, r2
 8001050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105a:	2b80      	cmp	r3, #128	; 0x80
 800105c:	d119      	bne.n	8001092 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	015a      	lsls	r2, r3, #5
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4413      	add	r3, r2
 8001066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800106a:	461a      	mov	r2, r3
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	212c      	movs	r1, #44	; 0x2c
 8001076:	fb01 f303 	mul.w	r3, r1, r3
 800107a:	4413      	add	r3, r2
 800107c:	3361      	adds	r3, #97	; 0x61
 800107e:	2206      	movs	r2, #6
 8001080:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f001 f86b 	bl	8002168 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	015a      	lsls	r2, r3, #5
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4413      	add	r3, r2
 800109a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a8:	d112      	bne.n	80010d0 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f001 f857 	bl	8002168 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	015a      	lsls	r2, r3, #5
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4413      	add	r3, r2
 80010c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010c6:	461a      	mov	r2, r3
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80010ce:	e24e      	b.n	800156e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f040 80df 	bne.w	80012a6 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d019      	beq.n	8001124 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	212c      	movs	r1, #44	; 0x2c
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	3348      	adds	r3, #72	; 0x48
 80010fe:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	0159      	lsls	r1, r3, #5
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	440b      	add	r3, r1
 8001108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	202c      	movs	r0, #44	; 0x2c
 800111a:	fb00 f303 	mul.w	r3, r0, r3
 800111e:	440b      	add	r3, r1
 8001120:	3350      	adds	r3, #80	; 0x50
 8001122:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	212c      	movs	r1, #44	; 0x2c
 800112a:	fb01 f303 	mul.w	r3, r1, r3
 800112e:	4413      	add	r3, r2
 8001130:	3361      	adds	r3, #97	; 0x61
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	212c      	movs	r1, #44	; 0x2c
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	4413      	add	r3, r2
 8001142:	335c      	adds	r3, #92	; 0x5c
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	015a      	lsls	r2, r3, #5
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4413      	add	r3, r2
 8001150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001154:	461a      	mov	r2, r3
 8001156:	2301      	movs	r3, #1
 8001158:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	212c      	movs	r1, #44	; 0x2c
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	333f      	adds	r3, #63	; 0x3f
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d009      	beq.n	8001182 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	212c      	movs	r1, #44	; 0x2c
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	333f      	adds	r3, #63	; 0x3f
 800117c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800117e:	2b02      	cmp	r3, #2
 8001180:	d111      	bne.n	80011a6 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 ffeb 	bl	8002168 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	015a      	lsls	r2, r3, #5
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	4413      	add	r3, r2
 800119a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800119e:	461a      	mov	r2, r3
 80011a0:	2310      	movs	r3, #16
 80011a2:	6093      	str	r3, [r2, #8]
 80011a4:	e03a      	b.n	800121c <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	212c      	movs	r1, #44	; 0x2c
 80011ac:	fb01 f303 	mul.w	r3, r1, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	333f      	adds	r3, #63	; 0x3f
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d009      	beq.n	80011ce <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	212c      	movs	r1, #44	; 0x2c
 80011c0:	fb01 f303 	mul.w	r3, r1, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	333f      	adds	r3, #63	; 0x3f
 80011c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d126      	bne.n	800121c <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	015a      	lsls	r2, r3, #5
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4413      	add	r3, r2
 80011d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	0151      	lsls	r1, r2, #5
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	440a      	add	r2, r1
 80011e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	212c      	movs	r1, #44	; 0x2c
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	3360      	adds	r3, #96	; 0x60
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	b2d9      	uxtb	r1, r3
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	202c      	movs	r0, #44	; 0x2c
 800120a:	fb00 f303 	mul.w	r3, r0, r3
 800120e:	4413      	add	r3, r2
 8001210:	3360      	adds	r3, #96	; 0x60
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 f9fd 	bl	8002616 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d12b      	bne.n	800127c <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	212c      	movs	r1, #44	; 0x2c
 800122a:	fb01 f303 	mul.w	r3, r1, r3
 800122e:	4413      	add	r3, r2
 8001230:	3348      	adds	r3, #72	; 0x48
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	202c      	movs	r0, #44	; 0x2c
 800123a:	fb00 f202 	mul.w	r2, r0, r2
 800123e:	440a      	add	r2, r1
 8001240:	3240      	adds	r2, #64	; 0x40
 8001242:	8812      	ldrh	r2, [r2, #0]
 8001244:	fbb3 f3f2 	udiv	r3, r3, r2
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 818e 	beq.w	800156e <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	212c      	movs	r1, #44	; 0x2c
 8001258:	fb01 f303 	mul.w	r3, r1, r3
 800125c:	4413      	add	r3, r2
 800125e:	3354      	adds	r3, #84	; 0x54
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2d8      	uxtb	r0, r3
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	212c      	movs	r1, #44	; 0x2c
 800126e:	fb01 f303 	mul.w	r3, r1, r3
 8001272:	4413      	add	r3, r2
 8001274:	3354      	adds	r3, #84	; 0x54
 8001276:	4602      	mov	r2, r0
 8001278:	701a      	strb	r2, [r3, #0]
}
 800127a:	e178      	b.n	800156e <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	212c      	movs	r1, #44	; 0x2c
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	4413      	add	r3, r2
 8001288:	3354      	adds	r3, #84	; 0x54
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f083 0301 	eor.w	r3, r3, #1
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	212c      	movs	r1, #44	; 0x2c
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3354      	adds	r3, #84	; 0x54
 80012a0:	4602      	mov	r2, r0
 80012a2:	701a      	strb	r2, [r3, #0]
}
 80012a4:	e163      	b.n	800156e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	015a      	lsls	r2, r3, #5
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4413      	add	r3, r2
 80012ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f040 80f6 	bne.w	80014aa <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	212c      	movs	r1, #44	; 0x2c
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	4413      	add	r3, r2
 80012ca:	3361      	adds	r3, #97	; 0x61
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d109      	bne.n	80012e6 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	212c      	movs	r1, #44	; 0x2c
 80012d8:	fb01 f303 	mul.w	r3, r1, r3
 80012dc:	4413      	add	r3, r2
 80012de:	3360      	adds	r3, #96	; 0x60
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e0c9      	b.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	212c      	movs	r1, #44	; 0x2c
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	3361      	adds	r3, #97	; 0x61
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d109      	bne.n	800130e <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	212c      	movs	r1, #44	; 0x2c
 8001300:	fb01 f303 	mul.w	r3, r1, r3
 8001304:	4413      	add	r3, r2
 8001306:	3360      	adds	r3, #96	; 0x60
 8001308:	2205      	movs	r2, #5
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e0b5      	b.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	212c      	movs	r1, #44	; 0x2c
 8001314:	fb01 f303 	mul.w	r3, r1, r3
 8001318:	4413      	add	r3, r2
 800131a:	3361      	adds	r3, #97	; 0x61
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b06      	cmp	r3, #6
 8001320:	d009      	beq.n	8001336 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	212c      	movs	r1, #44	; 0x2c
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	3361      	adds	r3, #97	; 0x61
 8001330:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001332:	2b08      	cmp	r3, #8
 8001334:	d150      	bne.n	80013d8 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	212c      	movs	r1, #44	; 0x2c
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	335c      	adds	r3, #92	; 0x5c
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	202c      	movs	r0, #44	; 0x2c
 800134e:	fb00 f303 	mul.w	r3, r0, r3
 8001352:	440b      	add	r3, r1
 8001354:	335c      	adds	r3, #92	; 0x5c
 8001356:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	212c      	movs	r1, #44	; 0x2c
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	335c      	adds	r3, #92	; 0x5c
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d912      	bls.n	8001392 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	212c      	movs	r1, #44	; 0x2c
 8001372:	fb01 f303 	mul.w	r3, r1, r3
 8001376:	4413      	add	r3, r2
 8001378:	335c      	adds	r3, #92	; 0x5c
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	212c      	movs	r1, #44	; 0x2c
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	3360      	adds	r3, #96	; 0x60
 800138c:	2204      	movs	r2, #4
 800138e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001390:	e073      	b.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	212c      	movs	r1, #44	; 0x2c
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	4413      	add	r3, r2
 800139e:	3360      	adds	r3, #96	; 0x60
 80013a0:	2202      	movs	r2, #2
 80013a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80013ba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013c2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d0:	461a      	mov	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80013d6:	e050      	b.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	212c      	movs	r1, #44	; 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	3361      	adds	r3, #97	; 0x61
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d122      	bne.n	8001432 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	212c      	movs	r1, #44	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	3360      	adds	r3, #96	; 0x60
 80013fa:	2202      	movs	r2, #2
 80013fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	015a      	lsls	r2, r3, #5
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4413      	add	r3, r2
 8001406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001414:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800141c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	015a      	lsls	r2, r3, #5
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800142a:	461a      	mov	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e023      	b.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	212c      	movs	r1, #44	; 0x2c
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	4413      	add	r3, r2
 800143e:	3361      	adds	r3, #97	; 0x61
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d119      	bne.n	800147a <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	212c      	movs	r1, #44	; 0x2c
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	4413      	add	r3, r2
 8001452:	335c      	adds	r3, #92	; 0x5c
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	202c      	movs	r0, #44	; 0x2c
 800145e:	fb00 f303 	mul.w	r3, r0, r3
 8001462:	440b      	add	r3, r1
 8001464:	335c      	adds	r3, #92	; 0x5c
 8001466:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	212c      	movs	r1, #44	; 0x2c
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	4413      	add	r3, r2
 8001474:	3360      	adds	r3, #96	; 0x60
 8001476:	2204      	movs	r2, #4
 8001478:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4413      	add	r3, r2
 8001482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001486:	461a      	mov	r2, r3
 8001488:	2302      	movs	r3, #2
 800148a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	202c      	movs	r0, #44	; 0x2c
 8001496:	fb00 f303 	mul.w	r3, r0, r3
 800149a:	4413      	add	r3, r2
 800149c:	3360      	adds	r3, #96	; 0x60
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f001 f8b7 	bl	8002616 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80014a8:	e061      	b.n	800156e <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	015a      	lsls	r2, r3, #5
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4413      	add	r3, r2
 80014b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b10      	cmp	r3, #16
 80014be:	d156      	bne.n	800156e <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	333f      	adds	r3, #63	; 0x3f
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d111      	bne.n	80014f8 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	335c      	adds	r3, #92	; 0x5c
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fe39 	bl	8002168 <USB_HC_Halt>
 80014f6:	e031      	b.n	800155c <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	333f      	adds	r3, #63	; 0x3f
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	212c      	movs	r1, #44	; 0x2c
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	333f      	adds	r3, #63	; 0x3f
 800151a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800151c:	2b02      	cmp	r3, #2
 800151e:	d11d      	bne.n	800155c <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	212c      	movs	r1, #44	; 0x2c
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	4413      	add	r3, r2
 800152c:	335c      	adds	r3, #92	; 0x5c
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d110      	bne.n	800155c <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	212c      	movs	r1, #44	; 0x2c
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	4413      	add	r3, r2
 8001546:	3361      	adds	r3, #97	; 0x61
 8001548:	2203      	movs	r2, #3
 800154a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f000 fe06 	bl	8002168 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001568:	461a      	mov	r2, r3
 800156a:	2310      	movs	r3, #16
 800156c:	6093      	str	r3, [r2, #8]
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b088      	sub	sp, #32
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	015a      	lsls	r2, r3, #5
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	4413      	add	r3, r2
 8001598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d11a      	bne.n	80015dc <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015b2:	461a      	mov	r2, r3
 80015b4:	2304      	movs	r3, #4
 80015b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	212c      	movs	r1, #44	; 0x2c
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	3361      	adds	r3, #97	; 0x61
 80015c6:	2206      	movs	r2, #6
 80015c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fdc7 	bl	8002168 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80015da:	e331      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d12e      	bne.n	8001650 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	015a      	lsls	r2, r3, #5
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	4413      	add	r3, r2
 80015fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fe:	461a      	mov	r2, r3
 8001600:	2320      	movs	r3, #32
 8001602:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	333d      	adds	r3, #61	; 0x3d
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	f040 8313 	bne.w	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	212c      	movs	r1, #44	; 0x2c
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	333d      	adds	r3, #61	; 0x3d
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	212c      	movs	r1, #44	; 0x2c
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	3360      	adds	r3, #96	; 0x60
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd8d 	bl	8002168 <USB_HC_Halt>
}
 800164e:	e2f7      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4413      	add	r3, r2
 8001658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001666:	d112      	bne.n	800168e <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	015a      	lsls	r2, r3, #5
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4413      	add	r3, r2
 8001670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001674:	461a      	mov	r2, r3
 8001676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fd6e 	bl	8002168 <USB_HC_Halt>
}
 800168c:	e2d8      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	4413      	add	r3, r2
 8001696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d140      	bne.n	8001726 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	212c      	movs	r1, #44	; 0x2c
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	335c      	adds	r3, #92	; 0x5c
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c8:	2b40      	cmp	r3, #64	; 0x40
 80016ca:	d111      	bne.n	80016f0 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	333d      	adds	r3, #61	; 0x3d
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	015a      	lsls	r2, r3, #5
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ea:	461a      	mov	r2, r3
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	015a      	lsls	r2, r3, #5
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	4413      	add	r3, r2
 80016f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016fc:	461a      	mov	r2, r3
 80016fe:	2301      	movs	r3, #1
 8001700:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	3361      	adds	r3, #97	; 0x61
 8001710:	2201      	movs	r2, #1
 8001712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd22 	bl	8002168 <USB_HC_Halt>
}
 8001724:	e28c      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	015a      	lsls	r2, r3, #5
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4413      	add	r3, r2
 800172e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d12c      	bne.n	8001796 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	212c      	movs	r1, #44	; 0x2c
 8001742:	fb01 f303 	mul.w	r3, r1, r3
 8001746:	4413      	add	r3, r2
 8001748:	3361      	adds	r3, #97	; 0x61
 800174a:	2204      	movs	r2, #4
 800174c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	333d      	adds	r3, #61	; 0x3d
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	335c      	adds	r3, #92	; 0x5c
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fcf3 	bl	8002168 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	015a      	lsls	r2, r3, #5
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4413      	add	r3, r2
 800178a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178e:	461a      	mov	r2, r3
 8001790:	2340      	movs	r3, #64	; 0x40
 8001792:	6093      	str	r3, [r2, #8]
}
 8001794:	e254      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4413      	add	r3, r2
 800179e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d11a      	bne.n	80017e2 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	015a      	lsls	r2, r3, #5
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	4413      	add	r3, r2
 80017b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b8:	461a      	mov	r2, r3
 80017ba:	2308      	movs	r3, #8
 80017bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3361      	adds	r3, #97	; 0x61
 80017cc:	2205      	movs	r2, #5
 80017ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fcc4 	bl	8002168 <USB_HC_Halt>
}
 80017e0:	e22e      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d140      	bne.n	800187a <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	212c      	movs	r1, #44	; 0x2c
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	4413      	add	r3, r2
 8001804:	335c      	adds	r3, #92	; 0x5c
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	3361      	adds	r3, #97	; 0x61
 8001818:	2203      	movs	r2, #3
 800181a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	333d      	adds	r3, #61	; 0x3d
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d112      	bne.n	8001856 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	333c      	adds	r3, #60	; 0x3c
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d108      	bne.n	8001856 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	333d      	adds	r3, #61	; 0x3d
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fc81 	bl	8002168 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4413      	add	r3, r2
 800186e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001872:	461a      	mov	r2, r3
 8001874:	2310      	movs	r3, #16
 8001876:	6093      	str	r3, [r2, #8]
}
 8001878:	e1e2      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4413      	add	r3, r2
 8001882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188c:	2b80      	cmp	r3, #128	; 0x80
 800188e:	d164      	bne.n	800195a <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d111      	bne.n	80018bc <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	212c      	movs	r1, #44	; 0x2c
 800189e:	fb01 f303 	mul.w	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	3361      	adds	r3, #97	; 0x61
 80018a6:	2206      	movs	r2, #6
 80018a8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fc57 	bl	8002168 <USB_HC_Halt>
 80018ba:	e044      	b.n	8001946 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	335c      	adds	r3, #92	; 0x5c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	202c      	movs	r0, #44	; 0x2c
 80018d4:	fb00 f303 	mul.w	r3, r0, r3
 80018d8:	440b      	add	r3, r1
 80018da:	335c      	adds	r3, #92	; 0x5c
 80018dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	335c      	adds	r3, #92	; 0x5c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d920      	bls.n	8001934 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	335c      	adds	r3, #92	; 0x5c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3360      	adds	r3, #96	; 0x60
 8001912:	2204      	movs	r2, #4
 8001914:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	b2d9      	uxtb	r1, r3
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	202c      	movs	r0, #44	; 0x2c
 8001920:	fb00 f303 	mul.w	r3, r0, r3
 8001924:	4413      	add	r3, r2
 8001926:	3360      	adds	r3, #96	; 0x60
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 fe72 	bl	8002616 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001932:	e008      	b.n	8001946 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	015a      	lsls	r2, r3, #5
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4413      	add	r3, r2
 800194e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001952:	461a      	mov	r2, r3
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	6093      	str	r3, [r2, #8]
}
 8001958:	e172      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4413      	add	r3, r2
 8001962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001970:	d11b      	bne.n	80019aa <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3361      	adds	r3, #97	; 0x61
 8001980:	2208      	movs	r2, #8
 8001982:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fbea 	bl	8002168 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	4413      	add	r3, r2
 800199c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a0:	461a      	mov	r2, r3
 80019a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a6:	6093      	str	r3, [r2, #8]
}
 80019a8:	e14a      	b.n	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b02      	cmp	r3, #2
 80019be:	f040 813f 	bne.w	8001c40 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3361      	adds	r3, #97	; 0x61
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d17d      	bne.n	8001ad2 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	3360      	adds	r3, #96	; 0x60
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	212c      	movs	r1, #44	; 0x2c
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	333f      	adds	r3, #63	; 0x3f
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d00a      	beq.n	8001a12 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333f      	adds	r3, #63	; 0x3f
 8001a0a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	f040 8100 	bne.w	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d113      	bne.n	8001a42 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	3355      	adds	r3, #85	; 0x55
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	f083 0301 	eor.w	r3, r3, #1
 8001a2e:	b2d8      	uxtb	r0, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3355      	adds	r3, #85	; 0x55
 8001a3e:	4602      	mov	r2, r0
 8001a40:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	f040 80e3 	bne.w	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	334c      	adds	r3, #76	; 0x4c
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80d8 	beq.w	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	334c      	adds	r3, #76	; 0x4c
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	fb00 f202 	mul.w	r2, r0, r2
 8001a7c:	440a      	add	r2, r1
 8001a7e:	3240      	adds	r2, #64	; 0x40
 8001a80:	8812      	ldrh	r2, [r2, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	3b01      	subs	r3, #1
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	202c      	movs	r0, #44	; 0x2c
 8001a8c:	fb00 f202 	mul.w	r2, r0, r2
 8001a90:	440a      	add	r2, r1
 8001a92:	3240      	adds	r2, #64	; 0x40
 8001a94:	8812      	ldrh	r2, [r2, #0]
 8001a96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b5 	beq.w	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3355      	adds	r3, #85	; 0x55
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	f083 0301 	eor.w	r3, r3, #1
 8001abc:	b2d8      	uxtb	r0, r3
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	3355      	adds	r3, #85	; 0x55
 8001acc:	4602      	mov	r2, r0
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	e09f      	b.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	212c      	movs	r1, #44	; 0x2c
 8001ad8:	fb01 f303 	mul.w	r3, r1, r3
 8001adc:	4413      	add	r3, r2
 8001ade:	3361      	adds	r3, #97	; 0x61
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d109      	bne.n	8001afa <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e08b      	b.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	3361      	adds	r3, #97	; 0x61
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d109      	bne.n	8001b22 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3360      	adds	r3, #96	; 0x60
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e077      	b.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3361      	adds	r3, #97	; 0x61
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d109      	bne.n	8001b4a <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	2205      	movs	r2, #5
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e063      	b.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3361      	adds	r3, #97	; 0x61
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d009      	beq.n	8001b72 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	212c      	movs	r1, #44	; 0x2c
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3361      	adds	r3, #97	; 0x61
 8001b6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d14f      	bne.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	335c      	adds	r3, #92	; 0x5c
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	202c      	movs	r0, #44	; 0x2c
 8001b8a:	fb00 f303 	mul.w	r3, r0, r3
 8001b8e:	440b      	add	r3, r1
 8001b90:	335c      	adds	r3, #92	; 0x5c
 8001b92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	335c      	adds	r3, #92	; 0x5c
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d912      	bls.n	8001bce <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	212c      	movs	r1, #44	; 0x2c
 8001bae:	fb01 f303 	mul.w	r3, r1, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	335c      	adds	r3, #92	; 0x5c
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3360      	adds	r3, #96	; 0x60
 8001bc8:	2204      	movs	r2, #4
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e021      	b.n	8001c12 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3360      	adds	r3, #96	; 0x60
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	015a      	lsls	r2, r3, #5
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4413      	add	r3, r2
 8001be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bf6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bfe:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	015a      	lsls	r2, r3, #5
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2302      	movs	r3, #2
 8001c22:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	202c      	movs	r0, #44	; 0x2c
 8001c2e:	fb00 f303 	mul.w	r3, r0, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	3360      	adds	r3, #96	; 0x60
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fceb 	bl	8002616 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c40:	bf00      	nop
 8001c42:	3720      	adds	r7, #32
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c5b      	lsrs	r3, r3, #17
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d004      	beq.n	8001c8e <HCD_RXQLVL_IRQHandler+0x46>
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	f000 80a9 	beq.w	8001dde <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001c8c:	e0aa      	b.n	8001de4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a6 	beq.w	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3344      	adds	r3, #68	; 0x44
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 809b 	beq.w	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3350      	adds	r3, #80	; 0x50
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	202c      	movs	r0, #44	; 0x2c
 8001cc6:	fb00 f303 	mul.w	r3, r0, r3
 8001cca:	440b      	add	r3, r1
 8001ccc:	334c      	adds	r3, #76	; 0x4c
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d87a      	bhi.n	8001dca <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3344      	adds	r3, #68	; 0x44
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	b292      	uxth	r2, r2
 8001cec:	4619      	mov	r1, r3
 8001cee:	f000 f977 	bl	8001fe0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3344      	adds	r3, #68	; 0x44
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	441a      	add	r2, r3
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	202c      	movs	r0, #44	; 0x2c
 8001d0c:	fb00 f303 	mul.w	r3, r0, r3
 8001d10:	440b      	add	r3, r1
 8001d12:	3344      	adds	r3, #68	; 0x44
 8001d14:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3350      	adds	r3, #80	; 0x50
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	441a      	add	r2, r3
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	202c      	movs	r0, #44	; 0x2c
 8001d30:	fb00 f303 	mul.w	r3, r0, r3
 8001d34:	440b      	add	r3, r1
 8001d36:	3350      	adds	r3, #80	; 0x50
 8001d38:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	0cdb      	lsrs	r3, r3, #19
 8001d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d4e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3340      	adds	r3, #64	; 0x40
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d13c      	bne.n	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d039      	beq.n	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d84:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d8c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	212c      	movs	r1, #44	; 0x2c
 8001da6:	fb01 f303 	mul.w	r3, r1, r3
 8001daa:	4413      	add	r3, r2
 8001dac:	3354      	adds	r3, #84	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f083 0301 	eor.w	r3, r3, #1
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	212c      	movs	r1, #44	; 0x2c
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3354      	adds	r3, #84	; 0x54
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	701a      	strb	r2, [r3, #0]
      break;
 8001dc8:	e00b      	b.n	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3360      	adds	r3, #96	; 0x60
 8001dd8:	2204      	movs	r2, #4
 8001dda:	701a      	strb	r2, [r3, #0]
      break;
 8001ddc:	e001      	b.n	8001de2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001dde:	bf00      	nop
 8001de0:	e000      	b.n	8001de4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001de2:	bf00      	nop
  }
}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001e18:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d10b      	bne.n	8001e3c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d102      	bne.n	8001e34 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fbd5 	bl	80025de <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d132      	bne.n	8001eac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d126      	bne.n	8001ea6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d113      	bne.n	8001e88 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e6a:	d106      	bne.n	8001e7a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f92d 	bl	80020d2 <USB_InitFSLSPClkSel>
 8001e78:	e011      	b.n	8001e9e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f926 	bl	80020d2 <USB_InitFSLSPClkSel>
 8001e86:	e00a      	b.n	8001e9e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e96:	461a      	mov	r2, r3
 8001e98:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001e9c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fbc7 	bl	8002632 <HAL_HCD_PortEnabled_Callback>
 8001ea4:	e002      	b.n	8001eac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fbd1 	bl	800264e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d103      	bne.n	8001ebe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	f043 0320 	orr.w	r3, r3, #32
 8001ebc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 0201 	bic.w	r2, r3, #1
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
	...

08001f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <USB_FlushTxFifo+0x64>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e01b      	b.n	8001f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	daf2      	bge.n	8001f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	3301      	adds	r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <USB_FlushTxFifo+0x64>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e006      	b.n	8001f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d0f0      	beq.n	8001f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	00030d40 	.word	0x00030d40

08001f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <USB_FlushRxFifo+0x5c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e018      	b.n	8001fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	daf2      	bge.n	8001f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2210      	movs	r2, #16
 8001fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <USB_FlushRxFifo+0x5c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e006      	b.n	8001fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d0f0      	beq.n	8001fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	00030d40 	.word	0x00030d40

08001fe0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	; 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8001ff6:	88fb      	ldrh	r3, [r7, #6]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	e014      	b.n	8002036 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	601a      	str	r2, [r3, #0]
    pDest++;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3301      	adds	r3, #1
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	3301      	adds	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	3301      	adds	r3, #1
 8002034:	623b      	str	r3, [r7, #32]
 8002036:	6a3a      	ldr	r2, [r7, #32]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3e6      	bcc.n	800200c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800203e:	8bfb      	ldrh	r3, [r7, #30]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01e      	beq.n	8002082 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	461a      	mov	r2, r3
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	701a      	strb	r2, [r3, #0]
      i++;
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	3301      	adds	r3, #1
 800206e:	623b      	str	r3, [r7, #32]
      pDest++;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8002076:	8bfb      	ldrh	r3, [r7, #30]
 8002078:	3b01      	subs	r3, #1
 800207a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ea      	bne.n	8002058 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002084:	4618      	mov	r0, r3
 8002086:	372c      	adds	r7, #44	; 0x2c
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80020a8:	68fb      	ldr	r3, [r7, #12]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f003 0301 	and.w	r3, r3, #1
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	460b      	mov	r3, r1
 80020dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020f0:	f023 0303 	bic.w	r3, r3, #3
 80020f4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800211a:	461a      	mov	r2, r3
 800211c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002120:	6053      	str	r3, [r2, #4]
 8002122:	e009      	b.n	8002138 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d106      	bne.n	8002138 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002130:	461a      	mov	r2, r3
 8002132:	f241 7370 	movw	r3, #6000	; 0x1770
 8002136:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	b29b      	uxth	r3, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0fdb      	lsrs	r3, r3, #31
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d104      	bne.n	80021c2 <USB_HC_Halt+0x5a>
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e0c8      	b.n	8002354 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <USB_HC_Halt+0x66>
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d163      	bne.n	8002296 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	0151      	lsls	r1, r2, #5
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	440a      	add	r2, r1
 80021e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021ec:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 80ab 	bne.w	8002352 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d133      	bne.n	8002270 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	0151      	lsls	r1, r2, #5
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	440a      	add	r2, r1
 800221e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002226:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	0151      	lsls	r1, r2, #5
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	440a      	add	r2, r1
 800223e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002246:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002254:	d81d      	bhi.n	8002292 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800226c:	d0ec      	beq.n	8002248 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800226e:	e070      	b.n	8002352 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	0151      	lsls	r1, r2, #5
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	440a      	add	r2, r1
 8002286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800228a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800228e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002290:	e05f      	b.n	8002352 <USB_HC_Halt+0x1ea>
            break;
 8002292:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002294:	e05d      	b.n	8002352 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d133      	bne.n	800232e <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	0151      	lsls	r1, r2, #5
 80022d8:	69fa      	ldr	r2, [r7, #28]
 80022da:	440a      	add	r2, r1
 80022dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	0151      	lsls	r1, r2, #5
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	440a      	add	r2, r1
 80022fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002304:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002312:	d81d      	bhi.n	8002350 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	015a      	lsls	r2, r3, #5
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	4413      	add	r3, r2
 800231c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800232a:	d0ec      	beq.n	8002306 <USB_HC_Halt+0x19e>
 800232c:	e011      	b.n	8002352 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	0151      	lsls	r1, r2, #5
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	440a      	add	r2, r1
 8002344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e000      	b.n	8002352 <USB_HC_Halt+0x1ea>
          break;
 8002350:	bf00      	nop
    }
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3724      	adds	r7, #36	; 0x24
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fdbd 	bl	8001ef4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800237a:	2110      	movs	r1, #16
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fdcb 	bl	8001f18 <USB_FlushTxFifo>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff fdf7 	bl	8001f80 <USB_FlushRxFifo>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e01f      	b.n	80023e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80023c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	461a      	mov	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	3301      	adds	r3, #1
 80023e0:	61bb      	str	r3, [r7, #24]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d9dc      	bls.n	80023a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e034      	b.n	8002458 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002404:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800240c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002414:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3301      	adds	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002434:	d80c      	bhi.n	8002450 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800244c:	d0ec      	beq.n	8002428 <USB_StopHost+0xc8>
 800244e:	e000      	b.n	8002452 <USB_StopHost+0xf2>
        break;
 8002450:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	d9c7      	bls.n	80023ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002464:	461a      	mov	r2, r3
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002472:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fd2c 	bl	8001ed2 <USB_EnableGlobalInt>

  return ret;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f804 	bl	80024a8 <USBH_HandleSof>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b0b      	cmp	r3, #11
 80024b8:	d10a      	bne.n	80024d0 <USBH_HandleSof+0x28>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
  }
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80024e8:	bf00      	nop
}
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002504:	bf00      	nop
}
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f883 	bl	800266a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	791b      	ldrb	r3, [r3, #4]
 8002568:	4619      	mov	r1, r3
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f80b 	bl	8002586 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	795b      	ldrb	r3, [r3, #5]
 8002574:	4619      	mov	r1, r3
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f805 	bl	8002586 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d80d      	bhi.n	80025b4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	33e0      	adds	r3, #224	; 0xe0
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	33e0      	adds	r3, #224	; 0xe0
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff57 	bl	8002484 <USBH_LL_IncTimer>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff8f 	bl	8002510 <USBH_LL_Connect>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff98 	bl	800253e <USBH_LL_Disconnect>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
 8002622:	4613      	mov	r3, r2
 8002624:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff49 	bl	80024d8 <USBH_LL_PortEnabled>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff49 	bl	80024f4 <USBH_LL_PortDisabled>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fc06 	bl	8000e92 <HAL_HCD_Stop>
 8002686:	4603      	mov	r3, r0
 8002688:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f807 	bl	80026a0 <USBH_Get_USB_Status>
 8002692:	4603      	mov	r3, r0
 8002694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8002696:	7bbb      	ldrb	r3, [r7, #14]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d817      	bhi.n	80026e4 <USBH_Get_USB_Status+0x44>
 80026b4:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <USBH_Get_USB_Status+0x1c>)
 80026b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ba:	bf00      	nop
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026d3 	.word	0x080026d3
 80026c4:	080026d9 	.word	0x080026d9
 80026c8:	080026df 	.word	0x080026df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
    break;
 80026d0:	e00b      	b.n	80026ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80026d2:	2302      	movs	r3, #2
 80026d4:	73fb      	strb	r3, [r7, #15]
    break;
 80026d6:	e008      	b.n	80026ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
    break;
 80026dc:	e005      	b.n	80026ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80026de:	2302      	movs	r3, #2
 80026e0:	73fb      	strb	r3, [r7, #15]
    break;
 80026e2:	e002      	b.n	80026ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80026e4:	2302      	movs	r3, #2
 80026e6:	73fb      	strb	r3, [r7, #15]
    break;
 80026e8:	bf00      	nop
  }
  return usb_status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <__errno>:
 80026f8:	4b01      	ldr	r3, [pc, #4]	; (8002700 <__errno+0x8>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000004 	.word	0x20000004

08002704 <__libc_init_array>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	4d0d      	ldr	r5, [pc, #52]	; (800273c <__libc_init_array+0x38>)
 8002708:	4c0d      	ldr	r4, [pc, #52]	; (8002740 <__libc_init_array+0x3c>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	2600      	movs	r6, #0
 8002710:	42a6      	cmp	r6, r4
 8002712:	d109      	bne.n	8002728 <__libc_init_array+0x24>
 8002714:	4d0b      	ldr	r5, [pc, #44]	; (8002744 <__libc_init_array+0x40>)
 8002716:	4c0c      	ldr	r4, [pc, #48]	; (8002748 <__libc_init_array+0x44>)
 8002718:	f001 f99a 	bl	8003a50 <_init>
 800271c:	1b64      	subs	r4, r4, r5
 800271e:	10a4      	asrs	r4, r4, #2
 8002720:	2600      	movs	r6, #0
 8002722:	42a6      	cmp	r6, r4
 8002724:	d105      	bne.n	8002732 <__libc_init_array+0x2e>
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	f855 3b04 	ldr.w	r3, [r5], #4
 800272c:	4798      	blx	r3
 800272e:	3601      	adds	r6, #1
 8002730:	e7ee      	b.n	8002710 <__libc_init_array+0xc>
 8002732:	f855 3b04 	ldr.w	r3, [r5], #4
 8002736:	4798      	blx	r3
 8002738:	3601      	adds	r6, #1
 800273a:	e7f2      	b.n	8002722 <__libc_init_array+0x1e>
 800273c:	08003e50 	.word	0x08003e50
 8002740:	08003e50 	.word	0x08003e50
 8002744:	08003e50 	.word	0x08003e50
 8002748:	08003e54 	.word	0x08003e54

0800274c <memset>:
 800274c:	4402      	add	r2, r0
 800274e:	4603      	mov	r3, r0
 8002750:	4293      	cmp	r3, r2
 8002752:	d100      	bne.n	8002756 <memset+0xa>
 8002754:	4770      	bx	lr
 8002756:	f803 1b01 	strb.w	r1, [r3], #1
 800275a:	e7f9      	b.n	8002750 <memset+0x4>

0800275c <_free_r>:
 800275c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800275e:	2900      	cmp	r1, #0
 8002760:	d044      	beq.n	80027ec <_free_r+0x90>
 8002762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002766:	9001      	str	r0, [sp, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f1a1 0404 	sub.w	r4, r1, #4
 800276e:	bfb8      	it	lt
 8002770:	18e4      	addlt	r4, r4, r3
 8002772:	f000 fa23 	bl	8002bbc <__malloc_lock>
 8002776:	4a1e      	ldr	r2, [pc, #120]	; (80027f0 <_free_r+0x94>)
 8002778:	9801      	ldr	r0, [sp, #4]
 800277a:	6813      	ldr	r3, [r2, #0]
 800277c:	b933      	cbnz	r3, 800278c <_free_r+0x30>
 800277e:	6063      	str	r3, [r4, #4]
 8002780:	6014      	str	r4, [r2, #0]
 8002782:	b003      	add	sp, #12
 8002784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002788:	f000 ba1e 	b.w	8002bc8 <__malloc_unlock>
 800278c:	42a3      	cmp	r3, r4
 800278e:	d908      	bls.n	80027a2 <_free_r+0x46>
 8002790:	6825      	ldr	r5, [r4, #0]
 8002792:	1961      	adds	r1, r4, r5
 8002794:	428b      	cmp	r3, r1
 8002796:	bf01      	itttt	eq
 8002798:	6819      	ldreq	r1, [r3, #0]
 800279a:	685b      	ldreq	r3, [r3, #4]
 800279c:	1949      	addeq	r1, r1, r5
 800279e:	6021      	streq	r1, [r4, #0]
 80027a0:	e7ed      	b.n	800277e <_free_r+0x22>
 80027a2:	461a      	mov	r2, r3
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b10b      	cbz	r3, 80027ac <_free_r+0x50>
 80027a8:	42a3      	cmp	r3, r4
 80027aa:	d9fa      	bls.n	80027a2 <_free_r+0x46>
 80027ac:	6811      	ldr	r1, [r2, #0]
 80027ae:	1855      	adds	r5, r2, r1
 80027b0:	42a5      	cmp	r5, r4
 80027b2:	d10b      	bne.n	80027cc <_free_r+0x70>
 80027b4:	6824      	ldr	r4, [r4, #0]
 80027b6:	4421      	add	r1, r4
 80027b8:	1854      	adds	r4, r2, r1
 80027ba:	42a3      	cmp	r3, r4
 80027bc:	6011      	str	r1, [r2, #0]
 80027be:	d1e0      	bne.n	8002782 <_free_r+0x26>
 80027c0:	681c      	ldr	r4, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	6053      	str	r3, [r2, #4]
 80027c6:	4421      	add	r1, r4
 80027c8:	6011      	str	r1, [r2, #0]
 80027ca:	e7da      	b.n	8002782 <_free_r+0x26>
 80027cc:	d902      	bls.n	80027d4 <_free_r+0x78>
 80027ce:	230c      	movs	r3, #12
 80027d0:	6003      	str	r3, [r0, #0]
 80027d2:	e7d6      	b.n	8002782 <_free_r+0x26>
 80027d4:	6825      	ldr	r5, [r4, #0]
 80027d6:	1961      	adds	r1, r4, r5
 80027d8:	428b      	cmp	r3, r1
 80027da:	bf04      	itt	eq
 80027dc:	6819      	ldreq	r1, [r3, #0]
 80027de:	685b      	ldreq	r3, [r3, #4]
 80027e0:	6063      	str	r3, [r4, #4]
 80027e2:	bf04      	itt	eq
 80027e4:	1949      	addeq	r1, r1, r5
 80027e6:	6021      	streq	r1, [r4, #0]
 80027e8:	6054      	str	r4, [r2, #4]
 80027ea:	e7ca      	b.n	8002782 <_free_r+0x26>
 80027ec:	b003      	add	sp, #12
 80027ee:	bd30      	pop	{r4, r5, pc}
 80027f0:	20000848 	.word	0x20000848

080027f4 <sbrk_aligned>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	4e0e      	ldr	r6, [pc, #56]	; (8002830 <sbrk_aligned+0x3c>)
 80027f8:	460c      	mov	r4, r1
 80027fa:	6831      	ldr	r1, [r6, #0]
 80027fc:	4605      	mov	r5, r0
 80027fe:	b911      	cbnz	r1, 8002806 <sbrk_aligned+0x12>
 8002800:	f000 f8a4 	bl	800294c <_sbrk_r>
 8002804:	6030      	str	r0, [r6, #0]
 8002806:	4621      	mov	r1, r4
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f89f 	bl	800294c <_sbrk_r>
 800280e:	1c43      	adds	r3, r0, #1
 8002810:	d00a      	beq.n	8002828 <sbrk_aligned+0x34>
 8002812:	1cc4      	adds	r4, r0, #3
 8002814:	f024 0403 	bic.w	r4, r4, #3
 8002818:	42a0      	cmp	r0, r4
 800281a:	d007      	beq.n	800282c <sbrk_aligned+0x38>
 800281c:	1a21      	subs	r1, r4, r0
 800281e:	4628      	mov	r0, r5
 8002820:	f000 f894 	bl	800294c <_sbrk_r>
 8002824:	3001      	adds	r0, #1
 8002826:	d101      	bne.n	800282c <sbrk_aligned+0x38>
 8002828:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800282c:	4620      	mov	r0, r4
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	2000084c 	.word	0x2000084c

08002834 <_malloc_r>:
 8002834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002838:	1ccd      	adds	r5, r1, #3
 800283a:	f025 0503 	bic.w	r5, r5, #3
 800283e:	3508      	adds	r5, #8
 8002840:	2d0c      	cmp	r5, #12
 8002842:	bf38      	it	cc
 8002844:	250c      	movcc	r5, #12
 8002846:	2d00      	cmp	r5, #0
 8002848:	4607      	mov	r7, r0
 800284a:	db01      	blt.n	8002850 <_malloc_r+0x1c>
 800284c:	42a9      	cmp	r1, r5
 800284e:	d905      	bls.n	800285c <_malloc_r+0x28>
 8002850:	230c      	movs	r3, #12
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	2600      	movs	r6, #0
 8002856:	4630      	mov	r0, r6
 8002858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800285c:	4e2e      	ldr	r6, [pc, #184]	; (8002918 <_malloc_r+0xe4>)
 800285e:	f000 f9ad 	bl	8002bbc <__malloc_lock>
 8002862:	6833      	ldr	r3, [r6, #0]
 8002864:	461c      	mov	r4, r3
 8002866:	bb34      	cbnz	r4, 80028b6 <_malloc_r+0x82>
 8002868:	4629      	mov	r1, r5
 800286a:	4638      	mov	r0, r7
 800286c:	f7ff ffc2 	bl	80027f4 <sbrk_aligned>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	4604      	mov	r4, r0
 8002874:	d14d      	bne.n	8002912 <_malloc_r+0xde>
 8002876:	6834      	ldr	r4, [r6, #0]
 8002878:	4626      	mov	r6, r4
 800287a:	2e00      	cmp	r6, #0
 800287c:	d140      	bne.n	8002900 <_malloc_r+0xcc>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	4631      	mov	r1, r6
 8002882:	4638      	mov	r0, r7
 8002884:	eb04 0803 	add.w	r8, r4, r3
 8002888:	f000 f860 	bl	800294c <_sbrk_r>
 800288c:	4580      	cmp	r8, r0
 800288e:	d13a      	bne.n	8002906 <_malloc_r+0xd2>
 8002890:	6821      	ldr	r1, [r4, #0]
 8002892:	3503      	adds	r5, #3
 8002894:	1a6d      	subs	r5, r5, r1
 8002896:	f025 0503 	bic.w	r5, r5, #3
 800289a:	3508      	adds	r5, #8
 800289c:	2d0c      	cmp	r5, #12
 800289e:	bf38      	it	cc
 80028a0:	250c      	movcc	r5, #12
 80028a2:	4629      	mov	r1, r5
 80028a4:	4638      	mov	r0, r7
 80028a6:	f7ff ffa5 	bl	80027f4 <sbrk_aligned>
 80028aa:	3001      	adds	r0, #1
 80028ac:	d02b      	beq.n	8002906 <_malloc_r+0xd2>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	442b      	add	r3, r5
 80028b2:	6023      	str	r3, [r4, #0]
 80028b4:	e00e      	b.n	80028d4 <_malloc_r+0xa0>
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	1b52      	subs	r2, r2, r5
 80028ba:	d41e      	bmi.n	80028fa <_malloc_r+0xc6>
 80028bc:	2a0b      	cmp	r2, #11
 80028be:	d916      	bls.n	80028ee <_malloc_r+0xba>
 80028c0:	1961      	adds	r1, r4, r5
 80028c2:	42a3      	cmp	r3, r4
 80028c4:	6025      	str	r5, [r4, #0]
 80028c6:	bf18      	it	ne
 80028c8:	6059      	strne	r1, [r3, #4]
 80028ca:	6863      	ldr	r3, [r4, #4]
 80028cc:	bf08      	it	eq
 80028ce:	6031      	streq	r1, [r6, #0]
 80028d0:	5162      	str	r2, [r4, r5]
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	4638      	mov	r0, r7
 80028d6:	f104 060b 	add.w	r6, r4, #11
 80028da:	f000 f975 	bl	8002bc8 <__malloc_unlock>
 80028de:	f026 0607 	bic.w	r6, r6, #7
 80028e2:	1d23      	adds	r3, r4, #4
 80028e4:	1af2      	subs	r2, r6, r3
 80028e6:	d0b6      	beq.n	8002856 <_malloc_r+0x22>
 80028e8:	1b9b      	subs	r3, r3, r6
 80028ea:	50a3      	str	r3, [r4, r2]
 80028ec:	e7b3      	b.n	8002856 <_malloc_r+0x22>
 80028ee:	6862      	ldr	r2, [r4, #4]
 80028f0:	42a3      	cmp	r3, r4
 80028f2:	bf0c      	ite	eq
 80028f4:	6032      	streq	r2, [r6, #0]
 80028f6:	605a      	strne	r2, [r3, #4]
 80028f8:	e7ec      	b.n	80028d4 <_malloc_r+0xa0>
 80028fa:	4623      	mov	r3, r4
 80028fc:	6864      	ldr	r4, [r4, #4]
 80028fe:	e7b2      	b.n	8002866 <_malloc_r+0x32>
 8002900:	4634      	mov	r4, r6
 8002902:	6876      	ldr	r6, [r6, #4]
 8002904:	e7b9      	b.n	800287a <_malloc_r+0x46>
 8002906:	230c      	movs	r3, #12
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4638      	mov	r0, r7
 800290c:	f000 f95c 	bl	8002bc8 <__malloc_unlock>
 8002910:	e7a1      	b.n	8002856 <_malloc_r+0x22>
 8002912:	6025      	str	r5, [r4, #0]
 8002914:	e7de      	b.n	80028d4 <_malloc_r+0xa0>
 8002916:	bf00      	nop
 8002918:	20000848 	.word	0x20000848

0800291c <iprintf>:
 800291c:	b40f      	push	{r0, r1, r2, r3}
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <iprintf+0x2c>)
 8002920:	b513      	push	{r0, r1, r4, lr}
 8002922:	681c      	ldr	r4, [r3, #0]
 8002924:	b124      	cbz	r4, 8002930 <iprintf+0x14>
 8002926:	69a3      	ldr	r3, [r4, #24]
 8002928:	b913      	cbnz	r3, 8002930 <iprintf+0x14>
 800292a:	4620      	mov	r0, r4
 800292c:	f000 f8a6 	bl	8002a7c <__sinit>
 8002930:	ab05      	add	r3, sp, #20
 8002932:	9a04      	ldr	r2, [sp, #16]
 8002934:	68a1      	ldr	r1, [r4, #8]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	4620      	mov	r0, r4
 800293a:	f000 fad1 	bl	8002ee0 <_vfiprintf_r>
 800293e:	b002      	add	sp, #8
 8002940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002944:	b004      	add	sp, #16
 8002946:	4770      	bx	lr
 8002948:	20000004 	.word	0x20000004

0800294c <_sbrk_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4d06      	ldr	r5, [pc, #24]	; (8002968 <_sbrk_r+0x1c>)
 8002950:	2300      	movs	r3, #0
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	602b      	str	r3, [r5, #0]
 8002958:	f7fe f90a 	bl	8000b70 <_sbrk>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d102      	bne.n	8002966 <_sbrk_r+0x1a>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	b103      	cbz	r3, 8002966 <_sbrk_r+0x1a>
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	20000854 	.word	0x20000854

0800296c <siprintf>:
 800296c:	b40e      	push	{r1, r2, r3}
 800296e:	b500      	push	{lr}
 8002970:	b09c      	sub	sp, #112	; 0x70
 8002972:	ab1d      	add	r3, sp, #116	; 0x74
 8002974:	9002      	str	r0, [sp, #8]
 8002976:	9006      	str	r0, [sp, #24]
 8002978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800297c:	4809      	ldr	r0, [pc, #36]	; (80029a4 <siprintf+0x38>)
 800297e:	9107      	str	r1, [sp, #28]
 8002980:	9104      	str	r1, [sp, #16]
 8002982:	4909      	ldr	r1, [pc, #36]	; (80029a8 <siprintf+0x3c>)
 8002984:	f853 2b04 	ldr.w	r2, [r3], #4
 8002988:	9105      	str	r1, [sp, #20]
 800298a:	6800      	ldr	r0, [r0, #0]
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	a902      	add	r1, sp, #8
 8002990:	f000 f97c 	bl	8002c8c <_svfiprintf_r>
 8002994:	9b02      	ldr	r3, [sp, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	b01c      	add	sp, #112	; 0x70
 800299c:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a0:	b003      	add	sp, #12
 80029a2:	4770      	bx	lr
 80029a4:	20000004 	.word	0x20000004
 80029a8:	ffff0208 	.word	0xffff0208

080029ac <strcat>:
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4602      	mov	r2, r0
 80029b0:	7814      	ldrb	r4, [r2, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	3201      	adds	r2, #1
 80029b6:	2c00      	cmp	r4, #0
 80029b8:	d1fa      	bne.n	80029b0 <strcat+0x4>
 80029ba:	3b01      	subs	r3, #1
 80029bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	d1f9      	bne.n	80029bc <strcat+0x10>
 80029c8:	bd10      	pop	{r4, pc}
	...

080029cc <std>:
 80029cc:	2300      	movs	r3, #0
 80029ce:	b510      	push	{r4, lr}
 80029d0:	4604      	mov	r4, r0
 80029d2:	e9c0 3300 	strd	r3, r3, [r0]
 80029d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029da:	6083      	str	r3, [r0, #8]
 80029dc:	8181      	strh	r1, [r0, #12]
 80029de:	6643      	str	r3, [r0, #100]	; 0x64
 80029e0:	81c2      	strh	r2, [r0, #14]
 80029e2:	6183      	str	r3, [r0, #24]
 80029e4:	4619      	mov	r1, r3
 80029e6:	2208      	movs	r2, #8
 80029e8:	305c      	adds	r0, #92	; 0x5c
 80029ea:	f7ff feaf 	bl	800274c <memset>
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <std+0x38>)
 80029f0:	6263      	str	r3, [r4, #36]	; 0x24
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <std+0x3c>)
 80029f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <std+0x40>)
 80029f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <std+0x44>)
 80029fc:	6224      	str	r4, [r4, #32]
 80029fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002a00:	bd10      	pop	{r4, pc}
 8002a02:	bf00      	nop
 8002a04:	08003469 	.word	0x08003469
 8002a08:	0800348b 	.word	0x0800348b
 8002a0c:	080034c3 	.word	0x080034c3
 8002a10:	080034e7 	.word	0x080034e7

08002a14 <_cleanup_r>:
 8002a14:	4901      	ldr	r1, [pc, #4]	; (8002a1c <_cleanup_r+0x8>)
 8002a16:	f000 b8af 	b.w	8002b78 <_fwalk_reent>
 8002a1a:	bf00      	nop
 8002a1c:	080037c1 	.word	0x080037c1

08002a20 <__sfmoreglue>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	2268      	movs	r2, #104	; 0x68
 8002a24:	1e4d      	subs	r5, r1, #1
 8002a26:	4355      	muls	r5, r2
 8002a28:	460e      	mov	r6, r1
 8002a2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a2e:	f7ff ff01 	bl	8002834 <_malloc_r>
 8002a32:	4604      	mov	r4, r0
 8002a34:	b140      	cbz	r0, 8002a48 <__sfmoreglue+0x28>
 8002a36:	2100      	movs	r1, #0
 8002a38:	e9c0 1600 	strd	r1, r6, [r0]
 8002a3c:	300c      	adds	r0, #12
 8002a3e:	60a0      	str	r0, [r4, #8]
 8002a40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a44:	f7ff fe82 	bl	800274c <memset>
 8002a48:	4620      	mov	r0, r4
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}

08002a4c <__sfp_lock_acquire>:
 8002a4c:	4801      	ldr	r0, [pc, #4]	; (8002a54 <__sfp_lock_acquire+0x8>)
 8002a4e:	f000 b8b3 	b.w	8002bb8 <__retarget_lock_acquire_recursive>
 8002a52:	bf00      	nop
 8002a54:	20000851 	.word	0x20000851

08002a58 <__sfp_lock_release>:
 8002a58:	4801      	ldr	r0, [pc, #4]	; (8002a60 <__sfp_lock_release+0x8>)
 8002a5a:	f000 b8ae 	b.w	8002bba <__retarget_lock_release_recursive>
 8002a5e:	bf00      	nop
 8002a60:	20000851 	.word	0x20000851

08002a64 <__sinit_lock_acquire>:
 8002a64:	4801      	ldr	r0, [pc, #4]	; (8002a6c <__sinit_lock_acquire+0x8>)
 8002a66:	f000 b8a7 	b.w	8002bb8 <__retarget_lock_acquire_recursive>
 8002a6a:	bf00      	nop
 8002a6c:	20000852 	.word	0x20000852

08002a70 <__sinit_lock_release>:
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <__sinit_lock_release+0x8>)
 8002a72:	f000 b8a2 	b.w	8002bba <__retarget_lock_release_recursive>
 8002a76:	bf00      	nop
 8002a78:	20000852 	.word	0x20000852

08002a7c <__sinit>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	4604      	mov	r4, r0
 8002a80:	f7ff fff0 	bl	8002a64 <__sinit_lock_acquire>
 8002a84:	69a3      	ldr	r3, [r4, #24]
 8002a86:	b11b      	cbz	r3, 8002a90 <__sinit+0x14>
 8002a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a8c:	f7ff bff0 	b.w	8002a70 <__sinit_lock_release>
 8002a90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a94:	6523      	str	r3, [r4, #80]	; 0x50
 8002a96:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <__sinit+0x68>)
 8002a98:	4a13      	ldr	r2, [pc, #76]	; (8002ae8 <__sinit+0x6c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a9e:	42a3      	cmp	r3, r4
 8002aa0:	bf04      	itt	eq
 8002aa2:	2301      	moveq	r3, #1
 8002aa4:	61a3      	streq	r3, [r4, #24]
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	f000 f820 	bl	8002aec <__sfp>
 8002aac:	6060      	str	r0, [r4, #4]
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f000 f81c 	bl	8002aec <__sfp>
 8002ab4:	60a0      	str	r0, [r4, #8]
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f000 f818 	bl	8002aec <__sfp>
 8002abc:	2200      	movs	r2, #0
 8002abe:	60e0      	str	r0, [r4, #12]
 8002ac0:	2104      	movs	r1, #4
 8002ac2:	6860      	ldr	r0, [r4, #4]
 8002ac4:	f7ff ff82 	bl	80029cc <std>
 8002ac8:	68a0      	ldr	r0, [r4, #8]
 8002aca:	2201      	movs	r2, #1
 8002acc:	2109      	movs	r1, #9
 8002ace:	f7ff ff7d 	bl	80029cc <std>
 8002ad2:	68e0      	ldr	r0, [r4, #12]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	2112      	movs	r1, #18
 8002ad8:	f7ff ff78 	bl	80029cc <std>
 8002adc:	2301      	movs	r3, #1
 8002ade:	61a3      	str	r3, [r4, #24]
 8002ae0:	e7d2      	b.n	8002a88 <__sinit+0xc>
 8002ae2:	bf00      	nop
 8002ae4:	08003db8 	.word	0x08003db8
 8002ae8:	08002a15 	.word	0x08002a15

08002aec <__sfp>:
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	4607      	mov	r7, r0
 8002af0:	f7ff ffac 	bl	8002a4c <__sfp_lock_acquire>
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <__sfp+0x84>)
 8002af6:	681e      	ldr	r6, [r3, #0]
 8002af8:	69b3      	ldr	r3, [r6, #24]
 8002afa:	b913      	cbnz	r3, 8002b02 <__sfp+0x16>
 8002afc:	4630      	mov	r0, r6
 8002afe:	f7ff ffbd 	bl	8002a7c <__sinit>
 8002b02:	3648      	adds	r6, #72	; 0x48
 8002b04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	d503      	bpl.n	8002b14 <__sfp+0x28>
 8002b0c:	6833      	ldr	r3, [r6, #0]
 8002b0e:	b30b      	cbz	r3, 8002b54 <__sfp+0x68>
 8002b10:	6836      	ldr	r6, [r6, #0]
 8002b12:	e7f7      	b.n	8002b04 <__sfp+0x18>
 8002b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b18:	b9d5      	cbnz	r5, 8002b50 <__sfp+0x64>
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <__sfp+0x88>)
 8002b1c:	60e3      	str	r3, [r4, #12]
 8002b1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b22:	6665      	str	r5, [r4, #100]	; 0x64
 8002b24:	f000 f847 	bl	8002bb6 <__retarget_lock_init_recursive>
 8002b28:	f7ff ff96 	bl	8002a58 <__sfp_lock_release>
 8002b2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b34:	6025      	str	r5, [r4, #0]
 8002b36:	61a5      	str	r5, [r4, #24]
 8002b38:	2208      	movs	r2, #8
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b40:	f7ff fe04 	bl	800274c <memset>
 8002b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b50:	3468      	adds	r4, #104	; 0x68
 8002b52:	e7d9      	b.n	8002b08 <__sfp+0x1c>
 8002b54:	2104      	movs	r1, #4
 8002b56:	4638      	mov	r0, r7
 8002b58:	f7ff ff62 	bl	8002a20 <__sfmoreglue>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	6030      	str	r0, [r6, #0]
 8002b60:	2800      	cmp	r0, #0
 8002b62:	d1d5      	bne.n	8002b10 <__sfp+0x24>
 8002b64:	f7ff ff78 	bl	8002a58 <__sfp_lock_release>
 8002b68:	230c      	movs	r3, #12
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	e7ee      	b.n	8002b4c <__sfp+0x60>
 8002b6e:	bf00      	nop
 8002b70:	08003db8 	.word	0x08003db8
 8002b74:	ffff0001 	.word	0xffff0001

08002b78 <_fwalk_reent>:
 8002b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b7c:	4606      	mov	r6, r0
 8002b7e:	4688      	mov	r8, r1
 8002b80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b84:	2700      	movs	r7, #0
 8002b86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b8a:	f1b9 0901 	subs.w	r9, r9, #1
 8002b8e:	d505      	bpl.n	8002b9c <_fwalk_reent+0x24>
 8002b90:	6824      	ldr	r4, [r4, #0]
 8002b92:	2c00      	cmp	r4, #0
 8002b94:	d1f7      	bne.n	8002b86 <_fwalk_reent+0xe>
 8002b96:	4638      	mov	r0, r7
 8002b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b9c:	89ab      	ldrh	r3, [r5, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d907      	bls.n	8002bb2 <_fwalk_reent+0x3a>
 8002ba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <_fwalk_reent+0x3a>
 8002baa:	4629      	mov	r1, r5
 8002bac:	4630      	mov	r0, r6
 8002bae:	47c0      	blx	r8
 8002bb0:	4307      	orrs	r7, r0
 8002bb2:	3568      	adds	r5, #104	; 0x68
 8002bb4:	e7e9      	b.n	8002b8a <_fwalk_reent+0x12>

08002bb6 <__retarget_lock_init_recursive>:
 8002bb6:	4770      	bx	lr

08002bb8 <__retarget_lock_acquire_recursive>:
 8002bb8:	4770      	bx	lr

08002bba <__retarget_lock_release_recursive>:
 8002bba:	4770      	bx	lr

08002bbc <__malloc_lock>:
 8002bbc:	4801      	ldr	r0, [pc, #4]	; (8002bc4 <__malloc_lock+0x8>)
 8002bbe:	f7ff bffb 	b.w	8002bb8 <__retarget_lock_acquire_recursive>
 8002bc2:	bf00      	nop
 8002bc4:	20000850 	.word	0x20000850

08002bc8 <__malloc_unlock>:
 8002bc8:	4801      	ldr	r0, [pc, #4]	; (8002bd0 <__malloc_unlock+0x8>)
 8002bca:	f7ff bff6 	b.w	8002bba <__retarget_lock_release_recursive>
 8002bce:	bf00      	nop
 8002bd0:	20000850 	.word	0x20000850

08002bd4 <__ssputs_r>:
 8002bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bd8:	688e      	ldr	r6, [r1, #8]
 8002bda:	429e      	cmp	r6, r3
 8002bdc:	4682      	mov	sl, r0
 8002bde:	460c      	mov	r4, r1
 8002be0:	4690      	mov	r8, r2
 8002be2:	461f      	mov	r7, r3
 8002be4:	d838      	bhi.n	8002c58 <__ssputs_r+0x84>
 8002be6:	898a      	ldrh	r2, [r1, #12]
 8002be8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bec:	d032      	beq.n	8002c54 <__ssputs_r+0x80>
 8002bee:	6825      	ldr	r5, [r4, #0]
 8002bf0:	6909      	ldr	r1, [r1, #16]
 8002bf2:	eba5 0901 	sub.w	r9, r5, r1
 8002bf6:	6965      	ldr	r5, [r4, #20]
 8002bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c00:	3301      	adds	r3, #1
 8002c02:	444b      	add	r3, r9
 8002c04:	106d      	asrs	r5, r5, #1
 8002c06:	429d      	cmp	r5, r3
 8002c08:	bf38      	it	cc
 8002c0a:	461d      	movcc	r5, r3
 8002c0c:	0553      	lsls	r3, r2, #21
 8002c0e:	d531      	bpl.n	8002c74 <__ssputs_r+0xa0>
 8002c10:	4629      	mov	r1, r5
 8002c12:	f7ff fe0f 	bl	8002834 <_malloc_r>
 8002c16:	4606      	mov	r6, r0
 8002c18:	b950      	cbnz	r0, 8002c30 <__ssputs_r+0x5c>
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	f8ca 3000 	str.w	r3, [sl]
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c26:	81a3      	strh	r3, [r4, #12]
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c30:	6921      	ldr	r1, [r4, #16]
 8002c32:	464a      	mov	r2, r9
 8002c34:	f000 fe78 	bl	8003928 <memcpy>
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	6126      	str	r6, [r4, #16]
 8002c46:	6165      	str	r5, [r4, #20]
 8002c48:	444e      	add	r6, r9
 8002c4a:	eba5 0509 	sub.w	r5, r5, r9
 8002c4e:	6026      	str	r6, [r4, #0]
 8002c50:	60a5      	str	r5, [r4, #8]
 8002c52:	463e      	mov	r6, r7
 8002c54:	42be      	cmp	r6, r7
 8002c56:	d900      	bls.n	8002c5a <__ssputs_r+0x86>
 8002c58:	463e      	mov	r6, r7
 8002c5a:	6820      	ldr	r0, [r4, #0]
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	f000 fe70 	bl	8003944 <memmove>
 8002c64:	68a3      	ldr	r3, [r4, #8]
 8002c66:	1b9b      	subs	r3, r3, r6
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	4433      	add	r3, r6
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7db      	b.n	8002c2c <__ssputs_r+0x58>
 8002c74:	462a      	mov	r2, r5
 8002c76:	f000 fe7f 	bl	8003978 <_realloc_r>
 8002c7a:	4606      	mov	r6, r0
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d1e1      	bne.n	8002c44 <__ssputs_r+0x70>
 8002c80:	6921      	ldr	r1, [r4, #16]
 8002c82:	4650      	mov	r0, sl
 8002c84:	f7ff fd6a 	bl	800275c <_free_r>
 8002c88:	e7c7      	b.n	8002c1a <__ssputs_r+0x46>
	...

08002c8c <_svfiprintf_r>:
 8002c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c90:	4698      	mov	r8, r3
 8002c92:	898b      	ldrh	r3, [r1, #12]
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	b09d      	sub	sp, #116	; 0x74
 8002c98:	4607      	mov	r7, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	d50e      	bpl.n	8002cbe <_svfiprintf_r+0x32>
 8002ca0:	690b      	ldr	r3, [r1, #16]
 8002ca2:	b963      	cbnz	r3, 8002cbe <_svfiprintf_r+0x32>
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	f7ff fdc5 	bl	8002834 <_malloc_r>
 8002caa:	6028      	str	r0, [r5, #0]
 8002cac:	6128      	str	r0, [r5, #16]
 8002cae:	b920      	cbnz	r0, 8002cba <_svfiprintf_r+0x2e>
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb8:	e0d1      	b.n	8002e5e <_svfiprintf_r+0x1d2>
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	616b      	str	r3, [r5, #20]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ccc:	2330      	movs	r3, #48	; 0x30
 8002cce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e78 <_svfiprintf_r+0x1ec>
 8002cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cd6:	f04f 0901 	mov.w	r9, #1
 8002cda:	4623      	mov	r3, r4
 8002cdc:	469a      	mov	sl, r3
 8002cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ce2:	b10a      	cbz	r2, 8002ce8 <_svfiprintf_r+0x5c>
 8002ce4:	2a25      	cmp	r2, #37	; 0x25
 8002ce6:	d1f9      	bne.n	8002cdc <_svfiprintf_r+0x50>
 8002ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cec:	d00b      	beq.n	8002d06 <_svfiprintf_r+0x7a>
 8002cee:	465b      	mov	r3, fp
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	f7ff ff6d 	bl	8002bd4 <__ssputs_r>
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	f000 80aa 	beq.w	8002e54 <_svfiprintf_r+0x1c8>
 8002d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d02:	445a      	add	r2, fp
 8002d04:	9209      	str	r2, [sp, #36]	; 0x24
 8002d06:	f89a 3000 	ldrb.w	r3, [sl]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80a2 	beq.w	8002e54 <_svfiprintf_r+0x1c8>
 8002d10:	2300      	movs	r3, #0
 8002d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d1a:	f10a 0a01 	add.w	sl, sl, #1
 8002d1e:	9304      	str	r3, [sp, #16]
 8002d20:	9307      	str	r3, [sp, #28]
 8002d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d26:	931a      	str	r3, [sp, #104]	; 0x68
 8002d28:	4654      	mov	r4, sl
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d30:	4851      	ldr	r0, [pc, #324]	; (8002e78 <_svfiprintf_r+0x1ec>)
 8002d32:	f7fd fa5d 	bl	80001f0 <memchr>
 8002d36:	9a04      	ldr	r2, [sp, #16]
 8002d38:	b9d8      	cbnz	r0, 8002d72 <_svfiprintf_r+0xe6>
 8002d3a:	06d0      	lsls	r0, r2, #27
 8002d3c:	bf44      	itt	mi
 8002d3e:	2320      	movmi	r3, #32
 8002d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d44:	0711      	lsls	r1, r2, #28
 8002d46:	bf44      	itt	mi
 8002d48:	232b      	movmi	r3, #43	; 0x2b
 8002d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d52:	2b2a      	cmp	r3, #42	; 0x2a
 8002d54:	d015      	beq.n	8002d82 <_svfiprintf_r+0xf6>
 8002d56:	9a07      	ldr	r2, [sp, #28]
 8002d58:	4654      	mov	r4, sl
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f04f 0c0a 	mov.w	ip, #10
 8002d60:	4621      	mov	r1, r4
 8002d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d66:	3b30      	subs	r3, #48	; 0x30
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	d94e      	bls.n	8002e0a <_svfiprintf_r+0x17e>
 8002d6c:	b1b0      	cbz	r0, 8002d9c <_svfiprintf_r+0x110>
 8002d6e:	9207      	str	r2, [sp, #28]
 8002d70:	e014      	b.n	8002d9c <_svfiprintf_r+0x110>
 8002d72:	eba0 0308 	sub.w	r3, r0, r8
 8002d76:	fa09 f303 	lsl.w	r3, r9, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	9304      	str	r3, [sp, #16]
 8002d7e:	46a2      	mov	sl, r4
 8002d80:	e7d2      	b.n	8002d28 <_svfiprintf_r+0x9c>
 8002d82:	9b03      	ldr	r3, [sp, #12]
 8002d84:	1d19      	adds	r1, r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	9103      	str	r1, [sp, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfbb      	ittet	lt
 8002d8e:	425b      	neglt	r3, r3
 8002d90:	f042 0202 	orrlt.w	r2, r2, #2
 8002d94:	9307      	strge	r3, [sp, #28]
 8002d96:	9307      	strlt	r3, [sp, #28]
 8002d98:	bfb8      	it	lt
 8002d9a:	9204      	strlt	r2, [sp, #16]
 8002d9c:	7823      	ldrb	r3, [r4, #0]
 8002d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002da0:	d10c      	bne.n	8002dbc <_svfiprintf_r+0x130>
 8002da2:	7863      	ldrb	r3, [r4, #1]
 8002da4:	2b2a      	cmp	r3, #42	; 0x2a
 8002da6:	d135      	bne.n	8002e14 <_svfiprintf_r+0x188>
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	1d1a      	adds	r2, r3, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	9203      	str	r2, [sp, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bfb8      	it	lt
 8002db4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002db8:	3402      	adds	r4, #2
 8002dba:	9305      	str	r3, [sp, #20]
 8002dbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e88 <_svfiprintf_r+0x1fc>
 8002dc0:	7821      	ldrb	r1, [r4, #0]
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	4650      	mov	r0, sl
 8002dc6:	f7fd fa13 	bl	80001f0 <memchr>
 8002dca:	b140      	cbz	r0, 8002dde <_svfiprintf_r+0x152>
 8002dcc:	2340      	movs	r3, #64	; 0x40
 8002dce:	eba0 000a 	sub.w	r0, r0, sl
 8002dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8002dd6:	9b04      	ldr	r3, [sp, #16]
 8002dd8:	4303      	orrs	r3, r0
 8002dda:	3401      	adds	r4, #1
 8002ddc:	9304      	str	r3, [sp, #16]
 8002dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de2:	4826      	ldr	r0, [pc, #152]	; (8002e7c <_svfiprintf_r+0x1f0>)
 8002de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002de8:	2206      	movs	r2, #6
 8002dea:	f7fd fa01 	bl	80001f0 <memchr>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d038      	beq.n	8002e64 <_svfiprintf_r+0x1d8>
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <_svfiprintf_r+0x1f4>)
 8002df4:	bb1b      	cbnz	r3, 8002e3e <_svfiprintf_r+0x1b2>
 8002df6:	9b03      	ldr	r3, [sp, #12]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	3308      	adds	r3, #8
 8002e00:	9303      	str	r3, [sp, #12]
 8002e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e04:	4433      	add	r3, r6
 8002e06:	9309      	str	r3, [sp, #36]	; 0x24
 8002e08:	e767      	b.n	8002cda <_svfiprintf_r+0x4e>
 8002e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e0e:	460c      	mov	r4, r1
 8002e10:	2001      	movs	r0, #1
 8002e12:	e7a5      	b.n	8002d60 <_svfiprintf_r+0xd4>
 8002e14:	2300      	movs	r3, #0
 8002e16:	3401      	adds	r4, #1
 8002e18:	9305      	str	r3, [sp, #20]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 0c0a 	mov.w	ip, #10
 8002e20:	4620      	mov	r0, r4
 8002e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e26:	3a30      	subs	r2, #48	; 0x30
 8002e28:	2a09      	cmp	r2, #9
 8002e2a:	d903      	bls.n	8002e34 <_svfiprintf_r+0x1a8>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0c5      	beq.n	8002dbc <_svfiprintf_r+0x130>
 8002e30:	9105      	str	r1, [sp, #20]
 8002e32:	e7c3      	b.n	8002dbc <_svfiprintf_r+0x130>
 8002e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e38:	4604      	mov	r4, r0
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e7f0      	b.n	8002e20 <_svfiprintf_r+0x194>
 8002e3e:	ab03      	add	r3, sp, #12
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	462a      	mov	r2, r5
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <_svfiprintf_r+0x1f8>)
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	4638      	mov	r0, r7
 8002e4a:	f3af 8000 	nop.w
 8002e4e:	1c42      	adds	r2, r0, #1
 8002e50:	4606      	mov	r6, r0
 8002e52:	d1d6      	bne.n	8002e02 <_svfiprintf_r+0x176>
 8002e54:	89ab      	ldrh	r3, [r5, #12]
 8002e56:	065b      	lsls	r3, r3, #25
 8002e58:	f53f af2c 	bmi.w	8002cb4 <_svfiprintf_r+0x28>
 8002e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e5e:	b01d      	add	sp, #116	; 0x74
 8002e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e64:	ab03      	add	r3, sp, #12
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	462a      	mov	r2, r5
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <_svfiprintf_r+0x1f8>)
 8002e6c:	a904      	add	r1, sp, #16
 8002e6e:	4638      	mov	r0, r7
 8002e70:	f000 f9d4 	bl	800321c <_printf_i>
 8002e74:	e7eb      	b.n	8002e4e <_svfiprintf_r+0x1c2>
 8002e76:	bf00      	nop
 8002e78:	08003e1c 	.word	0x08003e1c
 8002e7c:	08003e26 	.word	0x08003e26
 8002e80:	00000000 	.word	0x00000000
 8002e84:	08002bd5 	.word	0x08002bd5
 8002e88:	08003e22 	.word	0x08003e22

08002e8c <__sfputc_r>:
 8002e8c:	6893      	ldr	r3, [r2, #8]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	b410      	push	{r4}
 8002e94:	6093      	str	r3, [r2, #8]
 8002e96:	da08      	bge.n	8002eaa <__sfputc_r+0x1e>
 8002e98:	6994      	ldr	r4, [r2, #24]
 8002e9a:	42a3      	cmp	r3, r4
 8002e9c:	db01      	blt.n	8002ea2 <__sfputc_r+0x16>
 8002e9e:	290a      	cmp	r1, #10
 8002ea0:	d103      	bne.n	8002eaa <__sfputc_r+0x1e>
 8002ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ea6:	f000 bb23 	b.w	80034f0 <__swbuf_r>
 8002eaa:	6813      	ldr	r3, [r2, #0]
 8002eac:	1c58      	adds	r0, r3, #1
 8002eae:	6010      	str	r0, [r2, #0]
 8002eb0:	7019      	strb	r1, [r3, #0]
 8002eb2:	4608      	mov	r0, r1
 8002eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <__sfputs_r>:
 8002eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	460f      	mov	r7, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	18d5      	adds	r5, r2, r3
 8002ec4:	42ac      	cmp	r4, r5
 8002ec6:	d101      	bne.n	8002ecc <__sfputs_r+0x12>
 8002ec8:	2000      	movs	r0, #0
 8002eca:	e007      	b.n	8002edc <__sfputs_r+0x22>
 8002ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ed0:	463a      	mov	r2, r7
 8002ed2:	4630      	mov	r0, r6
 8002ed4:	f7ff ffda 	bl	8002e8c <__sfputc_r>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d1f3      	bne.n	8002ec4 <__sfputs_r+0xa>
 8002edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ee0 <_vfiprintf_r>:
 8002ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ee4:	460d      	mov	r5, r1
 8002ee6:	b09d      	sub	sp, #116	; 0x74
 8002ee8:	4614      	mov	r4, r2
 8002eea:	4698      	mov	r8, r3
 8002eec:	4606      	mov	r6, r0
 8002eee:	b118      	cbz	r0, 8002ef8 <_vfiprintf_r+0x18>
 8002ef0:	6983      	ldr	r3, [r0, #24]
 8002ef2:	b90b      	cbnz	r3, 8002ef8 <_vfiprintf_r+0x18>
 8002ef4:	f7ff fdc2 	bl	8002a7c <__sinit>
 8002ef8:	4b89      	ldr	r3, [pc, #548]	; (8003120 <_vfiprintf_r+0x240>)
 8002efa:	429d      	cmp	r5, r3
 8002efc:	d11b      	bne.n	8002f36 <_vfiprintf_r+0x56>
 8002efe:	6875      	ldr	r5, [r6, #4]
 8002f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f02:	07d9      	lsls	r1, r3, #31
 8002f04:	d405      	bmi.n	8002f12 <_vfiprintf_r+0x32>
 8002f06:	89ab      	ldrh	r3, [r5, #12]
 8002f08:	059a      	lsls	r2, r3, #22
 8002f0a:	d402      	bmi.n	8002f12 <_vfiprintf_r+0x32>
 8002f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f0e:	f7ff fe53 	bl	8002bb8 <__retarget_lock_acquire_recursive>
 8002f12:	89ab      	ldrh	r3, [r5, #12]
 8002f14:	071b      	lsls	r3, r3, #28
 8002f16:	d501      	bpl.n	8002f1c <_vfiprintf_r+0x3c>
 8002f18:	692b      	ldr	r3, [r5, #16]
 8002f1a:	b9eb      	cbnz	r3, 8002f58 <_vfiprintf_r+0x78>
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4630      	mov	r0, r6
 8002f20:	f000 fb4a 	bl	80035b8 <__swsetup_r>
 8002f24:	b1c0      	cbz	r0, 8002f58 <_vfiprintf_r+0x78>
 8002f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f28:	07dc      	lsls	r4, r3, #31
 8002f2a:	d50e      	bpl.n	8002f4a <_vfiprintf_r+0x6a>
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f30:	b01d      	add	sp, #116	; 0x74
 8002f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <_vfiprintf_r+0x244>)
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	d101      	bne.n	8002f40 <_vfiprintf_r+0x60>
 8002f3c:	68b5      	ldr	r5, [r6, #8]
 8002f3e:	e7df      	b.n	8002f00 <_vfiprintf_r+0x20>
 8002f40:	4b79      	ldr	r3, [pc, #484]	; (8003128 <_vfiprintf_r+0x248>)
 8002f42:	429d      	cmp	r5, r3
 8002f44:	bf08      	it	eq
 8002f46:	68f5      	ldreq	r5, [r6, #12]
 8002f48:	e7da      	b.n	8002f00 <_vfiprintf_r+0x20>
 8002f4a:	89ab      	ldrh	r3, [r5, #12]
 8002f4c:	0598      	lsls	r0, r3, #22
 8002f4e:	d4ed      	bmi.n	8002f2c <_vfiprintf_r+0x4c>
 8002f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f52:	f7ff fe32 	bl	8002bba <__retarget_lock_release_recursive>
 8002f56:	e7e9      	b.n	8002f2c <_vfiprintf_r+0x4c>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f66:	2330      	movs	r3, #48	; 0x30
 8002f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800312c <_vfiprintf_r+0x24c>
 8002f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f70:	f04f 0901 	mov.w	r9, #1
 8002f74:	4623      	mov	r3, r4
 8002f76:	469a      	mov	sl, r3
 8002f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f7c:	b10a      	cbz	r2, 8002f82 <_vfiprintf_r+0xa2>
 8002f7e:	2a25      	cmp	r2, #37	; 0x25
 8002f80:	d1f9      	bne.n	8002f76 <_vfiprintf_r+0x96>
 8002f82:	ebba 0b04 	subs.w	fp, sl, r4
 8002f86:	d00b      	beq.n	8002fa0 <_vfiprintf_r+0xc0>
 8002f88:	465b      	mov	r3, fp
 8002f8a:	4622      	mov	r2, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff ff93 	bl	8002eba <__sfputs_r>
 8002f94:	3001      	adds	r0, #1
 8002f96:	f000 80aa 	beq.w	80030ee <_vfiprintf_r+0x20e>
 8002f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f9c:	445a      	add	r2, fp
 8002f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a2 	beq.w	80030ee <_vfiprintf_r+0x20e>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fb4:	f10a 0a01 	add.w	sl, sl, #1
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	9307      	str	r3, [sp, #28]
 8002fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8002fc2:	4654      	mov	r4, sl
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fca:	4858      	ldr	r0, [pc, #352]	; (800312c <_vfiprintf_r+0x24c>)
 8002fcc:	f7fd f910 	bl	80001f0 <memchr>
 8002fd0:	9a04      	ldr	r2, [sp, #16]
 8002fd2:	b9d8      	cbnz	r0, 800300c <_vfiprintf_r+0x12c>
 8002fd4:	06d1      	lsls	r1, r2, #27
 8002fd6:	bf44      	itt	mi
 8002fd8:	2320      	movmi	r3, #32
 8002fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fde:	0713      	lsls	r3, r2, #28
 8002fe0:	bf44      	itt	mi
 8002fe2:	232b      	movmi	r3, #43	; 0x2b
 8002fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8002fec:	2b2a      	cmp	r3, #42	; 0x2a
 8002fee:	d015      	beq.n	800301c <_vfiprintf_r+0x13c>
 8002ff0:	9a07      	ldr	r2, [sp, #28]
 8002ff2:	4654      	mov	r4, sl
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f04f 0c0a 	mov.w	ip, #10
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003000:	3b30      	subs	r3, #48	; 0x30
 8003002:	2b09      	cmp	r3, #9
 8003004:	d94e      	bls.n	80030a4 <_vfiprintf_r+0x1c4>
 8003006:	b1b0      	cbz	r0, 8003036 <_vfiprintf_r+0x156>
 8003008:	9207      	str	r2, [sp, #28]
 800300a:	e014      	b.n	8003036 <_vfiprintf_r+0x156>
 800300c:	eba0 0308 	sub.w	r3, r0, r8
 8003010:	fa09 f303 	lsl.w	r3, r9, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	9304      	str	r3, [sp, #16]
 8003018:	46a2      	mov	sl, r4
 800301a:	e7d2      	b.n	8002fc2 <_vfiprintf_r+0xe2>
 800301c:	9b03      	ldr	r3, [sp, #12]
 800301e:	1d19      	adds	r1, r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	9103      	str	r1, [sp, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	bfbb      	ittet	lt
 8003028:	425b      	neglt	r3, r3
 800302a:	f042 0202 	orrlt.w	r2, r2, #2
 800302e:	9307      	strge	r3, [sp, #28]
 8003030:	9307      	strlt	r3, [sp, #28]
 8003032:	bfb8      	it	lt
 8003034:	9204      	strlt	r2, [sp, #16]
 8003036:	7823      	ldrb	r3, [r4, #0]
 8003038:	2b2e      	cmp	r3, #46	; 0x2e
 800303a:	d10c      	bne.n	8003056 <_vfiprintf_r+0x176>
 800303c:	7863      	ldrb	r3, [r4, #1]
 800303e:	2b2a      	cmp	r3, #42	; 0x2a
 8003040:	d135      	bne.n	80030ae <_vfiprintf_r+0x1ce>
 8003042:	9b03      	ldr	r3, [sp, #12]
 8003044:	1d1a      	adds	r2, r3, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	9203      	str	r2, [sp, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	bfb8      	it	lt
 800304e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003052:	3402      	adds	r4, #2
 8003054:	9305      	str	r3, [sp, #20]
 8003056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800313c <_vfiprintf_r+0x25c>
 800305a:	7821      	ldrb	r1, [r4, #0]
 800305c:	2203      	movs	r2, #3
 800305e:	4650      	mov	r0, sl
 8003060:	f7fd f8c6 	bl	80001f0 <memchr>
 8003064:	b140      	cbz	r0, 8003078 <_vfiprintf_r+0x198>
 8003066:	2340      	movs	r3, #64	; 0x40
 8003068:	eba0 000a 	sub.w	r0, r0, sl
 800306c:	fa03 f000 	lsl.w	r0, r3, r0
 8003070:	9b04      	ldr	r3, [sp, #16]
 8003072:	4303      	orrs	r3, r0
 8003074:	3401      	adds	r4, #1
 8003076:	9304      	str	r3, [sp, #16]
 8003078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800307c:	482c      	ldr	r0, [pc, #176]	; (8003130 <_vfiprintf_r+0x250>)
 800307e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003082:	2206      	movs	r2, #6
 8003084:	f7fd f8b4 	bl	80001f0 <memchr>
 8003088:	2800      	cmp	r0, #0
 800308a:	d03f      	beq.n	800310c <_vfiprintf_r+0x22c>
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <_vfiprintf_r+0x254>)
 800308e:	bb1b      	cbnz	r3, 80030d8 <_vfiprintf_r+0x1f8>
 8003090:	9b03      	ldr	r3, [sp, #12]
 8003092:	3307      	adds	r3, #7
 8003094:	f023 0307 	bic.w	r3, r3, #7
 8003098:	3308      	adds	r3, #8
 800309a:	9303      	str	r3, [sp, #12]
 800309c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800309e:	443b      	add	r3, r7
 80030a0:	9309      	str	r3, [sp, #36]	; 0x24
 80030a2:	e767      	b.n	8002f74 <_vfiprintf_r+0x94>
 80030a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80030a8:	460c      	mov	r4, r1
 80030aa:	2001      	movs	r0, #1
 80030ac:	e7a5      	b.n	8002ffa <_vfiprintf_r+0x11a>
 80030ae:	2300      	movs	r3, #0
 80030b0:	3401      	adds	r4, #1
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	4619      	mov	r1, r3
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	4620      	mov	r0, r4
 80030bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030c0:	3a30      	subs	r2, #48	; 0x30
 80030c2:	2a09      	cmp	r2, #9
 80030c4:	d903      	bls.n	80030ce <_vfiprintf_r+0x1ee>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0c5      	beq.n	8003056 <_vfiprintf_r+0x176>
 80030ca:	9105      	str	r1, [sp, #20]
 80030cc:	e7c3      	b.n	8003056 <_vfiprintf_r+0x176>
 80030ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80030d2:	4604      	mov	r4, r0
 80030d4:	2301      	movs	r3, #1
 80030d6:	e7f0      	b.n	80030ba <_vfiprintf_r+0x1da>
 80030d8:	ab03      	add	r3, sp, #12
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	462a      	mov	r2, r5
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <_vfiprintf_r+0x258>)
 80030e0:	a904      	add	r1, sp, #16
 80030e2:	4630      	mov	r0, r6
 80030e4:	f3af 8000 	nop.w
 80030e8:	4607      	mov	r7, r0
 80030ea:	1c78      	adds	r0, r7, #1
 80030ec:	d1d6      	bne.n	800309c <_vfiprintf_r+0x1bc>
 80030ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030f0:	07d9      	lsls	r1, r3, #31
 80030f2:	d405      	bmi.n	8003100 <_vfiprintf_r+0x220>
 80030f4:	89ab      	ldrh	r3, [r5, #12]
 80030f6:	059a      	lsls	r2, r3, #22
 80030f8:	d402      	bmi.n	8003100 <_vfiprintf_r+0x220>
 80030fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030fc:	f7ff fd5d 	bl	8002bba <__retarget_lock_release_recursive>
 8003100:	89ab      	ldrh	r3, [r5, #12]
 8003102:	065b      	lsls	r3, r3, #25
 8003104:	f53f af12 	bmi.w	8002f2c <_vfiprintf_r+0x4c>
 8003108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800310a:	e711      	b.n	8002f30 <_vfiprintf_r+0x50>
 800310c:	ab03      	add	r3, sp, #12
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	462a      	mov	r2, r5
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <_vfiprintf_r+0x258>)
 8003114:	a904      	add	r1, sp, #16
 8003116:	4630      	mov	r0, r6
 8003118:	f000 f880 	bl	800321c <_printf_i>
 800311c:	e7e4      	b.n	80030e8 <_vfiprintf_r+0x208>
 800311e:	bf00      	nop
 8003120:	08003ddc 	.word	0x08003ddc
 8003124:	08003dfc 	.word	0x08003dfc
 8003128:	08003dbc 	.word	0x08003dbc
 800312c:	08003e1c 	.word	0x08003e1c
 8003130:	08003e26 	.word	0x08003e26
 8003134:	00000000 	.word	0x00000000
 8003138:	08002ebb 	.word	0x08002ebb
 800313c:	08003e22 	.word	0x08003e22

08003140 <_printf_common>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	4616      	mov	r6, r2
 8003146:	4699      	mov	r9, r3
 8003148:	688a      	ldr	r2, [r1, #8]
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003150:	4293      	cmp	r3, r2
 8003152:	bfb8      	it	lt
 8003154:	4613      	movlt	r3, r2
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800315c:	4607      	mov	r7, r0
 800315e:	460c      	mov	r4, r1
 8003160:	b10a      	cbz	r2, 8003166 <_printf_common+0x26>
 8003162:	3301      	adds	r3, #1
 8003164:	6033      	str	r3, [r6, #0]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	0699      	lsls	r1, r3, #26
 800316a:	bf42      	ittt	mi
 800316c:	6833      	ldrmi	r3, [r6, #0]
 800316e:	3302      	addmi	r3, #2
 8003170:	6033      	strmi	r3, [r6, #0]
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	f015 0506 	ands.w	r5, r5, #6
 8003178:	d106      	bne.n	8003188 <_printf_common+0x48>
 800317a:	f104 0a19 	add.w	sl, r4, #25
 800317e:	68e3      	ldr	r3, [r4, #12]
 8003180:	6832      	ldr	r2, [r6, #0]
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	42ab      	cmp	r3, r5
 8003186:	dc26      	bgt.n	80031d6 <_printf_common+0x96>
 8003188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800318c:	1e13      	subs	r3, r2, #0
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	bf18      	it	ne
 8003192:	2301      	movne	r3, #1
 8003194:	0692      	lsls	r2, r2, #26
 8003196:	d42b      	bmi.n	80031f0 <_printf_common+0xb0>
 8003198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800319c:	4649      	mov	r1, r9
 800319e:	4638      	mov	r0, r7
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d01e      	beq.n	80031e4 <_printf_common+0xa4>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	68e5      	ldr	r5, [r4, #12]
 80031aa:	6832      	ldr	r2, [r6, #0]
 80031ac:	f003 0306 	and.w	r3, r3, #6
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	bf08      	it	eq
 80031b4:	1aad      	subeq	r5, r5, r2
 80031b6:	68a3      	ldr	r3, [r4, #8]
 80031b8:	6922      	ldr	r2, [r4, #16]
 80031ba:	bf0c      	ite	eq
 80031bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c0:	2500      	movne	r5, #0
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bfc4      	itt	gt
 80031c6:	1a9b      	subgt	r3, r3, r2
 80031c8:	18ed      	addgt	r5, r5, r3
 80031ca:	2600      	movs	r6, #0
 80031cc:	341a      	adds	r4, #26
 80031ce:	42b5      	cmp	r5, r6
 80031d0:	d11a      	bne.n	8003208 <_printf_common+0xc8>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e008      	b.n	80031e8 <_printf_common+0xa8>
 80031d6:	2301      	movs	r3, #1
 80031d8:	4652      	mov	r2, sl
 80031da:	4649      	mov	r1, r9
 80031dc:	4638      	mov	r0, r7
 80031de:	47c0      	blx	r8
 80031e0:	3001      	adds	r0, #1
 80031e2:	d103      	bne.n	80031ec <_printf_common+0xac>
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7c6      	b.n	800317e <_printf_common+0x3e>
 80031f0:	18e1      	adds	r1, r4, r3
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	2030      	movs	r0, #48	; 0x30
 80031f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031fa:	4422      	add	r2, r4
 80031fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003204:	3302      	adds	r3, #2
 8003206:	e7c7      	b.n	8003198 <_printf_common+0x58>
 8003208:	2301      	movs	r3, #1
 800320a:	4622      	mov	r2, r4
 800320c:	4649      	mov	r1, r9
 800320e:	4638      	mov	r0, r7
 8003210:	47c0      	blx	r8
 8003212:	3001      	adds	r0, #1
 8003214:	d0e6      	beq.n	80031e4 <_printf_common+0xa4>
 8003216:	3601      	adds	r6, #1
 8003218:	e7d9      	b.n	80031ce <_printf_common+0x8e>
	...

0800321c <_printf_i>:
 800321c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	7e0f      	ldrb	r7, [r1, #24]
 8003222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003224:	2f78      	cmp	r7, #120	; 0x78
 8003226:	4691      	mov	r9, r2
 8003228:	4680      	mov	r8, r0
 800322a:	460c      	mov	r4, r1
 800322c:	469a      	mov	sl, r3
 800322e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003232:	d807      	bhi.n	8003244 <_printf_i+0x28>
 8003234:	2f62      	cmp	r7, #98	; 0x62
 8003236:	d80a      	bhi.n	800324e <_printf_i+0x32>
 8003238:	2f00      	cmp	r7, #0
 800323a:	f000 80d8 	beq.w	80033ee <_printf_i+0x1d2>
 800323e:	2f58      	cmp	r7, #88	; 0x58
 8003240:	f000 80a3 	beq.w	800338a <_printf_i+0x16e>
 8003244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800324c:	e03a      	b.n	80032c4 <_printf_i+0xa8>
 800324e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003252:	2b15      	cmp	r3, #21
 8003254:	d8f6      	bhi.n	8003244 <_printf_i+0x28>
 8003256:	a101      	add	r1, pc, #4	; (adr r1, 800325c <_printf_i+0x40>)
 8003258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800325c:	080032b5 	.word	0x080032b5
 8003260:	080032c9 	.word	0x080032c9
 8003264:	08003245 	.word	0x08003245
 8003268:	08003245 	.word	0x08003245
 800326c:	08003245 	.word	0x08003245
 8003270:	08003245 	.word	0x08003245
 8003274:	080032c9 	.word	0x080032c9
 8003278:	08003245 	.word	0x08003245
 800327c:	08003245 	.word	0x08003245
 8003280:	08003245 	.word	0x08003245
 8003284:	08003245 	.word	0x08003245
 8003288:	080033d5 	.word	0x080033d5
 800328c:	080032f9 	.word	0x080032f9
 8003290:	080033b7 	.word	0x080033b7
 8003294:	08003245 	.word	0x08003245
 8003298:	08003245 	.word	0x08003245
 800329c:	080033f7 	.word	0x080033f7
 80032a0:	08003245 	.word	0x08003245
 80032a4:	080032f9 	.word	0x080032f9
 80032a8:	08003245 	.word	0x08003245
 80032ac:	08003245 	.word	0x08003245
 80032b0:	080033bf 	.word	0x080033bf
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	602a      	str	r2, [r5, #0]
 80032bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0a3      	b.n	8003410 <_printf_i+0x1f4>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	6829      	ldr	r1, [r5, #0]
 80032cc:	0606      	lsls	r6, r0, #24
 80032ce:	f101 0304 	add.w	r3, r1, #4
 80032d2:	d50a      	bpl.n	80032ea <_printf_i+0xce>
 80032d4:	680e      	ldr	r6, [r1, #0]
 80032d6:	602b      	str	r3, [r5, #0]
 80032d8:	2e00      	cmp	r6, #0
 80032da:	da03      	bge.n	80032e4 <_printf_i+0xc8>
 80032dc:	232d      	movs	r3, #45	; 0x2d
 80032de:	4276      	negs	r6, r6
 80032e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032e4:	485e      	ldr	r0, [pc, #376]	; (8003460 <_printf_i+0x244>)
 80032e6:	230a      	movs	r3, #10
 80032e8:	e019      	b.n	800331e <_printf_i+0x102>
 80032ea:	680e      	ldr	r6, [r1, #0]
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032f2:	bf18      	it	ne
 80032f4:	b236      	sxthne	r6, r6
 80032f6:	e7ef      	b.n	80032d8 <_printf_i+0xbc>
 80032f8:	682b      	ldr	r3, [r5, #0]
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	1d19      	adds	r1, r3, #4
 80032fe:	6029      	str	r1, [r5, #0]
 8003300:	0601      	lsls	r1, r0, #24
 8003302:	d501      	bpl.n	8003308 <_printf_i+0xec>
 8003304:	681e      	ldr	r6, [r3, #0]
 8003306:	e002      	b.n	800330e <_printf_i+0xf2>
 8003308:	0646      	lsls	r6, r0, #25
 800330a:	d5fb      	bpl.n	8003304 <_printf_i+0xe8>
 800330c:	881e      	ldrh	r6, [r3, #0]
 800330e:	4854      	ldr	r0, [pc, #336]	; (8003460 <_printf_i+0x244>)
 8003310:	2f6f      	cmp	r7, #111	; 0x6f
 8003312:	bf0c      	ite	eq
 8003314:	2308      	moveq	r3, #8
 8003316:	230a      	movne	r3, #10
 8003318:	2100      	movs	r1, #0
 800331a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800331e:	6865      	ldr	r5, [r4, #4]
 8003320:	60a5      	str	r5, [r4, #8]
 8003322:	2d00      	cmp	r5, #0
 8003324:	bfa2      	ittt	ge
 8003326:	6821      	ldrge	r1, [r4, #0]
 8003328:	f021 0104 	bicge.w	r1, r1, #4
 800332c:	6021      	strge	r1, [r4, #0]
 800332e:	b90e      	cbnz	r6, 8003334 <_printf_i+0x118>
 8003330:	2d00      	cmp	r5, #0
 8003332:	d04d      	beq.n	80033d0 <_printf_i+0x1b4>
 8003334:	4615      	mov	r5, r2
 8003336:	fbb6 f1f3 	udiv	r1, r6, r3
 800333a:	fb03 6711 	mls	r7, r3, r1, r6
 800333e:	5dc7      	ldrb	r7, [r0, r7]
 8003340:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003344:	4637      	mov	r7, r6
 8003346:	42bb      	cmp	r3, r7
 8003348:	460e      	mov	r6, r1
 800334a:	d9f4      	bls.n	8003336 <_printf_i+0x11a>
 800334c:	2b08      	cmp	r3, #8
 800334e:	d10b      	bne.n	8003368 <_printf_i+0x14c>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07de      	lsls	r6, r3, #31
 8003354:	d508      	bpl.n	8003368 <_printf_i+0x14c>
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	6861      	ldr	r1, [r4, #4]
 800335a:	4299      	cmp	r1, r3
 800335c:	bfde      	ittt	le
 800335e:	2330      	movle	r3, #48	; 0x30
 8003360:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003364:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003368:	1b52      	subs	r2, r2, r5
 800336a:	6122      	str	r2, [r4, #16]
 800336c:	f8cd a000 	str.w	sl, [sp]
 8003370:	464b      	mov	r3, r9
 8003372:	aa03      	add	r2, sp, #12
 8003374:	4621      	mov	r1, r4
 8003376:	4640      	mov	r0, r8
 8003378:	f7ff fee2 	bl	8003140 <_printf_common>
 800337c:	3001      	adds	r0, #1
 800337e:	d14c      	bne.n	800341a <_printf_i+0x1fe>
 8003380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003384:	b004      	add	sp, #16
 8003386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800338a:	4835      	ldr	r0, [pc, #212]	; (8003460 <_printf_i+0x244>)
 800338c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003390:	6829      	ldr	r1, [r5, #0]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	f851 6b04 	ldr.w	r6, [r1], #4
 8003398:	6029      	str	r1, [r5, #0]
 800339a:	061d      	lsls	r5, r3, #24
 800339c:	d514      	bpl.n	80033c8 <_printf_i+0x1ac>
 800339e:	07df      	lsls	r7, r3, #31
 80033a0:	bf44      	itt	mi
 80033a2:	f043 0320 	orrmi.w	r3, r3, #32
 80033a6:	6023      	strmi	r3, [r4, #0]
 80033a8:	b91e      	cbnz	r6, 80033b2 <_printf_i+0x196>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	f023 0320 	bic.w	r3, r3, #32
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	2310      	movs	r3, #16
 80033b4:	e7b0      	b.n	8003318 <_printf_i+0xfc>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	f043 0320 	orr.w	r3, r3, #32
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	2378      	movs	r3, #120	; 0x78
 80033c0:	4828      	ldr	r0, [pc, #160]	; (8003464 <_printf_i+0x248>)
 80033c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033c6:	e7e3      	b.n	8003390 <_printf_i+0x174>
 80033c8:	0659      	lsls	r1, r3, #25
 80033ca:	bf48      	it	mi
 80033cc:	b2b6      	uxthmi	r6, r6
 80033ce:	e7e6      	b.n	800339e <_printf_i+0x182>
 80033d0:	4615      	mov	r5, r2
 80033d2:	e7bb      	b.n	800334c <_printf_i+0x130>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6826      	ldr	r6, [r4, #0]
 80033d8:	6961      	ldr	r1, [r4, #20]
 80033da:	1d18      	adds	r0, r3, #4
 80033dc:	6028      	str	r0, [r5, #0]
 80033de:	0635      	lsls	r5, r6, #24
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	d501      	bpl.n	80033e8 <_printf_i+0x1cc>
 80033e4:	6019      	str	r1, [r3, #0]
 80033e6:	e002      	b.n	80033ee <_printf_i+0x1d2>
 80033e8:	0670      	lsls	r0, r6, #25
 80033ea:	d5fb      	bpl.n	80033e4 <_printf_i+0x1c8>
 80033ec:	8019      	strh	r1, [r3, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	4615      	mov	r5, r2
 80033f4:	e7ba      	b.n	800336c <_printf_i+0x150>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	602a      	str	r2, [r5, #0]
 80033fc:	681d      	ldr	r5, [r3, #0]
 80033fe:	6862      	ldr	r2, [r4, #4]
 8003400:	2100      	movs	r1, #0
 8003402:	4628      	mov	r0, r5
 8003404:	f7fc fef4 	bl	80001f0 <memchr>
 8003408:	b108      	cbz	r0, 800340e <_printf_i+0x1f2>
 800340a:	1b40      	subs	r0, r0, r5
 800340c:	6060      	str	r0, [r4, #4]
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	6123      	str	r3, [r4, #16]
 8003412:	2300      	movs	r3, #0
 8003414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003418:	e7a8      	b.n	800336c <_printf_i+0x150>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	462a      	mov	r2, r5
 800341e:	4649      	mov	r1, r9
 8003420:	4640      	mov	r0, r8
 8003422:	47d0      	blx	sl
 8003424:	3001      	adds	r0, #1
 8003426:	d0ab      	beq.n	8003380 <_printf_i+0x164>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	079b      	lsls	r3, r3, #30
 800342c:	d413      	bmi.n	8003456 <_printf_i+0x23a>
 800342e:	68e0      	ldr	r0, [r4, #12]
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	4298      	cmp	r0, r3
 8003434:	bfb8      	it	lt
 8003436:	4618      	movlt	r0, r3
 8003438:	e7a4      	b.n	8003384 <_printf_i+0x168>
 800343a:	2301      	movs	r3, #1
 800343c:	4632      	mov	r2, r6
 800343e:	4649      	mov	r1, r9
 8003440:	4640      	mov	r0, r8
 8003442:	47d0      	blx	sl
 8003444:	3001      	adds	r0, #1
 8003446:	d09b      	beq.n	8003380 <_printf_i+0x164>
 8003448:	3501      	adds	r5, #1
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	9903      	ldr	r1, [sp, #12]
 800344e:	1a5b      	subs	r3, r3, r1
 8003450:	42ab      	cmp	r3, r5
 8003452:	dcf2      	bgt.n	800343a <_printf_i+0x21e>
 8003454:	e7eb      	b.n	800342e <_printf_i+0x212>
 8003456:	2500      	movs	r5, #0
 8003458:	f104 0619 	add.w	r6, r4, #25
 800345c:	e7f5      	b.n	800344a <_printf_i+0x22e>
 800345e:	bf00      	nop
 8003460:	08003e2d 	.word	0x08003e2d
 8003464:	08003e3e 	.word	0x08003e3e

08003468 <__sread>:
 8003468:	b510      	push	{r4, lr}
 800346a:	460c      	mov	r4, r1
 800346c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003470:	f000 fab2 	bl	80039d8 <_read_r>
 8003474:	2800      	cmp	r0, #0
 8003476:	bfab      	itete	ge
 8003478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800347a:	89a3      	ldrhlt	r3, [r4, #12]
 800347c:	181b      	addge	r3, r3, r0
 800347e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003482:	bfac      	ite	ge
 8003484:	6563      	strge	r3, [r4, #84]	; 0x54
 8003486:	81a3      	strhlt	r3, [r4, #12]
 8003488:	bd10      	pop	{r4, pc}

0800348a <__swrite>:
 800348a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800348e:	461f      	mov	r7, r3
 8003490:	898b      	ldrh	r3, [r1, #12]
 8003492:	05db      	lsls	r3, r3, #23
 8003494:	4605      	mov	r5, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4616      	mov	r6, r2
 800349a:	d505      	bpl.n	80034a8 <__swrite+0x1e>
 800349c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034a0:	2302      	movs	r3, #2
 80034a2:	2200      	movs	r2, #0
 80034a4:	f000 f9c8 	bl	8003838 <_lseek_r>
 80034a8:	89a3      	ldrh	r3, [r4, #12]
 80034aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b2:	81a3      	strh	r3, [r4, #12]
 80034b4:	4632      	mov	r2, r6
 80034b6:	463b      	mov	r3, r7
 80034b8:	4628      	mov	r0, r5
 80034ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034be:	f000 b869 	b.w	8003594 <_write_r>

080034c2 <__sseek>:
 80034c2:	b510      	push	{r4, lr}
 80034c4:	460c      	mov	r4, r1
 80034c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ca:	f000 f9b5 	bl	8003838 <_lseek_r>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	89a3      	ldrh	r3, [r4, #12]
 80034d2:	bf15      	itete	ne
 80034d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80034d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034de:	81a3      	strheq	r3, [r4, #12]
 80034e0:	bf18      	it	ne
 80034e2:	81a3      	strhne	r3, [r4, #12]
 80034e4:	bd10      	pop	{r4, pc}

080034e6 <__sclose>:
 80034e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ea:	f000 b8d3 	b.w	8003694 <_close_r>
	...

080034f0 <__swbuf_r>:
 80034f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	4614      	mov	r4, r2
 80034f6:	4605      	mov	r5, r0
 80034f8:	b118      	cbz	r0, 8003502 <__swbuf_r+0x12>
 80034fa:	6983      	ldr	r3, [r0, #24]
 80034fc:	b90b      	cbnz	r3, 8003502 <__swbuf_r+0x12>
 80034fe:	f7ff fabd 	bl	8002a7c <__sinit>
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <__swbuf_r+0x98>)
 8003504:	429c      	cmp	r4, r3
 8003506:	d12b      	bne.n	8003560 <__swbuf_r+0x70>
 8003508:	686c      	ldr	r4, [r5, #4]
 800350a:	69a3      	ldr	r3, [r4, #24]
 800350c:	60a3      	str	r3, [r4, #8]
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	071a      	lsls	r2, r3, #28
 8003512:	d52f      	bpl.n	8003574 <__swbuf_r+0x84>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	b36b      	cbz	r3, 8003574 <__swbuf_r+0x84>
 8003518:	6923      	ldr	r3, [r4, #16]
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	1ac0      	subs	r0, r0, r3
 800351e:	6963      	ldr	r3, [r4, #20]
 8003520:	b2f6      	uxtb	r6, r6
 8003522:	4283      	cmp	r3, r0
 8003524:	4637      	mov	r7, r6
 8003526:	dc04      	bgt.n	8003532 <__swbuf_r+0x42>
 8003528:	4621      	mov	r1, r4
 800352a:	4628      	mov	r0, r5
 800352c:	f000 f948 	bl	80037c0 <_fflush_r>
 8003530:	bb30      	cbnz	r0, 8003580 <__swbuf_r+0x90>
 8003532:	68a3      	ldr	r3, [r4, #8]
 8003534:	3b01      	subs	r3, #1
 8003536:	60a3      	str	r3, [r4, #8]
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	6022      	str	r2, [r4, #0]
 800353e:	701e      	strb	r6, [r3, #0]
 8003540:	6963      	ldr	r3, [r4, #20]
 8003542:	3001      	adds	r0, #1
 8003544:	4283      	cmp	r3, r0
 8003546:	d004      	beq.n	8003552 <__swbuf_r+0x62>
 8003548:	89a3      	ldrh	r3, [r4, #12]
 800354a:	07db      	lsls	r3, r3, #31
 800354c:	d506      	bpl.n	800355c <__swbuf_r+0x6c>
 800354e:	2e0a      	cmp	r6, #10
 8003550:	d104      	bne.n	800355c <__swbuf_r+0x6c>
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f933 	bl	80037c0 <_fflush_r>
 800355a:	b988      	cbnz	r0, 8003580 <__swbuf_r+0x90>
 800355c:	4638      	mov	r0, r7
 800355e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <__swbuf_r+0x9c>)
 8003562:	429c      	cmp	r4, r3
 8003564:	d101      	bne.n	800356a <__swbuf_r+0x7a>
 8003566:	68ac      	ldr	r4, [r5, #8]
 8003568:	e7cf      	b.n	800350a <__swbuf_r+0x1a>
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <__swbuf_r+0xa0>)
 800356c:	429c      	cmp	r4, r3
 800356e:	bf08      	it	eq
 8003570:	68ec      	ldreq	r4, [r5, #12]
 8003572:	e7ca      	b.n	800350a <__swbuf_r+0x1a>
 8003574:	4621      	mov	r1, r4
 8003576:	4628      	mov	r0, r5
 8003578:	f000 f81e 	bl	80035b8 <__swsetup_r>
 800357c:	2800      	cmp	r0, #0
 800357e:	d0cb      	beq.n	8003518 <__swbuf_r+0x28>
 8003580:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003584:	e7ea      	b.n	800355c <__swbuf_r+0x6c>
 8003586:	bf00      	nop
 8003588:	08003ddc 	.word	0x08003ddc
 800358c:	08003dfc 	.word	0x08003dfc
 8003590:	08003dbc 	.word	0x08003dbc

08003594 <_write_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4d07      	ldr	r5, [pc, #28]	; (80035b4 <_write_r+0x20>)
 8003598:	4604      	mov	r4, r0
 800359a:	4608      	mov	r0, r1
 800359c:	4611      	mov	r1, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	602a      	str	r2, [r5, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f7fd fa93 	bl	8000ace <_write>
 80035a8:	1c43      	adds	r3, r0, #1
 80035aa:	d102      	bne.n	80035b2 <_write_r+0x1e>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	b103      	cbz	r3, 80035b2 <_write_r+0x1e>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	bd38      	pop	{r3, r4, r5, pc}
 80035b4:	20000854 	.word	0x20000854

080035b8 <__swsetup_r>:
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <__swsetup_r+0xcc>)
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	4606      	mov	r6, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	b125      	cbz	r5, 80035ce <__swsetup_r+0x16>
 80035c4:	69ab      	ldr	r3, [r5, #24]
 80035c6:	b913      	cbnz	r3, 80035ce <__swsetup_r+0x16>
 80035c8:	4628      	mov	r0, r5
 80035ca:	f7ff fa57 	bl	8002a7c <__sinit>
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <__swsetup_r+0xd0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d10f      	bne.n	80035f4 <__swsetup_r+0x3c>
 80035d4:	686c      	ldr	r4, [r5, #4]
 80035d6:	89a3      	ldrh	r3, [r4, #12]
 80035d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035dc:	0719      	lsls	r1, r3, #28
 80035de:	d42c      	bmi.n	800363a <__swsetup_r+0x82>
 80035e0:	06dd      	lsls	r5, r3, #27
 80035e2:	d411      	bmi.n	8003608 <__swsetup_r+0x50>
 80035e4:	2309      	movs	r3, #9
 80035e6:	6033      	str	r3, [r6, #0]
 80035e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f2:	e03e      	b.n	8003672 <__swsetup_r+0xba>
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <__swsetup_r+0xd4>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <__swsetup_r+0x46>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7eb      	b.n	80035d6 <__swsetup_r+0x1e>
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <__swsetup_r+0xd8>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7e6      	b.n	80035d6 <__swsetup_r+0x1e>
 8003608:	0758      	lsls	r0, r3, #29
 800360a:	d512      	bpl.n	8003632 <__swsetup_r+0x7a>
 800360c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360e:	b141      	cbz	r1, 8003622 <__swsetup_r+0x6a>
 8003610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003614:	4299      	cmp	r1, r3
 8003616:	d002      	beq.n	800361e <__swsetup_r+0x66>
 8003618:	4630      	mov	r0, r6
 800361a:	f7ff f89f 	bl	800275c <_free_r>
 800361e:	2300      	movs	r3, #0
 8003620:	6363      	str	r3, [r4, #52]	; 0x34
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	b94b      	cbnz	r3, 8003652 <__swsetup_r+0x9a>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d003      	beq.n	8003652 <__swsetup_r+0x9a>
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f92b 	bl	80038a8 <__smakebuf_r>
 8003652:	89a0      	ldrh	r0, [r4, #12]
 8003654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003658:	f010 0301 	ands.w	r3, r0, #1
 800365c:	d00a      	beq.n	8003674 <__swsetup_r+0xbc>
 800365e:	2300      	movs	r3, #0
 8003660:	60a3      	str	r3, [r4, #8]
 8003662:	6963      	ldr	r3, [r4, #20]
 8003664:	425b      	negs	r3, r3
 8003666:	61a3      	str	r3, [r4, #24]
 8003668:	6923      	ldr	r3, [r4, #16]
 800366a:	b943      	cbnz	r3, 800367e <__swsetup_r+0xc6>
 800366c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003670:	d1ba      	bne.n	80035e8 <__swsetup_r+0x30>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	0781      	lsls	r1, r0, #30
 8003676:	bf58      	it	pl
 8003678:	6963      	ldrpl	r3, [r4, #20]
 800367a:	60a3      	str	r3, [r4, #8]
 800367c:	e7f4      	b.n	8003668 <__swsetup_r+0xb0>
 800367e:	2000      	movs	r0, #0
 8003680:	e7f7      	b.n	8003672 <__swsetup_r+0xba>
 8003682:	bf00      	nop
 8003684:	20000004 	.word	0x20000004
 8003688:	08003ddc 	.word	0x08003ddc
 800368c:	08003dfc 	.word	0x08003dfc
 8003690:	08003dbc 	.word	0x08003dbc

08003694 <_close_r>:
 8003694:	b538      	push	{r3, r4, r5, lr}
 8003696:	4d06      	ldr	r5, [pc, #24]	; (80036b0 <_close_r+0x1c>)
 8003698:	2300      	movs	r3, #0
 800369a:	4604      	mov	r4, r0
 800369c:	4608      	mov	r0, r1
 800369e:	602b      	str	r3, [r5, #0]
 80036a0:	f7fd fa31 	bl	8000b06 <_close>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_close_r+0x1a>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_close_r+0x1a>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000854 	.word	0x20000854

080036b4 <__sflush_r>:
 80036b4:	898a      	ldrh	r2, [r1, #12]
 80036b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ba:	4605      	mov	r5, r0
 80036bc:	0710      	lsls	r0, r2, #28
 80036be:	460c      	mov	r4, r1
 80036c0:	d458      	bmi.n	8003774 <__sflush_r+0xc0>
 80036c2:	684b      	ldr	r3, [r1, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	dc05      	bgt.n	80036d4 <__sflush_r+0x20>
 80036c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	dc02      	bgt.n	80036d4 <__sflush_r+0x20>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036d6:	2e00      	cmp	r6, #0
 80036d8:	d0f9      	beq.n	80036ce <__sflush_r+0x1a>
 80036da:	2300      	movs	r3, #0
 80036dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036e0:	682f      	ldr	r7, [r5, #0]
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	d032      	beq.n	800374c <__sflush_r+0x98>
 80036e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	075a      	lsls	r2, r3, #29
 80036ec:	d505      	bpl.n	80036fa <__sflush_r+0x46>
 80036ee:	6863      	ldr	r3, [r4, #4]
 80036f0:	1ac0      	subs	r0, r0, r3
 80036f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036f4:	b10b      	cbz	r3, 80036fa <__sflush_r+0x46>
 80036f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036f8:	1ac0      	subs	r0, r0, r3
 80036fa:	2300      	movs	r3, #0
 80036fc:	4602      	mov	r2, r0
 80036fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003700:	6a21      	ldr	r1, [r4, #32]
 8003702:	4628      	mov	r0, r5
 8003704:	47b0      	blx	r6
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	d106      	bne.n	800371a <__sflush_r+0x66>
 800370c:	6829      	ldr	r1, [r5, #0]
 800370e:	291d      	cmp	r1, #29
 8003710:	d82c      	bhi.n	800376c <__sflush_r+0xb8>
 8003712:	4a2a      	ldr	r2, [pc, #168]	; (80037bc <__sflush_r+0x108>)
 8003714:	40ca      	lsrs	r2, r1
 8003716:	07d6      	lsls	r6, r2, #31
 8003718:	d528      	bpl.n	800376c <__sflush_r+0xb8>
 800371a:	2200      	movs	r2, #0
 800371c:	6062      	str	r2, [r4, #4]
 800371e:	04d9      	lsls	r1, r3, #19
 8003720:	6922      	ldr	r2, [r4, #16]
 8003722:	6022      	str	r2, [r4, #0]
 8003724:	d504      	bpl.n	8003730 <__sflush_r+0x7c>
 8003726:	1c42      	adds	r2, r0, #1
 8003728:	d101      	bne.n	800372e <__sflush_r+0x7a>
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	b903      	cbnz	r3, 8003730 <__sflush_r+0x7c>
 800372e:	6560      	str	r0, [r4, #84]	; 0x54
 8003730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003732:	602f      	str	r7, [r5, #0]
 8003734:	2900      	cmp	r1, #0
 8003736:	d0ca      	beq.n	80036ce <__sflush_r+0x1a>
 8003738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800373c:	4299      	cmp	r1, r3
 800373e:	d002      	beq.n	8003746 <__sflush_r+0x92>
 8003740:	4628      	mov	r0, r5
 8003742:	f7ff f80b 	bl	800275c <_free_r>
 8003746:	2000      	movs	r0, #0
 8003748:	6360      	str	r0, [r4, #52]	; 0x34
 800374a:	e7c1      	b.n	80036d0 <__sflush_r+0x1c>
 800374c:	6a21      	ldr	r1, [r4, #32]
 800374e:	2301      	movs	r3, #1
 8003750:	4628      	mov	r0, r5
 8003752:	47b0      	blx	r6
 8003754:	1c41      	adds	r1, r0, #1
 8003756:	d1c7      	bne.n	80036e8 <__sflush_r+0x34>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0c4      	beq.n	80036e8 <__sflush_r+0x34>
 800375e:	2b1d      	cmp	r3, #29
 8003760:	d001      	beq.n	8003766 <__sflush_r+0xb2>
 8003762:	2b16      	cmp	r3, #22
 8003764:	d101      	bne.n	800376a <__sflush_r+0xb6>
 8003766:	602f      	str	r7, [r5, #0]
 8003768:	e7b1      	b.n	80036ce <__sflush_r+0x1a>
 800376a:	89a3      	ldrh	r3, [r4, #12]
 800376c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003770:	81a3      	strh	r3, [r4, #12]
 8003772:	e7ad      	b.n	80036d0 <__sflush_r+0x1c>
 8003774:	690f      	ldr	r7, [r1, #16]
 8003776:	2f00      	cmp	r7, #0
 8003778:	d0a9      	beq.n	80036ce <__sflush_r+0x1a>
 800377a:	0793      	lsls	r3, r2, #30
 800377c:	680e      	ldr	r6, [r1, #0]
 800377e:	bf08      	it	eq
 8003780:	694b      	ldreq	r3, [r1, #20]
 8003782:	600f      	str	r7, [r1, #0]
 8003784:	bf18      	it	ne
 8003786:	2300      	movne	r3, #0
 8003788:	eba6 0807 	sub.w	r8, r6, r7
 800378c:	608b      	str	r3, [r1, #8]
 800378e:	f1b8 0f00 	cmp.w	r8, #0
 8003792:	dd9c      	ble.n	80036ce <__sflush_r+0x1a>
 8003794:	6a21      	ldr	r1, [r4, #32]
 8003796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003798:	4643      	mov	r3, r8
 800379a:	463a      	mov	r2, r7
 800379c:	4628      	mov	r0, r5
 800379e:	47b0      	blx	r6
 80037a0:	2800      	cmp	r0, #0
 80037a2:	dc06      	bgt.n	80037b2 <__sflush_r+0xfe>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b0:	e78e      	b.n	80036d0 <__sflush_r+0x1c>
 80037b2:	4407      	add	r7, r0
 80037b4:	eba8 0800 	sub.w	r8, r8, r0
 80037b8:	e7e9      	b.n	800378e <__sflush_r+0xda>
 80037ba:	bf00      	nop
 80037bc:	20400001 	.word	0x20400001

080037c0 <_fflush_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	690b      	ldr	r3, [r1, #16]
 80037c4:	4605      	mov	r5, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	b913      	cbnz	r3, 80037d0 <_fflush_r+0x10>
 80037ca:	2500      	movs	r5, #0
 80037cc:	4628      	mov	r0, r5
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	b118      	cbz	r0, 80037da <_fflush_r+0x1a>
 80037d2:	6983      	ldr	r3, [r0, #24]
 80037d4:	b90b      	cbnz	r3, 80037da <_fflush_r+0x1a>
 80037d6:	f7ff f951 	bl	8002a7c <__sinit>
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <_fflush_r+0x6c>)
 80037dc:	429c      	cmp	r4, r3
 80037de:	d11b      	bne.n	8003818 <_fflush_r+0x58>
 80037e0:	686c      	ldr	r4, [r5, #4]
 80037e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ef      	beq.n	80037ca <_fflush_r+0xa>
 80037ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037ec:	07d0      	lsls	r0, r2, #31
 80037ee:	d404      	bmi.n	80037fa <_fflush_r+0x3a>
 80037f0:	0599      	lsls	r1, r3, #22
 80037f2:	d402      	bmi.n	80037fa <_fflush_r+0x3a>
 80037f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037f6:	f7ff f9df 	bl	8002bb8 <__retarget_lock_acquire_recursive>
 80037fa:	4628      	mov	r0, r5
 80037fc:	4621      	mov	r1, r4
 80037fe:	f7ff ff59 	bl	80036b4 <__sflush_r>
 8003802:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003804:	07da      	lsls	r2, r3, #31
 8003806:	4605      	mov	r5, r0
 8003808:	d4e0      	bmi.n	80037cc <_fflush_r+0xc>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	059b      	lsls	r3, r3, #22
 800380e:	d4dd      	bmi.n	80037cc <_fflush_r+0xc>
 8003810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003812:	f7ff f9d2 	bl	8002bba <__retarget_lock_release_recursive>
 8003816:	e7d9      	b.n	80037cc <_fflush_r+0xc>
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <_fflush_r+0x70>)
 800381a:	429c      	cmp	r4, r3
 800381c:	d101      	bne.n	8003822 <_fflush_r+0x62>
 800381e:	68ac      	ldr	r4, [r5, #8]
 8003820:	e7df      	b.n	80037e2 <_fflush_r+0x22>
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <_fflush_r+0x74>)
 8003824:	429c      	cmp	r4, r3
 8003826:	bf08      	it	eq
 8003828:	68ec      	ldreq	r4, [r5, #12]
 800382a:	e7da      	b.n	80037e2 <_fflush_r+0x22>
 800382c:	08003ddc 	.word	0x08003ddc
 8003830:	08003dfc 	.word	0x08003dfc
 8003834:	08003dbc 	.word	0x08003dbc

08003838 <_lseek_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4d07      	ldr	r5, [pc, #28]	; (8003858 <_lseek_r+0x20>)
 800383c:	4604      	mov	r4, r0
 800383e:	4608      	mov	r0, r1
 8003840:	4611      	mov	r1, r2
 8003842:	2200      	movs	r2, #0
 8003844:	602a      	str	r2, [r5, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	f7fd f984 	bl	8000b54 <_lseek>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	d102      	bne.n	8003856 <_lseek_r+0x1e>
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	b103      	cbz	r3, 8003856 <_lseek_r+0x1e>
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	20000854 	.word	0x20000854

0800385c <__swhatbuf_r>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	460e      	mov	r6, r1
 8003860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003864:	2900      	cmp	r1, #0
 8003866:	b096      	sub	sp, #88	; 0x58
 8003868:	4614      	mov	r4, r2
 800386a:	461d      	mov	r5, r3
 800386c:	da08      	bge.n	8003880 <__swhatbuf_r+0x24>
 800386e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	602a      	str	r2, [r5, #0]
 8003876:	061a      	lsls	r2, r3, #24
 8003878:	d410      	bmi.n	800389c <__swhatbuf_r+0x40>
 800387a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387e:	e00e      	b.n	800389e <__swhatbuf_r+0x42>
 8003880:	466a      	mov	r2, sp
 8003882:	f000 f8bb 	bl	80039fc <_fstat_r>
 8003886:	2800      	cmp	r0, #0
 8003888:	dbf1      	blt.n	800386e <__swhatbuf_r+0x12>
 800388a:	9a01      	ldr	r2, [sp, #4]
 800388c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003890:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003894:	425a      	negs	r2, r3
 8003896:	415a      	adcs	r2, r3
 8003898:	602a      	str	r2, [r5, #0]
 800389a:	e7ee      	b.n	800387a <__swhatbuf_r+0x1e>
 800389c:	2340      	movs	r3, #64	; 0x40
 800389e:	2000      	movs	r0, #0
 80038a0:	6023      	str	r3, [r4, #0]
 80038a2:	b016      	add	sp, #88	; 0x58
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080038a8 <__smakebuf_r>:
 80038a8:	898b      	ldrh	r3, [r1, #12]
 80038aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038ac:	079d      	lsls	r5, r3, #30
 80038ae:	4606      	mov	r6, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	d507      	bpl.n	80038c4 <__smakebuf_r+0x1c>
 80038b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038b8:	6023      	str	r3, [r4, #0]
 80038ba:	6123      	str	r3, [r4, #16]
 80038bc:	2301      	movs	r3, #1
 80038be:	6163      	str	r3, [r4, #20]
 80038c0:	b002      	add	sp, #8
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
 80038c4:	ab01      	add	r3, sp, #4
 80038c6:	466a      	mov	r2, sp
 80038c8:	f7ff ffc8 	bl	800385c <__swhatbuf_r>
 80038cc:	9900      	ldr	r1, [sp, #0]
 80038ce:	4605      	mov	r5, r0
 80038d0:	4630      	mov	r0, r6
 80038d2:	f7fe ffaf 	bl	8002834 <_malloc_r>
 80038d6:	b948      	cbnz	r0, 80038ec <__smakebuf_r+0x44>
 80038d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038dc:	059a      	lsls	r2, r3, #22
 80038de:	d4ef      	bmi.n	80038c0 <__smakebuf_r+0x18>
 80038e0:	f023 0303 	bic.w	r3, r3, #3
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	e7e3      	b.n	80038b4 <__smakebuf_r+0xc>
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <__smakebuf_r+0x7c>)
 80038ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	6020      	str	r0, [r4, #0]
 80038f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f8:	81a3      	strh	r3, [r4, #12]
 80038fa:	9b00      	ldr	r3, [sp, #0]
 80038fc:	6163      	str	r3, [r4, #20]
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	6120      	str	r0, [r4, #16]
 8003902:	b15b      	cbz	r3, 800391c <__smakebuf_r+0x74>
 8003904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 f889 	bl	8003a20 <_isatty_r>
 800390e:	b128      	cbz	r0, 800391c <__smakebuf_r+0x74>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	f023 0303 	bic.w	r3, r3, #3
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	89a0      	ldrh	r0, [r4, #12]
 800391e:	4305      	orrs	r5, r0
 8003920:	81a5      	strh	r5, [r4, #12]
 8003922:	e7cd      	b.n	80038c0 <__smakebuf_r+0x18>
 8003924:	08002a15 	.word	0x08002a15

08003928 <memcpy>:
 8003928:	440a      	add	r2, r1
 800392a:	4291      	cmp	r1, r2
 800392c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003930:	d100      	bne.n	8003934 <memcpy+0xc>
 8003932:	4770      	bx	lr
 8003934:	b510      	push	{r4, lr}
 8003936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800393e:	4291      	cmp	r1, r2
 8003940:	d1f9      	bne.n	8003936 <memcpy+0xe>
 8003942:	bd10      	pop	{r4, pc}

08003944 <memmove>:
 8003944:	4288      	cmp	r0, r1
 8003946:	b510      	push	{r4, lr}
 8003948:	eb01 0402 	add.w	r4, r1, r2
 800394c:	d902      	bls.n	8003954 <memmove+0x10>
 800394e:	4284      	cmp	r4, r0
 8003950:	4623      	mov	r3, r4
 8003952:	d807      	bhi.n	8003964 <memmove+0x20>
 8003954:	1e43      	subs	r3, r0, #1
 8003956:	42a1      	cmp	r1, r4
 8003958:	d008      	beq.n	800396c <memmove+0x28>
 800395a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800395e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003962:	e7f8      	b.n	8003956 <memmove+0x12>
 8003964:	4402      	add	r2, r0
 8003966:	4601      	mov	r1, r0
 8003968:	428a      	cmp	r2, r1
 800396a:	d100      	bne.n	800396e <memmove+0x2a>
 800396c:	bd10      	pop	{r4, pc}
 800396e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003976:	e7f7      	b.n	8003968 <memmove+0x24>

08003978 <_realloc_r>:
 8003978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800397c:	4680      	mov	r8, r0
 800397e:	4614      	mov	r4, r2
 8003980:	460e      	mov	r6, r1
 8003982:	b921      	cbnz	r1, 800398e <_realloc_r+0x16>
 8003984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003988:	4611      	mov	r1, r2
 800398a:	f7fe bf53 	b.w	8002834 <_malloc_r>
 800398e:	b92a      	cbnz	r2, 800399c <_realloc_r+0x24>
 8003990:	f7fe fee4 	bl	800275c <_free_r>
 8003994:	4625      	mov	r5, r4
 8003996:	4628      	mov	r0, r5
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800399c:	f000 f850 	bl	8003a40 <_malloc_usable_size_r>
 80039a0:	4284      	cmp	r4, r0
 80039a2:	4607      	mov	r7, r0
 80039a4:	d802      	bhi.n	80039ac <_realloc_r+0x34>
 80039a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039aa:	d812      	bhi.n	80039d2 <_realloc_r+0x5a>
 80039ac:	4621      	mov	r1, r4
 80039ae:	4640      	mov	r0, r8
 80039b0:	f7fe ff40 	bl	8002834 <_malloc_r>
 80039b4:	4605      	mov	r5, r0
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0ed      	beq.n	8003996 <_realloc_r+0x1e>
 80039ba:	42bc      	cmp	r4, r7
 80039bc:	4622      	mov	r2, r4
 80039be:	4631      	mov	r1, r6
 80039c0:	bf28      	it	cs
 80039c2:	463a      	movcs	r2, r7
 80039c4:	f7ff ffb0 	bl	8003928 <memcpy>
 80039c8:	4631      	mov	r1, r6
 80039ca:	4640      	mov	r0, r8
 80039cc:	f7fe fec6 	bl	800275c <_free_r>
 80039d0:	e7e1      	b.n	8003996 <_realloc_r+0x1e>
 80039d2:	4635      	mov	r5, r6
 80039d4:	e7df      	b.n	8003996 <_realloc_r+0x1e>
	...

080039d8 <_read_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4d07      	ldr	r5, [pc, #28]	; (80039f8 <_read_r+0x20>)
 80039dc:	4604      	mov	r4, r0
 80039de:	4608      	mov	r0, r1
 80039e0:	4611      	mov	r1, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	602a      	str	r2, [r5, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7fd f854 	bl	8000a94 <_read>
 80039ec:	1c43      	adds	r3, r0, #1
 80039ee:	d102      	bne.n	80039f6 <_read_r+0x1e>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	b103      	cbz	r3, 80039f6 <_read_r+0x1e>
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	bd38      	pop	{r3, r4, r5, pc}
 80039f8:	20000854 	.word	0x20000854

080039fc <_fstat_r>:
 80039fc:	b538      	push	{r3, r4, r5, lr}
 80039fe:	4d07      	ldr	r5, [pc, #28]	; (8003a1c <_fstat_r+0x20>)
 8003a00:	2300      	movs	r3, #0
 8003a02:	4604      	mov	r4, r0
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	602b      	str	r3, [r5, #0]
 8003a0a:	f7fd f888 	bl	8000b1e <_fstat>
 8003a0e:	1c43      	adds	r3, r0, #1
 8003a10:	d102      	bne.n	8003a18 <_fstat_r+0x1c>
 8003a12:	682b      	ldr	r3, [r5, #0]
 8003a14:	b103      	cbz	r3, 8003a18 <_fstat_r+0x1c>
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	bd38      	pop	{r3, r4, r5, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000854 	.word	0x20000854

08003a20 <_isatty_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4d06      	ldr	r5, [pc, #24]	; (8003a3c <_isatty_r+0x1c>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	4604      	mov	r4, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	f7fd f887 	bl	8000b3e <_isatty>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_isatty_r+0x1a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_isatty_r+0x1a>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	20000854 	.word	0x20000854

08003a40 <_malloc_usable_size_r>:
 8003a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a44:	1f18      	subs	r0, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfbc      	itt	lt
 8003a4a:	580b      	ldrlt	r3, [r1, r0]
 8003a4c:	18c0      	addlt	r0, r0, r3
 8003a4e:	4770      	bx	lr

08003a50 <_init>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr

08003a5c <_fini>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	bf00      	nop
 8003a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	469e      	mov	lr, r3
 8003a66:	4770      	bx	lr
