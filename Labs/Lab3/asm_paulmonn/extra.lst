                   ; User installable disassembler and single-step run for paul
                   
                   ; Please email comments, suggestions, bugs to paul@pjrc.com
                   
                   ; This code is in the public domain. It is distributed in
                   ; the hope that it will be useful, but without any warranty;
                   ; without even the implied warranty of merchantability or fi
                   ; for a particular purpose.
                   
                   ; For more information, please see
                   
                   ; http://www.pjrc.com/tech/8051/pm2_docs/index.html
                   
0000:              .equ     locat, 0x1000           ;location for these command
0000:              .equ     paulmon2, 0x0000        ;location where paulmon2 is
                   
0000:              .equ    phex1, 0x2E+paulmon2
0000:              .equ    cout, 0x30+paulmon2              ;send acc to uart
0000:              .equ    phex, 0x34+paulmon2              ;print acc in hex
0000:              .equ    phex16, 0x36+paulmon2            ;print dptr in hex
0000:              .equ    pstr, 0x38+paulmon2              ;print string @dptr
0000:              .equ    ghex, 0x3A+paulmon2              ;get two-digit hex 
0000:              .equ    ghex16, 0x3C+paulmon2            ;get four-digit hex
0000:              .equ     upper, 0x40+paulmon2            ;convert acc to upp
0000:              .equ     newline, 0x48+paulmon2
0000:              .equ     pcstr, 0x45+paulmon2
0000:              .equ     pint, 0x50+paulmon2
0000:              .equ     smart_wr, 0x56+paulmon2
0000:              .equ     cin_filter, 0x62+paulmon2
0000:              .equ     asc2hex, 0x65+paulmon2
                   
                   
0000:              .equ    list_key, 'L'            ;list (disassemble)
0000:              .equ    step_key, 'S'            ;single step run
0000:              .equ    vtedit_key, 'E'           ;memory editor
                   
                   ;for testing in ram
                   ;.equ    list_key, 'K'           ;list (disassemble)
                   ;.equ    step_key, 'W'           ;single step run
                   ;.equ    vtedit_key, 'E'           ;memory editor
                   
                   
                   
                   ;location of two bytes used by single-step in internal ram w
                   ;hope the user's program won't write over while it's running
                   ;two bytes hold the address of the previous instruction, so 
                   ;show the last executed instruction with the current value o
                   ;registers, which is much more intuitive than displaying the
                   ;instruction by grabbing the program counter from the stack 
                   ;done in PAULMON1's single step.
                   
0000:              .equ    lastpc, 0x7C             ;don't forget to update the
                   
                   
                   
                   ;DIS
                   ;---------------------------------------------------------;
                   ;                                                         ;
                   ;                      list command                       ;
                   ;                                                         ;
                   ;---------------------------------------------------------;
                   
                   
1000:              .org     locat
1000: A5 E5 E0 A5 
                   .db      0xA5,0xE5,0xE0,0xA5     ;signiture
1004: FE 4C 00 00 
                   .db      254,list_key,0,0                ;id (254=user insta
1008: 00 00 00 00 
                   .db      0,0,0,0                         ;prompt code vector
100C: 00 00 00 00 
                   .dB      0,0,0,0                         ;reserved
1010: 00 00 00 00 
                   .db      0,0,0,0                         ;reserved
1014: 00 00 00 00 
                   .db      0,0,0,0                         ;reserved
1018: 00 00 00 00 
                   .db      0,0,0,0                         ;user defined
101C: FF FF FF FF 
                   .db      255,255,255,255                 ;length and checksu
1020: 4C 69 73 74 
      00           .db      "List",0
                   
1025: 02 00 48     newline_h:ljmp   newline
                   
1040:              .org     locat+64                ;executable code begins her
                   
                   ;        disassembler register usage
                   ;        r0 = temporary storage
                   ;        r1 = temporart storage
                   ;        r2 = first instruction byte
                   ;        r3 = second instruction byte
                   ;        r4 = third instruction byte
                   ;        r5 = line count
                   ;        r6 = program counter (lsb)
                   ;        r7 = program counter (msb)
                   
1040: 11 25        list:    acall   newline_h
1042: 7D 14                 mov     r5, #20
1044: C2 D1                 clr     psw.1           ;use ordinary long format
1046: 11 4C        list2:   acall   disasm
1048: DD FC                 djnz    r5, list2
104A: 01 25                 ajmp    newline_h
                   
                   disasm:
                   ;print out the memory location and fetch the next three byte
104C: EF                    mov     a, r7
104D: F5 83                 mov     dph, a
104F: 51 4F                 acall   phex_h
1051: EE                    mov     a, r6
1052: F5 82                 mov     dpl, a
1054: 51 4F                 acall   phex_h
1056: E4                   clr     a
1057: 93                   movc    a, @a+dptr
1058: FA                    mov     r2, a
1059: A3                    inc     dptr
105A: E4                    clr     a
105B: 93                    movc    a, @a+dptr
105C: FB                    mov     r3, a
105D: A3                    inc     dptr
105E: E4                    clr     a
105F: 93                    movc    a, @a+dptr
1060: FC                    mov     r4, a
1061: EA                   mov     a, r2
1062: 54 08                 anl     a, #00001000b
1064: 70 0F                 jnz     lookup2
                   
                   ;fetch constants for instructions not using R0-R7
                   lookup1:
1066: EA                    mov     a, r2
1067: 03                    rr      a
1068: 54 78                 anl     a, #01111000b   ;grab upper 4 bits
106A: F8                    mov     r0, a           ;keep in r0 for a moment
106B: EA                    mov     a, r2
106C: 54 07                 anl     a, #00000111b   ;get lower 3 bits
106E: 48                    orl     a, r0           ;combine in upper 4
106F: 90 16 C8             mov     dptr, #opot1     ;opot=operand offset table
1072: 93                   movc    a, @a+dptr
1073: 80 08                 sjmp    unpack
                   
                   ;fetch constants for R0-R7 instructions
                   lookup2:
1075: EA                   mov     a, r2
1076: C4                   swap    a
1077: 54 0F                anl     a, #00001111b
1079: 90 13 62             mov     dptr, #opot2
107C: 93                   movc    a, @a+dptr
                   
                   ;now we'll unpack the operand code (# bytes and addr mode)
107D: 54 03        unpack:  anl     a, #00000011b
107F: F8                    mov     r0, a
                   
                   ;increment the r7/r6 pointer
1080: 2E                   add     a, r6
1081: FE                   mov     r6, a
1082: EF                   mov     a, r7
1083: 34 00                addc    a, #0
1085: FF                   mov     r7, a
                   
                   ;now print the bytes and spaces (r0 has # of bytes to print)
1086: 74 3A        pbytes:  mov     a, #':'
1088: 51 2A                acall   cout_h
108A: 71 9D                acall   space_h
108C: 20 D1 21              jb      psw.1, pmnu             ;skip bytes if runn
108F: EA                   mov     a, r2
1090: 51 4F                acall   phex_h
1092: 71 9D                acall   space_h
1094: B8 01 04             cjne    r0, #1, pbytes2
1097: 79 0B                mov     r1, #11
1099: 80 11                sjmp    pbytes4
109B: EB           pbytes2:mov     a, r3
109C: 51 4F                acall   phex_h
109E: 71 9D                acall   space_h
10A0: B8 02 04             cjne    r0, #2, pbytes3
10A3: 79 08                mov     r1, #8
10A5: 80 05                sjmp    pbytes4
10A7: EC           pbytes3:mov     a, r4
10A8: 51 4F                acall   phex_h
10AA: 79 06                mov     r1, #6
10AC: 71 9D        pbytes4:acall   space_h
10AE: D9 FC                djnz    r1, pbytes4
                   
                   
                   ;prints the mnunonic name and spaces
10B0: EA           pmnu:   mov     a, r2
10B1: 54 08                anl     a, #00001000b
10B3: 70 10                jnz     pmnu_lookup2
                   pmnu_lookup1:
10B5: 90 17 48             mov     dptr, #mnot1    ;mnot=mnunonic offset table
10B8: EA                   mov     a, r2
10B9: 03                   rr      a
10BA: 54 78                anl     a, #01111000b   ;grab upper 4 bits
10BC: F8                   mov     r0, a           ;keep in r0 for a moment
10BD: EA                   mov     a, r2
10BE: 54 07                anl     a, #00000111b   ;get lower 3 bits
10C0: 48                   orl     a, r0           ;combine in upper 4
10C1: 93                   movc    a, @a+dptr
10C2: F9                   mov     r1, a
10C3: 80 09                 sjmp    pmnu0
                   pmnu_lookup2:
10C5: 90 17 C8             mov     dptr, #mnot2    ;16 byte table for r0-r7 ins
10C8: EA                   mov     a, r2
10C9: C4                   swap    a
10CA: 54 0F                anl     a, #00001111b
10CC: 93                   movc    a, @a+dptr
10CD: F9                   mov     r1, a
10CE: 90 1E FE     pmnu0:   mov     dptr, #mnu_tbl
10D1: 78 08                 mov     r0, #8
10D3: C3                    clr     c
10D4: 74 20        pmnu1:   mov     a, #' '
10D6: 40 07                 jc      pmnu2
10D8: E9                    mov     a, r1
10D9: 93                    movc    a, @a+dptr
10DA: 09                    inc     r1
10DB: A2 E7                 mov     c, acc.7
10DD: 54 7F                 anl     a, #0x7F
10DF: 51 2A        pmnu2:   acall   cout_h
10E1: D8 F1                 djnz    r0, pmnu1
                   
                   
                   
                   ;print the operands
                   
10E3: 74 1B                mov     a, #dasm2 & 255  ;(low)
10E5: C0 E0                push    acc
10E7: 74 11                mov     a, #dasm2 >> 8   ;(high)
10E9: C0 E0                push    acc
                   
                   am_lookup0:
10EB: EA                   mov     a, r2
10EC: 54 08                anl     a, #00001000b
10EE: 70 0F                jnz     am_lookup2
                   
                   ;fetch constants for instructions not using R0-R7
                   am_lookup1:
10F0: EA                   mov     a, r2
10F1: 03                   rr      a
10F2: 54 78                anl     a, #01111000b   ;grab upper 4 bits
10F4: F8                   mov     r0, a           ;keep in r0 for a moment
10F5: EA                   mov     a, r2
10F6: 54 07                anl     a, #00000111b   ;get lower 3 bits
10F8: 48                   orl     a, r0           ;combine in upper 4
10F9: 90 16 C8             mov     dptr, #opot1    ;opot=operand offset table
10FC: 93                   movc    a, @a+dptr
10FD: 80 08                sjmp    am_unpack
                   
                   ;fetch constants for R0-R7 instructions
                   am_lookup2:
10FF: EA                   mov     a, r2
1100: C4                   swap    a
1101: 54 0F                anl     a, #00001111b
1103: 90 13 62             mov     dptr, #opot2
1106: 93                   movc    a, @a+dptr
                   
                   am_unpack:
1107: 54 FC                anl     a, #11111100b
1109: 03                   rr      a
110A: 03                   rr      a
110B: 14                   dec     a
                   
110C: 90 11 1D              mov     dptr, #oprt      ;oprt=operand routine tabl
110F: 23                    rl      a
1110: 25 82                 add     a, dpl
1112: F5 82                 mov     dpl, a
1114: E4                    clr     a
1115: 35 83                 addc    a, dph
1117: F5 83                 mov     dph, a
1119: E4                    clr     a
111A: 73                   jmp     @a+dptr
                   dasm2:  
111B: 01 25                 ajmp    newline_h
                   
                   
111D: 41 2D        oprt:   ajmp   opcd1           ;addr11
111F: 41 3C                 ajmp   opcd2           ;A,Rn
1121: 21 81                 ajmp   opcd3           ;A,direct
1123: 21 72                 ajmp   opcd4           ;A,@Ri
1125: 41 48                 ajmp   opcd5           ;A,#data
1127: 41 04                 ajmp   opcd6           ;direct,A
1129: 41 52                 ajmp   opcd7           ;direct,#data
112B: 41 58                 ajmp   opcd8           ;C,bit
112D: 21 A2                 ajmp   opcd9           ;C,/bit
112F: 21 D7                 ajmp   opcd10          ;A,direct,rel
1131: 41 5E                 ajmp   opcd11          ;A,#data,rel
1133: 41 69                 ajmp   opcd12          ;Rn,#data,rel
1135: 41 6D                 ajmp   opcd13          ;@Ri,#data,rel
1137: 41 08                 ajmp   pa              ;A
1139: 41 10                 ajmp   prc             ;C
113B: 21 AA                 ajmp   pbit            ;bit
113D: 21 83                 ajmp   pdirect         ;direct
113F: 21 74                 ajmp   p_reg_i         ;@Ri
1141: 41 71                 ajmp   opcd19          ;AB
1143: 41 77                 ajmp   opcd20          ;Rn,rel
1145: 41 7D                 ajmp   opcd21          ;direct,rel
1147: 41 3E                 ajmp   p_reg_n         ;Rn
1149: 41 1C                 ajmp   pdptr           ;DPTR
114B: 41 81                 ajmp   opcd24          ;bit,rel
114D: 21 DF                 ajmp   prel            ;rel
114F: 41 14                 ajmp   opcd26          ;@A+DPTR
1151: 41 C5                 ajmp   opcd27          ;addr16
1153: 41 85                 ajmp   opcd28          ;Rn,A
1155: 41 8B                 ajmp   opcd29          ;Rn,direct
1157: 41 91                 ajmp   opcd30          ;Rn,#data
1159: 41 95                 ajmp   opcd31          ;direct,Rn
115B: 41 9B                 ajmp   opcd32          ;direct,direct
115D: 41 A9                 ajmp   opcd33          ;direct,@Ri
115F: 41 AF                 ajmp   opcd34          ;@Ri,A
1161: 41 B5                 ajmp   opcd35          ;@Ri,direct
1163: 41 BB                 ajmp   opcd36          ;@Ri,#data
1165: 41 0C                 ajmp   opcd37          ;bit,C
1167: 41 BF                 ajmp   opcd38          ;DPTR,#data16
1169: 41 CB                 ajmp   opcd39          ;A,@A+DPTR
116B: 41 D7                 ajmp   opcd40          ;A,@A+PC
116D: 41 E7                 ajmp   opcd41          ;A,@DPTR
116F: 41 ED                 ajmp   opcd42          ;@DPTR,A
1171: 22                    ret                    ; <nothing>
                   
                   
                   
                   opcd4:                      ;A,@Ri              done
1172: 31 F6                acall   pac
1174: 74 40        p_reg_i:mov     a,#'@'
1176: 51 2A                acall   cout_h
1178: 74 52                mov     a,#'R'
117A: 51 2A                acall   cout_h
117C: EA                   mov     a, r2
117D: 54 01                anl     a,#00000001b
117F: 41 45                ajmp    phex1_h
                   
                   opcd3:                      ;A,direct           done
1181: 31 F6                acall   pac
                   pdirect:
1183: EB                   mov     a, r3
1184: 20 E7 03             jb      acc.7,pdir1
1187: EB           pdir0:  mov     a, r3
1188: 41 4F                ajmp    phex_h
118A: 90 12 F5     pdir1:  mov     dptr,#sfrmnu
118D: E4           pdir2:  clr     a
118E: 93                   movc    a,@a+dptr
118F: A3                   inc     dptr
1190: 60 F5                jz      pdir0
1192: F8                   mov     r0,a
1193: C3                   clr     c
1194: 9B                   subb    a, r3
1195: 70 03                jnz     pdir3
                   pstr_h:
1197: 02 00 38              ljmp    pstr
                   
119A: E4           pdir3:  clr     a
119B: 93                   movc    a,@a+dptr
119C: A3                   inc     dptr
119D: 30 E7 FA             jnb     acc.7,pdir3
11A0: 80 EB                sjmp    pdir2
                   
                                  
                   opcd9:                      ;C,/bit             done
11A2: 51 10                acall   prc
11A4: 31 F8                acall   pcomma
11A6: 74 2F                mov     a, #'/'
11A8: 51 2A                acall   cout_h
                   pbit: 
11AA: EB                   mov     a, r3
11AB: 54 78                anl     a,#01111000b
11AD: 23                   rl      a
11AE: C4                   swap    a
11AF: F8                   mov     r0,a
11B0: EB                   mov     a, r3
11B1: 54 80                anl     a,#10000000b
11B3: 60 14                jz      pbit1
11B5: 90 13 72             mov     dptr,#bitptr        ;it's a Special Function
11B8: E8                   mov     a,r0
11B9: 93                   movc    a,@a+dptr
11BA: 90 1F 93             mov     dptr,#bitmnu
11BD: 35 82                addc    a,dpl
11BF: F5 82                mov     dpl,a
11C1: 50 02                jnc     pbit0
11C3: 05 83                inc     dph
11C5: 31 97        pbit0:  acall   pstr_h
11C7: 80 05                sjmp    pbit2
11C9: E8           pbit1:  mov     a,r0            ;it's between 20h and 2Fh
11CA: 24 20                add     a,#20h
11CC: 51 4F                acall   phex_h
11CE: 74 2E        pbit2:  mov     a,#'.'
11D0: 51 2A                acall   cout_h
11D2: EB                   mov     a, r3
11D3: 54 07                anl     a,#00000111b
11D5: 41 45                ajmp    phex1_h
                   
                   
                   opcd10:                     ;A,direct,rel       done
11D7: 31 F6                acall   pac
11D9: 31 83                acall   pdirect
11DB: 31 F8        opcd10a:acall   pcomma
11DD: EC                   mov     a, r4
11DE: FB                   mov     r3, a
                   prel:
11DF: EB                   mov     a, r3
11E0: 2E                   add     a, r6
11E1: F5 82                 mov     dpl, a
11E3: EB                    mov     a, r3
11E4: 20 E7 03              jb      acc.7, prel2
11E7: E4                    clr     a
11E8: 80 02                 sjmp    prel3
11EA: E4           prel2:   clr     a
11EB: F4                    cpl     a
11EC: 3F           prel3:   addc    a, r7
11ED: F5 83                 mov     dph, a
11EF: 02 00 36              ljmp    phex16
                   
                   
                   pat:            ;prints the '@' symbol
11F2: 74 40                mov     a,#'@'
11F4: 41 2A                ajmp    cout_h
                   
                   pac:            ;print "A,"
11F6: 51 08                acall   pa
                   pcomma:         ;prints a comma
11F8: 74 2C                mov     a,#','
11FA: 51 2A                acall   cout_h
11FC: 74 20        pspace: mov      a, #' '
11FE: 41 2A                 ajmp    cout_h
                   
                   plb:            ;prints the '#' symbol
1200: 74 23                mov     a,#'#'
1202: 41 2A                ajmp    cout_h
                   
                   
                   opcd6:                      ;direct,A           done
1204: 31 83                acall   pdirect
1206: 31 F8                acall   pcomma
                   pa:             ;prints 'A'
1208: 74 41                mov     a,#'A'
120A: 41 2A                ajmp    cout_h
                   
                   opcd37:                     ;bit,C              done
120C: 31 AA                acall   pbit
120E: 31 F8                acall   pcomma
                   prc:             ;prints 'C'
1210: 74 43                mov     a,#'C'
1212: 41 2A                ajmp    cout_h
                   
                   opcd26:                     ;@A+DPTR            done
1214: 31 F2                acall   pat
1216: 51 08                acall   pa
1218: 74 2B                mov     a,#'+'
121A: 51 2A                acall   cout_h
                   pdptr:          ;prints DPTR
121C: 74 44                 mov     a, #'D'
121E: 51 2A                 acall   cout_h
1220: 74 50                 mov     a, #'P'
1222: 51 2A                 acall   cout_h
1224: 74 54                 mov     a, #'T'
1226: 51 2A                 acall   cout_h
1228: 74 52                 mov     a, #'R'
                   cout_h:
122A: 02 00 30              ljmp    cout
                   
122D: EF           opcd1:  mov     a, r7       ;addr11             done
122E: 54 F8                anl     a, #11111000b
1230: F8                   mov     r0, a
1231: EA                   mov     a, r2
1232: C4                   swap    a
1233: 03                   rr      a
1234: 54 07                anl     a, #00000111b
1236: 48                   orl     a, r0
1237: 51 4F                acall   phex_h
1239: EB                   mov     a, r3
123A: 41 4F                ajmp    phex_h
                   
                   opcd2:                      ;A,Rn               done
123C: 31 F6                acall   pac
123E: 74 52        p_reg_n:mov     a,#'R'
1240: 51 2A                acall   cout_h
1242: EA                   mov     a, r2
1243: 54 07                anl     a,#00000111b
                   phex1_h:
1245: 02 00 2E              ljmp    phex1
                   
                   
                   
                   opcd5:                      ;A,#data            done
1248: 51 08                acall   pa
124A: 31 F8        pdata:  acall   pcomma
124C: 51 00                acall   plb
124E: EB                   mov     a, r3
                   phex_h:
124F: 02 00 34              ljmp    phex
                   
                   opcd7:                      ;direct,#data       done
1252: 31 83                acall   pdirect
1254: EC                   mov     a, r4
1255: FB                   mov     r3, a
1256: 41 4A                ajmp    pdata
                   opcd8:                      ;C,bit              done
1258: 51 10                acall   prc
125A: 31 F8                acall   pcomma
125C: 21 AA                ajmp    pbit
                   
                   opcd11:                     ;A,#data,rel        done
125E: 51 08                acall   pa
1260: 31 F8        opcd11a:acall   pcomma
1262: 51 00                acall   plb
1264: EB                   mov     a, r3
1265: 51 4F                acall   phex_h
1267: 21 DB                ajmp    opcd10a
                   opcd12:                     ;Rn,#data,rel       done
1269: 51 3E                acall   p_reg_n
126B: 41 60                ajmp    opcd11a
                   opcd13:                     ;@Ri,#data,rel      done
126D: 31 74                acall   p_reg_i
126F: 41 60                ajmp    opcd11a
                   opcd19:                     ;AB                 done
1271: 51 08                acall   pa
1273: 74 42                mov     a, #'B'
1275: 41 2A                ajmp    cout_h
                   opcd20:                     ;Rn,rel             done
1277: 51 3E                acall   p_reg_n
1279: 31 F8                acall   pcomma
127B: 21 DF                ajmp    prel
                   opcd21:                     ;direct,rel         done
127D: 31 83                acall   pdirect
127F: 21 DB                ajmp    opcd10a
                   opcd24:                     ;bit,rel            done
1281: 31 AA                acall   pbit
1283: 21 DB                ajmp    opcd10a
                   opcd28:                     ;Rn,A               done
1285: 51 3E                acall   p_reg_n
1287: 31 F8                acall   pcomma
1289: 41 08                ajmp    pa
                   opcd29:                     ;Rn,direct          done
128B: 51 3E                acall   p_reg_n
128D: 31 F8                acall   pcomma          
128F: 21 83                ajmp    pdirect
                   opcd30:                     ;Rn,#data           done
1291: 51 3E                acall   p_reg_n
1293: 41 4A                ajmp    pdata
                   opcd31:                     ;direct,Rn          done
1295: 31 83                acall   pdirect
1297: 31 F8                acall   pcomma
1299: 41 3E                ajmp    p_reg_n
                   opcd32:                     ;direct,direct      done
129B: EB                   mov     a, r3
129C: C0 E0                push    acc
129E: EC                   mov     a, r4
129F: FB                   mov     r3, a
12A0: 31 83                acall   pdirect
12A2: 31 F8                acall   pcomma
12A4: D0 E0                pop     acc
12A6: FB                   mov     r3, a
12A7: 21 83                ajmp    pdirect
                   opcd33:                     ;direct,@Ri         done
12A9: 31 83                acall   pdirect
12AB: 31 F8                acall   pcomma
12AD: 21 74                ajmp    p_reg_i
                   opcd34:                     ;@Ri,A              done
12AF: 31 74                acall   p_reg_i
12B1: 31 F8                acall   pcomma
12B3: 41 08                ajmp    pa
                   opcd35:                     ;@Ri,direct         done
12B5: 31 74                acall   p_reg_i
12B7: 31 F8                acall   pcomma
12B9: 21 83                ajmp    pdirect
                   opcd36:                     ;@Ri,#data          done
12BB: 31 74                acall   p_reg_i
12BD: 41 4A                ajmp    pdata
                   opcd38:                     ;DPTR,#data16       done
12BF: 51 1C                acall   pdptr
12C1: 31 F8                acall   pcomma
12C3: 51 00                acall   plb
12C5: EB           opcd27: mov     a, r3  ;addr16          done
12C6: 51 4F                acall   phex_h
12C8: EC                   mov     a, r4
12C9: 41 4F                ajmp    phex_h
                   opcd39:                     ;A,@A+DPTR          done
12CB: 31 F6                acall   pac
12CD: 31 F2                acall   pat
12CF: 51 08                acall   pa
12D1: 74 2B                mov     a,#'+'
12D3: 51 2A                acall   cout_h
12D5: 41 1C                ajmp    pdptr
                   opcd40:                     ;A,@A+PC            done
12D7: 31 F6                acall   pac
12D9: 31 F2                acall   pat
12DB: 51 08                acall   pa
12DD: 74 2B                mov     a,#'+'
12DF: 51 2A                acall   cout_h
12E1: 74 50                mov     a,#'P'
12E3: 51 2A                acall   cout_h
12E5: 41 10                ajmp    prc
                   opcd41:                     ;A,@DPTR            done
12E7: 31 F6                acall   pac
12E9: 31 F2                acall   pat
12EB: 41 1C                ajmp    pdptr
                   opcd42:                     ;@DPTR,A            done
12ED: 31 F2                acall   pat
12EF: 51 1C                acall   pdptr
12F1: 31 F8                acall   pcomma
12F3: 41 08                ajmp    pa
                   
                   
                   
                   
                   
12F5: E0 41 43 C3 
                   sfrmnu: .db     0xE0,"AC",'C'+128
12F9: 81 53 D0             .db     0x81,'S','P'+128
12FC: 82 44 50 CC 
                           .db     0x82,"DP",'L'+128
1300: 83 44 50 C8 
                           .db     0x83,"DP",'H'+128
1304: 80 50 B0             .db     0x80,'P','0'+128
1307: 90 50 B1             .db     0x90,'P','1'+128
130A: A0 50 B2             .db     0xA0,'P','2'+128
130D: B0 50 B3             .db     0xB0,'P','3'+128
1310: 99 53 42 55 
      C6                   .db     0x99,"SBU",'F'+128
1315: CD 54 48 B2 
                           .db     0xCD,"TH",'2'+128
1319: C8 54 32 43 
      4F CE                .db     0xC8,"T2CO",'N'+128
131F: CC 54 4C B2 
                           .db     0xCC,"TL",'2'+128
1323: CB 52 43 41 
      50 32 C8             .db     0xCB,"RCAP2",'H'+128
132A: CA 52 43 41 
      50 32 CC             .db     0xCA,"RCAP2",'L'+128
1331: 8C 54 48 B0 
                           .db     0x8C,"TH",'0'+128
1335: 8A 54 4C B0 
                           .db     0x8A,"TL",'0'+128
1339: 8D 54 48 B1 
                           .db     0x8D,"TH",'1'+128
133D: 8B 54 4C B1 
                           .db     0x8B,"TL",'1'+128
1341: F0 C2        sfr1:   .db     0xF0,'B'+128               ;5
1343: D0 50 53 D7 
                   sfr2:   .db     0xD0,"PS",'W'+128          ;7
1347: A8 49 C5     sfr3:   .db     0xA8,'I','E'+128
134A: B8 49 D0     sfr4:   .db     0xB8,'I','P'+128
134D: 89 54 4D 4F 
      C4           sfr5:   .db     0x89,"TMO",'D'+128         ;8
1352: 88 54 43 4F 
      CE           sfr6:   .db     0x88,"TCO",'N'+128         ;8
1357: 98 53 43 4F 
      CE           sfr7:   .db     0x98,"SCO",'N'+128         ;8
135C: 87 50 43 4F 
      CE           sfr8:   .db     0x87,"PCO",'N'+128         ;8
1361: 00                   .db     0                       ;just in case
                   
                   
1362: 59 59 09 09 
                   opot2:  .db     0x59, 0x59, 0x09, 0x09  ;inc, dec, add, addc
1366: 09 09 09 7A 
                           .db     0x09, 0x09, 0x09, 0x7A  ;orl, anl, xrl, mov
136A: 7E 09 76 33 
                           .db     0x7E, 0x09, 0x76, 0x33  ;mov, subb, mov, cjn
136E: 09 52 09 71 
                           .db     0x09, 0x52, 0x09, 0x71  ;xch, djnz, mov, mov
                   
1372: 00 02 06 08 
      0C 0E 10 12 
                   bitptr: .db     0x00, 0x02, 0x06, 0x08, 0x0C, 0x0E, 0x10, 0x
137A: 14 16 1B 1E 
      20 23 24 25 
                           .db     0x14, 0x16, 0x1B, 0x1E, 0x20, 0x23, 0x24, 0x
                   
                   
                   ;some stuff used by single step... it's here to fill up some
                   ;the unused space from the end of the disassembler code and 
                   ;beginning of the single-step header (which must begin on a 
                   ;byte page boundry)
                   
                   
                   wr_check:   ;write to memory and check that it worked.
                                ;acc=0 if it worked, nonzero if it didn't write
1382: F8                    mov     r0, a           ;keep a copy of the data in
1383: F0                    movx    @dptr, a
1384: E4                    clr     a
1385: 93                    movc    a, @a+dptr
1386: C3                    clr     c
1387: 98                    subb    a, r0
1388: 22                    ret
                   
                   ;delay for approx 1 character transmit time
1389: 79 50        chardly:mov     r1, #80     
138B: E5 8D        chdly2:  mov     a, th1 
138D: F4                   cpl     a     
138E: 04                   inc     a
138F: F8                   mov     r0, a
1390: D8 FE                djnz    r0, *
1392: D9 F7                djnz    r1, chdly2
1394: 22                    ret
                   
1395: 51 4F        prcolon:acall    phex_h
1397: 74 3A                 mov     a, #':'
1399: 41 2A                 ajmp    cout_h
                   
139B: 51 4F        phexsp:  acall   phex_h
                   space_h:
139D: 74 20                 mov     a, #' '
139F: 41 2A                 ajmp    cout_h
                   
                   
                   ;SINGLE
                   ;---------------------------------------------------------;
                   ;                                                         ;
                   ;                 single step command                     ;
                   ;                                                         ;
                   ;---------------------------------------------------------;
                   
1400:              .org    locat+0x400
1400: A5 E5 E0 A5 
                   .db     0xA5,0xE5,0xE0,0xA5     ;signiture
1404: FE 53 00 00 
                   .db     254,step_key,0,0             ;id (254=user installed
1408: 00 00 00 00 
                   .db     0,0,0,0                 ;prompt code vector
140C: 00 00 00 00 
                   .dB     0,0,0,0                 ;reserved
1410: 00 00 00 00 
                   .db     0,0,0,0                 ;reserved
1414: 00 00 00 00 
                   .db     0,0,0,0                 ;reserved
1418: 00 00 00 00 
                   .db     0,0,0,0                 ;user defined
141C: FF FF FF FF 
                   .db     255,255,255,255         ;length and checksum (255=un
1420: 53 69 6E 67 
      6C 65 2D 53 
      74 65 70 00 
                   .db     "Single-Step",0
1440:              .org    locat+0x440             ;executable code begins here
                   
                   
                           
                   ssrun:
                            ;first check to make sure they connect int1 low
1440: 30 B3 06              jnb     p3.3, ssrun2
1443: 90 1D 85             mov     dptr, #sserr1    ;give error msg if int1 not
                   pcstr_h:
1446: 02 00 45              ljmp    pcstr
                   
                   ssrun2:  ;make sure there's a ljmp at the int1 vector locati
1449: 90 00 13              mov     dptr, #0x0013
144C: E4                    clr     a
144D: 93                    movc    a, @a+dptr
144E: 24 FE                 add     a, #254
1450: 60 05                 jz      ssrun3
1452: 90 1D A8              mov     dptr, #sserr2   ;give error that paulmon2 w
1455: 81 46                 ajmp    pcstr_h
                   ssrun3:  ;now write an ljmp to "step" in the ram and check i
1457: A3                    inc     dptr
1458: 93                    movc    a, @a+dptr
1459: F8                    mov     r0, a
145A: E4                    clr     a
145B: A3                    inc     dptr
145C: 93                    movc    a, @a+dptr
145D: F5 82                 mov     dpl, a
145F: 88 83                 mov     dph, r0                 ;now data pointer p
1461: 74 02                 mov     a, #2
1463: 71 82                 acall   wr_check
1465: 70 0E                 jnz     ssrun4
1467: A3                    inc     dptr
1468: 74 14                 mov     a, #(step >> 8)
146A: 71 82                 acall   wr_check
146C: 70 07                 jnz     ssrun4
146E: A3                    inc     dptr
146F: 74 EF                 mov     a, #(step & 255)
1471: 71 82                 acall   wr_check
1473: 60 11                 jz      ssrun5
1475: A8 82        ssrun4:  mov     r0, dpl
1477: A9 83                 mov     r1, dph
1479: 90 1D B5              mov     dptr, #sserr3   ;error: couldn't write to m
147C: 91 46                 acall   pcstr_h
147E: E9                    mov     a, r1
147F: 51 4F                 acall   phex_h
1481: E8                    mov     a, r0
1482: 51 4F                 acall   phex_h
1484: 01 25                 ajmp    newline_h
1486: E5 B8        ssrun5:  mov     a, ip           ;set to high priority inter
1488: 54 04                 anl     a, #00000100b
148A: F5 B8                 mov     ip, a
                            ;let's not beat around the bush (like paulmon1), al
                            ;we need to know is where to jump into memory.
148C: 90 1D 68              mov     dptr, #prompt8
148F: 91 46                 acall   pcstr_h
1491: EF                    mov     a, r7
1492: 51 4F                 acall   phex_h
1494: EE                    mov     a, r6
1495: 51 4F                 acall   phex_h
1497: 90 1D 52             mov     dptr,#prompt4
149A: 91 46                acall   pcstr_h
149C: 12 00 3C             lcall   ghex16           ;ask for the jump location
149F: 20 D5 0D              jb      psw.5, ssrun7
14A2: 50 07                jnc     ssrun6
14A4: 90 1D 71             mov     dptr,#abort
14A7: 31 97                acall   pstr_h
14A9: 01 25                ajmp    newline_h
14AB: AE 82        ssrun6:  mov     r6, dpl                 ;where we'll begin 
14AD: AF 83                 mov     r7, dph
14AF: C2 8A        ssrun7:  clr     tcon.2          ;need low-level triggered i
14B1: 90 1D C4              mov     dptr,#ssmsg     ;tell 'em we're starting
14B4: 91 46                 acall   pcstr_h
14B6: 90 1E BC              mov     dptr,#ssnames
14B9: 31 97                 acall   pstr_h
14BB: E4                    clr     a
14BC: 75 81 08              mov     sp, #8          ;just like after a reset
14BF: C0 E0                 push    acc             ;unlike a 8051 start-up, pu
14C1: C0 E0                 push    acc             ;of 0000, just in case they
14C3: 8E 82                 mov     dpl, r6                 ;load the program's
14C5: 8F 83                 mov     dph, r7
14C7: F5 D0                 mov     psw, a          ;and clear everything to ze
14C9: F8                    mov     r0, a
14CA: F9                    mov     r1, a
14CB: FA                    mov     r2, a
14CC: FB                    mov     r3, a
14CD: FC                    mov     r4, a
14CE: FD                    mov     r5, a
14CF: FE                    mov     r6, a
14D0: FF                    mov     r7, a
14D1: F5 F0                 mov     b, a
14D3: 75 7C DD              mov     lastpc, #ssstart & 255
14D6: 75 7D 14              mov     (lastpc+1), #ssstart >> 8
14D9: D2 AA                 setb    ie.2
14DB: D2 AF                 setb    ea              ;turn on the interrupt
14DD: 73           ssstart:jmp      @a+dptr
                   
                   
14DE: 71 89        done:    acall   chardly
14E0: D0 E0                 pop     acc
14E2: F9                    mov     r1, a
14E3: D0 E0                 pop     acc
14E5: F8                    mov     r0, a
14E6: D0 82                 pop     dpl
14E8: D0 83                 pop     dph
14EA: D0 D0                 pop     psw
14EC: D0 E0                 pop     acc
14EE: 32                    reti
                   
                   step:    ;this is the single step interrupt service code...
14EF: C0 E0                 push    acc
14F1: C0 D0                 push    psw             ;Stack Contents: (in this o
14F3: C0 83                 push    dph             ;PC_L PC_H ACC PSW DPH DPL 
14F5: C0 82                 push    dpl
14F7: E8                    mov     a, r0
14F8: C0 E0                 push    acc
14FA: E9                    mov     a, r1
14FB: C0 E0                 push    acc
                            ;in case the previous instruction was "clr ti", we
                            ;must wait for a character transmit time "in case i
                            ;was a move to SBUF) and then set ti so that our co
                            ;doesn't hang when we transmit the first character!
14FD: 71 89                 acall   chardly
14FF: D2 99                 setb    ti
                   
                            ;now print out a line that looks like this:
                            ;ACC B C DPTR  R0 R1 R2 R3 R4 R5 R6 R7  SP    PC  I
                            ;00 00 0 3F00  00:00:00:00:00:00:00:00  00 - 0000: 
                   
1501: 71 9D                 acall   space_h
1503: 71 9D                 acall   space_h
1505: E5 81                mov     a, sp
1507: 24 FB                add     a, #251
1509: F8                   mov     r0, a           ;r0 points to user's acc on 
150A: E6                   mov     a, @r0
150B: 71 9B                acall   phexsp          ;print acc
150D: E5 F0                mov     a, b
150F: 71 9B                acall   phexsp          ;print b register
1511: 08                    inc     r0
1512: E6                   mov     a, @r0
1513: 23                   rl      a
1514: 54 01                anl     a, #1
1516: 51 45                acall   phex1_h         ;print carry bit
1518: 71 9D                acall   space_h
151A: 08                    inc     r0
151B: E6                    mov     a, @r0
151C: 51 4F                 acall   phex_h          ;print dptr (msb)
151E: 08                    inc     r0
151F: E6                    mov     a, @r0
1520: 71 9B                 acall   phexsp          ;print dptr (lsb)
1522: 71 9D                 acall   space_h
1524: 08                    inc     r0
1525: E6                    mov     a, @r0
1526: 71 95                 acall   prcolon                 ;print r0
1528: 08                    inc     r0
1529: E6                    mov     a, @r0
152A: 71 95                 acall   prcolon                 ;print r1
152C: EA                    mov     a, r2
152D: 71 95                 acall   prcolon                 ;print r2
152F: EB                    mov     a, r3
1530: 71 95                 acall   prcolon                 ;print r3
1532: EC                    mov     a, r4
1533: 71 95                 acall   prcolon                 ;print r4
1535: ED                    mov     a, r5
1536: 71 95                 acall   prcolon                 ;print r5
1538: EE                    mov     a, r6
1539: 71 95                 acall   prcolon                 ;print r6
153B: EF                    mov     a, r7
153C: 71 9B                 acall   phexsp          ;print r7
153E: 71 9D                 acall   space_h
1540: E8                    mov     a, r0
1541: 24 F8                 add     a, #248
1543: 71 9B                 acall   phexsp          ;print stack pointer
1545: 71 9D                 acall   space_h
1547: 71 9D                 acall   space_h
                            ;now the trick is to disassemble the instruction...
                            ;easy, since the user wants to see the last instruc
                            ;just executed, but program counter on the stack po
                            ;next instruction to be executed.  The dirty trick 
                            ;the program counter from last time where we stashe
                            ;memory that hopefully the user's program hasn't ov
1549: E5 7C                 mov     a, lastpc
154B: 8E 7C                 mov     lastpc, r6
154D: FE                    mov     r6, a
154E: E5 7D                 mov     a, (lastpc+1)
1550: 8F 7D                 mov     (lastpc+1), r7
1552: FF                    mov     r7, a
1553: EA                    mov     a, r2
1554: C0 E0                 push    acc
1556: EB                    mov     a, r3
1557: C0 E0                 push    acc
1559: EC                    mov     a, r4
155A: C0 E0                 push    acc
155C: D2 D1                 setb    psw.1           ;tell it to use a compact f
                            ;the disassembler uses quite a bit of stack space..
                            ;user didn't leave enough room for the stack to gro
                            ;all this overhead, it will likely crash somewhere 
                            ;disassembler... oh well, not much I can do about i
                            ;worst case stack usage for disasm is 9 bytes.  We 
                            ;pushed 5 and 6 at the beginning of step.  With the
                            ;bytes for the interrupt, a total of 22 bytes of fr
                            ;space must be available to use the single-step fea
155E: 11 4C                 acall   disasm
1560: D0 E0                 pop     acc
1562: FC                    mov     r4, a
1563: D0 E0                 pop     acc
1565: FB                    mov     r3, a
1566: D0 E0                 pop     acc
1568: FA                    mov     r2, a
1569: AF 7D                 mov     r7, (lastpc+1)
156B: AE 7C                 mov     r6, lastpc
                            ;now grab the user's PC value to keep it for next t
156D: E5 81                mov     a, sp
156F: 24 F9                add     a, #249
1571: F8                   mov     r0, a           ;r0 points to user's acc on 
1572: E6                    mov     a, @r0
1573: F5 7C                 mov     lastpc, a
1575: 08                    inc     r0
1576: E6                    mov     a, @r0
1577: F5 7D                 mov     (lastpc+1), a
                   
                   ;SINGLE STEP
                   
1579: 12 00 62     step1:  lcall   cin_filter
157C: 12 00 40             lcall   upper
157F: B4 0D 02     step2:  cjne    a, #13, step7
1582: 81 DE                ajmp    done
1584: B4 20 02     step7:  cjne    a, #' ', step8    ;check space
1587: 81 DE                ajmp    done
1589: B4 3F 07     step8:  cjne    a,#'?',step10  ;check '?'
158C: 90 1E 35             mov     dptr,#help5txt
158F: 91 46                acall   pcstr_h
1591: A1 79                ajmp    step1
1593: B4 51 13     step10: cjne    a,#'Q',step11  ;check 'Q'=quit and run norma
1596: 90 1E B5             mov     dptr, #squit
1599: 31 97                acall   pstr_h
159B: C2 AA                clr     ie.2
159D: 71 89                 acall   chardly
159F: 75 08 00              mov     8, #0           ;force return to 0000
15A2: 75 09 00              mov     9, #0
15A5: 75 81 09              mov     sp, #9
15A8: 32                    reti
                   step11:
15A9: B4 48 02              cjne    a,#'H',step12  ;check 'H'=hex dump internal
15AC: A1 CD                ajmp    ssdmp
15AE: B4 52 02     step12: cjne    a,#'R',step13  ;check 'R'=print out register
15B1: A1 FD                ajmp    ssreg
15B3: B4 53 02     step13: cjne    a,#'S',step14  ;check 'S'=skip next inst
15B6: C1 67                ajmp    ssskip
15B8: B4 41 02     step14: cjne    a,#'A',step15  ;check 'A'=change acc value
15BB: C1 AA                ajmp    sschacc
15BD: B4 2E 07     step15: cjne     a,#'.',step20
15C0: 90 1E BC              mov     dptr, #ssnames
15C3: 31 97                 acall   pstr_h
15C5: A1 79                 ajmp    step1
                   
15C7: A1 79        step20: ajmp    step1
                    
                     
                   pequal:        ; prints '='
15C9: 74 3D                mov     a,#'='
15CB: 41 2A                ajmp    cout_h
                   
                   ssdmp:
15CD: 90 1E 03             mov     dptr, #ssdmps1
15D0: 31 97                acall   pstr_h
15D2: E4                   clr     a
15D3: 71 95                acall   prcolon
15D5: 71 9D                acall   space_h
15D7: A8 81                 mov     r0, sp
15D9: 18                    dec     r0
15DA: E6                   mov     a, @r0
15DB: 71 9B                acall   phexsp
15DD: 08                    inc     r0
15DE: E6                    mov     a, @r0
15DF: 51 4F                acall   phex_h
15E1: 78 02                mov     r0, #2
15E3: 79 0E                mov     r1, #14
15E5: A1 EC                ajmp    ssdmp2
15E7: E8           ssdmp1: mov     a, r0
15E8: 71 95                 acall   prcolon
15EA: 79 10                mov     r1, #16
15EC: 71 9D        ssdmp2: acall   space_h
15EE: E6                   mov     a, @r0
15EF: 51 4F                acall   phex_h
15F1: 08                   inc     r0
15F2: D9 F8                djnz    r1, ssdmp2
15F4: 11 25                acall   newline_h
15F6: B8 80 EE             cjne    r0, #0x80, ssdmp1
15F9: 11 25                acall   newline_h
15FB: A1 79                 ajmp    step1
                   
                   
                   ssreg:
15FD: 90 13 44              mov     dptr, #sfr2+1
1600: 31 97                 acall   pstr_h
1602: B1 C9                acall   pequal
1604: E5 81                mov     a, sp
1606: 24 FC                 add     a, #252
1608: F8                    mov     r0, a
1609: E6                   mov     a, @r0
160A: 71 9B                acall   phexsp           ;print psw
160C: 90 13 48             mov     dptr,#sfr3+1
160F: A8 A8                mov     r0, 0xA8
1611: D1 60                acall   psfr             ;print ie
1613: 90 13 4B             mov     dptr,#sfr4+1
1616: A8 B8                mov     r0, 0xB8
1618: D1 60                acall   psfr             ;print ip
161A: 90 13 4E             mov     dptr,#sfr5+1
161D: A8 89                mov     r0, 0x89
161F: D1 60                acall   psfr             ;print tmod
1621: 90 13 53             mov     dptr,#sfr6+1
1624: A8 88                mov     r0, 0x88
1626: D1 60                acall   psfr             ;print tcon
1628: 90 13 58             mov     dptr,#sfr7+1
162B: A8 98                mov     r0, 0x98
162D: D1 60                acall   psfr             ;print smod
162F: 90 13 5D             mov     dptr,#sfr8+1
1632: A8 87                mov     r0, 0x87
1634: D1 60                acall   psfr             ;print pcon
1636: 74 54                mov     a, #'T'
1638: 51 2A                acall   cout_h
163A: 74 30                mov     a, #'0'
163C: 51 2A                acall   cout_h
163E: B1 C9                acall   pequal
1640: E5 8C                mov     a, 8Ch
1642: 51 4F                acall   phex_h           ;print Timer 0
1644: E5 8A                mov     a, 8Ah
1646: 51 4F                acall   phex_h
1648: 71 9D                acall   space_h
164A: 74 54                mov     a, #'T'
164C: 51 2A                acall   cout_h
164E: 74 31                mov     a, #'1'
1650: 51 2A                acall   cout_h
1652: B1 C9                acall   pequal
1654: E5 8D                mov     a, 8Dh           ;print Timer 1
1656: 51 4F                acall   phex_h
1658: E5 8B                mov     a, 8Bh
165A: 51 4F                acall   phex_h
165C: 11 25                acall   newline_h
165E: A1 79                ajmp    step1
                   
1660: 31 97        psfr:   acall   pstr_h
1662: B1 C9                acall   pequal
1664: E8                   mov     a, r0
1665: 61 9B                ajmp    phexsp
                   
                   
                   
                   ;skip the next instruction
                   ssskip:
1667: 78 17                 mov     r0, #23
1669: 71 9D        ssskip2:acall    space_h
166B: D8 FC                 djnz    r0, ssskip2
166D: 90 1D EB             mov     dptr,#sskip1
1670: 31 97                acall   pstr_h
1672: E5 81                 mov     a, sp
1674: 24 F9                 add     a, #249
1676: F8                    mov     r0, a           ;set r0 to point to pc on s
1677: E6                    mov     a, @r0
1678: 8E 7C                 mov     lastpc, r6      ;keep r6/r7 safe in lastpc
167A: FE                    mov     r6, a           ;put user's pc into r6/r7
167B: 08                    inc     r0
167C: E6                    mov     a, @r0
167D: 8F 7D                 mov     (lastpc+1), r7
167F: FF                    mov     r7, a
1680: EA                    mov     a, r2
1681: C0 E0                 push    acc
1683: EB                    mov     a, r3
1684: C0 E0                 push    acc
1686: EC                    mov     a, r4
1687: C0 E0                 push    acc
1689: D2 D1                setb    psw.1           ;tell it to use a compact fo
168B: 11 4C                acall   disasm           ;run disasm to show 'em wha
168D: D0 E0                 pop     acc
168F: FC                    mov     r4, a
1690: D0 E0                 pop     acc
1692: FB                    mov     r3, a
1693: D0 E0                 pop     acc
1695: FA                    mov     r2, a
1696: E5 81                mov     a, sp
1698: 24 F9                add     a, #249
169A: F8                   mov     r0, a           ;set r0 to point to pc on st
169B: EE                    mov     a, r6
169C: AE 7C                mov     r6, lastpc       ;restore r6/r7
169E: F5 7C                 mov     lastpc, a       ;update lastpc with next in
16A0: F6                    mov     @r0, a          ;also update user's pc!!
16A1: 08                    inc     r0
16A2: EF                    mov     a, r7
16A3: AF 7D                 mov     r7, (lastpc+1)
16A5: F5 7D                 mov     (lastpc+1), a
16A7: F6                    mov     @r0, a
16A8: A1 79                 ajmp    step1
                   
                   sschacc:
16AA: E5 81                mov     a, sp
16AC: 24 FB                 add     a, #251
16AE: F8                    mov     r0, a           ;r0 points to acc on stack
16AF: 90 1E 25             mov     dptr, #chaccs1
16B2: 31 97                acall   pstr_h
16B4: 12 00 3A             lcall   ghex
16B7: 40 08                jc      chacc2
16B9: 20 D5 05              jb      psw.5, chacc2
16BC: F6                   mov     @r0, a
16BD: 11 25                acall   newline_h
16BF: A1 79                ajmp    step1
16C1: 90 1D 71     chacc2: mov     dptr, #abort
16C4: 31 97                acall   pstr_h
16C6: A1 79                ajmp    step1
                   
                   
                   
                   
                   ;stuff some of the disassembler tables, strings, etc since w
                   ;bit of space before the beginning of the editor command cod
                   
                   
                          ;opcode offset table (gives #bytes for the instructio
                          ;and the number of the routine to print the operands)
                   
16C8: AD 06 6F 39 
      39 46 49 49 
                   opot1:  .db     0xAD, 0x06, 0x6F, 0x39, 0x39, 0x46, 0x49, 0x
16D0: 63 06 6F 39 
      39 46 49 49 
                           .db     0x63, 0x06, 0x6F, 0x39, 0x39, 0x46, 0x49, 0x
16D8: 63 06 AD 39 
      16 0E 11 11 
                           .db     0x63, 0x06, 0xAD, 0x39, 0x16, 0x0E, 0x11, 0x
16E0: 63 06 AD 39 
      16 0E 11 11 
                           .db     0x63, 0x06, 0xAD, 0x39, 0x16, 0x0E, 0x11, 0x
16E8: 66 06 1A 1F 
      16 0E 11 11 
                           .db     0x66, 0x06, 0x1A, 0x1F, 0x16, 0x0E, 0x11, 0x
16F0: 66 06 1A 1F 
      16 0E 11 11 
                           .db     0x66, 0x06, 0x1A, 0x1F, 0x16, 0x0E, 0x11, 0x
16F8: 66 06 1A 1F 
      16 0E 11 11 
                           .db     0x66, 0x06, 0x1A, 0x1F, 0x16, 0x0E, 0x11, 0x
1700: 66 06 22 69 
      16 1F 92 92 
                           .db     0x66, 0x06, 0x22, 0x69, 0x16, 0x1F, 0x92, 0x
1708: 66 06 22 A1 
      4D 83 86 86 
                           .db     0x66, 0x06, 0x22, 0xA1, 0x4D, 0x83, 0x86, 0x
1710: 9B 06 96 9D 
      16 0E 11 11 
                           .db     0x9B, 0x06, 0x96, 0x9D, 0x16, 0x0E, 0x11, 0x
1718: 26 06 22 5D 
      4D AD 8E 8E 
                           .db     0x26, 0x06, 0x22, 0x5D, 0x4D, 0xAD, 0x8E, 0x
1720: 26 06 42 3D 
      2F 2B 37 37 
                           .db     0x26, 0x06, 0x42, 0x3D, 0x2F, 0x2B, 0x37, 0x
1728: 46 06 42 3D 
      39 0E 11 11 
                           .db     0x46, 0x06, 0x42, 0x3D, 0x39, 0x0E, 0x11, 0x
1730: 46 06 42 3D 
      39 57 11 11 
                           .db     0x46, 0x06, 0x42, 0x3D, 0x39, 0x57, 0x11, 0x
1738: A5 06 11 11 
      39 0E 11 11 
                           .db     0xA5, 0x06, 0x11, 0x11, 0x39, 0x0E, 0x11, 0x
1740: A9 06 89 89 
      39 1A 89 89 
                           .db     0xA9, 0x06, 0x89, 0x89, 0x39, 0x1A, 0x89, 0x
                   
                   mnot1:  ;mnunonic offset table (gives offset into above tabl
                   
1748: 5A 0E 48 73 
                           .db     0x5A, 0x0E, 0x48, 0x73  ;nop, ajmp, ljmp, rr
174C: 2B 2B 2B 2B 
                           .db     0x2B, 0x2B, 0x2B, 0x2B  ;inc, inc, inc, inc
1750: 30 00 43 75 
                           .db     0x30, 0x00, 0x43, 0x75  ;jbc, acall, lcall r
1754: 21 21 21 21 
                           .db     0x21, 0x21, 0x21, 0x21  ;
                   
1758: 2E 0E 67 6E 
                           .db     0x2E, 0x0E, 0x67, 0x6E  ; etc...
175C: 06 06 06 06 
                           .db     0x06, 0x06, 0x06, 0x06  ;
1760: 38 00 6A 70 
                           .db     0x38, 0x00, 0x6A, 0x70  ;
1764: 0A 0A 0A 0A 
                           .db     0x0A, 0x0A, 0x0A, 0x0A  ;
                   
1768: 33 0E 5D 5D 
                           .db     0x33, 0x0E, 0x5D, 0x5D  ;
176C: 5D 5D 5D 5D 
                           .db     0x5D, 0x5D, 0x5D, 0x5D  ;
1770: 3B 00 12 12 
                           .db     0x3B, 0x00, 0x12, 0x12  ;
1774: 12 12 12 12 
                           .db     0x12, 0x12, 0x12, 0x12  ;
                   
1778: 41 0E 8F 8F 
                           .db     0x41, 0x0E, 0x8F, 0x8F  ;
177C: 8F 8F 8F 8F 
                           .db     0x8F, 0x8F, 0x8F, 0x8F  ;
1780: 3E 00 5D 35 
                           .db     0x3E, 0x00, 0x5D, 0x35  ;
1784: 4C 4C 4C 4C 
                           .db     0x4C, 0x4C, 0x4C, 0x4C  ;
                   
1788: 7C 0E 12 4F 
                           .db     0x7C, 0x0E, 0x12, 0x4F  ;
178C: 24 4C 4C 4C 
                           .db     0x24, 0x4C, 0x4C, 0x4C  ;
1790: 4C 00 4C 4F 
                           .db     0x4C, 0x00, 0x4C, 0x4F  ;
1794: 80 80 80 80 
                           .db     0x80, 0x80, 0x80, 0x80  ;
                   
1798: 5D 0E 4C 2B 
                           .db     0x5D, 0x0E, 0x4C, 0x2B  ;
179C: 57 92 4C 4C 
                           .db     0x57, 0x92, 0x4C, 0x4C  ;
17A0: 12 00 1C 1C 
                           .db     0x12, 0x00, 0x1C, 0x1C  ;
17A4: 15 15 15 15 
                           .db     0x15, 0x15, 0x15, 0x15  ;
                   
17A8: 63 0E 19 19 
                           .db     0x63, 0x0E, 0x19, 0x19  ;
17AC: 84 88 88 88 
                           .db     0x84, 0x88, 0x88, 0x88  ;
17B0: 60 00 78 78 
                           .db     0x60, 0x00, 0x78, 0x78  ;
17B4: 1F 27 8B 8B 
                           .db     0x1F, 0x27, 0x8B, 0x8B  ;
                   
17B8: 53 0E 53 53 
                           .db     0x53, 0x0E, 0x53, 0x53  ;
17BC: 19 4C 4C 4C 
                           .db     0x19, 0x4C, 0x4C, 0x4C  ;
17C0: 53 00 53 53 
                           .db     0x53, 0x00, 0x53, 0x53  ;
17C4: 1C 4C 4C 4C 
                           .db     0x1C, 0x4C, 0x4C, 0x4C  ;
                   
                   
17C8: 2B 21 06 0A 
                   mnot2:  .db     0x2B, 0x21, 0x06, 0x0A  ;inc, dec, add, addc
17CC: 5D 12 8F 4C 
                           .db     0x5D, 0x12, 0x8F, 0x4C  ;orl, anl, xlr, mov
17D0: 4C 80 4C 15 
                           .db     0x4C, 0x80, 0x4C, 0x15  ;mov, subb, mov, cjn
17D4: 88 27 4C 4C 
                           .db     0x88, 0x27, 0x4C, 0x4C  ;xch, djnz, mov, mov
                   
                   
                   ;---------------------------------------------------------;
                   ;                                                         ;
                   ;                  External Memory Editor                 ;
                   ;                                                         ;
                   ;---------------------------------------------------------;
                   
                   ;register usage:
                   ; R4,    Flags:
                   ;         bit0: 0=display CODE memory, 1=display DATA memory
                   ;         bit1: 0=editing disabled, 1=editing enabled
                   ;         bit2: 0=editing in hex, 1=editing in ascii
                   ;         bit3: 0=normal, 1=in middle of hex entry (value in
                   ; R6/R7, current memory location
                   ;
                   
1800:              .org     locat+0x800
1800: A5 E5 E0 A5 
                   .db      0xA5,0xE5,0xE0,0xA5     ;signiture
1804: FE 45 00 00 
                   .db      254,vtedit_key,0,0      ;id (254=user installed com
1808: 00 00 00 00 
                   .db      0,0,0,0                         ;prompt code vector
180C: 00 00 00 00 
                   .dB      0,0,0,0                         ;reserved
1810: 00 00 00 00 
                   .db      0,0,0,0                         ;reserved
1814: 00 00 00 00 
                   .db      0,0,0,0                         ;reserved
1818: 00 00 00 00 
                   .db      0,0,0,0                         ;user defined
181C: FF FF FF FF 
                   .db      255,255,255,255                 ;length and checksu
1820: 4D 65 6D 6F 
      72 79 20 45 
      64 69 74 6F 
      72 20 28 56 
      54 31 30 30 
      29 00        .db      "Memory Editor (VT100)",0
                   
1840:              .org     locat+0x0840            ;executable code begins her
                   
                   
1840: 7C 00                 mov     r4, #0
1842: 51 C6                 acall   redraw
                   main:
1844: EC                    mov     a, r4
1845: C2 E3                 clr     acc.3
1847: FC                    mov     r4, a
1848: 12 00 62     main2:   lcall   cin_filter
184B: 31 19                 acall   input_ck_2nd
184D: B4 1B 02     cmd1:    cjne    a, #27, cmd2            ;quit
1850: 61 8D                 ajmp    quit
1852: B4 0B 02     cmd2:    cjne    a, #11, cmd3            ;up
1855: 41 24                 ajmp    cmd_up
1857: B4 0A 02     cmd3:    cjne    a, #10, cmd4            ;down
185A: 41 4B                 ajmp    cmd_down
185C: B4 08 02     cmd4:    cjne    a, #8, cmd5             ;left
185F: 41 66                 ajmp    cmd_left
1861: B4 15 02     cmd5:    cjne    a, #21, cmd6            ;right
1864: 41 95                 ajmp    cmd_right
1866: B4 0C 04     cmd6:    cjne    a, #12, cmd7            ;redraw
1869: 51 C6                 acall   redraw
186B: 01 44                 ajmp    main
186D: B4 11 02     cmd7:    cjne    a, #17, cmd8            ;quit
1870: 61 8D                 ajmp    quit
1872: B4 03 0F     cmd8:    cjne    a, #3, cmd9             ;code memory
1875: EC                    mov     a, r4
1876: 54 FE                 anl     a, #11111110b
1878: FC                    mov     r4, a
1879: 71 CF                 acall   cursor_home
187B: 90 1D 36              mov     dptr, #str_code
187E: B1 46                 acall   pstr_hh
1880: 51 E1                 acall   redraw_data
1882: 01 44                 ajmp    main
1884: B4 04 0F     cmd9:    cjne    a, #4, cmd10            ;data memory
1887: EC                    mov     a, r4
1888: 44 01                 orl     a, #00000001b
188A: FC                    mov     r4, a
188B: 71 CF                 acall   cursor_home
188D: 90 1D 3B              mov     dptr, #str_data
1890: B1 46                 acall   pstr_hh
1892: 51 E1                 acall   redraw_data
1894: 01 44                 ajmp    main
1896: B4 07 02     cmd10:   cjne    a, #7, cmd11            ;goto memory loc
1899: 21 EC                 ajmp    cmd_goto
189B: B4 05 02     cmd11:   cjne    a, #5, cmd12            ;toggle editing
189E: 21 E0                 ajmp    cmd_edit
18A0: B4 06 02     cmd12:   cjne    a, #6, cmd13            ;fill memory
18A3: 21 59                 ajmp    cmd_fill
18A5: B4 01 0F     cmd13:   cjne    a, #1, cmd14            ;edit in ascii
18A8: EC                    mov     a, r4
18A9: 30 E1 98              jnb     acc.1, main
18AC: D2 E2                 setb    acc.2
18AE: FC                    mov     r4, a
18AF: 91 54                 acall   erase_commands
18B1: 91 64                 acall   print_commands
18B3: 71 21                 acall   redraw_cursor
18B5: 01 44                 ajmp    main
18B7: B4 18 0F     cmd14:   cjne    a, #24, cmd15           ;edit in hex
18BA: EC                   mov     a, r4
18BB: 30 E1 86             jnb     acc.1, main
18BE: C2 E2                clr     acc.2
18C0: FC                   mov     r4, a
18C1: 91 54                acall   erase_commands
18C3: 91 64                acall   print_commands
18C5: 71 21                acall   redraw_cursor
18C7: 01 44                ajmp    main
18C9: B4 19 02     cmd15:   cjne    a, #25, cmd16           ;page up
18CC: 41 41                 ajmp    cmd_pgup
18CE: B4 1A 02     cmd16:   cjne    a, #26, cmd17           ;page down
18D1: 41 46                 ajmp    cmd_pgdown
                   cmd17:
                   
                   
                   cmd_data:        ;the input character wasn't any particular 
                                    ;maybe it's some input data being typed for
18D3: F5 F0                 mov     b, a                    ;keep a copy of use
18D5: EC                    mov     a, r4
18D6: 20 E1 02              jb      acc.1, cmd_data2
                   cmd_abort:
18D9: 01 44                 ajmp    main                    ;ignore if not in e
                   cmd_data2:
18DB: 30 E2 10              jnb     acc.2, input_hex
                   input_ascii:
18DE: E5 F0                 mov     a, b
18E0: 71 98                 acall   ascii_only
18E2: B5 F0 F4              cjne    a, b, cmd_abort                 ;check that
18E5: 8F 83                 mov     dph, r7
18E7: 8E 82                 mov     dpl, r6
18E9: 12 00 56              lcall   smart_wr                ;write the char to 
18EC: 41 95                 ajmp    cmd_right
                   
                   input_hex:
18EE: E5 F0                 mov     a, b
18F0: 12 00 40              lcall   upper
18F3: 12 00 65              lcall   asc2hex
18F6: 40 E1                 jc      cmd_abort               ;ignore if not hex
18F8: F8                    mov     r0, a                   ;keep hex value of 
18F9: 8F 83                mov     dph, r7                  ;load dptr with add
18FB: 8E 82                mov     dpl, r6
18FD: EC                    mov     a, r4
18FE: 20 E3 0A              jb      acc.3, input_hex_2nd
                   input_hex_1st:
1901: E8                    mov     a, r0
1902: FD                    mov     r5, a
1903: EC                    mov     a, r4
1904: D2 E3                 setb    acc.3           ;remember that we're waitin
1906: FC                    mov     r4, a
1907: 71 21                 acall   redraw_cursor
1909: 01 48                 ajmp    main2
                   input_hex_2nd:
190B: ED                    mov     a, r5                   ;get data from memo
190C: C4                    swap    a                       ;shift nibbles
190D: 54 F0                 anl     a, #11110000b           ;just in case
190F: 28                    add     a, r0                   ;add in this input 
1910: 12 00 56              lcall   smart_wr                ;write back to memo
1913: EC                    mov     a, r4
1914: C2 E3                 clr     acc.3
1916: FC                    mov     r4, a
1917: 41 95                 ajmp    cmd_right
                   
                   input_ck_2nd:
                            ;the main input routine will always call here when 
                            ;byte is entered... so we can do something special 
                            ;were waiting for the second character and it is no
                            ;legal hex character
1919: C0 E0                 push    acc
191B: EC                    mov     a, r4
191C: 20 E1 06              jb      acc.1, inck2d
                            ;if editing is disabled, don't do anything
191F: C2 E3                 clr     acc.3
1921: FC           inck2b:  mov     r4, a
1922: D0 E0        inck2c:  pop     acc
1924: 22                    ret
1925: 30 E3 F9     inck2d:  jnb     acc.3, inck2b
                            ;if we get here, we were actually waiting for the 2
1928: D0 E0                 pop     acc
192A: C0 E0                 push    acc
192C: 12 00 40              lcall   upper
192F: 12 00 65              lcall   asc2hex
1932: 50 EE                 jnc     inck2c          ;proceed normally if it is 
                            ;if we get here, we did not get a hex legal char
1934: D0 E0                 pop     acc
1936: C0 E0                 push    acc
1938: B4 1B 0E              cjne    a, #esc_char, inck2e
193B: EC                   mov     a, r4
193C: C2 E3                clr     acc.3
193E: FC                   mov     r4, a
193F: 71 21                acall   redraw_cursor
1941: D0 E0                 pop     acc
1943: D0 E0                 pop     acc             ;don't return and do the qu
1945: D0 E0                 pop     acc             ;just quit this entry and w
1947: 01 44                 ajmp    main
1949: 8F 83        inck2e: mov     dph, r7                 ;load dptr with addr
194B: 8E 82                mov     dpl, r6
194D: ED                    mov     a, r5
194E: 12 00 56             lcall   smart_wr                ;write to memory
1951: EC                    mov     a, r4
1952: C2 E3                 clr     acc.3
1954: FC                    mov     r4, a
1955: 71 21                 acall   redraw_cursor
1957: 80 C9                 sjmp    inck2c
                   
                   ; R4,    Flags:
                   ;         bit0: 0=display CODE memory, 1=display DATA memory
                   ;         bit1: 0=editing disabled, 1=editing enabled
                   ;         bit2: 0=editing in hex, 1=editing in ascii
                   ;         bit3: 0=normal, 1=in middle of hex entry (value in
                   
                   
                   cmd_fill:
1959: EC                    mov     a, r4
195A: 54 02                 anl     a, #00000010b
195C: 70 02                 jnz     cmd_fill_ok
195E: 01 44                 ajmp    main                    ;don't allow if not
                   cmd_fill_ok:
1960: 91 54                 acall   erase_commands
1962: EC                   mov     a, r4
1963: C0 E0                push    acc
1965: 90 19 C2              mov     dptr, #fill_prompt1
1968: B1 4C                 acall   pcstr_hh
196A: 12 00 3C              lcall   ghex16
196D: 40 48                 jc      cmd_fill_abort
196F: 20 D5 45              jb      psw.5, cmd_fill_abort
1972: A8 82                 mov     r0, dpl
1974: A9 83                 mov     r1, dph
1976: 90 19 D2              mov     dptr, #fill_prompt2
1979: B1 46                 acall   pstr_hh
197B: 12 00 3C              lcall   ghex16
197E: 40 37                 jc      cmd_fill_abort
1980: 20 D5 34              jb      psw.5, cmd_fill_abort
1983: AC 82                 mov     r4, dpl
1985: AD 83                 mov     r5, dph
1987: 90 19 DB              mov     dptr, #fill_prompt3
198A: B1 4C                 acall   pcstr_hh
198C: 12 00 3A              lcall   ghex
198F: 40 26                 jc      cmd_fill_abort
1991: 20 D5 23              jb      psw.5, cmd_fill_abort
1994: FA                    mov     r2, a
1995: EC                    mov     a, r4
1996: FE                    mov     r6, a
1997: ED                    mov     a, r5
1998: FF                    mov     r7, a
1999: D0 E0                 pop     acc
199B: FC                    mov     r4, a
199C: 88 82                 mov     dpl, r0
199E: 89 83                 mov     dph, r1
                            ;now r4 is restored to its normal value, dptr holds
                            ;first location to fill, and r6/r7 holds the last l
                            ;fill, and r2 has the fill value.
                   cmd_fill_loop:
19A0: EA                    mov     a, r2
19A1: 12 00 56              lcall   smart_wr
19A4: EE                    mov     a, r6
19A5: B5 82 0C              cjne    a, dpl, cmd_fill_next
19A8: EF                    mov     a, r7
19A9: B5 83 08              cjne    a, dph, cmd_fill_next
                            ;when we get here, we're done!
19AC: 91 54                 acall   erase_commands
19AE: 91 64                 acall   print_commands
19B0: 51 E1                 acall   redraw_data
19B2: 01 44                 ajmp    main
                   cmd_fill_next:
19B4: A3                    inc     dptr
19B5: 80 E9                 sjmp    cmd_fill_loop
                   
                   cmd_fill_abort:
19B7: D0 E0                pop     acc
19B9: FC                   mov     r4, a
19BA: 91 54                acall   erase_commands
19BC: 91 64                acall   print_commands
19BE: 71 21                 acall   redraw_cursor
19C0: 01 44                 ajmp    main
                   
                   fill_prompt1:
19C2: 46 69 6C 6C 
      1F 83 3B 20 
      46 69 72 73 
      74 3A 20 00 
                           .db     "Fill",31,131,"; First: ",0
                   fill_prompt2:
19D2: 20 20 4C 61 
      73 74 3A 20 
      00                   .db     "  Last: ",0
                   fill_prompt3:
19DB: 20 A8 3A 20 
      00                   .db     " ",168,": ",0 
                   
                   cmd_edit:
19E0: 91 54                 acall   erase_commands
19E2: EC                    mov     a, r4
19E3: 64 02                 xrl     a, #00000010b
19E5: FC                    mov     r4, a
19E6: 91 64                acall   print_commands
19E8: 71 21                acall   redraw_cursor
19EA: 01 44                ajmp    main
                   
                   cmd_goto:
19EC: 91 54                 acall   erase_commands
19EE: 90 1A 1D              mov     dptr, #goto_prompt
19F1: B1 4C                 acall   pcstr_hh
19F3: EC                    mov     a, r4
19F4: C0 E0                 push    acc
19F6: 12 00 3C              lcall   ghex16
19F9: D0 E0                 pop     acc
19FB: FC                    mov     r4, a
19FC: 40 13                 jc      cmdgt_abort
19FE: 20 D5 10              jb      psw.5, cmdgt_abort
1A01: AE 82                mov     r6, dpl
1A03: AF 83                mov     r7, dph
1A05: 71 CF                acall   cursor_home
1A07: 74 14                mov     a, #20
1A09: 71 D5                acall   cursor_down
1A0B: 91 64                 acall   print_commands
1A0D: 51 E1                 acall   redraw_data
1A0F: 01 44                 ajmp    main
                   cmdgt_abort:
1A11: 71 CF                acall   cursor_home
1A13: 74 14                mov     a, #20
1A15: 71 D5                acall   cursor_down
1A17: 91 64                 acall   print_commands
1A19: 71 21                 acall   redraw_cursor
1A1B: 01 44                 ajmp    main
                   
                   
                   goto_prompt:
1A1D: 1F 83 1F 81 
      3A 20 00              .db     31,131,31,129,": ",0
                   
                   cmd_up:
1A24: 71 4D                 acall   blank_it
1A26: EE                   mov     a, r6
1A27: C3                   clr     c
1A28: 94 10                subb    a, #16
1A2A: FE                   mov     r6, a
1A2B: EF                   mov     a, r7
1A2C: 94 00                subb    a, #0
1A2E: FF                   mov     r7, a
1A2F: EE                    mov     a, r6
1A30: F4                    cpl     a
1A31: 54 F0                 anl     a, #11110000b
1A33: 60 08                 jz      cmd_up_scroll
1A35: 74 01                mov     a, #1
1A37: 71 DD                acall   cursor_up
1A39: 71 69                acall   invert_it
1A3B: 01 44                ajmp    main
                   cmd_up_scroll:
1A3D: 51 E1                 acall   redraw_data
1A3F: 01 44                 ajmp    main
                   
                   cmd_pgup:
1A41: 1F                    dec     r7
1A42: 51 E1                 acall   redraw_data
1A44: 01 44                 ajmp    main
                   
                   cmd_pgdown:
1A46: 0F                    inc     r7
1A47: 51 E1                 acall   redraw_data
1A49: 01 44                 ajmp    main
                   
                   cmd_down:
1A4B: 71 4D                 acall   blank_it
1A4D: EE                   mov     a, r6
1A4E: 24 10                add     a, #16
1A50: FE                   mov     r6, a
1A51: EF                   mov     a, r7
1A52: 34 00                addc    a, #0
1A54: FF                   mov     r7, a
1A55: EE                    mov     a, r6
1A56: 54 F0                 anl     a, #11110000b
1A58: 60 08                 jz      cmd_down_scroll
1A5A: 74 01                 mov     a, #1
1A5C: 71 D5                 acall   cursor_down
1A5E: 71 69                 acall   invert_it
1A60: 01 44                 ajmp    main
                   cmd_down_scroll:
1A62: 51 E1                 acall   redraw_data
1A64: 01 44                 ajmp    main
                   
                   
                   cmd_left:
1A66: 71 4D                 acall   blank_it
1A68: 74 03                 mov     a, #3
1A6A: 71 E5                 acall   cursor_left
1A6C: EE                    mov     a, r6
1A6D: C3                    clr     c
1A6E: 94 01                 subb    a, #1
1A70: FE                    mov     r6, a
1A71: EF                    mov     a, r7
1A72: 94 00                 subb    a, #0
1A74: FF                    mov     r7, a
1A75: EE                    mov     a, r6
1A76: 44 F0                 orl     a, #11110000b
1A78: F4                    cpl     a
1A79: 60 04                 jz      cmdlf2
1A7B: 71 69                 acall   invert_it
1A7D: 01 44                 ajmp    main
                   cmdlf2:
1A7F: EE                    mov     a, r6
1A80: F4                    cpl     a
1A81: 54 F0                 anl     a, #11110000b
1A83: 60 0C                 jz      cmd_left_scroll
1A85: 74 30                 mov     a, #48
1A87: 71 ED                 acall   cursor_right
1A89: 74 01                 mov     a, #1
1A8B: 71 DD                 acall   cursor_up
1A8D: 71 69                 acall   invert_it
1A8F: 01 44                 ajmp    main
                   cmd_left_scroll:
1A91: 51 E1                 acall   redraw_data
1A93: 01 44                 ajmp    main
                   
                   
                   cmd_right:
1A95: 71 4D                 acall   blank_it
1A97: 74 03                 mov     a, #3
1A99: 71 ED                 acall   cursor_right
1A9B: 8E 82                 mov     dpl, r6
1A9D: 8F 83                 mov     dph, r7
1A9F: A3                    inc     dptr
1AA0: AE 82                 mov     r6, dpl
1AA2: AF 83                 mov     r7, dph
1AA4: EE                    mov     a, r6
1AA5: 54 0F                 anl     a, #00001111b
1AA7: 60 04                 jz      cmdrt2
1AA9: 71 69                 acall   invert_it
1AAB: 01 44                 ajmp    main
                   
                   cmdrt2:
1AAD: EE                    mov     a, r6
1AAE: 54 F0                 anl     a, #11110000b
1AB0: 60 0C                 jz      cmd_right_scroll
1AB2: 74 30                 mov     a, #48
1AB4: 71 E5                 acall   cursor_left
1AB6: 74 01                 mov     a, #1
1AB8: 71 D5                 acall   cursor_down
1ABA: 71 69                 acall   invert_it
1ABC: 01 44                 ajmp    main
                   cmd_right_scroll:
1ABE: 51 E1                 acall   redraw_data
1AC0: 01 44                 ajmp    main
                   
                   
1AC2: 74 20        space:   mov     a, #' '
1AC4: A1 40                 ajmp    cout_hh
                   
                   
                   
                   ;register usage:
                   ; R4,    Flags:
                   ;         bit0: 0=display CODE memory, 1=display DATA memory
                   ;         bit1: 0=editing disabled, 1=editing enabled
                   ;         bit2: 0=editing in hex, 1=editing in ascii
                   ;          bit3: 0=normal, 1=in middle of hex entry (value i
                   ; R6/R7, current memory location
                   ;
                   
                   
                   redraw:
1AC6: 90 1C FC             mov     dptr, #str_cl            ;clear screen
1AC9: B1 46                acall   pstr_hh
1ACB: 91 3B                 acall   print_title_line
1ACD: B1 49                 acall   newline_hh
1ACF: 91 18                 acall   print_addr_line
1AD1: B1 49                 acall   newline_hh
1AD3: 91 32                 acall   print_dash_line
1AD5: B1 49                acall   newline_hh
1AD7: 74 10                 mov     a, #16
1AD9: 71 D5                 acall   cursor_down
1ADB: 91 32                acall   print_dash_line
1ADD: B1 49                acall   newline_hh
1ADF: 91 64                acall   print_commands
                   redraw_data:
1AE1: 71 CF                 acall   cursor_home
1AE3: 74 02                 mov     a, #2
1AE5: 71 D5                 acall   cursor_down
                            ;compute first byte address to display on the scree
1AE7: 75 82 00              mov     dpl, #0
1AEA: 8F 83                 mov     dph, r7
                            ;now display the data
1AEC: 78 10                 mov     r0, #16
1AEE: B1 49        rd2:     acall   newline_hh
1AF0: 12 00 36              lcall   phex16
1AF3: 74 3A                 mov     a, #':'
1AF5: B1 40                 acall   cout_hh
1AF7: AA 82                 mov     r2, dpl
1AF9: AB 83                 mov     r3, dph
1AFB: 51 C2        rd3:     acall   space
1AFD: 71 AA                 acall   read_dptr
1AFF: B1 43                 acall   phex_hh
1B01: A3                    inc     dptr
1B02: E5 82                 mov     a, dpl
1B04: 54 0F                 anl     a, #00001111b
1B06: 70 F3                 jnz     rd3
1B08: 8A 82                 mov     dpl, r2
1B0A: 8B 83                 mov     dph, r3
1B0C: 51 C2                 acall   space
1B0E: 51 C2                 acall   space
1B10: 51 C2                 acall   space
1B12: 71 AA        rd4:     acall   read_dptr
1B14: 71 98                 acall   ascii_only
1B16: B1 40                 acall   cout_hh
1B18: A3                    inc     dptr
1B19: E5 82                 mov     a, dpl
1B1B: 54 0F                 anl     a, #00001111b
1B1D: 70 F3                 jnz     rd4
1B1F: D8 CD                 djnz    r0, rd2
                   
                   redraw_cursor:
1B21: 71 CF                 acall   cursor_home
1B23: EE                    mov     a, r6
1B24: C4                    swap    a
1B25: 54 0F                 anl     a, #00001111b
1B27: 24 03                 add     a, #3
1B29: 71 D5                 acall   cursor_down
                            ;make the ascii character inverse
1B2B: EE                    mov     a, r6
1B2C: 54 0F                 anl     a, #00001111b
1B2E: 24 38                 add     a, #56
1B30: 71 ED                 acall   cursor_right
1B32: 71 F5                 acall   inverse_on
1B34: 71 B3                 acall   read_r6r7
1B36: 71 98                 acall   ascii_only
1B38: B1 40                 acall   cout_hh
1B3A: 91 01                 acall   inverse_off
                   
                            ;now make the hex value inverse
1B3C: EE                    mov     a, r6
1B3D: 54 0F                 anl     a, #00001111b
1B3F: 23                    rl      a
1B40: F4                    cpl     a
1B41: 24 34                 add     a, #52
1B43: 71 E5                 acall   cursor_left
1B45: 71 F5                 acall   inverse_on
1B47: 71 B3                 acall   read_r6r7
1B49: B1 43                 acall   phex_hh
1B4B: 81 01                 ajmp    inverse_off
                   
                   
                   blank_it:
1B4D: EE                    mov     a, r6
1B4E: 54 0F                 anl     a, #00001111b
1B50: 23                    rl      a
1B51: F4                    cpl     a
1B52: 24 31                 add     a, #49
1B54: 71 ED                 acall   cursor_right
1B56: 71 B3                 acall   read_r6r7
1B58: 71 98                 acall   ascii_only
1B5A: B1 40                 acall   cout_hh
1B5C: EE                    mov     a, r6
1B5D: 54 0F                 anl     a, #00001111b
1B5F: 23                    rl      a
1B60: F4                    cpl     a
1B61: 24 34                 add     a, #52
1B63: 71 E5                 acall   cursor_left
1B65: 71 B3                 acall   read_r6r7
1B67: A1 43                 ajmp    phex_hh
                   
                   invert_it:
1B69: EE                   mov     a, r6
1B6A: 54 0F                anl     a, #00001111b
1B6C: 23                   rl      a
1B6D: F4                   cpl     a
1B6E: 24 31                add     a, #49
1B70: 71 ED                acall   cursor_right
1B72: 71 B3                acall   read_r6r7
1B74: 71 98                acall   ascii_only
1B76: 71 F5                 acall   inverse_on
1B78: B1 40                acall   cout_hh
1B7A: 91 01                 acall   inverse_off
1B7C: EE                   mov     a, r6
1B7D: 54 0F                anl     a, #00001111b
1B7F: 23                   rl      a
1B80: F4                   cpl     a
1B81: 24 34                add     a, #52
1B83: 71 E5                acall   cursor_left
1B85: 71 B3                acall   read_r6r7
1B87: 71 F5                 acall   inverse_on
1B89: B1 43                acall   phex_hh
1B8B: 81 01                 ajmp    inverse_off
                   
                   
                   
                   
                   
                   
1B8D: EE           quit:    mov     a, r6
1B8E: 54 F0                 anl     a, #11110000b
1B90: C4                    swap    a
1B91: F4                    cpl     a
1B92: 24 13                 add     a, #19
1B94: 71 D5                 acall   cursor_down
1B96: A1 49                 ajmp    newline_hh
                   
                   
                   ascii_only:
1B98: 54 7F                anl     a, #01111111b   ;avoid unprintable character
1B9A: B4 7F 03              cjne    a, #127, aonly2
1B9D: 74 20                 mov     a, #' '
1B9F: 22                    ret
1BA0: C3           aonly2: clr     c
1BA1: 94 20                subb    a, #32
1BA3: 50 02                jnc     aonly3          ;avoid control characters
1BA5: 74 00                mov     a, #(' ' - 32)
1BA7: 24 20        aonly3: add     a, #32
1BA9: 22                    ret
                   
                   
                   
                   
                   
                   read_dptr:
1BAA: EC                    mov     a, r4
1BAB: 20 E0 03              jb      acc.0, rddptr2
1BAE: E4                    clr     a
1BAF: 93                    movc    a, @a+dptr
1BB0: 22                    ret
1BB1: E0           rddptr2:movx     a, @dptr
1BB2: 22                    ret
                   
                   read_r6r7:
1BB3: C0 83                 push    dph
1BB5: C0 82                 push    dpl
1BB7: 8F 83                 mov     dph, r7
1BB9: 8E 82                 mov     dpl, r6
1BBB: EC                    mov     a, r4
1BBC: 20 E3 0D              jb      acc.3, rdr6r7d
1BBF: 20 E0 04              jb      acc.0, rdr6r7b
1BC2: E4                    clr     a
1BC3: 93                    movc    a, @a+dptr
1BC4: 80 01                 sjmp    rdr6r7c
1BC6: E0           rdr6r7b:movx     a, @dptr
1BC7: D0 82        rdr6r7c:pop      dpl
1BC9: D0 83                 pop     dph
1BCB: 22                    ret
1BCC: ED           rdr6r7d:mov      a, r5
1BCD: 80 F8                 sjmp    rdr6r7c
                   
                   
1BCF:              .equ     esc_char, 27
                   
                   cursor_home:
1BCF: 91 0B                 acall   term_esc
1BD1: 74 48                 mov     a, #'H'
1BD3: A1 40                 ajmp    cout_hh
                   
                   cursor_down:     ;acc is # of lines to move down
1BD5: 91 0B                 acall   term_esc
1BD7: B1 4F                 acall   pint_hh
1BD9: 74 42                 mov     a, #'B'
1BDB: A1 40                 ajmp    cout_hh
                   
                   cursor_up:       ;acc is # of lines to move up
1BDD: 91 0B                 acall   term_esc
1BDF: B1 4F                 acall   pint_hh
1BE1: 74 41                 mov     a, #'A'
1BE3: A1 40                 ajmp    cout_hh
                   
                   cursor_left:     ;acc is # of characters to move left
1BE5: 91 0B                 acall   term_esc
1BE7: B1 4F                 acall   pint_hh
1BE9: 74 44                 mov     a, #'D'
1BEB: A1 40                 ajmp    cout_hh
                   
                   cursor_right:    ;acc is # of characters to move right
1BED: 91 0B                 acall   term_esc
1BEF: B1 4F                 acall   pint_hh
1BF1: 74 43                 mov     a, #'C'
1BF3: A1 40                 ajmp    cout_hh
                   
                   inverse_on:
1BF5: 90 1B FA              mov     dptr, #str_so
1BF8: A1 46                 ajmp    pstr_hh
                   
1BFA: 1B 5B 30 3B 
      37 6D 00     str_so:  .db     esc_char, "[0;7m", 0
                   
                   inverse_off:
1C01: 90 1C 06              mov     dptr, #str_se
1C04: A1 46                 ajmp    pstr_hh
                   
1C06: 1B 5B 30 6D 
      00           str_se:  .db     esc_char, "[0m", 0
                   
                   
                   term_esc:
1C0B: C0 E0                 push    acc
1C0D: 74 1B                 mov     a, #esc_char
1C0F: B1 40                 acall   cout_hh
1C11: 74 5B                 mov     a, #'['
1C13: B1 40                 acall   cout_hh
1C15: D0 E0                 pop     acc
1C17: 22                    ret
                            
                   print_addr_line:
1C18: 90 1D 04              mov     dptr, #str_addr
1C1B: B1 46                 acall   pstr_hh
1C1D: 78 00                 mov     r0, #0
1C1F: 51 C2        paddrl: acall    space
1C21: 74 2B                 mov     a, #'+'
1C23: B1 40                 acall   cout_hh
1C25: E8                    mov     a, r0
1C26: 12 00 2E              lcall   phex1
1C29: 08                    inc     r0
1C2A: B8 10 F2              cjne    r0, #16, paddrl
1C2D: 90 1D 0A              mov     dptr, #str_ascii_equiv
1C30: A1 46                 ajmp    pstr_hh
                   
                   
                   print_dash_line:
1C32: 78 48                 mov     r0, #72
1C34: 74 2D        pdashl: mov      a, #'-'
1C36: B1 40                 acall   cout_hh
1C38: D8 FA                 djnz    r0, pdashl
1C3A: 22                    ret
                   
                   print_title_line:
1C3B: EC                    mov     a, r4
1C3C: 20 E0 05              jb      acc.0, ptitle2
1C3F: 90 1D 36              mov     dptr, #str_code
1C42: 80 03                 sjmp    ptitle3
1C44: 90 1D 3B     ptitle2:mov      dptr, #str_data
1C47: B1 46        ptitle3:acall    pstr_hh
1C49: 78 08                 mov     r0, #8
1C4B: 51 C2        ptitlel:acall    space
1C4D: D8 FC                 djnz    r0, ptitlel
1C4F: 90 1D 1E              mov     dptr, #str_title
1C52: A1 4C                 ajmp    pcstr_hh
                   
                   erase_commands:
1C54: 71 CF                acall   cursor_home
1C56: 74 14                mov     a, #20
1C58: 71 D5                acall   cursor_down
1C5A: 7A 48                mov     r2, #72
1C5C: 51 C2        ercmd2: acall   space
1C5E: DA FC                djnz    r2, ercmd2
1C60: 74 48                 mov     a, #72
1C62: 61 E5                 ajmp    cursor_left
                   
                   
                   ; R4,    Flags:
                   ;         bit0: 0=display CODE memory, 1=display DATA memory
                   ;         bit1: 0=editing disabled, 1=editing enabled
                   ;         bit2: 0=editing in hex, 1=editing in ascii
                   ;         bit3: 0=normal, 1=in middle of hex entry (value in
                   
                   print_commands:
1C64: EC                   mov     a, r4
1C65: 30 E1 12             jnb     acc.1, pcmd_no_edit
1C68: 90 1C BC              mov     dptr, #str_cmd3
1C6B: 20 E2 03              jb      acc.2, pcmd_ascii
1C6E: 90 1C D7              mov     dptr, #str_cmd4
                   pcmd_ascii:
1C71: B1 46                 acall   pstr_hh
1C73: 90 1C F2              mov     dptr, #str_cmd5
1C76: B1 46                 acall   pstr_hh
1C78: 80 05                 sjmp    pcmd_finish
                   pcmd_no_edit:
1C7A: 90 1C B4              mov     dptr, #str_cmd2
1C7D: B1 46                 acall   pstr_hh
                   pcmd_finish:
1C7F: 90 1C 84             mov     dptr, #str_cmd1
1C82: A1 46                ajmp    pstr_hh
                   
1C84: 20 20 5E 47 
      3D 47 6F 74 
      6F 20 20 5E 
      43 3D 43 6F 
      64 65 20 20 
      5E 44 3D 44 
      61 74 61 20 
      20 5E 4C 3D 
      52 65 64 72 
      61 77 20 20 
      5E 51 3D 51 
      75 69 74 00 
                   str_cmd1: .db "  ^G=Goto  ^C=Code  ^D=Data  ^L=Redraw  ^Q=Qu
1CB4: 5E 45 2D 45 
      64 69 74 00 
                   str_cmd2: .db "^E-Edit",0
1CBC: 5E 41 3D 1B 
      5B 30 3B 37 
      6D 41 53 43 
      49 49 1B 5B 
      30 6D 20 20 
      5E 58 3D 48 
      65 78 00     str_cmd3: .db "^A=", esc_char, "[0;7m", "ASCII", esc_char, "
1CD7: 5E 41 3D 41 
      53 43 49 49 
      20 20 5E 58 
      3D 1B 5B 30 
      3B 37 6D 48 
      65 78 1B 5B 
      30 6D 00     str_cmd4: .db "^A=ASCII  ^X=", esc_char, "[0;7m", "Hex", esc
1CF2: 20 20 5E 46 
      3D 46 69 6C 
      6C 00        str_cmd5: .db "  ^F=Fill",0
                   
                   
1CFC: 1B 5B 48 1B 
      5B 32 4A 00 
                   str_cl:  .db     esc_char, "[H", esc_char, "[2J", 0
                   
1D04: 41 44 44 52 
      3A 00        str_addr: .db "ADDR:",0
1D0A: 20 20 20 41 
      53 43 49 49 
      20 45 51 55 
      49 56 49 4C 
      41 4E 54 00 
                   str_ascii_equiv: .db     "   ASCII EQUIVILANT",0
1D1E: 38 30 35 31 
      1F 9A 1F 83 
      1F D8 6F 72 
      2C 1F F8 1F 
      FE 2C 20 31 
      39 39 36 00 
                   str_title: .db   "8051",31,154,31,131,31,216,"or,",31,248,31
1D36: 43 4F 44 45 
      00           str_code: .db "CODE",0
1D3B: 44 41 54 41 
      00           str_data: .db "DATA",0
                   
                   
1D40: 02 00 30     cout_hh:ljmp     cout
1D43: 02 00 34     phex_hh:ljmp     phex
1D46: 02 00 38     pstr_hh:ljmp     pstr
1D49: 02 00 48     newline_hh:ljmp  newline
1D4C: 02 00 45     pcstr_hh:ljmp    pcstr
1D4F: 02 00 50     pint_hh:ljmp     pint
                   
                   
                   
                   ;---------------------------------------------------------;
                   ;                                                         ;
                   ;                    single step strings                  ;
                   ;                                                         ;
                   ;---------------------------------------------------------;
                   
                   
                              
1D52: 29 2C 20 6F 
      72 20 3C 45 
      53 43 3E 20 
      74 6F 20 65 
      78 69 74 3A 
      20 00        prompt4:.db     "), or <ESC> to exit: ",0 
1D68: 0D 1F 88 80 
      83 81 20 28 
      00           prompt8:.db     13,31,136,128,131,129," (",0 
1D71: 20 43 6F 6D 
      6D 61 6E 64 
      20 41 62 6F 
      72 74 65 64 
      2E 0D 0A 00 
                   abort:  .db     " Command Aborted.",13,10,0
                   
                   
1D85: 0D A1 C5 20 
      63 6F 6E 6E 
      65 63 74 20 
      49 4E 54 31 
      20 28 70 69 
      6E 20 31 33 
      29 20 6C 6F 
      77           sserr1: .db     13,161,197," connect INT1 (pin 13) low"
1DA2: 80 BA CF CC 
      0D 00                .db     128,186,207,204,13,0
1DA8: 94 32 B3 C7 
      AE 81 20 30 
      30 31 33 0D 
      00           sserr2:  .db     148,"2",179,199,174,129," 0013",13,0
1DB5: 1F B8 B3 FF 
      A5 20 76 65 
      63 74 6F 72 
      AE 20 00     sserr3:  .db     31,184,179,255,165," vector",174," ",0
1DC4: 0D 4E 6F 77 
      86 6E 69 6E 
      67 A6 CF CC 
      20 6D 6F 64 
      65 3A 20 20 
                   ssmsg:  .db     13,"Now",134,"ning",166,207,204," mode:  "
1DD8: 3C 52 45 54 
      3E 3D CC 2C 
      20 3F 3D 20 
      48 65 6C 70 
      0D 0D 00             .db     "<RET>=",204,", ?= Help",13,13,0
                   
1DEB: 53 6B 69 70 
      70 69 6E 67 
      20 49 6E 73 
      74 72 75 63 
      74 69 6F 6E 
      2D 3E 20 00 
                   sskip1: .db     "Skipping Instruction-> ",0
1E03: 0D 0A 4C 6F 
      63 3A 20 20 
      49 6E 74 20 
      52 41 4D 20 
      4D 65 6D 6F 
      72 79 20 43 
      6F 6E 74 65 
      6E 74 73 0D 
      0A 00        ssdmps1:.db     13,10,"Loc:  Int RAM Memory Contents",13,10,
1E25: 4E 65 77 20 
      41 63 63 20 
      56 61 6C 75 
      65 3A 20 00 
                   chaccs1:.db     "New Acc Value: ",0
                   
1E35: 0D           help5txt:.db     13
1E36: 1F CF 1F CC 
      1F 9E 3A 0D 
                           .db     31,207,31,204,31,158,":",13
1E3E: 3C 52 45 54 
      3E 20 86 D4 
      F6 0D                .db     "<RET> ",134,212,246,13
1E48: 20 3C 53 50 
      3E 20 86 D4 
      F6 0D                .db     " <SP> ",134,212,246,13
1E52: 20 27 3F 27 
      20 20 FF 8E 
      D7 0D                .db     " '?'  ",255,142,215,13
1E5C: 20 27 2E 27 
      20 20 FF C4 
      FD 73 0D              .db     " '.'  ",255,196,253,"s",13
1E67: 20 27 52 27 
      20 20 FF 20 
      73 70 65 63 
      69 61 6C 20 
      66 75 6E 63 
      74 69 6F 6E 
      C4 73 0D             .db     " 'R'  ",255," special function",196,"s",13
1E82: 20 27 48 27 
      20 20 84 DB 
      C0 92 0D             .db     " 'H'  ",132,219,192,146,13
1E8D: 20 27 53 27 
      20 20 FC D4 
      F6 0D                .db     " 'S'  ",252,212,246,13
1E97: 20 27 41 27 
      20 20 F0 A2 
      20 41 63 63 
      20 76 61 6C 
      75 65 0D             .db     " 'A'  ",240,162," Acc value",13
1EAA: 20 27 51 27 
      20 20 C8 CF 
      CC 0D 0E              .db     " 'Q'  ",200,207,204,13,14
                   
1EB5: 51 75 69 74 
      0D 0A 00     squit:   .db     "Quit",13,10,0
                   
1EBC: 20 20 41 43 
      43 20 42 20 
      43 20 44 50 
      54 52 20 20 
      52 30 20 52 
      31 20 52 32 
      20 52 33 20 
      52 34 20 52 
      35 20 52 36 
      20 52 37 20 
      20 53 50     ssnames:.db      "  ACC B C DPTR  R0 R1 R2 R3 R4 R5 R6 R7  S
1EE7: 20 20 20 41 
      64 64 72 20 
      20 49 6E 73 
      74 72 75 63 
      74 69 6F 6E 
      0D 0A 00              .db     "   Addr  Instruction",13,10,0
                   
                   
                   ;---------------------------------------------------------;
                   ;                                                         ;
                   ;                    disassembler data                    ;
                   ;                                                         ;
                   ;---------------------------------------------------------;
                   
                   
                   
1EFE: 41 43 41 4C 
      CC           mnu_tbl:.db     "ACAL",'L'+128
1F03: 00                   .db     0
1F04: 41 44 C4             .db     "AD",'D'+128
1F07: 00                   .db     0
1F08: 41 44 44 C3 
                           .db     "ADD",'C'+128
1F0C: 41 4A 4D D0 
                           .db     "AJM",'P'+128
1F10: 41 4E CC             .db     "AN",'L'+128
1F13: 43 4A 4E C5 
                           .db     "CJN",'E'+128
1F17: 43 4C D2             .db     "CL",'R'+128
1F1A: 43 50 CC             .db     "CP",'L'+128
1F1D: 44 C1                .db     "D",'A'+128 
1F1F: 44 45 C3             .db     "DE",'C'+128
1F22: 44 49 D6             .db     "DI",'V'+128
1F25: 44 4A 4E DA 
                           .db     "DJN",'Z'+128
1F29: 49 4E C3             .db     "IN",'C'+128
1F2C: 4A C2                .db     "J",'B'+128
1F2E: 4A 42 C3             .db     "JB",'C'+128
1F31: 4A C3                .db     "J",'C'+128
1F33: 4A 4D D0             .db     "JM",'P'+128
1F36: 4A 4E C2             .db     "JN",'B'+128
1F39: 4A 4E C3             .db     "JN",'C'+128
1F3C: 4A 4E DA             .db     "JN",'Z'+128
1F3F: 4A DA                .db     "J",'Z'+128
1F41: 4C 43 41 4C 
      CC                   .db     "LCAL",'L'+128
1F46: 4C 4A 4D D0 
                           .db     "LJM",'P'+128
1F4A: 4D 4F D6             .db     "MO",'V'+128
1F4D: 4D 4F 56 C3 
                           .db     "MOV",'C'+128
1F51: 4D 4F 56 D8 
                           .db     "MOV",'X'+128
1F55: 4D 55 CC             .db     "MU",'L'+128
1F58: 4E 4F D0             .db     "NO",'P'+128
1F5B: 4F 52 CC             .db     "OR",'L'+128
1F5E: 50 4F D0             .db     "PO",'P'+128
1F61: 50 55 53 C8 
                           .db     "PUS",'H'+128
1F65: 52 45 D4             .db     "RE",'T'+128
1F68: 52 45 54 C9 
                           .db     "RET",'I'+128
1F6C: 52 CC                .db     "R",'L'+128
1F6E: 52 4C C3             .db     "RL",'C'+128
1F71: 52 D2                .db     "R",'R'+128
1F73: 52 52 C3             .db     "RR",'C'+128
1F76: 53 45 54 C2 
                           .db     "SET",'B'+128
1F7A: 53 4A 4D D0 
                           .db     "SJM",'P'+128
1F7E: 53 55 42 C2 
                           .db     "SUB",'B'+128
1F82: 53 57 41 D0 
                           .db     "SWA",'P'+128
1F86: 58 43 C8             .db     "XC",'H'+128
1F89: 58 43 48 C4 
                           .db     "XCH",'D'+128
1F8D: 58 52 CC             .db     "XR",'L'+128
1F90: 3F 3F BF             .db     "??",'?'+128
                   
                   
                   
1F93: 50 B0        bitmnu: .db     'P','0'+128
1F95: 54 43 4F CE 
                           .db     "TCO",'N'+128
1F99: 50 B1                .db     'P','1'+128
1F9B: 53 43 4F CE 
                           .db     "SCO",'N'+128
1F9F: 50 B2                .db     'P','2'+128
1FA1: 49 C5                .db     'I','E'+128
1FA3: 50 B3                .db     'P','3'+128
1FA5: 49 D0                .db     'I','P'+128
1FA7: 43 B0                .db     'C','0'+128
1FA9: 54 32 43 4F 
      CE                   .db     "T2CO",'N'+128
1FAE: 50 53 D7             .db     "PS",'W'+128
1FB1: 44 B8                .db     'D','8'+128
1FB3: 41 43 C3             .db     "AC",'C'+128
1FB6: FD                   .db     'E'+'8'+128
1FB7: C2                   .db     'B'+128
1FB8: FE                   .db     'F'+'8'+128
                   
                   
