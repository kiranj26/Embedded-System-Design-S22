                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lcd
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _print_author
                                     12 	.globl _handle_sadsmiley_custom_char
                                     13 	.globl _handle_cu_custom_char
                                     14 	.globl _handler_custom_char
                                     15 	.globl _create_custom_char
                                     16 	.globl _get_hex_value
                                     17 	.globl _handler_lcd_hexdump
                                     18 	.globl _read_lcd_address
                                     19 	.globl _handler_reset_time
                                     20 	.globl _handler_resume_time
                                     21 	.globl _handler_stop_time
                                     22 	.globl _handler_lcdgotoaddress
                                     23 	.globl _handler_lcdgotoxy
                                     24 	.globl _handler_wr_str_lcd
                                     25 	.globl _handler_wr_c_lcd
                                     26 	.globl _handler_lcdclear
                                     27 	.globl _lcdputstr
                                     28 	.globl _lcdputch
                                     29 	.globl _lcdgotoxy
                                     30 	.globl _lcdgotoaddr
                                     31 	.globl _get_cursor_address
                                     32 	.globl _init_lcd
                                     33 	.globl _set_time_variables
                                     34 	.globl _lcdbusywait
                                     35 	.globl _delay
                                     36 	.globl _putchar
                                     37 	.globl _getchar
                                     38 	.globl _strtol
                                     39 	.globl _printf_tiny
                                     40 	.globl _printf
                                     41 	.globl _toupper
                                     42 	.globl _P5_7
                                     43 	.globl _P5_6
                                     44 	.globl _P5_5
                                     45 	.globl _P5_4
                                     46 	.globl _P5_3
                                     47 	.globl _P5_2
                                     48 	.globl _P5_1
                                     49 	.globl _P5_0
                                     50 	.globl _P4_7
                                     51 	.globl _P4_6
                                     52 	.globl _P4_5
                                     53 	.globl _P4_4
                                     54 	.globl _P4_3
                                     55 	.globl _P4_2
                                     56 	.globl _P4_1
                                     57 	.globl _P4_0
                                     58 	.globl _PX0L
                                     59 	.globl _PT0L
                                     60 	.globl _PX1L
                                     61 	.globl _PT1L
                                     62 	.globl _PSL
                                     63 	.globl _PT2L
                                     64 	.globl _PPCL
                                     65 	.globl _EC
                                     66 	.globl _CCF0
                                     67 	.globl _CCF1
                                     68 	.globl _CCF2
                                     69 	.globl _CCF3
                                     70 	.globl _CCF4
                                     71 	.globl _CR
                                     72 	.globl _CF
                                     73 	.globl _TF2
                                     74 	.globl _EXF2
                                     75 	.globl _RCLK
                                     76 	.globl _TCLK
                                     77 	.globl _EXEN2
                                     78 	.globl _TR2
                                     79 	.globl _C_T2
                                     80 	.globl _CP_RL2
                                     81 	.globl _T2CON_7
                                     82 	.globl _T2CON_6
                                     83 	.globl _T2CON_5
                                     84 	.globl _T2CON_4
                                     85 	.globl _T2CON_3
                                     86 	.globl _T2CON_2
                                     87 	.globl _T2CON_1
                                     88 	.globl _T2CON_0
                                     89 	.globl _PT2
                                     90 	.globl _ET2
                                     91 	.globl _CY
                                     92 	.globl _AC
                                     93 	.globl _F0
                                     94 	.globl _RS1
                                     95 	.globl _RS0
                                     96 	.globl _OV
                                     97 	.globl _F1
                                     98 	.globl _P
                                     99 	.globl _PS
                                    100 	.globl _PT1
                                    101 	.globl _PX1
                                    102 	.globl _PT0
                                    103 	.globl _PX0
                                    104 	.globl _RD
                                    105 	.globl _WR
                                    106 	.globl _T1
                                    107 	.globl _T0
                                    108 	.globl _INT1
                                    109 	.globl _INT0
                                    110 	.globl _TXD
                                    111 	.globl _RXD
                                    112 	.globl _P3_7
                                    113 	.globl _P3_6
                                    114 	.globl _P3_5
                                    115 	.globl _P3_4
                                    116 	.globl _P3_3
                                    117 	.globl _P3_2
                                    118 	.globl _P3_1
                                    119 	.globl _P3_0
                                    120 	.globl _EA
                                    121 	.globl _ES
                                    122 	.globl _ET1
                                    123 	.globl _EX1
                                    124 	.globl _ET0
                                    125 	.globl _EX0
                                    126 	.globl _P2_7
                                    127 	.globl _P2_6
                                    128 	.globl _P2_5
                                    129 	.globl _P2_4
                                    130 	.globl _P2_3
                                    131 	.globl _P2_2
                                    132 	.globl _P2_1
                                    133 	.globl _P2_0
                                    134 	.globl _SM0
                                    135 	.globl _SM1
                                    136 	.globl _SM2
                                    137 	.globl _REN
                                    138 	.globl _TB8
                                    139 	.globl _RB8
                                    140 	.globl _TI
                                    141 	.globl _RI
                                    142 	.globl _P1_7
                                    143 	.globl _P1_6
                                    144 	.globl _P1_5
                                    145 	.globl _P1_4
                                    146 	.globl _P1_3
                                    147 	.globl _P1_2
                                    148 	.globl _P1_1
                                    149 	.globl _P1_0
                                    150 	.globl _TF1
                                    151 	.globl _TR1
                                    152 	.globl _TF0
                                    153 	.globl _TR0
                                    154 	.globl _IE1
                                    155 	.globl _IT1
                                    156 	.globl _IE0
                                    157 	.globl _IT0
                                    158 	.globl _P0_7
                                    159 	.globl _P0_6
                                    160 	.globl _P0_5
                                    161 	.globl _P0_4
                                    162 	.globl _P0_3
                                    163 	.globl _P0_2
                                    164 	.globl _P0_1
                                    165 	.globl _P0_0
                                    166 	.globl _EECON
                                    167 	.globl _KBF
                                    168 	.globl _KBE
                                    169 	.globl _KBLS
                                    170 	.globl _BRL
                                    171 	.globl _BDRCON
                                    172 	.globl _T2MOD
                                    173 	.globl _SPDAT
                                    174 	.globl _SPSTA
                                    175 	.globl _SPCON
                                    176 	.globl _SADEN
                                    177 	.globl _SADDR
                                    178 	.globl _WDTPRG
                                    179 	.globl _WDTRST
                                    180 	.globl _P5
                                    181 	.globl _P4
                                    182 	.globl _IPH1
                                    183 	.globl _IPL1
                                    184 	.globl _IPH0
                                    185 	.globl _IPL0
                                    186 	.globl _IEN1
                                    187 	.globl _IEN0
                                    188 	.globl _CMOD
                                    189 	.globl _CL
                                    190 	.globl _CH
                                    191 	.globl _CCON
                                    192 	.globl _CCAPM4
                                    193 	.globl _CCAPM3
                                    194 	.globl _CCAPM2
                                    195 	.globl _CCAPM1
                                    196 	.globl _CCAPM0
                                    197 	.globl _CCAP4L
                                    198 	.globl _CCAP3L
                                    199 	.globl _CCAP2L
                                    200 	.globl _CCAP1L
                                    201 	.globl _CCAP0L
                                    202 	.globl _CCAP4H
                                    203 	.globl _CCAP3H
                                    204 	.globl _CCAP2H
                                    205 	.globl _CCAP1H
                                    206 	.globl _CCAP0H
                                    207 	.globl _CKCON1
                                    208 	.globl _CKCON0
                                    209 	.globl _CKRL
                                    210 	.globl _AUXR1
                                    211 	.globl _AUXR
                                    212 	.globl _TH2
                                    213 	.globl _TL2
                                    214 	.globl _RCAP2H
                                    215 	.globl _RCAP2L
                                    216 	.globl _T2CON
                                    217 	.globl _B
                                    218 	.globl _ACC
                                    219 	.globl _PSW
                                    220 	.globl _IP
                                    221 	.globl _P3
                                    222 	.globl _IE
                                    223 	.globl _P2
                                    224 	.globl _SBUF
                                    225 	.globl _SCON
                                    226 	.globl _P1
                                    227 	.globl _TH1
                                    228 	.globl _TH0
                                    229 	.globl _TL1
                                    230 	.globl _TL0
                                    231 	.globl _TMOD
                                    232 	.globl _TCON
                                    233 	.globl _PCON
                                    234 	.globl _DPH
                                    235 	.globl _DPL
                                    236 	.globl _SP
                                    237 	.globl _P0
                                    238 	.globl _save_cursor_address
                                    239 	.globl _create_custom_char_PARM_2
                                    240 	.globl _read_lcd_address_PARM_2
                                    241 	.globl _lcdgotoxy_PARM_2
                                    242 	.globl _string
                                    243 	.globl _lcd_ptr
                                    244 ;--------------------------------------------------------
                                    245 ; special function registers
                                    246 ;--------------------------------------------------------
                                    247 	.area RSEG    (ABS,DATA)
      000000                        248 	.org 0x0000
                           000080   249 _P0	=	0x0080
                           000081   250 _SP	=	0x0081
                           000082   251 _DPL	=	0x0082
                           000083   252 _DPH	=	0x0083
                           000087   253 _PCON	=	0x0087
                           000088   254 _TCON	=	0x0088
                           000089   255 _TMOD	=	0x0089
                           00008A   256 _TL0	=	0x008a
                           00008B   257 _TL1	=	0x008b
                           00008C   258 _TH0	=	0x008c
                           00008D   259 _TH1	=	0x008d
                           000090   260 _P1	=	0x0090
                           000098   261 _SCON	=	0x0098
                           000099   262 _SBUF	=	0x0099
                           0000A0   263 _P2	=	0x00a0
                           0000A8   264 _IE	=	0x00a8
                           0000B0   265 _P3	=	0x00b0
                           0000B8   266 _IP	=	0x00b8
                           0000D0   267 _PSW	=	0x00d0
                           0000E0   268 _ACC	=	0x00e0
                           0000F0   269 _B	=	0x00f0
                           0000C8   270 _T2CON	=	0x00c8
                           0000CA   271 _RCAP2L	=	0x00ca
                           0000CB   272 _RCAP2H	=	0x00cb
                           0000CC   273 _TL2	=	0x00cc
                           0000CD   274 _TH2	=	0x00cd
                           00008E   275 _AUXR	=	0x008e
                           0000A2   276 _AUXR1	=	0x00a2
                           000097   277 _CKRL	=	0x0097
                           00008F   278 _CKCON0	=	0x008f
                           0000AF   279 _CKCON1	=	0x00af
                           0000FA   280 _CCAP0H	=	0x00fa
                           0000FB   281 _CCAP1H	=	0x00fb
                           0000FC   282 _CCAP2H	=	0x00fc
                           0000FD   283 _CCAP3H	=	0x00fd
                           0000FE   284 _CCAP4H	=	0x00fe
                           0000EA   285 _CCAP0L	=	0x00ea
                           0000EB   286 _CCAP1L	=	0x00eb
                           0000EC   287 _CCAP2L	=	0x00ec
                           0000ED   288 _CCAP3L	=	0x00ed
                           0000EE   289 _CCAP4L	=	0x00ee
                           0000DA   290 _CCAPM0	=	0x00da
                           0000DB   291 _CCAPM1	=	0x00db
                           0000DC   292 _CCAPM2	=	0x00dc
                           0000DD   293 _CCAPM3	=	0x00dd
                           0000DE   294 _CCAPM4	=	0x00de
                           0000D8   295 _CCON	=	0x00d8
                           0000F9   296 _CH	=	0x00f9
                           0000E9   297 _CL	=	0x00e9
                           0000D9   298 _CMOD	=	0x00d9
                           0000A8   299 _IEN0	=	0x00a8
                           0000B1   300 _IEN1	=	0x00b1
                           0000B8   301 _IPL0	=	0x00b8
                           0000B7   302 _IPH0	=	0x00b7
                           0000B2   303 _IPL1	=	0x00b2
                           0000B3   304 _IPH1	=	0x00b3
                           0000C0   305 _P4	=	0x00c0
                           0000E8   306 _P5	=	0x00e8
                           0000A6   307 _WDTRST	=	0x00a6
                           0000A7   308 _WDTPRG	=	0x00a7
                           0000A9   309 _SADDR	=	0x00a9
                           0000B9   310 _SADEN	=	0x00b9
                           0000C3   311 _SPCON	=	0x00c3
                           0000C4   312 _SPSTA	=	0x00c4
                           0000C5   313 _SPDAT	=	0x00c5
                           0000C9   314 _T2MOD	=	0x00c9
                           00009B   315 _BDRCON	=	0x009b
                           00009A   316 _BRL	=	0x009a
                           00009C   317 _KBLS	=	0x009c
                           00009D   318 _KBE	=	0x009d
                           00009E   319 _KBF	=	0x009e
                           0000D2   320 _EECON	=	0x00d2
                                    321 ;--------------------------------------------------------
                                    322 ; special function bits
                                    323 ;--------------------------------------------------------
                                    324 	.area RSEG    (ABS,DATA)
      000000                        325 	.org 0x0000
                           000080   326 _P0_0	=	0x0080
                           000081   327 _P0_1	=	0x0081
                           000082   328 _P0_2	=	0x0082
                           000083   329 _P0_3	=	0x0083
                           000084   330 _P0_4	=	0x0084
                           000085   331 _P0_5	=	0x0085
                           000086   332 _P0_6	=	0x0086
                           000087   333 _P0_7	=	0x0087
                           000088   334 _IT0	=	0x0088
                           000089   335 _IE0	=	0x0089
                           00008A   336 _IT1	=	0x008a
                           00008B   337 _IE1	=	0x008b
                           00008C   338 _TR0	=	0x008c
                           00008D   339 _TF0	=	0x008d
                           00008E   340 _TR1	=	0x008e
                           00008F   341 _TF1	=	0x008f
                           000090   342 _P1_0	=	0x0090
                           000091   343 _P1_1	=	0x0091
                           000092   344 _P1_2	=	0x0092
                           000093   345 _P1_3	=	0x0093
                           000094   346 _P1_4	=	0x0094
                           000095   347 _P1_5	=	0x0095
                           000096   348 _P1_6	=	0x0096
                           000097   349 _P1_7	=	0x0097
                           000098   350 _RI	=	0x0098
                           000099   351 _TI	=	0x0099
                           00009A   352 _RB8	=	0x009a
                           00009B   353 _TB8	=	0x009b
                           00009C   354 _REN	=	0x009c
                           00009D   355 _SM2	=	0x009d
                           00009E   356 _SM1	=	0x009e
                           00009F   357 _SM0	=	0x009f
                           0000A0   358 _P2_0	=	0x00a0
                           0000A1   359 _P2_1	=	0x00a1
                           0000A2   360 _P2_2	=	0x00a2
                           0000A3   361 _P2_3	=	0x00a3
                           0000A4   362 _P2_4	=	0x00a4
                           0000A5   363 _P2_5	=	0x00a5
                           0000A6   364 _P2_6	=	0x00a6
                           0000A7   365 _P2_7	=	0x00a7
                           0000A8   366 _EX0	=	0x00a8
                           0000A9   367 _ET0	=	0x00a9
                           0000AA   368 _EX1	=	0x00aa
                           0000AB   369 _ET1	=	0x00ab
                           0000AC   370 _ES	=	0x00ac
                           0000AF   371 _EA	=	0x00af
                           0000B0   372 _P3_0	=	0x00b0
                           0000B1   373 _P3_1	=	0x00b1
                           0000B2   374 _P3_2	=	0x00b2
                           0000B3   375 _P3_3	=	0x00b3
                           0000B4   376 _P3_4	=	0x00b4
                           0000B5   377 _P3_5	=	0x00b5
                           0000B6   378 _P3_6	=	0x00b6
                           0000B7   379 _P3_7	=	0x00b7
                           0000B0   380 _RXD	=	0x00b0
                           0000B1   381 _TXD	=	0x00b1
                           0000B2   382 _INT0	=	0x00b2
                           0000B3   383 _INT1	=	0x00b3
                           0000B4   384 _T0	=	0x00b4
                           0000B5   385 _T1	=	0x00b5
                           0000B6   386 _WR	=	0x00b6
                           0000B7   387 _RD	=	0x00b7
                           0000B8   388 _PX0	=	0x00b8
                           0000B9   389 _PT0	=	0x00b9
                           0000BA   390 _PX1	=	0x00ba
                           0000BB   391 _PT1	=	0x00bb
                           0000BC   392 _PS	=	0x00bc
                           0000D0   393 _P	=	0x00d0
                           0000D1   394 _F1	=	0x00d1
                           0000D2   395 _OV	=	0x00d2
                           0000D3   396 _RS0	=	0x00d3
                           0000D4   397 _RS1	=	0x00d4
                           0000D5   398 _F0	=	0x00d5
                           0000D6   399 _AC	=	0x00d6
                           0000D7   400 _CY	=	0x00d7
                           0000AD   401 _ET2	=	0x00ad
                           0000BD   402 _PT2	=	0x00bd
                           0000C8   403 _T2CON_0	=	0x00c8
                           0000C9   404 _T2CON_1	=	0x00c9
                           0000CA   405 _T2CON_2	=	0x00ca
                           0000CB   406 _T2CON_3	=	0x00cb
                           0000CC   407 _T2CON_4	=	0x00cc
                           0000CD   408 _T2CON_5	=	0x00cd
                           0000CE   409 _T2CON_6	=	0x00ce
                           0000CF   410 _T2CON_7	=	0x00cf
                           0000C8   411 _CP_RL2	=	0x00c8
                           0000C9   412 _C_T2	=	0x00c9
                           0000CA   413 _TR2	=	0x00ca
                           0000CB   414 _EXEN2	=	0x00cb
                           0000CC   415 _TCLK	=	0x00cc
                           0000CD   416 _RCLK	=	0x00cd
                           0000CE   417 _EXF2	=	0x00ce
                           0000CF   418 _TF2	=	0x00cf
                           0000DF   419 _CF	=	0x00df
                           0000DE   420 _CR	=	0x00de
                           0000DC   421 _CCF4	=	0x00dc
                           0000DB   422 _CCF3	=	0x00db
                           0000DA   423 _CCF2	=	0x00da
                           0000D9   424 _CCF1	=	0x00d9
                           0000D8   425 _CCF0	=	0x00d8
                           0000AE   426 _EC	=	0x00ae
                           0000BE   427 _PPCL	=	0x00be
                           0000BD   428 _PT2L	=	0x00bd
                           0000BC   429 _PSL	=	0x00bc
                           0000BB   430 _PT1L	=	0x00bb
                           0000BA   431 _PX1L	=	0x00ba
                           0000B9   432 _PT0L	=	0x00b9
                           0000B8   433 _PX0L	=	0x00b8
                           0000C0   434 _P4_0	=	0x00c0
                           0000C1   435 _P4_1	=	0x00c1
                           0000C2   436 _P4_2	=	0x00c2
                           0000C3   437 _P4_3	=	0x00c3
                           0000C4   438 _P4_4	=	0x00c4
                           0000C5   439 _P4_5	=	0x00c5
                           0000C6   440 _P4_6	=	0x00c6
                           0000C7   441 _P4_7	=	0x00c7
                           0000E8   442 _P5_0	=	0x00e8
                           0000E9   443 _P5_1	=	0x00e9
                           0000EA   444 _P5_2	=	0x00ea
                           0000EB   445 _P5_3	=	0x00eb
                           0000EC   446 _P5_4	=	0x00ec
                           0000ED   447 _P5_5	=	0x00ed
                           0000EE   448 _P5_6	=	0x00ee
                           0000EF   449 _P5_7	=	0x00ef
                                    450 ;--------------------------------------------------------
                                    451 ; overlayable register banks
                                    452 ;--------------------------------------------------------
                                    453 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        454 	.ds 8
                                    455 ;--------------------------------------------------------
                                    456 ; internal ram data
                                    457 ;--------------------------------------------------------
                                    458 	.area DSEG    (DATA)
      000000                        459 _create_custom_char_sloc0_1_0:
      000000                        460 	.ds 3
                                    461 ;--------------------------------------------------------
                                    462 ; overlayable items in internal ram
                                    463 ;--------------------------------------------------------
                                    464 ;--------------------------------------------------------
                                    465 ; indirectly addressable internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area ISEG    (DATA)
                                    468 ;--------------------------------------------------------
                                    469 ; absolute internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area IABS    (ABS,DATA)
                                    472 	.area IABS    (ABS,DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; bit data
                                    475 ;--------------------------------------------------------
                                    476 	.area BSEG    (BIT)
      000000                        477 _handler_wr_c_lcd_sloc0_1_0:
      000000                        478 	.ds 1
      000001                        479 _handler_wr_str_lcd_sloc0_1_0:
      000001                        480 	.ds 1
      000002                        481 _handler_lcdgotoxy_sloc0_1_0:
      000002                        482 	.ds 1
      000003                        483 _handler_lcdgotoaddress_sloc0_1_0:
      000003                        484 	.ds 1
      000004                        485 _handler_lcd_hexdump_sloc0_1_0:
      000004                        486 	.ds 1
      000005                        487 _handler_custom_char_sloc0_1_0:
      000005                        488 	.ds 1
      000006                        489 _handle_cu_custom_char_sloc0_1_0:
      000006                        490 	.ds 1
      000007                        491 _handle_sadsmiley_custom_char_sloc0_1_0:
      000007                        492 	.ds 1
      000008                        493 _print_author_sloc0_1_0:
      000008                        494 	.ds 1
                                    495 ;--------------------------------------------------------
                                    496 ; paged external ram data
                                    497 ;--------------------------------------------------------
                                    498 	.area PSEG    (PAG,XDATA)
                                    499 ;--------------------------------------------------------
                                    500 ; external ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area XSEG    (XDATA)
                           00F000   503 _lcd_ptr	=	0xf000
      000000                        504 _string::
      000000                        505 	.ds 3
      000003                        506 _delay_milliseconds_65536_92:
      000003                        507 	.ds 2
      000005                        508 _lcdgotoaddr_address_65536_104:
      000005                        509 	.ds 1
      000006                        510 _lcdgotoxy_PARM_2:
      000006                        511 	.ds 1
      000007                        512 _lcdgotoxy_row_65536_106:
      000007                        513 	.ds 1
      000008                        514 _lcdgotoxy_address_65536_107:
      000008                        515 	.ds 1
      000009                        516 _lcdputch_cc_65536_114:
      000009                        517 	.ds 1
      00000A                        518 _lcdputstr_ss_65536_117:
      00000A                        519 	.ds 3
      00000D                        520 _handler_wr_str_lcd_k_65537_127:
      00000D                        521 	.ds 2
      00000F                        522 _handler_lcdgotoaddress_str_65536_140:
      00000F                        523 	.ds 50
      000041                        524 _handler_lcdgotoaddress_c_65537_141:
      000041                        525 	.ds 1
      000042                        526 _read_lcd_address_PARM_2:
      000042                        527 	.ds 1
      000043                        528 _read_lcd_address_is_ddram_65536_151:
      000043                        529 	.ds 1
      000044                        530 _get_hex_value_hex_value_65536_165:
      000044                        531 	.ds 1
      000045                        532 _create_custom_char_PARM_2:
      000045                        533 	.ds 3
      000048                        534 _create_custom_char_char_code_65536_170:
      000048                        535 	.ds 1
      000049                        536 _handler_custom_char_row_values_65539_178:
      000049                        537 	.ds 8
      000051                        538 _handle_cu_custom_char_row_vals1_65537_183:
      000051                        539 	.ds 8
      000059                        540 _handle_cu_custom_char_row_vals2_65538_185:
      000059                        541 	.ds 8
      000061                        542 _handle_cu_custom_char_row_vals3_65539_187:
      000061                        543 	.ds 8
      000069                        544 _handle_cu_custom_char_row_vals4_65540_189:
      000069                        545 	.ds 8
      000071                        546 _handle_sadsmiley_custom_char_row_vals1_65537_193:
      000071                        547 	.ds 8
      000079                        548 _handle_sadsmiley_custom_char_row_vals2_65538_195:
      000079                        549 	.ds 8
      000081                        550 _handle_sadsmiley_custom_char_row_vals3_65539_197:
      000081                        551 	.ds 8
      000089                        552 _handle_sadsmiley_custom_char_row_vals4_65540_199:
      000089                        553 	.ds 8
                                    554 ;--------------------------------------------------------
                                    555 ; absolute external ram data
                                    556 ;--------------------------------------------------------
                                    557 	.area XABS    (ABS,XDATA)
                                    558 ;--------------------------------------------------------
                                    559 ; external initialized ram data
                                    560 ;--------------------------------------------------------
                                    561 	.area XISEG   (XDATA)
      000000                        562 _save_cursor_address::
      000000                        563 	.ds 1
                                    564 	.area HOME    (CODE)
                                    565 	.area GSINIT0 (CODE)
                                    566 	.area GSINIT1 (CODE)
                                    567 	.area GSINIT2 (CODE)
                                    568 	.area GSINIT3 (CODE)
                                    569 	.area GSINIT4 (CODE)
                                    570 	.area GSINIT5 (CODE)
                                    571 	.area GSINIT  (CODE)
                                    572 	.area GSFINAL (CODE)
                                    573 	.area CSEG    (CODE)
                                    574 ;--------------------------------------------------------
                                    575 ; global & static initialisations
                                    576 ;--------------------------------------------------------
                                    577 	.area HOME    (CODE)
                                    578 	.area GSINIT  (CODE)
                                    579 	.area GSFINAL (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 ;--------------------------------------------------------
                                    582 ; Home
                                    583 ;--------------------------------------------------------
                                    584 	.area HOME    (CODE)
                                    585 	.area HOME    (CODE)
                                    586 ;--------------------------------------------------------
                                    587 ; code
                                    588 ;--------------------------------------------------------
                                    589 	.area CSEG    (CODE)
                                    590 ;------------------------------------------------------------
                                    591 ;Allocation info for local variables in function 'delay'
                                    592 ;------------------------------------------------------------
                                    593 ;milliseconds              Allocated with name '_delay_milliseconds_65536_92'
                                    594 ;i                         Allocated with name '_delay_i_131072_94'
                                    595 ;------------------------------------------------------------
                                    596 ;	lcd.c:77: void delay(int milliseconds)
                                    597 ;	-----------------------------------------
                                    598 ;	 function delay
                                    599 ;	-----------------------------------------
      000000                        600 _delay:
                           000007   601 	ar7 = 0x07
                           000006   602 	ar6 = 0x06
                           000005   603 	ar5 = 0x05
                           000004   604 	ar4 = 0x04
                           000003   605 	ar3 = 0x03
                           000002   606 	ar2 = 0x02
                           000001   607 	ar1 = 0x01
                           000000   608 	ar0 = 0x00
      000000 AF 83            [24]  609 	mov	r7,dph
      000002 E5 82            [12]  610 	mov	a,dpl
      000004 90r00r03         [24]  611 	mov	dptr,#_delay_milliseconds_65536_92
      000007 F0               [24]  612 	movx	@dptr,a
      000008 EF               [12]  613 	mov	a,r7
      000009 A3               [24]  614 	inc	dptr
      00000A F0               [24]  615 	movx	@dptr,a
                                    616 ;	lcd.c:80: for(int i = 0; i < milliseconds * COUNT_ONE_MILLISECOND; i++);
      00000B 90r00r03         [24]  617 	mov	dptr,#_delay_milliseconds_65536_92
      00000E E0               [24]  618 	movx	a,@dptr
      00000F FE               [12]  619 	mov	r6,a
      000010 A3               [24]  620 	inc	dptr
      000011 E0               [24]  621 	movx	a,@dptr
      000012 FF               [12]  622 	mov	r7,a
      000013 90r00r00         [24]  623 	mov	dptr,#__mulint_PARM_2
      000016 EE               [12]  624 	mov	a,r6
      000017 F0               [24]  625 	movx	@dptr,a
      000018 EF               [12]  626 	mov	a,r7
      000019 A3               [24]  627 	inc	dptr
      00001A F0               [24]  628 	movx	@dptr,a
      00001B 90 00 52         [24]  629 	mov	dptr,#0x0052
      00001E 12r00r00         [24]  630 	lcall	__mulint
      000021 AE 82            [24]  631 	mov	r6,dpl
      000023 AF 83            [24]  632 	mov	r7,dph
      000025 7C 00            [12]  633 	mov	r4,#0x00
      000027 7D 00            [12]  634 	mov	r5,#0x00
      000029                        635 00103$:
      000029 C3               [12]  636 	clr	c
      00002A EC               [12]  637 	mov	a,r4
      00002B 9E               [12]  638 	subb	a,r6
      00002C ED               [12]  639 	mov	a,r5
      00002D 64 80            [12]  640 	xrl	a,#0x80
      00002F 8F F0            [24]  641 	mov	b,r7
      000031 63 F0 80         [24]  642 	xrl	b,#0x80
      000034 95 F0            [12]  643 	subb	a,b
      000036 50 07            [24]  644 	jnc	00105$
      000038 0C               [12]  645 	inc	r4
      000039 BC 00 ED         [24]  646 	cjne	r4,#0x00,00103$
      00003C 0D               [12]  647 	inc	r5
      00003D 80 EA            [24]  648 	sjmp	00103$
      00003F                        649 00105$:
                                    650 ;	lcd.c:81: }
      00003F 22               [24]  651 	ret
                                    652 ;------------------------------------------------------------
                                    653 ;Allocation info for local variables in function 'lcdbusywait'
                                    654 ;------------------------------------------------------------
                                    655 ;BUSY_FLAG_MASK            Allocated with name '_lcdbusywait_BUSY_FLAG_MASK_65536_96'
                                    656 ;COMMAND_ADDRESS           Allocated with name '_lcdbusywait_COMMAND_ADDRESS_65536_96'
                                    657 ;------------------------------------------------------------
                                    658 ;	lcd.c:85: void lcdbusywait(void)
                                    659 ;	-----------------------------------------
                                    660 ;	 function lcdbusywait
                                    661 ;	-----------------------------------------
      000040                        662 _lcdbusywait:
                                    663 ;	lcd.c:94: LCD_RS = 0;
                                    664 ;	assignBit
      000040 C2 92            [12]  665 	clr	_P1_2
                                    666 ;	lcd.c:95: LCD_RW = 1;
                                    667 ;	assignBit
      000042 D2 93            [12]  668 	setb	_P1_3
                                    669 ;	lcd.c:98: while ((* (volatile uint8_t *) COMMAND_ADDRESS) & BUSY_FLAG_MASK)
      000044                        670 00101$:
      000044 90 F0 00         [24]  671 	mov	dptr,#0xf000
      000047 75 F0 00         [24]  672 	mov	b,#0x00
      00004A 12r00r00         [24]  673 	lcall	__gptrget
      00004D 30 E7 08         [24]  674 	jnb	acc.7,00104$
                                    675 ;	lcd.c:101: delay(10);
      000050 90 00 0A         [24]  676 	mov	dptr,#0x000a
      000053 12r00r00         [24]  677 	lcall	_delay
      000056 80 EC            [24]  678 	sjmp	00101$
      000058                        679 00104$:
                                    680 ;	lcd.c:103: }
      000058 22               [24]  681 	ret
                                    682 ;------------------------------------------------------------
                                    683 ;Allocation info for local variables in function 'set_time_variables'
                                    684 ;------------------------------------------------------------
                                    685 ;	lcd.c:106: void set_time_variables(void)
                                    686 ;	-----------------------------------------
                                    687 ;	 function set_time_variables
                                    688 ;	-----------------------------------------
      000059                        689 _set_time_variables:
                                    690 ;	lcd.c:109: tenth_of_second     = '0';
      000059 90r00r00         [24]  691 	mov	dptr,#_tenth_of_second
      00005C 74 30            [12]  692 	mov	a,#0x30
      00005E F0               [24]  693 	movx	@dptr,a
                                    694 ;	lcd.c:110: seconds_ones_digit  = '0';
      00005F 90r00r00         [24]  695 	mov	dptr,#_seconds_ones_digit
      000062 F0               [24]  696 	movx	@dptr,a
                                    697 ;	lcd.c:111: seconds_tens_digit  = '0';
      000063 90r00r00         [24]  698 	mov	dptr,#_seconds_tens_digit
      000066 F0               [24]  699 	movx	@dptr,a
                                    700 ;	lcd.c:112: minutes_ones_digit  = '0';
      000067 90r00r00         [24]  701 	mov	dptr,#_minutes_ones_digit
      00006A F0               [24]  702 	movx	@dptr,a
                                    703 ;	lcd.c:113: minutes_tens_digit  = '0';
      00006B 90r00r00         [24]  704 	mov	dptr,#_minutes_tens_digit
      00006E F0               [24]  705 	movx	@dptr,a
                                    706 ;	lcd.c:114: }
      00006F 22               [24]  707 	ret
                                    708 ;------------------------------------------------------------
                                    709 ;Allocation info for local variables in function 'init_lcd'
                                    710 ;------------------------------------------------------------
                                    711 ;	lcd.c:116: void init_lcd(void){
                                    712 ;	-----------------------------------------
                                    713 ;	 function init_lcd
                                    714 ;	-----------------------------------------
      000070                        715 _init_lcd:
                                    716 ;	lcd.c:118: LCD_RS = 0;
                                    717 ;	assignBit
      000070 C2 92            [12]  718 	clr	_P1_2
                                    719 ;	lcd.c:119: LCD_RW = 0;
                                    720 ;	assignBit
      000072 C2 93            [12]  721 	clr	_P1_3
                                    722 ;	lcd.c:121: delay(160);
      000074 90 00 A0         [24]  723 	mov	dptr,#0x00a0
      000077 12r00r00         [24]  724 	lcall	_delay
                                    725 ;	lcd.c:124: lcd_ptr = 0x30;
      00007A 90 F0 00         [24]  726 	mov	dptr,#_lcd_ptr
      00007D 74 30            [12]  727 	mov	a,#0x30
      00007F F0               [24]  728 	movx	@dptr,a
                                    729 ;	lcd.c:126: delay(170);
      000080 90 00 AA         [24]  730 	mov	dptr,#0x00aa
      000083 12r00r00         [24]  731 	lcall	_delay
                                    732 ;	lcd.c:128: lcd_ptr = 0x30;
      000086 90 F0 00         [24]  733 	mov	dptr,#_lcd_ptr
      000089 74 30            [12]  734 	mov	a,#0x30
      00008B F0               [24]  735 	movx	@dptr,a
                                    736 ;	lcd.c:130: delay(150);
      00008C 90 00 96         [24]  737 	mov	dptr,#0x0096
      00008F 12r00r00         [24]  738 	lcall	_delay
                                    739 ;	lcd.c:133: lcd_ptr = 0x30;
      000092 90 F0 00         [24]  740 	mov	dptr,#_lcd_ptr
      000095 74 30            [12]  741 	mov	a,#0x30
      000097 F0               [24]  742 	movx	@dptr,a
                                    743 ;	lcd.c:135: lcdbusywait();
      000098 12r00r40         [24]  744 	lcall	_lcdbusywait
                                    745 ;	lcd.c:137: LCD_RS = 0;
                                    746 ;	assignBit
      00009B C2 92            [12]  747 	clr	_P1_2
                                    748 ;	lcd.c:138: LCD_RW = 0;
                                    749 ;	assignBit
      00009D C2 93            [12]  750 	clr	_P1_3
                                    751 ;	lcd.c:140: lcd_ptr = 0x38;
      00009F 90 F0 00         [24]  752 	mov	dptr,#_lcd_ptr
      0000A2 74 38            [12]  753 	mov	a,#0x38
      0000A4 F0               [24]  754 	movx	@dptr,a
                                    755 ;	lcd.c:142: lcdbusywait();
      0000A5 12r00r40         [24]  756 	lcall	_lcdbusywait
                                    757 ;	lcd.c:145: LCD_RS = 0;
                                    758 ;	assignBit
      0000A8 C2 92            [12]  759 	clr	_P1_2
                                    760 ;	lcd.c:146: LCD_RW = 0;
                                    761 ;	assignBit
      0000AA C2 93            [12]  762 	clr	_P1_3
                                    763 ;	lcd.c:148: lcd_ptr = 0x0F;
      0000AC 90 F0 00         [24]  764 	mov	dptr,#_lcd_ptr
      0000AF 74 0F            [12]  765 	mov	a,#0x0f
      0000B1 F0               [24]  766 	movx	@dptr,a
                                    767 ;	lcd.c:150: lcdbusywait();
      0000B2 12r00r40         [24]  768 	lcall	_lcdbusywait
                                    769 ;	lcd.c:153: LCD_RS = 0;
                                    770 ;	assignBit
      0000B5 C2 92            [12]  771 	clr	_P1_2
                                    772 ;	lcd.c:154: LCD_RW = 0;
                                    773 ;	assignBit
      0000B7 C2 93            [12]  774 	clr	_P1_3
                                    775 ;	lcd.c:156: lcd_ptr = 0x01;
      0000B9 90 F0 00         [24]  776 	mov	dptr,#_lcd_ptr
      0000BC 74 01            [12]  777 	mov	a,#0x01
      0000BE F0               [24]  778 	movx	@dptr,a
                                    779 ;	lcd.c:158: lcdbusywait();
      0000BF 12r00r40         [24]  780 	lcall	_lcdbusywait
                                    781 ;	lcd.c:161: LCD_RS = 0;
                                    782 ;	assignBit
      0000C2 C2 92            [12]  783 	clr	_P1_2
                                    784 ;	lcd.c:162: LCD_RW = 0;
                                    785 ;	assignBit
      0000C4 C2 93            [12]  786 	clr	_P1_3
                                    787 ;	lcd.c:164: lcd_ptr = 0x06;
      0000C6 90 F0 00         [24]  788 	mov	dptr,#_lcd_ptr
      0000C9 74 06            [12]  789 	mov	a,#0x06
      0000CB F0               [24]  790 	movx	@dptr,a
                                    791 ;	lcd.c:166: lcdbusywait();
      0000CC 12r00r40         [24]  792 	lcall	_lcdbusywait
                                    793 ;	lcd.c:169: set_time_variables();
                                    794 ;	lcd.c:170: }
      0000CF 02r00r59         [24]  795 	ljmp	_set_time_variables
                                    796 ;------------------------------------------------------------
                                    797 ;Allocation info for local variables in function 'get_cursor_address'
                                    798 ;------------------------------------------------------------
                                    799 ;address                   Allocated with name '_get_cursor_address_address_65537_103'
                                    800 ;------------------------------------------------------------
                                    801 ;	lcd.c:173: uint8_t get_cursor_address(){
                                    802 ;	-----------------------------------------
                                    803 ;	 function get_cursor_address
                                    804 ;	-----------------------------------------
      0000D2                        805 _get_cursor_address:
                                    806 ;	lcd.c:174: LCD_RS = 0; // Set RS pin low
                                    807 ;	assignBit
      0000D2 C2 92            [12]  808 	clr	_P1_2
                                    809 ;	lcd.c:175: LCD_RW = 1; // Set RW pin high
                                    810 ;	assignBit
      0000D4 D2 93            [12]  811 	setb	_P1_3
                                    812 ;	lcd.c:177: uint8_t address = lcd_ptr & (~0x80); // Mask out the MSB of lcd_ptr and assign it to address
      0000D6 90 F0 00         [24]  813 	mov	dptr,#_lcd_ptr
      0000D9 E0               [24]  814 	movx	a,@dptr
      0000DA 54 7F            [12]  815 	anl	a,#0x7f
                                    816 ;	lcd.c:178: return address; // Return the address
                                    817 ;	lcd.c:179: }
      0000DC F5 82            [12]  818 	mov	dpl,a
      0000DE 22               [24]  819 	ret
                                    820 ;------------------------------------------------------------
                                    821 ;Allocation info for local variables in function 'lcdgotoaddr'
                                    822 ;------------------------------------------------------------
                                    823 ;address                   Allocated with name '_lcdgotoaddr_address_65536_104'
                                    824 ;------------------------------------------------------------
                                    825 ;	lcd.c:182: void lcdgotoaddr(unsigned char address){
                                    826 ;	-----------------------------------------
                                    827 ;	 function lcdgotoaddr
                                    828 ;	-----------------------------------------
      0000DF                        829 _lcdgotoaddr:
      0000DF E5 82            [12]  830 	mov	a,dpl
      0000E1 90r00r05         [24]  831 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000E4 F0               [24]  832 	movx	@dptr,a
                                    833 ;	lcd.c:183: LCD_RS = 0; // Set RS pin low
                                    834 ;	assignBit
      0000E5 C2 92            [12]  835 	clr	_P1_2
                                    836 ;	lcd.c:184: LCD_RW = 0; // Set RW pin low
                                    837 ;	assignBit
      0000E7 C2 93            [12]  838 	clr	_P1_3
                                    839 ;	lcd.c:186: address = address | 0x80; // Set the MSB of address to 1
      0000E9 90r00r05         [24]  840 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000EC E0               [24]  841 	movx	a,@dptr
      0000ED 43 E0 80         [24]  842 	orl	acc,#0x80
      0000F0 F0               [24]  843 	movx	@dptr,a
                                    844 ;	lcd.c:187: lcd_ptr = address; // Assign the address to lcd_ptr
      0000F1 90r00r05         [24]  845 	mov	dptr,#_lcdgotoaddr_address_65536_104
      0000F4 E0               [24]  846 	movx	a,@dptr
      0000F5 90 F0 00         [24]  847 	mov	dptr,#_lcd_ptr
      0000F8 F0               [24]  848 	movx	@dptr,a
                                    849 ;	lcd.c:188: lcdbusywait(); // Wait for the LCD to be not busy
                                    850 ;	lcd.c:189: }
      0000F9 02r00r40         [24]  851 	ljmp	_lcdbusywait
                                    852 ;------------------------------------------------------------
                                    853 ;Allocation info for local variables in function 'lcdgotoxy'
                                    854 ;------------------------------------------------------------
                                    855 ;column                    Allocated with name '_lcdgotoxy_PARM_2'
                                    856 ;row                       Allocated with name '_lcdgotoxy_row_65536_106'
                                    857 ;address                   Allocated with name '_lcdgotoxy_address_65536_107'
                                    858 ;------------------------------------------------------------
                                    859 ;	lcd.c:192: void lcdgotoxy(unsigned char row, unsigned char column) {
                                    860 ;	-----------------------------------------
                                    861 ;	 function lcdgotoxy
                                    862 ;	-----------------------------------------
      0000FC                        863 _lcdgotoxy:
      0000FC E5 82            [12]  864 	mov	a,dpl
      0000FE 90r00r07         [24]  865 	mov	dptr,#_lcdgotoxy_row_65536_106
      000101 F0               [24]  866 	movx	@dptr,a
                                    867 ;	lcd.c:194: switch (row) {          // Select address based on the row number
      000102 E0               [24]  868 	movx	a,@dptr
      000103 FF               [12]  869 	mov	r7,a
      000104 E4               [12]  870 	clr	a
      000105 BF 30 01         [24]  871 	cjne	r7,#0x30,00173$
      000108 04               [12]  872 	inc	a
      000109                        873 00173$:
      000109 FE               [12]  874 	mov	r6,a
      00010A 70 0F            [24]  875 	jnz	00101$
      00010C BF 31 02         [24]  876 	cjne	r7,#0x31,00176$
      00010F 80 11            [24]  877 	sjmp	00102$
      000111                        878 00176$:
      000111 BF 32 02         [24]  879 	cjne	r7,#0x32,00177$
      000114 80 14            [24]  880 	sjmp	00103$
      000116                        881 00177$:
                                    882 ;	lcd.c:195: case '0':
      000116 BF 33 21         [24]  883 	cjne	r7,#0x33,00105$
      000119 80 17            [24]  884 	sjmp	00104$
      00011B                        885 00101$:
                                    886 ;	lcd.c:196: address = (0x00);
      00011B 90r00r08         [24]  887 	mov	dptr,#_lcdgotoxy_address_65536_107
      00011E E4               [12]  888 	clr	a
      00011F F0               [24]  889 	movx	@dptr,a
                                    890 ;	lcd.c:197: break;
                                    891 ;	lcd.c:198: case '1':
      000120 80 1D            [24]  892 	sjmp	00106$
      000122                        893 00102$:
                                    894 ;	lcd.c:199: address = (0x40);
      000122 90r00r08         [24]  895 	mov	dptr,#_lcdgotoxy_address_65536_107
      000125 74 40            [12]  896 	mov	a,#0x40
      000127 F0               [24]  897 	movx	@dptr,a
                                    898 ;	lcd.c:200: break;
                                    899 ;	lcd.c:201: case '2':
      000128 80 15            [24]  900 	sjmp	00106$
      00012A                        901 00103$:
                                    902 ;	lcd.c:202: address = (0x10);
      00012A 90r00r08         [24]  903 	mov	dptr,#_lcdgotoxy_address_65536_107
      00012D 74 10            [12]  904 	mov	a,#0x10
      00012F F0               [24]  905 	movx	@dptr,a
                                    906 ;	lcd.c:203: break;
                                    907 ;	lcd.c:204: case '3':
      000130 80 0D            [24]  908 	sjmp	00106$
      000132                        909 00104$:
                                    910 ;	lcd.c:205: address = (0x50);
      000132 90r00r08         [24]  911 	mov	dptr,#_lcdgotoxy_address_65536_107
      000135 74 50            [12]  912 	mov	a,#0x50
      000137 F0               [24]  913 	movx	@dptr,a
                                    914 ;	lcd.c:206: break;
                                    915 ;	lcd.c:207: default:
      000138 80 05            [24]  916 	sjmp	00106$
      00013A                        917 00105$:
                                    918 ;	lcd.c:208: address = (0x00);
      00013A 90r00r08         [24]  919 	mov	dptr,#_lcdgotoxy_address_65536_107
      00013D E4               [12]  920 	clr	a
      00013E F0               [24]  921 	movx	@dptr,a
                                    922 ;	lcd.c:210: }
      00013F                        923 00106$:
                                    924 ;	lcd.c:212: if (row == '0' && column == '4') {
      00013F EE               [12]  925 	mov	a,r6
      000140 60 12            [24]  926 	jz	00120$
      000142 90r00r06         [24]  927 	mov	dptr,#_lcdgotoxy_PARM_2
      000145 E0               [24]  928 	movx	a,@dptr
      000146 FF               [12]  929 	mov	r7,a
      000147 BF 34 0A         [24]  930 	cjne	r7,#0x34,00120$
                                    931 ;	lcd.c:213: address |= 0x04;
      00014A 90r00r08         [24]  932 	mov	dptr,#_lcdgotoxy_address_65536_107
      00014D E0               [24]  933 	movx	a,@dptr
      00014E 43 E0 04         [24]  934 	orl	acc,#0x04
      000151 F0               [24]  935 	movx	@dptr,a
      000152 80 55            [24]  936 	sjmp	00121$
      000154                        937 00120$:
                                    938 ;	lcd.c:215: else if (row == '4' && column == '0') {
      000154 90r00r07         [24]  939 	mov	dptr,#_lcdgotoxy_row_65536_106
      000157 E0               [24]  940 	movx	a,@dptr
      000158 FF               [12]  941 	mov	r7,a
      000159 BF 34 12         [24]  942 	cjne	r7,#0x34,00116$
      00015C 90r00r06         [24]  943 	mov	dptr,#_lcdgotoxy_PARM_2
      00015F E0               [24]  944 	movx	a,@dptr
      000160 FF               [12]  945 	mov	r7,a
      000161 BF 30 0A         [24]  946 	cjne	r7,#0x30,00116$
                                    947 ;	lcd.c:216: address |= 0x40;
      000164 90r00r08         [24]  948 	mov	dptr,#_lcdgotoxy_address_65536_107
      000167 E0               [24]  949 	movx	a,@dptr
      000168 43 E0 40         [24]  950 	orl	acc,#0x40
      00016B F0               [24]  951 	movx	@dptr,a
      00016C 80 3B            [24]  952 	sjmp	00121$
      00016E                        953 00116$:
                                    954 ;	lcd.c:218: else if (column >= 'A' && column <= 'F') {
      00016E 90r00r06         [24]  955 	mov	dptr,#_lcdgotoxy_PARM_2
      000171 E0               [24]  956 	movx	a,@dptr
      000172 FF               [12]  957 	mov	r7,a
      000173 BF 41 00         [24]  958 	cjne	r7,#0x41,00186$
      000176                        959 00186$:
      000176 40 13            [24]  960 	jc	00112$
      000178 EF               [12]  961 	mov	a,r7
      000179 24 B9            [12]  962 	add	a,#0xff - 0x46
      00017B 40 0E            [24]  963 	jc	00112$
                                    964 ;	lcd.c:219: address |= (column - '7');
      00017D 8F 06            [24]  965 	mov	ar6,r7
      00017F EE               [12]  966 	mov	a,r6
      000180 24 C9            [12]  967 	add	a,#0xc9
      000182 FE               [12]  968 	mov	r6,a
      000183 90r00r08         [24]  969 	mov	dptr,#_lcdgotoxy_address_65536_107
      000186 E0               [24]  970 	movx	a,@dptr
      000187 4E               [12]  971 	orl	a,r6
      000188 F0               [24]  972 	movx	@dptr,a
      000189 80 1E            [24]  973 	sjmp	00121$
      00018B                        974 00112$:
                                    975 ;	lcd.c:221: else if (column >= '0' && column <= '9') {
      00018B BF 30 00         [24]  976 	cjne	r7,#0x30,00189$
      00018E                        977 00189$:
      00018E 40 11            [24]  978 	jc	00108$
      000190 EF               [12]  979 	mov	a,r7
      000191 24 C6            [12]  980 	add	a,#0xff - 0x39
      000193 40 0C            [24]  981 	jc	00108$
                                    982 ;	lcd.c:222: address |= (column - '0');
      000195 EF               [12]  983 	mov	a,r7
      000196 24 D0            [12]  984 	add	a,#0xd0
      000198 FF               [12]  985 	mov	r7,a
      000199 90r00r08         [24]  986 	mov	dptr,#_lcdgotoxy_address_65536_107
      00019C E0               [24]  987 	movx	a,@dptr
      00019D 4F               [12]  988 	orl	a,r7
      00019E F0               [24]  989 	movx	@dptr,a
      00019F 80 08            [24]  990 	sjmp	00121$
      0001A1                        991 00108$:
                                    992 ;	lcd.c:225: address |= ('8' - 48);
      0001A1 90r00r08         [24]  993 	mov	dptr,#_lcdgotoxy_address_65536_107
      0001A4 E0               [24]  994 	movx	a,@dptr
      0001A5 43 E0 08         [24]  995 	orl	acc,#0x08
      0001A8 F0               [24]  996 	movx	@dptr,a
      0001A9                        997 00121$:
                                    998 ;	lcd.c:227: lcdgotoaddr(address);   // Call lcdgotoaddr function with the calculated address
      0001A9 90r00r08         [24]  999 	mov	dptr,#_lcdgotoxy_address_65536_107
      0001AC E0               [24] 1000 	movx	a,@dptr
      0001AD F5 82            [12] 1001 	mov	dpl,a
      0001AF 12r00rDF         [24] 1002 	lcall	_lcdgotoaddr
                                   1003 ;	lcd.c:228: lcdbusywait();          // Wait for the LCD to be not busy
                                   1004 ;	lcd.c:229: }
      0001B2 02r00r40         [24] 1005 	ljmp	_lcdbusywait
                                   1006 ;------------------------------------------------------------
                                   1007 ;Allocation info for local variables in function 'lcdputch'
                                   1008 ;------------------------------------------------------------
                                   1009 ;cc                        Allocated with name '_lcdputch_cc_65536_114'
                                   1010 ;cursor_address            Allocated with name '_lcdputch_cursor_address_65536_115'
                                   1011 ;------------------------------------------------------------
                                   1012 ;	lcd.c:232: void lcdputch(char cc){
                                   1013 ;	-----------------------------------------
                                   1014 ;	 function lcdputch
                                   1015 ;	-----------------------------------------
      0001B5                       1016 _lcdputch:
      0001B5 E5 82            [12] 1017 	mov	a,dpl
      0001B7 90r00r09         [24] 1018 	mov	dptr,#_lcdputch_cc_65536_114
      0001BA F0               [24] 1019 	movx	@dptr,a
                                   1020 ;	lcd.c:233: unsigned char cursor_address = get_cursor_address(); // get the current cursor address
      0001BB 12r00rD2         [24] 1021 	lcall	_get_cursor_address
      0001BE AF 82            [24] 1022 	mov	r7,dpl
                                   1023 ;	lcd.c:234: LCD_RS=1;       // set the RS pin high to send data
                                   1024 ;	assignBit
      0001C0 D2 92            [12] 1025 	setb	_P1_2
                                   1026 ;	lcd.c:235: LCD_RW=0;       // set the RW pin low to write to the LCD
                                   1027 ;	assignBit
      0001C2 C2 93            [12] 1028 	clr	_P1_3
                                   1029 ;	lcd.c:236: lcd_ptr=cc;     // put the character to the LCD data bus
      0001C4 90r00r09         [24] 1030 	mov	dptr,#_lcdputch_cc_65536_114
      0001C7 E0               [24] 1031 	movx	a,@dptr
      0001C8 90 F0 00         [24] 1032 	mov	dptr,#_lcd_ptr
      0001CB F0               [24] 1033 	movx	@dptr,a
                                   1034 ;	lcd.c:237: lcdbusywait();  // wait until the LCD is not busy
      0001CC C0 07            [24] 1035 	push	ar7
      0001CE 12r00r40         [24] 1036 	lcall	_lcdbusywait
      0001D1 D0 07            [24] 1037 	pop	ar7
                                   1038 ;	lcd.c:240: switch(cursor_address) {
      0001D3 BF 0F 02         [24] 1039 	cjne	r7,#0x0f,00124$
      0001D6 80 0F            [24] 1040 	sjmp	00101$
      0001D8                       1041 00124$:
      0001D8 BF 1F 02         [24] 1042 	cjne	r7,#0x1f,00125$
      0001DB 80 22            [24] 1043 	sjmp	00103$
      0001DD                       1044 00125$:
      0001DD BF 4F 02         [24] 1045 	cjne	r7,#0x4f,00126$
      0001E0 80 11            [24] 1046 	sjmp	00102$
      0001E2                       1047 00126$:
                                   1048 ;	lcd.c:241: case 0x0F:
      0001E2 BF 5F 32         [24] 1049 	cjne	r7,#0x5f,00106$
      0001E5 80 24            [24] 1050 	sjmp	00104$
      0001E7                       1051 00101$:
                                   1052 ;	lcd.c:242: lcdgotoxy('1', '0');
      0001E7 90r00r06         [24] 1053 	mov	dptr,#_lcdgotoxy_PARM_2
      0001EA 74 30            [12] 1054 	mov	a,#0x30
      0001EC F0               [24] 1055 	movx	@dptr,a
      0001ED 75 82 31         [24] 1056 	mov	dpl,#0x31
                                   1057 ;	lcd.c:243: break;
                                   1058 ;	lcd.c:244: case 0x4F:
      0001F0 02r00rFC         [24] 1059 	ljmp	_lcdgotoxy
      0001F3                       1060 00102$:
                                   1061 ;	lcd.c:245: lcdgotoxy('2', '0');
      0001F3 90r00r06         [24] 1062 	mov	dptr,#_lcdgotoxy_PARM_2
      0001F6 74 30            [12] 1063 	mov	a,#0x30
      0001F8 F0               [24] 1064 	movx	@dptr,a
      0001F9 75 82 32         [24] 1065 	mov	dpl,#0x32
                                   1066 ;	lcd.c:246: break;
                                   1067 ;	lcd.c:247: case 0x1F:
      0001FC 02r00rFC         [24] 1068 	ljmp	_lcdgotoxy
      0001FF                       1069 00103$:
                                   1070 ;	lcd.c:248: lcdgotoxy('0', '0');
      0001FF 90r00r06         [24] 1071 	mov	dptr,#_lcdgotoxy_PARM_2
      000202 74 30            [12] 1072 	mov	a,#0x30
      000204 F0               [24] 1073 	movx	@dptr,a
      000205 75 82 30         [24] 1074 	mov	dpl,#0x30
                                   1075 ;	lcd.c:249: break;
                                   1076 ;	lcd.c:250: case 0x5F:
      000208 02r00rFC         [24] 1077 	ljmp	_lcdgotoxy
      00020B                       1078 00104$:
                                   1079 ;	lcd.c:251: lcdgotoxy('0', '0');
      00020B 90r00r06         [24] 1080 	mov	dptr,#_lcdgotoxy_PARM_2
      00020E 74 30            [12] 1081 	mov	a,#0x30
      000210 F0               [24] 1082 	movx	@dptr,a
      000211 75 82 30         [24] 1083 	mov	dpl,#0x30
                                   1084 ;	lcd.c:253: }
                                   1085 ;	lcd.c:254: }
      000214 02r00rFC         [24] 1086 	ljmp	_lcdgotoxy
      000217                       1087 00106$:
      000217 22               [24] 1088 	ret
                                   1089 ;------------------------------------------------------------
                                   1090 ;Allocation info for local variables in function 'lcdputstr'
                                   1091 ;------------------------------------------------------------
                                   1092 ;ss                        Allocated with name '_lcdputstr_ss_65536_117'
                                   1093 ;i                         Allocated with name '_lcdputstr_i_65536_118'
                                   1094 ;------------------------------------------------------------
                                   1095 ;	lcd.c:256: void lcdputstr(char *ss){
                                   1096 ;	-----------------------------------------
                                   1097 ;	 function lcdputstr
                                   1098 ;	-----------------------------------------
      000218                       1099 _lcdputstr:
      000218 AF F0            [24] 1100 	mov	r7,b
      00021A AE 83            [24] 1101 	mov	r6,dph
      00021C E5 82            [12] 1102 	mov	a,dpl
      00021E 90r00r0A         [24] 1103 	mov	dptr,#_lcdputstr_ss_65536_117
      000221 F0               [24] 1104 	movx	@dptr,a
      000222 EE               [12] 1105 	mov	a,r6
      000223 A3               [24] 1106 	inc	dptr
      000224 F0               [24] 1107 	movx	@dptr,a
      000225 EF               [12] 1108 	mov	a,r7
      000226 A3               [24] 1109 	inc	dptr
      000227 F0               [24] 1110 	movx	@dptr,a
                                   1111 ;	lcd.c:258: while(ss[i]!='\0'){     // loop until end of string
      000228 90r00r0A         [24] 1112 	mov	dptr,#_lcdputstr_ss_65536_117
      00022B E0               [24] 1113 	movx	a,@dptr
      00022C FD               [12] 1114 	mov	r5,a
      00022D A3               [24] 1115 	inc	dptr
      00022E E0               [24] 1116 	movx	a,@dptr
      00022F FE               [12] 1117 	mov	r6,a
      000230 A3               [24] 1118 	inc	dptr
      000231 E0               [24] 1119 	movx	a,@dptr
      000232 FF               [12] 1120 	mov	r7,a
      000233 7B 00            [12] 1121 	mov	r3,#0x00
      000235 7C 00            [12] 1122 	mov	r4,#0x00
      000237                       1123 00101$:
      000237 EB               [12] 1124 	mov	a,r3
      000238 2D               [12] 1125 	add	a,r5
      000239 F8               [12] 1126 	mov	r0,a
      00023A EC               [12] 1127 	mov	a,r4
      00023B 3E               [12] 1128 	addc	a,r6
      00023C F9               [12] 1129 	mov	r1,a
      00023D 8F 02            [24] 1130 	mov	ar2,r7
      00023F 88 82            [24] 1131 	mov	dpl,r0
      000241 89 83            [24] 1132 	mov	dph,r1
      000243 8A F0            [24] 1133 	mov	b,r2
      000245 12r00r00         [24] 1134 	lcall	__gptrget
      000248 FA               [12] 1135 	mov	r2,a
      000249 60 20            [24] 1136 	jz	00104$
                                   1137 ;	lcd.c:259: lcdputch(ss[i]);    // print each character
      00024B 8A 82            [24] 1138 	mov	dpl,r2
      00024D C0 07            [24] 1139 	push	ar7
      00024F C0 06            [24] 1140 	push	ar6
      000251 C0 05            [24] 1141 	push	ar5
      000253 C0 04            [24] 1142 	push	ar4
      000255 C0 03            [24] 1143 	push	ar3
      000257 12r01rB5         [24] 1144 	lcall	_lcdputch
      00025A D0 03            [24] 1145 	pop	ar3
      00025C D0 04            [24] 1146 	pop	ar4
      00025E D0 05            [24] 1147 	pop	ar5
      000260 D0 06            [24] 1148 	pop	ar6
      000262 D0 07            [24] 1149 	pop	ar7
                                   1150 ;	lcd.c:260: i++;
      000264 0B               [12] 1151 	inc	r3
      000265 BB 00 CF         [24] 1152 	cjne	r3,#0x00,00101$
      000268 0C               [12] 1153 	inc	r4
      000269 80 CC            [24] 1154 	sjmp	00101$
      00026B                       1155 00104$:
                                   1156 ;	lcd.c:262: }
      00026B 22               [24] 1157 	ret
                                   1158 ;------------------------------------------------------------
                                   1159 ;Allocation info for local variables in function 'handler_lcdclear'
                                   1160 ;------------------------------------------------------------
                                   1161 ;	lcd.c:263: void handler_lcdclear(void){
                                   1162 ;	-----------------------------------------
                                   1163 ;	 function handler_lcdclear
                                   1164 ;	-----------------------------------------
      00026C                       1165 _handler_lcdclear:
                                   1166 ;	lcd.c:264: LCD_RS=0;               // set RS pin to low
                                   1167 ;	assignBit
      00026C C2 92            [12] 1168 	clr	_P1_2
                                   1169 ;	lcd.c:265: LCD_RW=0;               // set RW pin to low
                                   1170 ;	assignBit
      00026E C2 93            [12] 1171 	clr	_P1_3
                                   1172 ;	lcd.c:266: lcd_ptr=0x01;           // reset pointer to first line
      000270 90 F0 00         [24] 1173 	mov	dptr,#_lcd_ptr
      000273 74 01            [12] 1174 	mov	a,#0x01
      000275 F0               [24] 1175 	movx	@dptr,a
                                   1176 ;	lcd.c:267: lcdbusywait();          // wait until LCD is ready
      000276 12r00r40         [24] 1177 	lcall	_lcdbusywait
                                   1178 ;	lcd.c:268: lcdgotoaddr(0x00);      // move cursor to the beginning of the first line
      000279 75 82 00         [24] 1179 	mov	dpl,#0x00
      00027C 12r00rDF         [24] 1180 	lcall	_lcdgotoaddr
                                   1181 ;	lcd.c:269: lcdputstr("       ");   // write 7 spaces to clear the first line
      00027F 90r00r00         [24] 1182 	mov	dptr,#___str_0
      000282 75 F0 80         [24] 1183 	mov	b,#0x80
      000285 12r02r18         [24] 1184 	lcall	_lcdputstr
                                   1185 ;	lcd.c:270: lcdgotoaddr(0x00);      // move cursor back to the beginning of the first line
      000288 75 82 00         [24] 1186 	mov	dpl,#0x00
      00028B 12r00rDF         [24] 1187 	lcall	_lcdgotoaddr
                                   1188 ;	lcd.c:271: printf_tiny("\033[1;33m\n\rLCD Cleared!!\r\n"); // print a message to indicate LCD has been cleared
      00028E 74r08            [12] 1189 	mov	a,#___str_1
      000290 C0 E0            [24] 1190 	push	acc
      000292 74s00            [12] 1191 	mov	a,#(___str_1 >> 8)
      000294 C0 E0            [24] 1192 	push	acc
      000296 12r00r00         [24] 1193 	lcall	_printf_tiny
      000299 15 81            [12] 1194 	dec	sp
      00029B 15 81            [12] 1195 	dec	sp
                                   1196 ;	lcd.c:272: }
      00029D 22               [24] 1197 	ret
                                   1198 ;------------------------------------------------------------
                                   1199 ;Allocation info for local variables in function 'handler_wr_c_lcd'
                                   1200 ;------------------------------------------------------------
                                   1201 ;lcd_input                 Allocated with name '_handler_wr_c_lcd_lcd_input_65536_123'
                                   1202 ;------------------------------------------------------------
                                   1203 ;	lcd.c:274: void handler_wr_c_lcd(void)
                                   1204 ;	-----------------------------------------
                                   1205 ;	 function handler_wr_c_lcd
                                   1206 ;	-----------------------------------------
      00029E                       1207 _handler_wr_c_lcd:
                                   1208 ;	lcd.c:277: printf_tiny("\033[1;33m\n\rEnter Character to put on LCD !!\r\n"); // print a message to ask the user to enter a character
      00029E 74r21            [12] 1209 	mov	a,#___str_2
      0002A0 C0 E0            [24] 1210 	push	acc
      0002A2 74s00            [12] 1211 	mov	a,#(___str_2 >> 8)
      0002A4 C0 E0            [24] 1212 	push	acc
      0002A6 12r00r00         [24] 1213 	lcall	_printf_tiny
      0002A9 15 81            [12] 1214 	dec	sp
      0002AB 15 81            [12] 1215 	dec	sp
                                   1216 ;	lcd.c:278: lcd_input = getchar();  // get the input character from the user
      0002AD 12r00r00         [24] 1217 	lcall	_getchar
      0002B0 AE 82            [24] 1218 	mov	r6,dpl
                                   1219 ;	lcd.c:282: }
      0002B2 D2*00            [12] 1220 	setb	_handler_wr_c_lcd_sloc0_1_0
      0002B4 10 AF 02         [24] 1221 	jbc	ea,00103$
      0002B7 C2*00            [12] 1222 	clr	_handler_wr_c_lcd_sloc0_1_0
      0002B9                       1223 00103$:
                                   1224 ;	lcd.c:281: lcdputch(lcd_input); // write the input character to the LCD
      0002B9 8E 82            [24] 1225 	mov	dpl,r6
      0002BB C0 06            [24] 1226 	push	ar6
      0002BD 12r01rB5         [24] 1227 	lcall	_lcdputch
      0002C0 A2*00            [12] 1228 	mov	c,_handler_wr_c_lcd_sloc0_1_0
      0002C2 92 AF            [24] 1229 	mov	ea,c
                                   1230 ;	lcd.c:283: printf_tiny("\n\rEntered Char = %c\n\r",lcd_input); // print the entered character
      0002C4 7F 00            [12] 1231 	mov	r7,#0x00
      0002C6 C0 07            [24] 1232 	push	ar7
      0002C8 74r4D            [12] 1233 	mov	a,#___str_3
      0002CA C0 E0            [24] 1234 	push	acc
      0002CC 74s00            [12] 1235 	mov	a,#(___str_3 >> 8)
      0002CE C0 E0            [24] 1236 	push	acc
      0002D0 12r00r00         [24] 1237 	lcall	_printf_tiny
      0002D3 E5 81            [12] 1238 	mov	a,sp
      0002D5 24 FC            [12] 1239 	add	a,#0xfc
      0002D7 F5 81            [12] 1240 	mov	sp,a
                                   1241 ;	lcd.c:284: printf_tiny("\n\r");
      0002D9 74r63            [12] 1242 	mov	a,#___str_4
      0002DB C0 E0            [24] 1243 	push	acc
      0002DD 74s00            [12] 1244 	mov	a,#(___str_4 >> 8)
      0002DF C0 E0            [24] 1245 	push	acc
      0002E1 12r00r00         [24] 1246 	lcall	_printf_tiny
      0002E4 15 81            [12] 1247 	dec	sp
      0002E6 15 81            [12] 1248 	dec	sp
                                   1249 ;	lcd.c:285: }
      0002E8 22               [24] 1250 	ret
                                   1251 ;------------------------------------------------------------
                                   1252 ;Allocation info for local variables in function 'handler_wr_str_lcd'
                                   1253 ;------------------------------------------------------------
                                   1254 ;k                         Allocated with name '_handler_wr_str_lcd_k_65537_127'
                                   1255 ;i                         Allocated with name '_handler_wr_str_lcd_i_65537_127'
                                   1256 ;ch                        Allocated with name '_handler_wr_str_lcd_ch_65537_127'
                                   1257 ;------------------------------------------------------------
                                   1258 ;	lcd.c:287: void handler_wr_str_lcd(void)
                                   1259 ;	-----------------------------------------
                                   1260 ;	 function handler_wr_str_lcd
                                   1261 ;	-----------------------------------------
      0002E9                       1262 _handler_wr_str_lcd:
                                   1263 ;	lcd.c:289: printf_tiny("\033[1;33m\n\rEnter String to put on LCD !!\r\n"); // print a message to ask the user to enter a string
      0002E9 74r66            [12] 1264 	mov	a,#___str_5
      0002EB C0 E0            [24] 1265 	push	acc
      0002ED 74s00            [12] 1266 	mov	a,#(___str_5 >> 8)
      0002EF C0 E0            [24] 1267 	push	acc
      0002F1 12r00r00         [24] 1268 	lcall	_printf_tiny
      0002F4 15 81            [12] 1269 	dec	sp
      0002F6 15 81            [12] 1270 	dec	sp
                                   1271 ;	lcd.c:290: int k = 1;
      0002F8 90r00r0D         [24] 1272 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      0002FB 74 01            [12] 1273 	mov	a,#0x01
      0002FD F0               [24] 1274 	movx	@dptr,a
      0002FE E4               [12] 1275 	clr	a
      0002FF A3               [24] 1276 	inc	dptr
      000300 F0               [24] 1277 	movx	@dptr,a
                                   1278 ;	lcd.c:294: while(k){
      000301 7E 00            [12] 1279 	mov	r6,#0x00
      000303 7F 00            [12] 1280 	mov	r7,#0x00
      000305                       1281 00104$:
      000305 90r00r0D         [24] 1282 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      000308 E0               [24] 1283 	movx	a,@dptr
      000309 F5 F0            [12] 1284 	mov	b,a
      00030B A3               [24] 1285 	inc	dptr
      00030C E0               [24] 1286 	movx	a,@dptr
      00030D 45 F0            [12] 1287 	orl	a,b
      00030F 60 3D            [24] 1288 	jz	00106$
                                   1289 ;	lcd.c:295: ch=getchar();       // get each character from the user until the enter key is pressed
      000311 C0 07            [24] 1290 	push	ar7
      000313 C0 06            [24] 1291 	push	ar6
      000315 12r00r00         [24] 1292 	lcall	_getchar
      000318 AC 82            [24] 1293 	mov	r4,dpl
      00031A AD 83            [24] 1294 	mov	r5,dph
      00031C D0 06            [24] 1295 	pop	ar6
      00031E D0 07            [24] 1296 	pop	ar7
                                   1297 ;	lcd.c:296: if(ch=='\r'){
      000320 BC 0D 09         [24] 1298 	cjne	r4,#0x0d,00102$
                                   1299 ;	lcd.c:297: k=0;            // exit the loop when the enter key is pressed
      000323 90r00r0D         [24] 1300 	mov	dptr,#_handler_wr_str_lcd_k_65537_127
      000326 E4               [12] 1301 	clr	a
      000327 F0               [24] 1302 	movx	@dptr,a
      000328 A3               [24] 1303 	inc	dptr
      000329 F0               [24] 1304 	movx	@dptr,a
      00032A 80 D9            [24] 1305 	sjmp	00104$
      00032C                       1306 00102$:
                                   1307 ;	lcd.c:300: *(string+i)=ch; // store each character in a string array
      00032C 90r00r00         [24] 1308 	mov	dptr,#_string
      00032F E0               [24] 1309 	movx	a,@dptr
      000330 FA               [12] 1310 	mov	r2,a
      000331 A3               [24] 1311 	inc	dptr
      000332 E0               [24] 1312 	movx	a,@dptr
      000333 FB               [12] 1313 	mov	r3,a
      000334 A3               [24] 1314 	inc	dptr
      000335 E0               [24] 1315 	movx	a,@dptr
      000336 FD               [12] 1316 	mov	r5,a
      000337 EE               [12] 1317 	mov	a,r6
      000338 2A               [12] 1318 	add	a,r2
      000339 FA               [12] 1319 	mov	r2,a
      00033A EF               [12] 1320 	mov	a,r7
      00033B 3B               [12] 1321 	addc	a,r3
      00033C FB               [12] 1322 	mov	r3,a
      00033D 8A 82            [24] 1323 	mov	dpl,r2
      00033F 8B 83            [24] 1324 	mov	dph,r3
      000341 8D F0            [24] 1325 	mov	b,r5
      000343 EC               [12] 1326 	mov	a,r4
      000344 12r00r00         [24] 1327 	lcall	__gptrput
                                   1328 ;	lcd.c:301: i++;
      000347 0E               [12] 1329 	inc	r6
      000348 BE 00 BA         [24] 1330 	cjne	r6,#0x00,00104$
      00034B 0F               [12] 1331 	inc	r7
      00034C 80 B7            [24] 1332 	sjmp	00104$
      00034E                       1333 00106$:
                                   1334 ;	lcd.c:304: *(string+i)='\0';       // add null character to mark the end of the string
      00034E 90r00r00         [24] 1335 	mov	dptr,#_string
      000351 E0               [24] 1336 	movx	a,@dptr
      000352 FB               [12] 1337 	mov	r3,a
      000353 A3               [24] 1338 	inc	dptr
      000354 E0               [24] 1339 	movx	a,@dptr
      000355 FC               [12] 1340 	mov	r4,a
      000356 A3               [24] 1341 	inc	dptr
      000357 E0               [24] 1342 	movx	a,@dptr
      000358 FD               [12] 1343 	mov	r5,a
      000359 EE               [12] 1344 	mov	a,r6
      00035A 2B               [12] 1345 	add	a,r3
      00035B FE               [12] 1346 	mov	r6,a
      00035C EF               [12] 1347 	mov	a,r7
      00035D 3C               [12] 1348 	addc	a,r4
      00035E FF               [12] 1349 	mov	r7,a
      00035F 8D 02            [24] 1350 	mov	ar2,r5
      000361 8E 82            [24] 1351 	mov	dpl,r6
      000363 8F 83            [24] 1352 	mov	dph,r7
      000365 8A F0            [24] 1353 	mov	b,r2
      000367 E4               [12] 1354 	clr	a
      000368 12r00r00         [24] 1355 	lcall	__gptrput
                                   1356 ;	lcd.c:308: }
      00036B D2*01            [12] 1357 	setb	_handler_wr_str_lcd_sloc0_1_0
      00036D 10 AF 02         [24] 1358 	jbc	ea,00126$
      000370 C2*01            [12] 1359 	clr	_handler_wr_str_lcd_sloc0_1_0
      000372                       1360 00126$:
                                   1361 ;	lcd.c:307: lcdputstr(string);  // write the string to the LCD
      000372 90r00r00         [24] 1362 	mov	dptr,#_string
      000375 E0               [24] 1363 	movx	a,@dptr
      000376 FD               [12] 1364 	mov	r5,a
      000377 A3               [24] 1365 	inc	dptr
      000378 E0               [24] 1366 	movx	a,@dptr
      000379 FE               [12] 1367 	mov	r6,a
      00037A A3               [24] 1368 	inc	dptr
      00037B E0               [24] 1369 	movx	a,@dptr
      00037C FF               [12] 1370 	mov	r7,a
      00037D 8D 82            [24] 1371 	mov	dpl,r5
      00037F 8E 83            [24] 1372 	mov	dph,r6
      000381 8F F0            [24] 1373 	mov	b,r7
      000383 12r02r18         [24] 1374 	lcall	_lcdputstr
      000386 A2*01            [12] 1375 	mov	c,_handler_wr_str_lcd_sloc0_1_0
      000388 92 AF            [24] 1376 	mov	ea,c
                                   1377 ;	lcd.c:309: printf_tiny("Entered String = %s\n\r",string); // print the entered string
      00038A 90r00r00         [24] 1378 	mov	dptr,#_string
      00038D E0               [24] 1379 	movx	a,@dptr
      00038E C0 E0            [24] 1380 	push	acc
      000390 A3               [24] 1381 	inc	dptr
      000391 E0               [24] 1382 	movx	a,@dptr
      000392 C0 E0            [24] 1383 	push	acc
      000394 A3               [24] 1384 	inc	dptr
      000395 E0               [24] 1385 	movx	a,@dptr
      000396 C0 E0            [24] 1386 	push	acc
      000398 74r8F            [12] 1387 	mov	a,#___str_6
      00039A C0 E0            [24] 1388 	push	acc
      00039C 74s00            [12] 1389 	mov	a,#(___str_6 >> 8)
      00039E C0 E0            [24] 1390 	push	acc
      0003A0 12r00r00         [24] 1391 	lcall	_printf_tiny
      0003A3 E5 81            [12] 1392 	mov	a,sp
      0003A5 24 FB            [12] 1393 	add	a,#0xfb
      0003A7 F5 81            [12] 1394 	mov	sp,a
                                   1395 ;	lcd.c:310: printf_tiny("\n\r");
      0003A9 74r63            [12] 1396 	mov	a,#___str_4
      0003AB C0 E0            [24] 1397 	push	acc
      0003AD 74s00            [12] 1398 	mov	a,#(___str_4 >> 8)
      0003AF C0 E0            [24] 1399 	push	acc
      0003B1 12r00r00         [24] 1400 	lcall	_printf_tiny
      0003B4 15 81            [12] 1401 	dec	sp
      0003B6 15 81            [12] 1402 	dec	sp
                                   1403 ;	lcd.c:311: }
      0003B8 22               [24] 1404 	ret
                                   1405 ;------------------------------------------------------------
                                   1406 ;Allocation info for local variables in function 'handler_lcdgotoxy'
                                   1407 ;------------------------------------------------------------
                                   1408 ;x_coordinate_ch           Allocated with name '_handler_lcdgotoxy_x_coordinate_ch_65536_133'
                                   1409 ;y_coordinate_ch           Allocated with name '_handler_lcdgotoxy_y_coordinate_ch_65537_134'
                                   1410 ;------------------------------------------------------------
                                   1411 ;	lcd.c:314: void handler_lcdgotoxy(void)
                                   1412 ;	-----------------------------------------
                                   1413 ;	 function handler_lcdgotoxy
                                   1414 ;	-----------------------------------------
      0003B9                       1415 _handler_lcdgotoxy:
                                   1416 ;	lcd.c:318: printf_tiny("\033[1;33m\n\rEnter X-Co-ordinate to put on LCD !!\r\n");
      0003B9 74rA5            [12] 1417 	mov	a,#___str_7
      0003BB C0 E0            [24] 1418 	push	acc
      0003BD 74s00            [12] 1419 	mov	a,#(___str_7 >> 8)
      0003BF C0 E0            [24] 1420 	push	acc
      0003C1 12r00r00         [24] 1421 	lcall	_printf_tiny
      0003C4 15 81            [12] 1422 	dec	sp
      0003C6 15 81            [12] 1423 	dec	sp
                                   1424 ;	lcd.c:319: x_coordinate_ch  = toupper(getchar());
      0003C8 12r00r00         [24] 1425 	lcall	_getchar
      0003CB 12r00r00         [24] 1426 	lcall	_toupper
      0003CE AE 82            [24] 1427 	mov	r6,dpl
                                   1428 ;	lcd.c:322: printf_tiny("X-Cordinate = %c\n\r",x_coordinate_ch);
      0003D0 8E 05            [24] 1429 	mov	ar5,r6
      0003D2 7F 00            [12] 1430 	mov	r7,#0x00
      0003D4 C0 06            [24] 1431 	push	ar6
      0003D6 C0 05            [24] 1432 	push	ar5
      0003D8 C0 07            [24] 1433 	push	ar7
      0003DA 74rD5            [12] 1434 	mov	a,#___str_8
      0003DC C0 E0            [24] 1435 	push	acc
      0003DE 74s00            [12] 1436 	mov	a,#(___str_8 >> 8)
      0003E0 C0 E0            [24] 1437 	push	acc
      0003E2 12r00r00         [24] 1438 	lcall	_printf_tiny
      0003E5 E5 81            [12] 1439 	mov	a,sp
      0003E7 24 FC            [12] 1440 	add	a,#0xfc
      0003E9 F5 81            [12] 1441 	mov	sp,a
                                   1442 ;	lcd.c:325: printf_tiny("\033[1;33m\n\rEnter Y-Co-ordinate to put on LCD !!\r\n");
      0003EB 74rE8            [12] 1443 	mov	a,#___str_9
      0003ED C0 E0            [24] 1444 	push	acc
      0003EF 74s00            [12] 1445 	mov	a,#(___str_9 >> 8)
      0003F1 C0 E0            [24] 1446 	push	acc
      0003F3 12r00r00         [24] 1447 	lcall	_printf_tiny
      0003F6 15 81            [12] 1448 	dec	sp
      0003F8 15 81            [12] 1449 	dec	sp
                                   1450 ;	lcd.c:326: char y_coordinate_ch  = toupper(getchar());
      0003FA 12r00r00         [24] 1451 	lcall	_getchar
      0003FD 12r00r00         [24] 1452 	lcall	_toupper
      000400 AD 82            [24] 1453 	mov	r5,dpl
                                   1454 ;	lcd.c:329: printf_tiny("Y-Cordinate = %c\n\r",y_coordinate_ch);
      000402 8D 04            [24] 1455 	mov	ar4,r5
      000404 7F 00            [12] 1456 	mov	r7,#0x00
      000406 C0 05            [24] 1457 	push	ar5
      000408 C0 04            [24] 1458 	push	ar4
      00040A C0 07            [24] 1459 	push	ar7
      00040C 74r18            [12] 1460 	mov	a,#___str_10
      00040E C0 E0            [24] 1461 	push	acc
      000410 74s01            [12] 1462 	mov	a,#(___str_10 >> 8)
      000412 C0 E0            [24] 1463 	push	acc
      000414 12r00r00         [24] 1464 	lcall	_printf_tiny
      000417 E5 81            [12] 1465 	mov	a,sp
      000419 24 FC            [12] 1466 	add	a,#0xfc
      00041B F5 81            [12] 1467 	mov	sp,a
      00041D D0 05            [24] 1468 	pop	ar5
      00041F D0 06            [24] 1469 	pop	ar6
                                   1470 ;	lcd.c:332: if (x_coordinate_ch >= '0' && x_coordinate_ch <= '3'){
      000421 BE 30 00         [24] 1471 	cjne	r6,#0x30,00119$
      000424                       1472 00119$:
      000424 40 05            [24] 1473 	jc	00106$
      000426 EE               [12] 1474 	mov	a,r6
      000427 24 CC            [12] 1475 	add	a,#0xff - 0x33
      000429 50 1A            [24] 1476 	jnc	00107$
      00042B                       1477 00106$:
                                   1478 ;	lcd.c:334: } else if (y_coordinate_ch >= '0' && y_coordinate_ch <= 'F') {
      00042B BD 30 00         [24] 1479 	cjne	r5,#0x30,00122$
      00042E                       1480 00122$:
      00042E 40 05            [24] 1481 	jc	00102$
      000430 ED               [12] 1482 	mov	a,r5
      000431 24 B9            [12] 1483 	add	a,#0xff - 0x46
      000433 50 10            [24] 1484 	jnc	00107$
      000435                       1485 00102$:
                                   1486 ;	lcd.c:337: printf_tiny("\033[1;31mInvalid coordinate!!\n\r");
      000435 74r2B            [12] 1487 	mov	a,#___str_11
      000437 C0 E0            [24] 1488 	push	acc
      000439 74s01            [12] 1489 	mov	a,#(___str_11 >> 8)
      00043B C0 E0            [24] 1490 	push	acc
      00043D 12r00r00         [24] 1491 	lcall	_printf_tiny
      000440 15 81            [12] 1492 	dec	sp
      000442 15 81            [12] 1493 	dec	sp
                                   1494 ;	lcd.c:338: return;
      000444 22               [24] 1495 	ret
      000445                       1496 00107$:
                                   1497 ;	lcd.c:344: }
      000445 D2*02            [12] 1498 	setb	_handler_lcdgotoxy_sloc0_1_0
      000447 10 AF 02         [24] 1499 	jbc	ea,00125$
      00044A C2*02            [12] 1500 	clr	_handler_lcdgotoxy_sloc0_1_0
      00044C                       1501 00125$:
                                   1502 ;	lcd.c:343: lcdgotoxy(x_coordinate_ch, y_coordinate_ch);
      00044C 90r00r06         [24] 1503 	mov	dptr,#_lcdgotoxy_PARM_2
      00044F ED               [12] 1504 	mov	a,r5
      000450 F0               [24] 1505 	movx	@dptr,a
      000451 8E 82            [24] 1506 	mov	dpl,r6
      000453 12r00rFC         [24] 1507 	lcall	_lcdgotoxy
      000456 A2*02            [12] 1508 	mov	c,_handler_lcdgotoxy_sloc0_1_0
      000458 92 AF            [24] 1509 	mov	ea,c
                                   1510 ;	lcd.c:347: printf_tiny("\033[1;33m\n\rCursor Movement Completed!!\r\n");
      00045A 74r49            [12] 1511 	mov	a,#___str_12
      00045C C0 E0            [24] 1512 	push	acc
      00045E 74s01            [12] 1513 	mov	a,#(___str_12 >> 8)
      000460 C0 E0            [24] 1514 	push	acc
      000462 12r00r00         [24] 1515 	lcall	_printf_tiny
      000465 15 81            [12] 1516 	dec	sp
      000467 15 81            [12] 1517 	dec	sp
                                   1518 ;	lcd.c:348: }
      000469 22               [24] 1519 	ret
                                   1520 ;------------------------------------------------------------
                                   1521 ;Allocation info for local variables in function 'handler_lcdgotoaddress'
                                   1522 ;------------------------------------------------------------
                                   1523 ;str                       Allocated with name '_handler_lcdgotoaddress_str_65536_140'
                                   1524 ;i                         Allocated with name '_handler_lcdgotoaddress_i_65537_141'
                                   1525 ;c                         Allocated with name '_handler_lcdgotoaddress_c_65537_141'
                                   1526 ;num                       Allocated with name '_handler_lcdgotoaddress_num_65538_143'
                                   1527 ;------------------------------------------------------------
                                   1528 ;	lcd.c:352: void handler_lcdgotoaddress(void)
                                   1529 ;	-----------------------------------------
                                   1530 ;	 function handler_lcdgotoaddress
                                   1531 ;	-----------------------------------------
      00046A                       1532 _handler_lcdgotoaddress:
                                   1533 ;	lcd.c:355: printf_tiny("\033[1;33m\n\rEnter address to put onto the LCD !!\r\n");
      00046A 74r70            [12] 1534 	mov	a,#___str_13
      00046C C0 E0            [24] 1535 	push	acc
      00046E 74s01            [12] 1536 	mov	a,#(___str_13 >> 8)
      000470 C0 E0            [24] 1537 	push	acc
      000472 12r00r00         [24] 1538 	lcall	_printf_tiny
      000475 15 81            [12] 1539 	dec	sp
      000477 15 81            [12] 1540 	dec	sp
                                   1541 ;	lcd.c:359: char c = getchar();
      000479 12r00r00         [24] 1542 	lcall	_getchar
      00047C AE 82            [24] 1543 	mov	r6,dpl
      00047E 90r00r41         [24] 1544 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      000481 EE               [12] 1545 	mov	a,r6
      000482 F0               [24] 1546 	movx	@dptr,a
                                   1547 ;	lcd.c:360: while (c != '\r' && i < 49) { // Read characters until enter is pressed or limit is reached
      000483 7E 00            [12] 1548 	mov	r6,#0x00
      000485 7F 00            [12] 1549 	mov	r7,#0x00
      000487                       1550 00102$:
      000487 90r00r41         [24] 1551 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      00048A E0               [24] 1552 	movx	a,@dptr
      00048B FD               [12] 1553 	mov	r5,a
      00048C BD 0D 02         [24] 1554 	cjne	r5,#0x0d,00120$
      00048F 80 32            [24] 1555 	sjmp	00104$
      000491                       1556 00120$:
      000491 C3               [12] 1557 	clr	c
      000492 EE               [12] 1558 	mov	a,r6
      000493 94 31            [12] 1559 	subb	a,#0x31
      000495 EF               [12] 1560 	mov	a,r7
      000496 64 80            [12] 1561 	xrl	a,#0x80
      000498 94 80            [12] 1562 	subb	a,#0x80
      00049A 50 27            [24] 1563 	jnc	00104$
                                   1564 ;	lcd.c:361: str[i++] = c;
      00049C EE               [12] 1565 	mov	a,r6
      00049D 24r0F            [12] 1566 	add	a,#_handler_lcdgotoaddress_str_65536_140
      00049F F5 82            [12] 1567 	mov	dpl,a
      0004A1 EF               [12] 1568 	mov	a,r7
      0004A2 34s00            [12] 1569 	addc	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004A4 F5 83            [12] 1570 	mov	dph,a
      0004A6 0E               [12] 1571 	inc	r6
      0004A7 BE 00 01         [24] 1572 	cjne	r6,#0x00,00122$
      0004AA 0F               [12] 1573 	inc	r7
      0004AB                       1574 00122$:
      0004AB ED               [12] 1575 	mov	a,r5
      0004AC F0               [24] 1576 	movx	@dptr,a
                                   1577 ;	lcd.c:362: c = getchar();
      0004AD C0 07            [24] 1578 	push	ar7
      0004AF C0 06            [24] 1579 	push	ar6
      0004B1 12r00r00         [24] 1580 	lcall	_getchar
      0004B4 AC 82            [24] 1581 	mov	r4,dpl
      0004B6 AD 83            [24] 1582 	mov	r5,dph
      0004B8 D0 06            [24] 1583 	pop	ar6
      0004BA D0 07            [24] 1584 	pop	ar7
      0004BC 90r00r41         [24] 1585 	mov	dptr,#_handler_lcdgotoaddress_c_65537_141
      0004BF EC               [12] 1586 	mov	a,r4
      0004C0 F0               [24] 1587 	movx	@dptr,a
      0004C1 80 C4            [24] 1588 	sjmp	00102$
      0004C3                       1589 00104$:
                                   1590 ;	lcd.c:364: str[i] = '\0';
      0004C3 EE               [12] 1591 	mov	a,r6
      0004C4 24r0F            [12] 1592 	add	a,#_handler_lcdgotoaddress_str_65536_140
      0004C6 F5 82            [12] 1593 	mov	dpl,a
      0004C8 EF               [12] 1594 	mov	a,r7
      0004C9 34s00            [12] 1595 	addc	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004CB F5 83            [12] 1596 	mov	dph,a
      0004CD E4               [12] 1597 	clr	a
      0004CE F0               [24] 1598 	movx	@dptr,a
                                   1599 ;	lcd.c:367: printf("Address Entered = %s\n\r",str);
      0004CF 74r0F            [12] 1600 	mov	a,#_handler_lcdgotoaddress_str_65536_140
      0004D1 C0 E0            [24] 1601 	push	acc
      0004D3 74s00            [12] 1602 	mov	a,#(_handler_lcdgotoaddress_str_65536_140 >> 8)
      0004D5 C0 E0            [24] 1603 	push	acc
      0004D7 E4               [12] 1604 	clr	a
      0004D8 C0 E0            [24] 1605 	push	acc
      0004DA 74rA0            [12] 1606 	mov	a,#___str_14
      0004DC C0 E0            [24] 1607 	push	acc
      0004DE 74s01            [12] 1608 	mov	a,#(___str_14 >> 8)
      0004E0 C0 E0            [24] 1609 	push	acc
      0004E2 74 80            [12] 1610 	mov	a,#0x80
      0004E4 C0 E0            [24] 1611 	push	acc
      0004E6 12r00r00         [24] 1612 	lcall	_printf
      0004E9 E5 81            [12] 1613 	mov	a,sp
      0004EB 24 FA            [12] 1614 	add	a,#0xfa
      0004ED F5 81            [12] 1615 	mov	sp,a
                                   1616 ;	lcd.c:370: long int num = strtol(str, NULL, 16);
      0004EF 90r00r00         [24] 1617 	mov	dptr,#_strtol_PARM_2
      0004F2 E4               [12] 1618 	clr	a
      0004F3 F0               [24] 1619 	movx	@dptr,a
      0004F4 A3               [24] 1620 	inc	dptr
      0004F5 F0               [24] 1621 	movx	@dptr,a
      0004F6 A3               [24] 1622 	inc	dptr
      0004F7 F0               [24] 1623 	movx	@dptr,a
      0004F8 90r00r00         [24] 1624 	mov	dptr,#_strtol_PARM_3
      0004FB 74 10            [12] 1625 	mov	a,#0x10
      0004FD F0               [24] 1626 	movx	@dptr,a
      0004FE E4               [12] 1627 	clr	a
      0004FF A3               [24] 1628 	inc	dptr
      000500 F0               [24] 1629 	movx	@dptr,a
      000501 90r00r0F         [24] 1630 	mov	dptr,#_handler_lcdgotoaddress_str_65536_140
      000504 75 F0 00         [24] 1631 	mov	b,#0x00
      000507 12r00r00         [24] 1632 	lcall	_strtol
      00050A AC 82            [24] 1633 	mov	r4,dpl
                                   1634 ;	lcd.c:376: }
      00050C D2*03            [12] 1635 	setb	_handler_lcdgotoaddress_sloc0_1_0
      00050E 10 AF 02         [24] 1636 	jbc	ea,00123$
      000511 C2*03            [12] 1637 	clr	_handler_lcdgotoaddress_sloc0_1_0
      000513                       1638 00123$:
                                   1639 ;	lcd.c:375: lcdgotoaddr((char)num);
      000513 8C 82            [24] 1640 	mov	dpl,r4
      000515 12r00rDF         [24] 1641 	lcall	_lcdgotoaddr
      000518 A2*03            [12] 1642 	mov	c,_handler_lcdgotoaddress_sloc0_1_0
      00051A 92 AF            [24] 1643 	mov	ea,c
                                   1644 ;	lcd.c:377: return;
                                   1645 ;	lcd.c:378: }
      00051C 22               [24] 1646 	ret
                                   1647 ;------------------------------------------------------------
                                   1648 ;Allocation info for local variables in function 'handler_stop_time'
                                   1649 ;------------------------------------------------------------
                                   1650 ;	lcd.c:381: void handler_stop_time(void)
                                   1651 ;	-----------------------------------------
                                   1652 ;	 function handler_stop_time
                                   1653 ;	-----------------------------------------
      00051D                       1654 _handler_stop_time:
                                   1655 ;	lcd.c:383: printf_tiny("\033[1;33m\n\rTime Paused !!\r\n");
      00051D 74rB7            [12] 1656 	mov	a,#___str_15
      00051F C0 E0            [24] 1657 	push	acc
      000521 74s01            [12] 1658 	mov	a,#(___str_15 >> 8)
      000523 C0 E0            [24] 1659 	push	acc
      000525 12r00r00         [24] 1660 	lcall	_printf_tiny
      000528 15 81            [12] 1661 	dec	sp
      00052A 15 81            [12] 1662 	dec	sp
                                   1663 ;	lcd.c:386: TCON &=~(0x10);
      00052C 53 88 EF         [24] 1664 	anl	_TCON,#0xef
                                   1665 ;	lcd.c:387: }
      00052F 22               [24] 1666 	ret
                                   1667 ;------------------------------------------------------------
                                   1668 ;Allocation info for local variables in function 'handler_resume_time'
                                   1669 ;------------------------------------------------------------
                                   1670 ;	lcd.c:390: void handler_resume_time(void)
                                   1671 ;	-----------------------------------------
                                   1672 ;	 function handler_resume_time
                                   1673 ;	-----------------------------------------
      000530                       1674 _handler_resume_time:
                                   1675 ;	lcd.c:393: printf_tiny("\033[1;33m\n\rTime Resumed !!\r\n");
      000530 74rD1            [12] 1676 	mov	a,#___str_16
      000532 C0 E0            [24] 1677 	push	acc
      000534 74s01            [12] 1678 	mov	a,#(___str_16 >> 8)
      000536 C0 E0            [24] 1679 	push	acc
      000538 12r00r00         [24] 1680 	lcall	_printf_tiny
      00053B 15 81            [12] 1681 	dec	sp
      00053D 15 81            [12] 1682 	dec	sp
                                   1683 ;	lcd.c:396: TCON |=0x10;
      00053F 43 88 10         [24] 1684 	orl	_TCON,#0x10
                                   1685 ;	lcd.c:397: }
      000542 22               [24] 1686 	ret
                                   1687 ;------------------------------------------------------------
                                   1688 ;Allocation info for local variables in function 'handler_reset_time'
                                   1689 ;------------------------------------------------------------
                                   1690 ;	lcd.c:400: void handler_reset_time(void)
                                   1691 ;	-----------------------------------------
                                   1692 ;	 function handler_reset_time
                                   1693 ;	-----------------------------------------
      000543                       1694 _handler_reset_time:
                                   1695 ;	lcd.c:403: printf_tiny("\033[1;33m\n\rTime Reset !!\r\n");
      000543 74rEC            [12] 1696 	mov	a,#___str_17
      000545 C0 E0            [24] 1697 	push	acc
      000547 74s01            [12] 1698 	mov	a,#(___str_17 >> 8)
      000549 C0 E0            [24] 1699 	push	acc
      00054B 12r00r00         [24] 1700 	lcall	_printf_tiny
      00054E 15 81            [12] 1701 	dec	sp
      000550 15 81            [12] 1702 	dec	sp
                                   1703 ;	lcd.c:406: tenth_of_second     = '0';
      000552 90r00r00         [24] 1704 	mov	dptr,#_tenth_of_second
      000555 74 30            [12] 1705 	mov	a,#0x30
      000557 F0               [24] 1706 	movx	@dptr,a
                                   1707 ;	lcd.c:407: seconds_ones_digit  = '0';
      000558 90r00r00         [24] 1708 	mov	dptr,#_seconds_ones_digit
      00055B F0               [24] 1709 	movx	@dptr,a
                                   1710 ;	lcd.c:408: seconds_tens_digit  = '0';
      00055C 90r00r00         [24] 1711 	mov	dptr,#_seconds_tens_digit
      00055F F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	lcd.c:409: minutes_ones_digit  = '0';
      000560 90r00r00         [24] 1714 	mov	dptr,#_minutes_ones_digit
      000563 F0               [24] 1715 	movx	@dptr,a
                                   1716 ;	lcd.c:410: minutes_tens_digit  = '0';
      000564 90r00r00         [24] 1717 	mov	dptr,#_minutes_tens_digit
      000567 F0               [24] 1718 	movx	@dptr,a
                                   1719 ;	lcd.c:411: }
      000568 22               [24] 1720 	ret
                                   1721 ;------------------------------------------------------------
                                   1722 ;Allocation info for local variables in function 'read_lcd_address'
                                   1723 ;------------------------------------------------------------
                                   1724 ;address                   Allocated with name '_read_lcd_address_PARM_2'
                                   1725 ;is_ddram                  Allocated with name '_read_lcd_address_is_ddram_65536_151'
                                   1726 ;------------------------------------------------------------
                                   1727 ;	lcd.c:414: uint8_t read_lcd_address(uint8_t is_ddram, uint8_t address) {
                                   1728 ;	-----------------------------------------
                                   1729 ;	 function read_lcd_address
                                   1730 ;	-----------------------------------------
      000569                       1731 _read_lcd_address:
      000569 E5 82            [12] 1732 	mov	a,dpl
      00056B 90r00r43         [24] 1733 	mov	dptr,#_read_lcd_address_is_ddram_65536_151
      00056E F0               [24] 1734 	movx	@dptr,a
                                   1735 ;	lcd.c:416: if (is_ddram == 1) {
      00056F E0               [24] 1736 	movx	a,@dptr
      000570 FF               [12] 1737 	mov	r7,a
      000571 BF 01 0B         [24] 1738 	cjne	r7,#0x01,00102$
                                   1739 ;	lcd.c:417: lcdgotoaddr(address);
      000574 90r00r42         [24] 1740 	mov	dptr,#_read_lcd_address_PARM_2
      000577 E0               [24] 1741 	movx	a,@dptr
      000578 F5 82            [12] 1742 	mov	dpl,a
      00057A 12r00rDF         [24] 1743 	lcall	_lcdgotoaddr
      00057D 80 0F            [24] 1744 	sjmp	00103$
      00057F                       1745 00102$:
                                   1746 ;	lcd.c:419: LCD_RS = 0;
                                   1747 ;	assignBit
      00057F C2 92            [12] 1748 	clr	_P1_2
                                   1749 ;	lcd.c:420: LCD_RW = 0;
                                   1750 ;	assignBit
      000581 C2 93            [12] 1751 	clr	_P1_3
                                   1752 ;	lcd.c:421: lcd_ptr = address;
      000583 90r00r42         [24] 1753 	mov	dptr,#_read_lcd_address_PARM_2
      000586 E0               [24] 1754 	movx	a,@dptr
      000587 90 F0 00         [24] 1755 	mov	dptr,#_lcd_ptr
      00058A F0               [24] 1756 	movx	@dptr,a
                                   1757 ;	lcd.c:422: lcdbusywait();
      00058B 12r00r40         [24] 1758 	lcall	_lcdbusywait
      00058E                       1759 00103$:
                                   1760 ;	lcd.c:426: LCD_RS = 1;
                                   1761 ;	assignBit
      00058E D2 92            [12] 1762 	setb	_P1_2
                                   1763 ;	lcd.c:427: LCD_RW = 1;
                                   1764 ;	assignBit
      000590 D2 93            [12] 1765 	setb	_P1_3
                                   1766 ;	lcd.c:430: return lcd_ptr;
      000592 90 F0 00         [24] 1767 	mov	dptr,#_lcd_ptr
      000595 E0               [24] 1768 	movx	a,@dptr
                                   1769 ;	lcd.c:431: }
      000596 F5 82            [12] 1770 	mov	dpl,a
      000598 22               [24] 1771 	ret
                                   1772 ;------------------------------------------------------------
                                   1773 ;Allocation info for local variables in function 'handler_lcd_hexdump'
                                   1774 ;------------------------------------------------------------
                                   1775 ;k                         Allocated with name '_handler_lcd_hexdump_k_196608_158'
                                   1776 ;k                         Allocated with name '_handler_lcd_hexdump_k_196608_161'
                                   1777 ;------------------------------------------------------------
                                   1778 ;	lcd.c:432: void handler_lcd_hexdump(void)
                                   1779 ;	-----------------------------------------
                                   1780 ;	 function handler_lcd_hexdump
                                   1781 ;	-----------------------------------------
      000599                       1782 _handler_lcd_hexdump:
                                   1783 ;	lcd.c:460: }
      000599 D2*04            [12] 1784 	setb	_handler_lcd_hexdump_sloc0_1_0
      00059B 10 AF 02         [24] 1785 	jbc	ea,00141$
      00059E C2*04            [12] 1786 	clr	_handler_lcd_hexdump_sloc0_1_0
      0005A0                       1787 00141$:
                                   1788 ;	lcd.c:435: printf("\033[1;34m");                           // Set terminal color to blue
      0005A0 74r05            [12] 1789 	mov	a,#___str_18
      0005A2 C0 E0            [24] 1790 	push	acc
      0005A4 74s02            [12] 1791 	mov	a,#(___str_18 >> 8)
      0005A6 C0 E0            [24] 1792 	push	acc
      0005A8 74 80            [12] 1793 	mov	a,#0x80
      0005AA C0 E0            [24] 1794 	push	acc
      0005AC 12r00r00         [24] 1795 	lcall	_printf
      0005AF 15 81            [12] 1796 	dec	sp
      0005B1 15 81            [12] 1797 	dec	sp
      0005B3 15 81            [12] 1798 	dec	sp
                                   1799 ;	lcd.c:436: save_cursor_address=get_cursor_address();       // Save the current cursor address
      0005B5 12r00rD2         [24] 1800 	lcall	_get_cursor_address
      0005B8 E5 82            [12] 1801 	mov	a,dpl
      0005BA 90r00r00         [24] 1802 	mov	dptr,#_save_cursor_address
      0005BD F0               [24] 1803 	movx	@dptr,a
                                   1804 ;	lcd.c:437: printf("\n\rPrinting Hexdump of DDRAM\n\r");
      0005BE 74r0D            [12] 1805 	mov	a,#___str_19
      0005C0 C0 E0            [24] 1806 	push	acc
      0005C2 74s02            [12] 1807 	mov	a,#(___str_19 >> 8)
      0005C4 C0 E0            [24] 1808 	push	acc
      0005C6 74 80            [12] 1809 	mov	a,#0x80
      0005C8 C0 E0            [24] 1810 	push	acc
      0005CA 12r00r00         [24] 1811 	lcall	_printf
      0005CD 15 81            [12] 1812 	dec	sp
      0005CF 15 81            [12] 1813 	dec	sp
      0005D1 15 81            [12] 1814 	dec	sp
                                   1815 ;	lcd.c:440: for(uint16_t k=0x00;k<=0x5F;k++){
      0005D3 7E 00            [12] 1816 	mov	r6,#0x00
      0005D5 7F 00            [12] 1817 	mov	r7,#0x00
      0005D7                       1818 00108$:
      0005D7 8E 04            [24] 1819 	mov	ar4,r6
      0005D9 8F 05            [24] 1820 	mov	ar5,r7
      0005DB C3               [12] 1821 	clr	c
      0005DC 74 5F            [12] 1822 	mov	a,#0x5f
      0005DE 9C               [12] 1823 	subb	a,r4
      0005DF E4               [12] 1824 	clr	a
      0005E0 9D               [12] 1825 	subb	a,r5
      0005E1 40 5D            [24] 1826 	jc	00103$
                                   1827 ;	lcd.c:441: if(k%16 == 0){                              // Print new line and address every 16 bytes
      0005E3 EC               [12] 1828 	mov	a,r4
      0005E4 54 0F            [12] 1829 	anl	a,#0x0f
      0005E6 70 21            [24] 1830 	jnz	00102$
                                   1831 ;	lcd.c:442: printf("\n\r0x%02x: ",k);
      0005E8 C0 07            [24] 1832 	push	ar7
      0005EA C0 06            [24] 1833 	push	ar6
      0005EC C0 06            [24] 1834 	push	ar6
      0005EE C0 07            [24] 1835 	push	ar7
      0005F0 74r2B            [12] 1836 	mov	a,#___str_20
      0005F2 C0 E0            [24] 1837 	push	acc
      0005F4 74s02            [12] 1838 	mov	a,#(___str_20 >> 8)
      0005F6 C0 E0            [24] 1839 	push	acc
      0005F8 74 80            [12] 1840 	mov	a,#0x80
      0005FA C0 E0            [24] 1841 	push	acc
      0005FC 12r00r00         [24] 1842 	lcall	_printf
      0005FF E5 81            [12] 1843 	mov	a,sp
      000601 24 FB            [12] 1844 	add	a,#0xfb
      000603 F5 81            [12] 1845 	mov	sp,a
      000605 D0 06            [24] 1846 	pop	ar6
      000607 D0 07            [24] 1847 	pop	ar7
      000609                       1848 00102$:
                                   1849 ;	lcd.c:444: printf("0x%02x ",read_lcd_address(1,k));    // Read and print the value at the current address
      000609 90r00r42         [24] 1850 	mov	dptr,#_read_lcd_address_PARM_2
      00060C EE               [12] 1851 	mov	a,r6
      00060D F0               [24] 1852 	movx	@dptr,a
      00060E 75 82 01         [24] 1853 	mov	dpl,#0x01
      000611 C0 07            [24] 1854 	push	ar7
      000613 C0 06            [24] 1855 	push	ar6
      000615 12r05r69         [24] 1856 	lcall	_read_lcd_address
      000618 AD 82            [24] 1857 	mov	r5,dpl
      00061A 7C 00            [12] 1858 	mov	r4,#0x00
      00061C C0 05            [24] 1859 	push	ar5
      00061E C0 04            [24] 1860 	push	ar4
      000620 74r36            [12] 1861 	mov	a,#___str_21
      000622 C0 E0            [24] 1862 	push	acc
      000624 74s02            [12] 1863 	mov	a,#(___str_21 >> 8)
      000626 C0 E0            [24] 1864 	push	acc
      000628 74 80            [12] 1865 	mov	a,#0x80
      00062A C0 E0            [24] 1866 	push	acc
      00062C 12r00r00         [24] 1867 	lcall	_printf
      00062F E5 81            [12] 1868 	mov	a,sp
      000631 24 FB            [12] 1869 	add	a,#0xfb
      000633 F5 81            [12] 1870 	mov	sp,a
      000635 D0 06            [24] 1871 	pop	ar6
      000637 D0 07            [24] 1872 	pop	ar7
                                   1873 ;	lcd.c:440: for(uint16_t k=0x00;k<=0x5F;k++){
      000639 0E               [12] 1874 	inc	r6
      00063A BE 00 9A         [24] 1875 	cjne	r6,#0x00,00108$
      00063D 0F               [12] 1876 	inc	r7
      00063E 80 97            [24] 1877 	sjmp	00108$
      000640                       1878 00103$:
                                   1879 ;	lcd.c:447: printf("\n\r\n\rPrinting Hexdump of CGRAM\n\r");
      000640 74r3E            [12] 1880 	mov	a,#___str_22
      000642 C0 E0            [24] 1881 	push	acc
      000644 74s02            [12] 1882 	mov	a,#(___str_22 >> 8)
      000646 C0 E0            [24] 1883 	push	acc
      000648 74 80            [12] 1884 	mov	a,#0x80
      00064A C0 E0            [24] 1885 	push	acc
      00064C 12r00r00         [24] 1886 	lcall	_printf
      00064F 15 81            [12] 1887 	dec	sp
      000651 15 81            [12] 1888 	dec	sp
      000653 15 81            [12] 1889 	dec	sp
                                   1890 ;	lcd.c:450: for(uint16_t k=0x40;k<=0x7F;k++){
      000655 7E 40            [12] 1891 	mov	r6,#0x40
      000657 7F 00            [12] 1892 	mov	r7,#0x00
      000659                       1893 00111$:
      000659 8E 04            [24] 1894 	mov	ar4,r6
      00065B 8F 05            [24] 1895 	mov	ar5,r7
      00065D C3               [12] 1896 	clr	c
      00065E 74 7F            [12] 1897 	mov	a,#0x7f
      000660 9C               [12] 1898 	subb	a,r4
      000661 E4               [12] 1899 	clr	a
      000662 9D               [12] 1900 	subb	a,r5
      000663 40 5D            [24] 1901 	jc	00106$
                                   1902 ;	lcd.c:451: if(k%16 == 0){                              // Print new line and address every 16 bytes
      000665 EC               [12] 1903 	mov	a,r4
      000666 54 0F            [12] 1904 	anl	a,#0x0f
      000668 70 21            [24] 1905 	jnz	00105$
                                   1906 ;	lcd.c:452: printf("\n\r0x%02x: ",k);
      00066A C0 07            [24] 1907 	push	ar7
      00066C C0 06            [24] 1908 	push	ar6
      00066E C0 06            [24] 1909 	push	ar6
      000670 C0 07            [24] 1910 	push	ar7
      000672 74r2B            [12] 1911 	mov	a,#___str_20
      000674 C0 E0            [24] 1912 	push	acc
      000676 74s02            [12] 1913 	mov	a,#(___str_20 >> 8)
      000678 C0 E0            [24] 1914 	push	acc
      00067A 74 80            [12] 1915 	mov	a,#0x80
      00067C C0 E0            [24] 1916 	push	acc
      00067E 12r00r00         [24] 1917 	lcall	_printf
      000681 E5 81            [12] 1918 	mov	a,sp
      000683 24 FB            [12] 1919 	add	a,#0xfb
      000685 F5 81            [12] 1920 	mov	sp,a
      000687 D0 06            [24] 1921 	pop	ar6
      000689 D0 07            [24] 1922 	pop	ar7
      00068B                       1923 00105$:
                                   1924 ;	lcd.c:454: printf("0x%02x ",read_lcd_address(0,k));    // Read and print the value at the current address
      00068B 90r00r42         [24] 1925 	mov	dptr,#_read_lcd_address_PARM_2
      00068E EE               [12] 1926 	mov	a,r6
      00068F F0               [24] 1927 	movx	@dptr,a
      000690 75 82 00         [24] 1928 	mov	dpl,#0x00
      000693 C0 07            [24] 1929 	push	ar7
      000695 C0 06            [24] 1930 	push	ar6
      000697 12r05r69         [24] 1931 	lcall	_read_lcd_address
      00069A AD 82            [24] 1932 	mov	r5,dpl
      00069C 7C 00            [12] 1933 	mov	r4,#0x00
      00069E C0 05            [24] 1934 	push	ar5
      0006A0 C0 04            [24] 1935 	push	ar4
      0006A2 74r36            [12] 1936 	mov	a,#___str_21
      0006A4 C0 E0            [24] 1937 	push	acc
      0006A6 74s02            [12] 1938 	mov	a,#(___str_21 >> 8)
      0006A8 C0 E0            [24] 1939 	push	acc
      0006AA 74 80            [12] 1940 	mov	a,#0x80
      0006AC C0 E0            [24] 1941 	push	acc
      0006AE 12r00r00         [24] 1942 	lcall	_printf
      0006B1 E5 81            [12] 1943 	mov	a,sp
      0006B3 24 FB            [12] 1944 	add	a,#0xfb
      0006B5 F5 81            [12] 1945 	mov	sp,a
      0006B7 D0 06            [24] 1946 	pop	ar6
      0006B9 D0 07            [24] 1947 	pop	ar7
                                   1948 ;	lcd.c:450: for(uint16_t k=0x40;k<=0x7F;k++){
      0006BB 0E               [12] 1949 	inc	r6
      0006BC BE 00 9A         [24] 1950 	cjne	r6,#0x00,00111$
      0006BF 0F               [12] 1951 	inc	r7
      0006C0 80 97            [24] 1952 	sjmp	00111$
      0006C2                       1953 00106$:
                                   1954 ;	lcd.c:457: printf("\n\r");
      0006C2 74r63            [12] 1955 	mov	a,#___str_4
      0006C4 C0 E0            [24] 1956 	push	acc
      0006C6 74s00            [12] 1957 	mov	a,#(___str_4 >> 8)
      0006C8 C0 E0            [24] 1958 	push	acc
      0006CA 74 80            [12] 1959 	mov	a,#0x80
      0006CC C0 E0            [24] 1960 	push	acc
      0006CE 12r00r00         [24] 1961 	lcall	_printf
      0006D1 15 81            [12] 1962 	dec	sp
      0006D3 15 81            [12] 1963 	dec	sp
      0006D5 15 81            [12] 1964 	dec	sp
                                   1965 ;	lcd.c:458: lcdgotoaddr(save_cursor_address);               // Restore the original cursor position
      0006D7 90r00r00         [24] 1966 	mov	dptr,#_save_cursor_address
      0006DA E0               [24] 1967 	movx	a,@dptr
      0006DB F5 82            [12] 1968 	mov	dpl,a
      0006DD 12r00rDF         [24] 1969 	lcall	_lcdgotoaddr
                                   1970 ;	lcd.c:459: printf("\033[0m");                              // Reset terminal color to default
      0006E0 74r5E            [12] 1971 	mov	a,#___str_23
      0006E2 C0 E0            [24] 1972 	push	acc
      0006E4 74s02            [12] 1973 	mov	a,#(___str_23 >> 8)
      0006E6 C0 E0            [24] 1974 	push	acc
      0006E8 74 80            [12] 1975 	mov	a,#0x80
      0006EA C0 E0            [24] 1976 	push	acc
      0006EC 12r00r00         [24] 1977 	lcall	_printf
      0006EF 15 81            [12] 1978 	dec	sp
      0006F1 15 81            [12] 1979 	dec	sp
      0006F3 15 81            [12] 1980 	dec	sp
      0006F5 A2*04            [12] 1981 	mov	c,_handler_lcd_hexdump_sloc0_1_0
      0006F7 92 AF            [24] 1982 	mov	ea,c
                                   1983 ;	lcd.c:461: }
      0006F9 22               [24] 1984 	ret
                                   1985 ;------------------------------------------------------------
                                   1986 ;Allocation info for local variables in function 'get_hex_value'
                                   1987 ;------------------------------------------------------------
                                   1988 ;digit1                    Allocated with name '_get_hex_value_digit1_65536_165'
                                   1989 ;digit2                    Allocated with name '_get_hex_value_digit2_65536_165'
                                   1990 ;hex_value                 Allocated with name '_get_hex_value_hex_value_65536_165'
                                   1991 ;------------------------------------------------------------
                                   1992 ;	lcd.c:463: unsigned char get_hex_value(void) {
                                   1993 ;	-----------------------------------------
                                   1994 ;	 function get_hex_value
                                   1995 ;	-----------------------------------------
      0006FA                       1996 _get_hex_value:
                                   1997 ;	lcd.c:465: printf("\n\rEnter a hexadecimal value between (00 to 1F) or (40 to 58): ");
      0006FA 74r63            [12] 1998 	mov	a,#___str_24
      0006FC C0 E0            [24] 1999 	push	acc
      0006FE 74s02            [12] 2000 	mov	a,#(___str_24 >> 8)
      000700 C0 E0            [24] 2001 	push	acc
      000702 74 80            [12] 2002 	mov	a,#0x80
      000704 C0 E0            [24] 2003 	push	acc
      000706 12r00r00         [24] 2004 	lcall	_printf
      000709 15 81            [12] 2005 	dec	sp
      00070B 15 81            [12] 2006 	dec	sp
      00070D 15 81            [12] 2007 	dec	sp
                                   2008 ;	lcd.c:467: while (1) {                         //loop until a valid input is entered
      00070F                       2009 00116$:
                                   2010 ;	lcd.c:468: digit1 = putchar(getchar());    //get first digit from input and display it
      00070F 12r00r00         [24] 2011 	lcall	_getchar
      000712 12r00r00         [24] 2012 	lcall	_putchar
      000715 AE 82            [24] 2013 	mov	r6,dpl
                                   2014 ;	lcd.c:469: digit2 = putchar(getchar());    //get second digit from input and display it
      000717 C0 06            [24] 2015 	push	ar6
      000719 12r00r00         [24] 2016 	lcall	_getchar
      00071C 12r00r00         [24] 2017 	lcall	_putchar
      00071F AD 82            [24] 2018 	mov	r5,dpl
      000721 AF 83            [24] 2019 	mov	r7,dph
      000723 D0 06            [24] 2020 	pop	ar6
                                   2021 ;	lcd.c:472: if (digit1 >= '0' && digit1 <= '9' && digit2 >= '0' && digit2 <= '9') {
      000725 BE 30 00         [24] 2022 	cjne	r6,#0x30,00160$
      000728                       2023 00160$:
      000728 40 24            [24] 2024 	jc	00110$
      00072A EE               [12] 2025 	mov	a,r6
      00072B 24 C6            [12] 2026 	add	a,#0xff - 0x39
      00072D 40 1F            [24] 2027 	jc	00110$
      00072F BD 30 00         [24] 2028 	cjne	r5,#0x30,00163$
      000732                       2029 00163$:
      000732 40 1A            [24] 2030 	jc	00110$
      000734 ED               [12] 2031 	mov	a,r5
      000735 24 C6            [12] 2032 	add	a,#0xff - 0x39
      000737 40 15            [24] 2033 	jc	00110$
                                   2034 ;	lcd.c:473: hex_value = ((digit1 - '0') << 4) | (digit2 - '0'); //convert the digits to a hexadecimal value
      000739 8E 07            [24] 2035 	mov	ar7,r6
      00073B EF               [12] 2036 	mov	a,r7
      00073C 24 D0            [12] 2037 	add	a,#0xd0
      00073E C4               [12] 2038 	swap	a
      00073F 54 F0            [12] 2039 	anl	a,#0xf0
      000741 FF               [12] 2040 	mov	r7,a
      000742 8D 04            [24] 2041 	mov	ar4,r5
      000744 EC               [12] 2042 	mov	a,r4
      000745 24 D0            [12] 2043 	add	a,#0xd0
      000747 90r00r44         [24] 2044 	mov	dptr,#_get_hex_value_hex_value_65536_165
      00074A 4F               [12] 2045 	orl	a,r7
      00074B F0               [24] 2046 	movx	@dptr,a
                                   2047 ;	lcd.c:474: break; //break the loop
      00074C 80 5A            [24] 2048 	sjmp	00117$
      00074E                       2049 00110$:
                                   2050 ;	lcd.c:477: else if ((digit1 == '0' || digit1 == '1' || digit1 == '4' || digit1 == '5') && (digit2 >= 'A' && digit2 <= 'F')) {
      00074E BE 30 02         [24] 2051 	cjne	r6,#0x30,00166$
      000751 80 0D            [24] 2052 	sjmp	00108$
      000753                       2053 00166$:
      000753 BE 31 02         [24] 2054 	cjne	r6,#0x31,00167$
      000756 80 08            [24] 2055 	sjmp	00108$
      000758                       2056 00167$:
      000758 BE 34 02         [24] 2057 	cjne	r6,#0x34,00168$
      00075B 80 03            [24] 2058 	sjmp	00108$
      00075D                       2059 00168$:
      00075D BE 35 1B         [24] 2060 	cjne	r6,#0x35,00102$
      000760                       2061 00108$:
      000760 BD 41 00         [24] 2062 	cjne	r5,#0x41,00171$
      000763                       2063 00171$:
      000763 40 16            [24] 2064 	jc	00102$
      000765 ED               [12] 2065 	mov	a,r5
      000766 24 B9            [12] 2066 	add	a,#0xff - 0x46
      000768 40 11            [24] 2067 	jc	00102$
                                   2068 ;	lcd.c:478: hex_value = ((digit1 - '0') << 4) | (digit2 - '7'); //convert the digits to a hexadecimal value
      00076A EE               [12] 2069 	mov	a,r6
      00076B 24 D0            [12] 2070 	add	a,#0xd0
      00076D C4               [12] 2071 	swap	a
      00076E 54 F0            [12] 2072 	anl	a,#0xf0
      000770 FE               [12] 2073 	mov	r6,a
      000771 ED               [12] 2074 	mov	a,r5
      000772 24 C9            [12] 2075 	add	a,#0xc9
      000774 90r00r44         [24] 2076 	mov	dptr,#_get_hex_value_hex_value_65536_165
      000777 4E               [12] 2077 	orl	a,r6
      000778 F0               [24] 2078 	movx	@dptr,a
                                   2079 ;	lcd.c:479: break; //break the loop
      000779 80 2D            [24] 2080 	sjmp	00117$
      00077B                       2081 00102$:
                                   2082 ;	lcd.c:482: printf("\n\rInvalid input. ");      //display error message if input is invalid
      00077B 74rA2            [12] 2083 	mov	a,#___str_25
      00077D C0 E0            [24] 2084 	push	acc
      00077F 74s02            [12] 2085 	mov	a,#(___str_25 >> 8)
      000781 C0 E0            [24] 2086 	push	acc
      000783 74 80            [12] 2087 	mov	a,#0x80
      000785 C0 E0            [24] 2088 	push	acc
      000787 12r00r00         [24] 2089 	lcall	_printf
      00078A 15 81            [12] 2090 	dec	sp
      00078C 15 81            [12] 2091 	dec	sp
      00078E 15 81            [12] 2092 	dec	sp
                                   2093 ;	lcd.c:484: printf("Please enter a valid input: "); //prompt user to enter a valid input
      000790 74rB4            [12] 2094 	mov	a,#___str_26
      000792 C0 E0            [24] 2095 	push	acc
      000794 74s02            [12] 2096 	mov	a,#(___str_26 >> 8)
      000796 C0 E0            [24] 2097 	push	acc
      000798 74 80            [12] 2098 	mov	a,#0x80
      00079A C0 E0            [24] 2099 	push	acc
      00079C 12r00r00         [24] 2100 	lcall	_printf
      00079F 15 81            [12] 2101 	dec	sp
      0007A1 15 81            [12] 2102 	dec	sp
      0007A3 15 81            [12] 2103 	dec	sp
      0007A5 02r07r0F         [24] 2104 	ljmp	00116$
      0007A8                       2105 00117$:
                                   2106 ;	lcd.c:486: return hex_value;                           //return the hexadecimal value
      0007A8 90r00r44         [24] 2107 	mov	dptr,#_get_hex_value_hex_value_65536_165
      0007AB E0               [24] 2108 	movx	a,@dptr
                                   2109 ;	lcd.c:487: }
      0007AC F5 82            [12] 2110 	mov	dpl,a
      0007AE 22               [24] 2111 	ret
                                   2112 ;------------------------------------------------------------
                                   2113 ;Allocation info for local variables in function 'create_custom_char'
                                   2114 ;------------------------------------------------------------
                                   2115 ;sloc0                     Allocated with name '_create_custom_char_sloc0_1_0'
                                   2116 ;row_values                Allocated with name '_create_custom_char_PARM_2'
                                   2117 ;char_code                 Allocated with name '_create_custom_char_char_code_65536_170'
                                   2118 ;bit_6                     Allocated with name '_create_custom_char_bit_6_65536_171'
                                   2119 ;code_num                  Allocated with name '_create_custom_char_code_num_65536_171'
                                   2120 ;bit_3_shift               Allocated with name '_create_custom_char_bit_3_shift_65536_171'
                                   2121 ;char_num                  Allocated with name '_create_custom_char_char_num_65536_171'
                                   2122 ;i                         Allocated with name '_create_custom_char_i_65537_172'
                                   2123 ;------------------------------------------------------------
                                   2124 ;	lcd.c:488: void create_custom_char(unsigned char char_code, unsigned char row_values[]) {
                                   2125 ;	-----------------------------------------
                                   2126 ;	 function create_custom_char
                                   2127 ;	-----------------------------------------
      0007AF                       2128 _create_custom_char:
      0007AF E5 82            [12] 2129 	mov	a,dpl
      0007B1 90r00r48         [24] 2130 	mov	dptr,#_create_custom_char_char_code_65536_170
      0007B4 F0               [24] 2131 	movx	@dptr,a
                                   2132 ;	lcd.c:491: unsigned char code_num = char_code - '0';
      0007B5 E0               [24] 2133 	movx	a,@dptr
                                   2134 ;	lcd.c:492: unsigned char bit_3_shift = code_num << 3;
      0007B6 24 D0            [12] 2135 	add	a,#0xd0
      0007B8 C4               [12] 2136 	swap	a
      0007B9 03               [12] 2137 	rr	a
      0007BA 54 F8            [12] 2138 	anl	a,#0xf8
      0007BC FF               [12] 2139 	mov	r7,a
                                   2140 ;	lcd.c:493: unsigned char char_num = bit_6 | bit_3_shift;
      0007BD 43 07 40         [24] 2141 	orl	ar7,#0x40
                                   2142 ;	lcd.c:496: printf_tiny("\n\rThe custom character with code 0x%x has been created.", char_num);
      0007C0 8F 05            [24] 2143 	mov	ar5,r7
      0007C2 7E 00            [12] 2144 	mov	r6,#0x00
      0007C4 C0 07            [24] 2145 	push	ar7
      0007C6 C0 06            [24] 2146 	push	ar6
      0007C8 C0 05            [24] 2147 	push	ar5
      0007CA C0 05            [24] 2148 	push	ar5
      0007CC C0 06            [24] 2149 	push	ar6
      0007CE 74rD1            [12] 2150 	mov	a,#___str_27
      0007D0 C0 E0            [24] 2151 	push	acc
      0007D2 74s02            [12] 2152 	mov	a,#(___str_27 >> 8)
      0007D4 C0 E0            [24] 2153 	push	acc
      0007D6 12r00r00         [24] 2154 	lcall	_printf_tiny
      0007D9 E5 81            [12] 2155 	mov	a,sp
      0007DB 24 FC            [12] 2156 	add	a,#0xfc
      0007DD F5 81            [12] 2157 	mov	sp,a
      0007DF D0 05            [24] 2158 	pop	ar5
      0007E1 D0 06            [24] 2159 	pop	ar6
      0007E3 D0 07            [24] 2160 	pop	ar7
                                   2161 ;	lcd.c:500: while (i < 8) {
      0007E5 90r00r45         [24] 2162 	mov	dptr,#_create_custom_char_PARM_2
      0007E8 E0               [24] 2163 	movx	a,@dptr
      0007E9 F5*00            [12] 2164 	mov	_create_custom_char_sloc0_1_0,a
      0007EB A3               [24] 2165 	inc	dptr
      0007EC E0               [24] 2166 	movx	a,@dptr
      0007ED F5*01            [12] 2167 	mov	(_create_custom_char_sloc0_1_0 + 1),a
      0007EF A3               [24] 2168 	inc	dptr
      0007F0 E0               [24] 2169 	movx	a,@dptr
      0007F1 F5*02            [12] 2170 	mov	(_create_custom_char_sloc0_1_0 + 2),a
      0007F3 78 00            [12] 2171 	mov	r0,#0x00
      0007F5 79 00            [12] 2172 	mov	r1,#0x00
      0007F7                       2173 00101$:
      0007F7 C3               [12] 2174 	clr	c
      0007F8 E8               [12] 2175 	mov	a,r0
      0007F9 94 08            [12] 2176 	subb	a,#0x08
      0007FB E9               [12] 2177 	mov	a,r1
      0007FC 64 80            [12] 2178 	xrl	a,#0x80
      0007FE 94 80            [12] 2179 	subb	a,#0x80
      000800 40 01            [24] 2180 	jc	00115$
      000802 22               [24] 2181 	ret
      000803                       2182 00115$:
                                   2183 ;	lcd.c:502: LCD_RS = 0;
                                   2184 ;	assignBit
      000803 C2 92            [12] 2185 	clr	_P1_2
                                   2186 ;	lcd.c:503: LCD_RW = 0;
                                   2187 ;	assignBit
      000805 C2 93            [12] 2188 	clr	_P1_3
                                   2189 ;	lcd.c:505: lcd_ptr = char_num + i;
      000807 88 04            [24] 2190 	mov	ar4,r0
      000809 8F 03            [24] 2191 	mov	ar3,r7
      00080B 90 F0 00         [24] 2192 	mov	dptr,#_lcd_ptr
      00080E EC               [12] 2193 	mov	a,r4
      00080F 2B               [12] 2194 	add	a,r3
      000810 F0               [24] 2195 	movx	@dptr,a
                                   2196 ;	lcd.c:507: printf_tiny("\n\rLCD_ptr = %x", char_num + i);
      000811 E8               [12] 2197 	mov	a,r0
      000812 2D               [12] 2198 	add	a,r5
      000813 FB               [12] 2199 	mov	r3,a
      000814 E9               [12] 2200 	mov	a,r1
      000815 3E               [12] 2201 	addc	a,r6
      000816 FC               [12] 2202 	mov	r4,a
      000817 C0 07            [24] 2203 	push	ar7
      000819 C0 06            [24] 2204 	push	ar6
      00081B C0 05            [24] 2205 	push	ar5
      00081D C0 01            [24] 2206 	push	ar1
      00081F C0 00            [24] 2207 	push	ar0
      000821 C0 03            [24] 2208 	push	ar3
      000823 C0 04            [24] 2209 	push	ar4
      000825 74r09            [12] 2210 	mov	a,#___str_28
      000827 C0 E0            [24] 2211 	push	acc
      000829 74s03            [12] 2212 	mov	a,#(___str_28 >> 8)
      00082B C0 E0            [24] 2213 	push	acc
      00082D 12r00r00         [24] 2214 	lcall	_printf_tiny
      000830 E5 81            [12] 2215 	mov	a,sp
      000832 24 FC            [12] 2216 	add	a,#0xfc
      000834 F5 81            [12] 2217 	mov	sp,a
                                   2218 ;	lcd.c:509: lcdbusywait();
      000836 12r00r40         [24] 2219 	lcall	_lcdbusywait
      000839 D0 00            [24] 2220 	pop	ar0
      00083B D0 01            [24] 2221 	pop	ar1
                                   2222 ;	lcd.c:511: LCD_RS = 1;
                                   2223 ;	assignBit
      00083D D2 92            [12] 2224 	setb	_P1_2
                                   2225 ;	lcd.c:512: LCD_RW = 0;
                                   2226 ;	assignBit
      00083F C2 93            [12] 2227 	clr	_P1_3
                                   2228 ;	lcd.c:513: lcd_ptr = row_values[i];
      000841 E8               [12] 2229 	mov	a,r0
      000842 25*00            [12] 2230 	add	a,_create_custom_char_sloc0_1_0
      000844 FA               [12] 2231 	mov	r2,a
      000845 E9               [12] 2232 	mov	a,r1
      000846 35*01            [12] 2233 	addc	a,(_create_custom_char_sloc0_1_0 + 1)
      000848 FB               [12] 2234 	mov	r3,a
      000849 AC*02            [24] 2235 	mov	r4,(_create_custom_char_sloc0_1_0 + 2)
      00084B 8A 82            [24] 2236 	mov	dpl,r2
      00084D 8B 83            [24] 2237 	mov	dph,r3
      00084F 8C F0            [24] 2238 	mov	b,r4
      000851 12r00r00         [24] 2239 	lcall	__gptrget
      000854 90 F0 00         [24] 2240 	mov	dptr,#_lcd_ptr
      000857 F0               [24] 2241 	movx	@dptr,a
                                   2242 ;	lcd.c:514: lcdbusywait();
      000858 C0 01            [24] 2243 	push	ar1
      00085A C0 00            [24] 2244 	push	ar0
      00085C 12r00r40         [24] 2245 	lcall	_lcdbusywait
      00085F D0 00            [24] 2246 	pop	ar0
      000861 D0 01            [24] 2247 	pop	ar1
      000863 D0 05            [24] 2248 	pop	ar5
      000865 D0 06            [24] 2249 	pop	ar6
      000867 D0 07            [24] 2250 	pop	ar7
                                   2251 ;	lcd.c:516: i++;
      000869 08               [12] 2252 	inc	r0
      00086A B8 00 01         [24] 2253 	cjne	r0,#0x00,00116$
      00086D 09               [12] 2254 	inc	r1
      00086E                       2255 00116$:
                                   2256 ;	lcd.c:518: }
      00086E 02r07rF7         [24] 2257 	ljmp	00101$
                                   2258 ;------------------------------------------------------------
                                   2259 ;Allocation info for local variables in function 'handler_custom_char'
                                   2260 ;------------------------------------------------------------
                                   2261 ;save_address              Allocated with name '_handler_custom_char_save_address_65537_176'
                                   2262 ;char_code                 Allocated with name '_handler_custom_char_char_code_65538_177'
                                   2263 ;row_values                Allocated with name '_handler_custom_char_row_values_65539_178'
                                   2264 ;j                         Allocated with name '_handler_custom_char_j_65539_178'
                                   2265 ;------------------------------------------------------------
                                   2266 ;	lcd.c:520: void handler_custom_char(void) {
                                   2267 ;	-----------------------------------------
                                   2268 ;	 function handler_custom_char
                                   2269 ;	-----------------------------------------
      000871                       2270 _handler_custom_char:
                                   2271 ;	lcd.c:521: printf("\033[0;33m"); // Set text color to yellow
      000871 74r18            [12] 2272 	mov	a,#___str_29
      000873 C0 E0            [24] 2273 	push	acc
      000875 74s03            [12] 2274 	mov	a,#(___str_29 >> 8)
      000877 C0 E0            [24] 2275 	push	acc
      000879 74 80            [12] 2276 	mov	a,#0x80
      00087B C0 E0            [24] 2277 	push	acc
      00087D 12r00r00         [24] 2278 	lcall	_printf
      000880 15 81            [12] 2279 	dec	sp
      000882 15 81            [12] 2280 	dec	sp
      000884 15 81            [12] 2281 	dec	sp
                                   2282 ;	lcd.c:524: unsigned int save_address = get_cursor_address();
      000886 12r00rD2         [24] 2283 	lcall	_get_cursor_address
      000889 AF 82            [24] 2284 	mov	r7,dpl
                                   2285 ;	lcd.c:526: printf_tiny("Please enter the code for the custom character: ");
      00088B C0 07            [24] 2286 	push	ar7
      00088D 74r20            [12] 2287 	mov	a,#___str_30
      00088F C0 E0            [24] 2288 	push	acc
      000891 74s03            [12] 2289 	mov	a,#(___str_30 >> 8)
      000893 C0 E0            [24] 2290 	push	acc
      000895 12r00r00         [24] 2291 	lcall	_printf_tiny
      000898 15 81            [12] 2292 	dec	sp
      00089A 15 81            [12] 2293 	dec	sp
                                   2294 ;	lcd.c:528: unsigned char char_code = getchar();
      00089C 12r00r00         [24] 2295 	lcall	_getchar
      00089F AD 82            [24] 2296 	mov	r5,dpl
                                   2297 ;	lcd.c:531: printf_tiny("%c\n\r", char_code);
      0008A1 8D 04            [24] 2298 	mov	ar4,r5
      0008A3 7E 00            [12] 2299 	mov	r6,#0x00
      0008A5 C0 05            [24] 2300 	push	ar5
      0008A7 C0 04            [24] 2301 	push	ar4
      0008A9 C0 06            [24] 2302 	push	ar6
      0008AB 74r51            [12] 2303 	mov	a,#___str_31
      0008AD C0 E0            [24] 2304 	push	acc
      0008AF 74s03            [12] 2305 	mov	a,#(___str_31 >> 8)
      0008B1 C0 E0            [24] 2306 	push	acc
      0008B3 12r00r00         [24] 2307 	lcall	_printf_tiny
      0008B6 E5 81            [12] 2308 	mov	a,sp
      0008B8 24 FC            [12] 2309 	add	a,#0xfc
      0008BA F5 81            [12] 2310 	mov	sp,a
      0008BC D0 05            [24] 2311 	pop	ar5
      0008BE D0 07            [24] 2312 	pop	ar7
                                   2313 ;	lcd.c:537: while (j < 8) { // Loop through each row of the custom character and get its value from the user
      0008C0 7E 00            [12] 2314 	mov	r6,#0x00
      0008C2                       2315 00101$:
      0008C2 BE 08 00         [24] 2316 	cjne	r6,#0x08,00115$
      0008C5                       2317 00115$:
      0008C5 50 4B            [24] 2318 	jnc	00103$
                                   2319 ;	lcd.c:538: printf_tiny("\n\rPlease enter the value for row %d: ", j);
      0008C7 8E 03            [24] 2320 	mov	ar3,r6
      0008C9 7C 00            [12] 2321 	mov	r4,#0x00
      0008CB C0 07            [24] 2322 	push	ar7
      0008CD C0 06            [24] 2323 	push	ar6
      0008CF C0 05            [24] 2324 	push	ar5
      0008D1 C0 03            [24] 2325 	push	ar3
      0008D3 C0 04            [24] 2326 	push	ar4
      0008D5 74r56            [12] 2327 	mov	a,#___str_32
      0008D7 C0 E0            [24] 2328 	push	acc
      0008D9 74s03            [12] 2329 	mov	a,#(___str_32 >> 8)
      0008DB C0 E0            [24] 2330 	push	acc
      0008DD 12r00r00         [24] 2331 	lcall	_printf_tiny
      0008E0 E5 81            [12] 2332 	mov	a,sp
      0008E2 24 FC            [12] 2333 	add	a,#0xfc
      0008E4 F5 81            [12] 2334 	mov	sp,a
      0008E6 D0 05            [24] 2335 	pop	ar5
      0008E8 D0 06            [24] 2336 	pop	ar6
                                   2337 ;	lcd.c:539: row_values[j] = get_hex_value();
      0008EA EE               [12] 2338 	mov	a,r6
      0008EB 24r49            [12] 2339 	add	a,#_handler_custom_char_row_values_65539_178
      0008ED FB               [12] 2340 	mov	r3,a
      0008EE E4               [12] 2341 	clr	a
      0008EF 34s00            [12] 2342 	addc	a,#(_handler_custom_char_row_values_65539_178 >> 8)
      0008F1 FC               [12] 2343 	mov	r4,a
      0008F2 C0 06            [24] 2344 	push	ar6
      0008F4 C0 05            [24] 2345 	push	ar5
      0008F6 C0 04            [24] 2346 	push	ar4
      0008F8 C0 03            [24] 2347 	push	ar3
      0008FA 12r06rFA         [24] 2348 	lcall	_get_hex_value
      0008FD AA 82            [24] 2349 	mov	r2,dpl
      0008FF D0 03            [24] 2350 	pop	ar3
      000901 D0 04            [24] 2351 	pop	ar4
      000903 D0 05            [24] 2352 	pop	ar5
      000905 D0 06            [24] 2353 	pop	ar6
      000907 D0 07            [24] 2354 	pop	ar7
      000909 8B 82            [24] 2355 	mov	dpl,r3
      00090B 8C 83            [24] 2356 	mov	dph,r4
      00090D EA               [12] 2357 	mov	a,r2
      00090E F0               [24] 2358 	movx	@dptr,a
                                   2359 ;	lcd.c:540: j++;
      00090F 0E               [12] 2360 	inc	r6
      000910 80 B0            [24] 2361 	sjmp	00101$
      000912                       2362 00103$:
                                   2363 ;	lcd.c:555: }
      000912 D2*05            [12] 2364 	setb	_handler_custom_char_sloc0_1_0
      000914 10 AF 02         [24] 2365 	jbc	ea,00117$
      000917 C2*05            [12] 2366 	clr	_handler_custom_char_sloc0_1_0
      000919                       2367 00117$:
                                   2368 ;	lcd.c:545: create_custom_char(char_code, row_values);
      000919 90r00r45         [24] 2369 	mov	dptr,#_create_custom_char_PARM_2
      00091C 74r49            [12] 2370 	mov	a,#_handler_custom_char_row_values_65539_178
      00091E F0               [24] 2371 	movx	@dptr,a
      00091F 74s00            [12] 2372 	mov	a,#(_handler_custom_char_row_values_65539_178 >> 8)
      000921 A3               [24] 2373 	inc	dptr
      000922 F0               [24] 2374 	movx	@dptr,a
      000923 E4               [12] 2375 	clr	a
      000924 A3               [24] 2376 	inc	dptr
      000925 F0               [24] 2377 	movx	@dptr,a
      000926 8D 82            [24] 2378 	mov	dpl,r5
      000928 C0 07            [24] 2379 	push	ar7
      00092A C0 05            [24] 2380 	push	ar5
      00092C 12r07rAF         [24] 2381 	lcall	_create_custom_char
                                   2382 ;	lcd.c:548: handler_lcdgotoxy();
      00092F 12r03rB9         [24] 2383 	lcall	_handler_lcdgotoxy
      000932 D0 05            [24] 2384 	pop	ar5
                                   2385 ;	lcd.c:551: lcdputch(char_code - '0');
      000934 ED               [12] 2386 	mov	a,r5
      000935 24 D0            [12] 2387 	add	a,#0xd0
      000937 F5 82            [12] 2388 	mov	dpl,a
      000939 12r01rB5         [24] 2389 	lcall	_lcdputch
      00093C D0 07            [24] 2390 	pop	ar7
                                   2391 ;	lcd.c:554: lcdgotoaddr(save_address);
      00093E 8F 82            [24] 2392 	mov	dpl,r7
      000940 12r00rDF         [24] 2393 	lcall	_lcdgotoaddr
      000943 A2*05            [12] 2394 	mov	c,_handler_custom_char_sloc0_1_0
      000945 92 AF            [24] 2395 	mov	ea,c
                                   2396 ;	lcd.c:558: printf("\033[0m");
      000947 74r5E            [12] 2397 	mov	a,#___str_23
      000949 C0 E0            [24] 2398 	push	acc
      00094B 74s02            [12] 2399 	mov	a,#(___str_23 >> 8)
      00094D C0 E0            [24] 2400 	push	acc
      00094F 74 80            [12] 2401 	mov	a,#0x80
      000951 C0 E0            [24] 2402 	push	acc
      000953 12r00r00         [24] 2403 	lcall	_printf
      000956 15 81            [12] 2404 	dec	sp
      000958 15 81            [12] 2405 	dec	sp
      00095A 15 81            [12] 2406 	dec	sp
                                   2407 ;	lcd.c:559: }
      00095C 22               [24] 2408 	ret
                                   2409 ;------------------------------------------------------------
                                   2410 ;Allocation info for local variables in function 'handle_cu_custom_char'
                                   2411 ;------------------------------------------------------------
                                   2412 ;ccode1                    Allocated with name '_handle_cu_custom_char_ccode1_65537_183'
                                   2413 ;row_vals1                 Allocated with name '_handle_cu_custom_char_row_vals1_65537_183'
                                   2414 ;ccode2                    Allocated with name '_handle_cu_custom_char_ccode2_65538_185'
                                   2415 ;row_vals2                 Allocated with name '_handle_cu_custom_char_row_vals2_65538_185'
                                   2416 ;ccode3                    Allocated with name '_handle_cu_custom_char_ccode3_65539_187'
                                   2417 ;row_vals3                 Allocated with name '_handle_cu_custom_char_row_vals3_65539_187'
                                   2418 ;ccode4                    Allocated with name '_handle_cu_custom_char_ccode4_65540_189'
                                   2419 ;row_vals4                 Allocated with name '_handle_cu_custom_char_row_vals4_65540_189'
                                   2420 ;------------------------------------------------------------
                                   2421 ;	lcd.c:561: void handle_cu_custom_char(void)
                                   2422 ;	-----------------------------------------
                                   2423 ;	 function handle_cu_custom_char
                                   2424 ;	-----------------------------------------
      00095D                       2425 _handle_cu_custom_char:
                                   2426 ;	lcd.c:563: printf("\033[0;33m");                           // Set text color to yellow
      00095D 74r18            [12] 2427 	mov	a,#___str_29
      00095F C0 E0            [24] 2428 	push	acc
      000961 74s03            [12] 2429 	mov	a,#(___str_29 >> 8)
      000963 C0 E0            [24] 2430 	push	acc
      000965 74 80            [12] 2431 	mov	a,#0x80
      000967 C0 E0            [24] 2432 	push	acc
      000969 12r00r00         [24] 2433 	lcall	_printf
      00096C 15 81            [12] 2434 	dec	sp
      00096E 15 81            [12] 2435 	dec	sp
      000970 15 81            [12] 2436 	dec	sp
                                   2437 ;	lcd.c:564: save_cursor_address = get_cursor_address();     // Get current cursor address and save it in a variable
      000972 12r00rD2         [24] 2438 	lcall	_get_cursor_address
      000975 E5 82            [12] 2439 	mov	a,dpl
      000977 90r00r00         [24] 2440 	mov	dptr,#_save_cursor_address
      00097A F0               [24] 2441 	movx	@dptr,a
                                   2442 ;	lcd.c:568: unsigned char row_vals1[8] = {0x00, 0x00, 0x0F, 0x08, 0x08, 0x09, 0x09, 0x09};
      00097B 90r00r51         [24] 2443 	mov	dptr,#_handle_cu_custom_char_row_vals1_65537_183
      00097E E4               [12] 2444 	clr	a
      00097F F0               [24] 2445 	movx	@dptr,a
      000980 90r00r52         [24] 2446 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0001)
      000983 F0               [24] 2447 	movx	@dptr,a
      000984 90r00r53         [24] 2448 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0002)
      000987 74 0F            [12] 2449 	mov	a,#0x0f
      000989 F0               [24] 2450 	movx	@dptr,a
      00098A 90r00r54         [24] 2451 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0003)
      00098D 74 08            [12] 2452 	mov	a,#0x08
      00098F F0               [24] 2453 	movx	@dptr,a
      000990 90r00r55         [24] 2454 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0004)
      000993 F0               [24] 2455 	movx	@dptr,a
      000994 90r00r56         [24] 2456 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0005)
      000997 04               [12] 2457 	inc	a
      000998 F0               [24] 2458 	movx	@dptr,a
      000999 90r00r57         [24] 2459 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0006)
      00099C F0               [24] 2460 	movx	@dptr,a
      00099D 90r00r58         [24] 2461 	mov	dptr,#(_handle_cu_custom_char_row_vals1_65537_183 + 0x0007)
      0009A0 F0               [24] 2462 	movx	@dptr,a
                                   2463 ;	lcd.c:573: }
      0009A1 D2*06            [12] 2464 	setb	_handle_cu_custom_char_sloc0_1_0
      0009A3 10 AF 02         [24] 2465 	jbc	ea,00103$
      0009A6 C2*06            [12] 2466 	clr	_handle_cu_custom_char_sloc0_1_0
      0009A8                       2467 00103$:
                                   2468 ;	lcd.c:570: create_custom_char(ccode1, row_vals1);      // Call function to create custom character on the LCD
      0009A8 90r00r45         [24] 2469 	mov	dptr,#_create_custom_char_PARM_2
      0009AB 74r51            [12] 2470 	mov	a,#_handle_cu_custom_char_row_vals1_65537_183
      0009AD F0               [24] 2471 	movx	@dptr,a
      0009AE 74s00            [12] 2472 	mov	a,#(_handle_cu_custom_char_row_vals1_65537_183 >> 8)
      0009B0 A3               [24] 2473 	inc	dptr
      0009B1 F0               [24] 2474 	movx	@dptr,a
      0009B2 E4               [12] 2475 	clr	a
      0009B3 A3               [24] 2476 	inc	dptr
      0009B4 F0               [24] 2477 	movx	@dptr,a
      0009B5 75 82 31         [24] 2478 	mov	dpl,#0x31
      0009B8 12r07rAF         [24] 2479 	lcall	_create_custom_char
                                   2480 ;	lcd.c:571: lcdgotoxy('1', '4');                        // Move cursor to position to display custom character 1
      0009BB 90r00r06         [24] 2481 	mov	dptr,#_lcdgotoxy_PARM_2
      0009BE 74 34            [12] 2482 	mov	a,#0x34
      0009C0 F0               [24] 2483 	movx	@dptr,a
      0009C1 75 82 31         [24] 2484 	mov	dpl,#0x31
      0009C4 12r00rFC         [24] 2485 	lcall	_lcdgotoxy
                                   2486 ;	lcd.c:572: lcdputch(ccode1 - '0');                     // Display custom character 1 on the LCD screen
      0009C7 75 82 01         [24] 2487 	mov	dpl,#0x01
      0009CA 12r01rB5         [24] 2488 	lcall	_lcdputch
      0009CD A2*06            [12] 2489 	mov	c,_handle_cu_custom_char_sloc0_1_0
      0009CF 92 AF            [24] 2490 	mov	ea,c
                                   2491 ;	lcd.c:577: unsigned char row_vals2[8] = {0x00, 0x00, 0x18, 0x00, 0x00, 0x02, 0x02, 0x02};
      0009D1 90r00r59         [24] 2492 	mov	dptr,#_handle_cu_custom_char_row_vals2_65538_185
      0009D4 E4               [12] 2493 	clr	a
      0009D5 F0               [24] 2494 	movx	@dptr,a
      0009D6 90r00r5A         [24] 2495 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0001)
      0009D9 F0               [24] 2496 	movx	@dptr,a
      0009DA 90r00r5B         [24] 2497 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0002)
      0009DD 74 18            [12] 2498 	mov	a,#0x18
      0009DF F0               [24] 2499 	movx	@dptr,a
      0009E0 90r00r5C         [24] 2500 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0003)
      0009E3 E4               [12] 2501 	clr	a
      0009E4 F0               [24] 2502 	movx	@dptr,a
      0009E5 90r00r5D         [24] 2503 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0004)
      0009E8 F0               [24] 2504 	movx	@dptr,a
      0009E9 90r00r5E         [24] 2505 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0005)
      0009EC 74 02            [12] 2506 	mov	a,#0x02
      0009EE F0               [24] 2507 	movx	@dptr,a
      0009EF 90r00r5F         [24] 2508 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0006)
      0009F2 F0               [24] 2509 	movx	@dptr,a
      0009F3 90r00r60         [24] 2510 	mov	dptr,#(_handle_cu_custom_char_row_vals2_65538_185 + 0x0007)
      0009F6 F0               [24] 2511 	movx	@dptr,a
                                   2512 ;	lcd.c:583: }
      0009F7 D2*06            [12] 2513 	setb	_handle_cu_custom_char_sloc0_1_0
      0009F9 10 AF 02         [24] 2514 	jbc	ea,00104$
      0009FC C2*06            [12] 2515 	clr	_handle_cu_custom_char_sloc0_1_0
      0009FE                       2516 00104$:
                                   2517 ;	lcd.c:579: create_custom_char(ccode2, row_vals2);      // Call function to create custom character on the LCD
      0009FE 90r00r45         [24] 2518 	mov	dptr,#_create_custom_char_PARM_2
      000A01 74r59            [12] 2519 	mov	a,#_handle_cu_custom_char_row_vals2_65538_185
      000A03 F0               [24] 2520 	movx	@dptr,a
      000A04 74s00            [12] 2521 	mov	a,#(_handle_cu_custom_char_row_vals2_65538_185 >> 8)
      000A06 A3               [24] 2522 	inc	dptr
      000A07 F0               [24] 2523 	movx	@dptr,a
      000A08 E4               [12] 2524 	clr	a
      000A09 A3               [24] 2525 	inc	dptr
      000A0A F0               [24] 2526 	movx	@dptr,a
      000A0B 75 82 32         [24] 2527 	mov	dpl,#0x32
      000A0E 12r07rAF         [24] 2528 	lcall	_create_custom_char
                                   2529 ;	lcd.c:580: lcdgotoxy('1', '5');                        // Move cursor to position to display custom character 2
      000A11 90r00r06         [24] 2530 	mov	dptr,#_lcdgotoxy_PARM_2
      000A14 74 35            [12] 2531 	mov	a,#0x35
      000A16 F0               [24] 2532 	movx	@dptr,a
      000A17 75 82 31         [24] 2533 	mov	dpl,#0x31
      000A1A 12r00rFC         [24] 2534 	lcall	_lcdgotoxy
                                   2535 ;	lcd.c:581: lcdputch(ccode2 - '0');                     // Display custom character 2 on the LCD screen
      000A1D 75 82 02         [24] 2536 	mov	dpl,#0x02
      000A20 12r01rB5         [24] 2537 	lcall	_lcdputch
                                   2538 ;	lcd.c:582: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000A23 90r00r00         [24] 2539 	mov	dptr,#_save_cursor_address
      000A26 E0               [24] 2540 	movx	a,@dptr
      000A27 F5 82            [12] 2541 	mov	dpl,a
      000A29 12r00rDF         [24] 2542 	lcall	_lcdgotoaddr
      000A2C A2*06            [12] 2543 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000A2E 92 AF            [24] 2544 	mov	ea,c
                                   2545 ;	lcd.c:587: unsigned char row_vals3[8] = {0x09, 0x09, 0x09, 0x0F, 0x01, 0x01, 0x00, 0x00};
      000A30 90r00r61         [24] 2546 	mov	dptr,#_handle_cu_custom_char_row_vals3_65539_187
      000A33 74 09            [12] 2547 	mov	a,#0x09
      000A35 F0               [24] 2548 	movx	@dptr,a
      000A36 90r00r62         [24] 2549 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0001)
      000A39 F0               [24] 2550 	movx	@dptr,a
      000A3A 90r00r63         [24] 2551 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0002)
      000A3D F0               [24] 2552 	movx	@dptr,a
      000A3E 90r00r64         [24] 2553 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0003)
      000A41 74 0F            [12] 2554 	mov	a,#0x0f
      000A43 F0               [24] 2555 	movx	@dptr,a
      000A44 90r00r65         [24] 2556 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0004)
      000A47 74 01            [12] 2557 	mov	a,#0x01
      000A49 F0               [24] 2558 	movx	@dptr,a
      000A4A 90r00r66         [24] 2559 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0005)
      000A4D F0               [24] 2560 	movx	@dptr,a
      000A4E 90r00r67         [24] 2561 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0006)
      000A51 E4               [12] 2562 	clr	a
      000A52 F0               [24] 2563 	movx	@dptr,a
      000A53 90r00r68         [24] 2564 	mov	dptr,#(_handle_cu_custom_char_row_vals3_65539_187 + 0x0007)
      000A56 F0               [24] 2565 	movx	@dptr,a
                                   2566 ;	lcd.c:593: }
      000A57 D2*06            [12] 2567 	setb	_handle_cu_custom_char_sloc0_1_0
      000A59 10 AF 02         [24] 2568 	jbc	ea,00105$
      000A5C C2*06            [12] 2569 	clr	_handle_cu_custom_char_sloc0_1_0
      000A5E                       2570 00105$:
                                   2571 ;	lcd.c:589: create_custom_char(ccode3, row_vals3);      // Call function to create custom character on the LCD
      000A5E 90r00r45         [24] 2572 	mov	dptr,#_create_custom_char_PARM_2
      000A61 74r61            [12] 2573 	mov	a,#_handle_cu_custom_char_row_vals3_65539_187
      000A63 F0               [24] 2574 	movx	@dptr,a
      000A64 74s00            [12] 2575 	mov	a,#(_handle_cu_custom_char_row_vals3_65539_187 >> 8)
      000A66 A3               [24] 2576 	inc	dptr
      000A67 F0               [24] 2577 	movx	@dptr,a
      000A68 E4               [12] 2578 	clr	a
      000A69 A3               [24] 2579 	inc	dptr
      000A6A F0               [24] 2580 	movx	@dptr,a
      000A6B 75 82 33         [24] 2581 	mov	dpl,#0x33
      000A6E 12r07rAF         [24] 2582 	lcall	_create_custom_char
                                   2583 ;	lcd.c:590: lcdgotoxy('2', '4');                        // Move cursor to position to display custom character 3
      000A71 90r00r06         [24] 2584 	mov	dptr,#_lcdgotoxy_PARM_2
      000A74 74 34            [12] 2585 	mov	a,#0x34
      000A76 F0               [24] 2586 	movx	@dptr,a
      000A77 75 82 32         [24] 2587 	mov	dpl,#0x32
      000A7A 12r00rFC         [24] 2588 	lcall	_lcdgotoxy
                                   2589 ;	lcd.c:591: lcdputch(ccode3 - '0');                     // Display custom character 3 on the LCD screen
      000A7D 75 82 03         [24] 2590 	mov	dpl,#0x03
      000A80 12r01rB5         [24] 2591 	lcall	_lcdputch
                                   2592 ;	lcd.c:592: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000A83 90r00r00         [24] 2593 	mov	dptr,#_save_cursor_address
      000A86 E0               [24] 2594 	movx	a,@dptr
      000A87 F5 82            [12] 2595 	mov	dpl,a
      000A89 12r00rDF         [24] 2596 	lcall	_lcdgotoaddr
      000A8C A2*06            [12] 2597 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000A8E 92 AF            [24] 2598 	mov	ea,c
                                   2599 ;	lcd.c:597: unsigned char row_vals4[8] = {0x02, 0x02, 0x02, 0x1A, 0x02, 0x1E, 0x00, 0x00};
      000A90 90r00r69         [24] 2600 	mov	dptr,#_handle_cu_custom_char_row_vals4_65540_189
      000A93 74 02            [12] 2601 	mov	a,#0x02
      000A95 F0               [24] 2602 	movx	@dptr,a
      000A96 90r00r6A         [24] 2603 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0001)
      000A99 F0               [24] 2604 	movx	@dptr,a
      000A9A 90r00r6B         [24] 2605 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0002)
      000A9D F0               [24] 2606 	movx	@dptr,a
      000A9E 90r00r6C         [24] 2607 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0003)
      000AA1 74 1A            [12] 2608 	mov	a,#0x1a
      000AA3 F0               [24] 2609 	movx	@dptr,a
      000AA4 90r00r6D         [24] 2610 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0004)
      000AA7 74 02            [12] 2611 	mov	a,#0x02
      000AA9 F0               [24] 2612 	movx	@dptr,a
      000AAA 90r00r6E         [24] 2613 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0005)
      000AAD 74 1E            [12] 2614 	mov	a,#0x1e
      000AAF F0               [24] 2615 	movx	@dptr,a
      000AB0 90r00r6F         [24] 2616 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0006)
      000AB3 E4               [12] 2617 	clr	a
      000AB4 F0               [24] 2618 	movx	@dptr,a
      000AB5 90r00r70         [24] 2619 	mov	dptr,#(_handle_cu_custom_char_row_vals4_65540_189 + 0x0007)
      000AB8 F0               [24] 2620 	movx	@dptr,a
                                   2621 ;	lcd.c:603: }
      000AB9 D2*06            [12] 2622 	setb	_handle_cu_custom_char_sloc0_1_0
      000ABB 10 AF 02         [24] 2623 	jbc	ea,00106$
      000ABE C2*06            [12] 2624 	clr	_handle_cu_custom_char_sloc0_1_0
      000AC0                       2625 00106$:
                                   2626 ;	lcd.c:599: create_custom_char(ccode4, row_vals4);      // Call function to create custom character on the LCD
      000AC0 90r00r45         [24] 2627 	mov	dptr,#_create_custom_char_PARM_2
      000AC3 74r69            [12] 2628 	mov	a,#_handle_cu_custom_char_row_vals4_65540_189
      000AC5 F0               [24] 2629 	movx	@dptr,a
      000AC6 74s00            [12] 2630 	mov	a,#(_handle_cu_custom_char_row_vals4_65540_189 >> 8)
      000AC8 A3               [24] 2631 	inc	dptr
      000AC9 F0               [24] 2632 	movx	@dptr,a
      000ACA E4               [12] 2633 	clr	a
      000ACB A3               [24] 2634 	inc	dptr
      000ACC F0               [24] 2635 	movx	@dptr,a
      000ACD 75 82 34         [24] 2636 	mov	dpl,#0x34
      000AD0 12r07rAF         [24] 2637 	lcall	_create_custom_char
                                   2638 ;	lcd.c:600: lcdgotoxy('2', '5');                        // Move cursor to position to display custom character 4
      000AD3 90r00r06         [24] 2639 	mov	dptr,#_lcdgotoxy_PARM_2
      000AD6 74 35            [12] 2640 	mov	a,#0x35
      000AD8 F0               [24] 2641 	movx	@dptr,a
      000AD9 75 82 32         [24] 2642 	mov	dpl,#0x32
      000ADC 12r00rFC         [24] 2643 	lcall	_lcdgotoxy
                                   2644 ;	lcd.c:601: lcdputch(ccode4 - '0');                     // Display custom character 4 on the LCD screen
      000ADF 75 82 04         [24] 2645 	mov	dpl,#0x04
      000AE2 12r01rB5         [24] 2646 	lcall	_lcdputch
                                   2647 ;	lcd.c:602: lcdgotoaddr(save_cursor_address);           // Move the cursor back to the original position
      000AE5 90r00r00         [24] 2648 	mov	dptr,#_save_cursor_address
      000AE8 E0               [24] 2649 	movx	a,@dptr
      000AE9 F5 82            [12] 2650 	mov	dpl,a
      000AEB 12r00rDF         [24] 2651 	lcall	_lcdgotoaddr
      000AEE A2*06            [12] 2652 	mov	c,_handle_cu_custom_char_sloc0_1_0
      000AF0 92 AF            [24] 2653 	mov	ea,c
                                   2654 ;	lcd.c:605: printf("\033[0m");                              // Reset text color to default
      000AF2 74r5E            [12] 2655 	mov	a,#___str_23
      000AF4 C0 E0            [24] 2656 	push	acc
      000AF6 74s02            [12] 2657 	mov	a,#(___str_23 >> 8)
      000AF8 C0 E0            [24] 2658 	push	acc
      000AFA 74 80            [12] 2659 	mov	a,#0x80
      000AFC C0 E0            [24] 2660 	push	acc
      000AFE 12r00r00         [24] 2661 	lcall	_printf
      000B01 15 81            [12] 2662 	dec	sp
      000B03 15 81            [12] 2663 	dec	sp
      000B05 15 81            [12] 2664 	dec	sp
                                   2665 ;	lcd.c:606: }
      000B07 22               [24] 2666 	ret
                                   2667 ;------------------------------------------------------------
                                   2668 ;Allocation info for local variables in function 'handle_sadsmiley_custom_char'
                                   2669 ;------------------------------------------------------------
                                   2670 ;ccode1                    Allocated with name '_handle_sadsmiley_custom_char_ccode1_65537_193'
                                   2671 ;row_vals1                 Allocated with name '_handle_sadsmiley_custom_char_row_vals1_65537_193'
                                   2672 ;ccode2                    Allocated with name '_handle_sadsmiley_custom_char_ccode2_65538_195'
                                   2673 ;row_vals2                 Allocated with name '_handle_sadsmiley_custom_char_row_vals2_65538_195'
                                   2674 ;ccode3                    Allocated with name '_handle_sadsmiley_custom_char_ccode3_65539_197'
                                   2675 ;row_vals3                 Allocated with name '_handle_sadsmiley_custom_char_row_vals3_65539_197'
                                   2676 ;ccode4                    Allocated with name '_handle_sadsmiley_custom_char_ccode4_65540_199'
                                   2677 ;row_vals4                 Allocated with name '_handle_sadsmiley_custom_char_row_vals4_65540_199'
                                   2678 ;------------------------------------------------------------
                                   2679 ;	lcd.c:609: void handle_sadsmiley_custom_char(void)
                                   2680 ;	-----------------------------------------
                                   2681 ;	 function handle_sadsmiley_custom_char
                                   2682 ;	-----------------------------------------
      000B08                       2683 _handle_sadsmiley_custom_char:
                                   2684 ;	lcd.c:612: printf("\033[0;33m");
      000B08 74r18            [12] 2685 	mov	a,#___str_29
      000B0A C0 E0            [24] 2686 	push	acc
      000B0C 74s03            [12] 2687 	mov	a,#(___str_29 >> 8)
      000B0E C0 E0            [24] 2688 	push	acc
      000B10 74 80            [12] 2689 	mov	a,#0x80
      000B12 C0 E0            [24] 2690 	push	acc
      000B14 12r00r00         [24] 2691 	lcall	_printf
      000B17 15 81            [12] 2692 	dec	sp
      000B19 15 81            [12] 2693 	dec	sp
      000B1B 15 81            [12] 2694 	dec	sp
                                   2695 ;	lcd.c:615: save_cursor_address = get_cursor_address();
      000B1D 12r00rD2         [24] 2696 	lcall	_get_cursor_address
      000B20 E5 82            [12] 2697 	mov	a,dpl
      000B22 90r00r00         [24] 2698 	mov	dptr,#_save_cursor_address
      000B25 F0               [24] 2699 	movx	@dptr,a
                                   2700 ;	lcd.c:619: unsigned char row_vals1[8] = {0x1F, 0x1F, 0x11, 0x15, 0x11, 0x1F, 0x1F, 0x1F};
      000B26 90r00r71         [24] 2701 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals1_65537_193
      000B29 74 1F            [12] 2702 	mov	a,#0x1f
      000B2B F0               [24] 2703 	movx	@dptr,a
      000B2C 90r00r72         [24] 2704 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0001)
      000B2F F0               [24] 2705 	movx	@dptr,a
      000B30 90r00r73         [24] 2706 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0002)
      000B33 74 11            [12] 2707 	mov	a,#0x11
      000B35 F0               [24] 2708 	movx	@dptr,a
      000B36 90r00r74         [24] 2709 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0003)
      000B39 74 15            [12] 2710 	mov	a,#0x15
      000B3B F0               [24] 2711 	movx	@dptr,a
      000B3C 90r00r75         [24] 2712 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0004)
      000B3F 74 11            [12] 2713 	mov	a,#0x11
      000B41 F0               [24] 2714 	movx	@dptr,a
      000B42 90r00r76         [24] 2715 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0005)
      000B45 74 1F            [12] 2716 	mov	a,#0x1f
      000B47 F0               [24] 2717 	movx	@dptr,a
      000B48 90r00r77         [24] 2718 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0006)
      000B4B F0               [24] 2719 	movx	@dptr,a
      000B4C 90r00r78         [24] 2720 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 + 0x0007)
      000B4F F0               [24] 2721 	movx	@dptr,a
                                   2722 ;	lcd.c:626: }
      000B50 D2*07            [12] 2723 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000B52 10 AF 02         [24] 2724 	jbc	ea,00103$
      000B55 C2*07            [12] 2725 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000B57                       2726 00103$:
                                   2727 ;	lcd.c:622: create_custom_char(ccode1, row_vals1);
      000B57 90r00r45         [24] 2728 	mov	dptr,#_create_custom_char_PARM_2
      000B5A 74r71            [12] 2729 	mov	a,#_handle_sadsmiley_custom_char_row_vals1_65537_193
      000B5C F0               [24] 2730 	movx	@dptr,a
      000B5D 74s00            [12] 2731 	mov	a,#(_handle_sadsmiley_custom_char_row_vals1_65537_193 >> 8)
      000B5F A3               [24] 2732 	inc	dptr
      000B60 F0               [24] 2733 	movx	@dptr,a
      000B61 E4               [12] 2734 	clr	a
      000B62 A3               [24] 2735 	inc	dptr
      000B63 F0               [24] 2736 	movx	@dptr,a
      000B64 75 82 31         [24] 2737 	mov	dpl,#0x31
      000B67 12r07rAF         [24] 2738 	lcall	_create_custom_char
                                   2739 ;	lcd.c:624: lcdgotoxy('1', '4');
      000B6A 90r00r06         [24] 2740 	mov	dptr,#_lcdgotoxy_PARM_2
      000B6D 74 34            [12] 2741 	mov	a,#0x34
      000B6F F0               [24] 2742 	movx	@dptr,a
      000B70 75 82 31         [24] 2743 	mov	dpl,#0x31
      000B73 12r00rFC         [24] 2744 	lcall	_lcdgotoxy
                                   2745 ;	lcd.c:625: lcdputch(ccode1 - '0');
      000B76 75 82 01         [24] 2746 	mov	dpl,#0x01
      000B79 12r01rB5         [24] 2747 	lcall	_lcdputch
      000B7C A2*07            [12] 2748 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000B7E 92 AF            [24] 2749 	mov	ea,c
                                   2750 ;	lcd.c:630: unsigned char row_vals2[8] = {0x1F, 0x1F, 0x11, 0x15, 0x11, 0x1F, 0x1F, 0x1F};
      000B80 90r00r79         [24] 2751 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals2_65538_195
      000B83 74 1F            [12] 2752 	mov	a,#0x1f
      000B85 F0               [24] 2753 	movx	@dptr,a
      000B86 90r00r7A         [24] 2754 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0001)
      000B89 F0               [24] 2755 	movx	@dptr,a
      000B8A 90r00r7B         [24] 2756 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0002)
      000B8D 74 11            [12] 2757 	mov	a,#0x11
      000B8F F0               [24] 2758 	movx	@dptr,a
      000B90 90r00r7C         [24] 2759 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0003)
      000B93 74 15            [12] 2760 	mov	a,#0x15
      000B95 F0               [24] 2761 	movx	@dptr,a
      000B96 90r00r7D         [24] 2762 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0004)
      000B99 74 11            [12] 2763 	mov	a,#0x11
      000B9B F0               [24] 2764 	movx	@dptr,a
      000B9C 90r00r7E         [24] 2765 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0005)
      000B9F 74 1F            [12] 2766 	mov	a,#0x1f
      000BA1 F0               [24] 2767 	movx	@dptr,a
      000BA2 90r00r7F         [24] 2768 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0006)
      000BA5 F0               [24] 2769 	movx	@dptr,a
      000BA6 90r00r80         [24] 2770 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 + 0x0007)
      000BA9 F0               [24] 2771 	movx	@dptr,a
                                   2772 ;	lcd.c:639: }
      000BAA D2*07            [12] 2773 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000BAC 10 AF 02         [24] 2774 	jbc	ea,00104$
      000BAF C2*07            [12] 2775 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000BB1                       2776 00104$:
                                   2777 ;	lcd.c:633: create_custom_char(ccode2, row_vals2);
      000BB1 90r00r45         [24] 2778 	mov	dptr,#_create_custom_char_PARM_2
      000BB4 74r79            [12] 2779 	mov	a,#_handle_sadsmiley_custom_char_row_vals2_65538_195
      000BB6 F0               [24] 2780 	movx	@dptr,a
      000BB7 74s00            [12] 2781 	mov	a,#(_handle_sadsmiley_custom_char_row_vals2_65538_195 >> 8)
      000BB9 A3               [24] 2782 	inc	dptr
      000BBA F0               [24] 2783 	movx	@dptr,a
      000BBB E4               [12] 2784 	clr	a
      000BBC A3               [24] 2785 	inc	dptr
      000BBD F0               [24] 2786 	movx	@dptr,a
      000BBE 75 82 32         [24] 2787 	mov	dpl,#0x32
      000BC1 12r07rAF         [24] 2788 	lcall	_create_custom_char
                                   2789 ;	lcd.c:635: lcdgotoxy('1', '5');
      000BC4 90r00r06         [24] 2790 	mov	dptr,#_lcdgotoxy_PARM_2
      000BC7 74 35            [12] 2791 	mov	a,#0x35
      000BC9 F0               [24] 2792 	movx	@dptr,a
      000BCA 75 82 31         [24] 2793 	mov	dpl,#0x31
      000BCD 12r00rFC         [24] 2794 	lcall	_lcdgotoxy
                                   2795 ;	lcd.c:636: lcdputch(ccode2 - '0');
      000BD0 75 82 02         [24] 2796 	mov	dpl,#0x02
      000BD3 12r01rB5         [24] 2797 	lcall	_lcdputch
                                   2798 ;	lcd.c:638: lcdgotoaddr(save_cursor_address);
      000BD6 90r00r00         [24] 2799 	mov	dptr,#_save_cursor_address
      000BD9 E0               [24] 2800 	movx	a,@dptr
      000BDA F5 82            [12] 2801 	mov	dpl,a
      000BDC 12r00rDF         [24] 2802 	lcall	_lcdgotoaddr
      000BDF A2*07            [12] 2803 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000BE1 92 AF            [24] 2804 	mov	ea,c
                                   2805 ;	lcd.c:643: unsigned char row_vals3[8] = {0x1F, 0x1F, 0x1F, 0x10, 0x1B, 0x1C, 0x1F, 0x1F};
      000BE3 90r00r81         [24] 2806 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals3_65539_197
      000BE6 74 1F            [12] 2807 	mov	a,#0x1f
      000BE8 F0               [24] 2808 	movx	@dptr,a
      000BE9 90r00r82         [24] 2809 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0001)
      000BEC F0               [24] 2810 	movx	@dptr,a
      000BED 90r00r83         [24] 2811 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0002)
      000BF0 F0               [24] 2812 	movx	@dptr,a
      000BF1 90r00r84         [24] 2813 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0003)
      000BF4 74 10            [12] 2814 	mov	a,#0x10
      000BF6 F0               [24] 2815 	movx	@dptr,a
      000BF7 90r00r85         [24] 2816 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0004)
      000BFA 74 1B            [12] 2817 	mov	a,#0x1b
      000BFC F0               [24] 2818 	movx	@dptr,a
      000BFD 90r00r86         [24] 2819 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0005)
      000C00 04               [12] 2820 	inc	a
      000C01 F0               [24] 2821 	movx	@dptr,a
      000C02 90r00r87         [24] 2822 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0006)
      000C05 74 1F            [12] 2823 	mov	a,#0x1f
      000C07 F0               [24] 2824 	movx	@dptr,a
      000C08 90r00r88         [24] 2825 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 + 0x0007)
      000C0B F0               [24] 2826 	movx	@dptr,a
                                   2827 ;	lcd.c:652: }
      000C0C D2*07            [12] 2828 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000C0E 10 AF 02         [24] 2829 	jbc	ea,00105$
      000C11 C2*07            [12] 2830 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000C13                       2831 00105$:
                                   2832 ;	lcd.c:646: create_custom_char(ccode3, row_vals3);
      000C13 90r00r45         [24] 2833 	mov	dptr,#_create_custom_char_PARM_2
      000C16 74r81            [12] 2834 	mov	a,#_handle_sadsmiley_custom_char_row_vals3_65539_197
      000C18 F0               [24] 2835 	movx	@dptr,a
      000C19 74s00            [12] 2836 	mov	a,#(_handle_sadsmiley_custom_char_row_vals3_65539_197 >> 8)
      000C1B A3               [24] 2837 	inc	dptr
      000C1C F0               [24] 2838 	movx	@dptr,a
      000C1D E4               [12] 2839 	clr	a
      000C1E A3               [24] 2840 	inc	dptr
      000C1F F0               [24] 2841 	movx	@dptr,a
      000C20 75 82 33         [24] 2842 	mov	dpl,#0x33
      000C23 12r07rAF         [24] 2843 	lcall	_create_custom_char
                                   2844 ;	lcd.c:648: lcdgotoxy('2', '4');
      000C26 90r00r06         [24] 2845 	mov	dptr,#_lcdgotoxy_PARM_2
      000C29 74 34            [12] 2846 	mov	a,#0x34
      000C2B F0               [24] 2847 	movx	@dptr,a
      000C2C 75 82 32         [24] 2848 	mov	dpl,#0x32
      000C2F 12r00rFC         [24] 2849 	lcall	_lcdgotoxy
                                   2850 ;	lcd.c:649: lcdputch(ccode3 - '0');
      000C32 75 82 03         [24] 2851 	mov	dpl,#0x03
      000C35 12r01rB5         [24] 2852 	lcall	_lcdputch
                                   2853 ;	lcd.c:651: lcdgotoaddr(save_cursor_address);
      000C38 90r00r00         [24] 2854 	mov	dptr,#_save_cursor_address
      000C3B E0               [24] 2855 	movx	a,@dptr
      000C3C F5 82            [12] 2856 	mov	dpl,a
      000C3E 12r00rDF         [24] 2857 	lcall	_lcdgotoaddr
      000C41 A2*07            [12] 2858 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000C43 92 AF            [24] 2859 	mov	ea,c
                                   2860 ;	lcd.c:656: unsigned char row_vals4[8] = {0x1F, 0x1F, 0x1F, 0x01, 0x1B, 0x07, 0x1F, 0x1F};
      000C45 90r00r89         [24] 2861 	mov	dptr,#_handle_sadsmiley_custom_char_row_vals4_65540_199
      000C48 74 1F            [12] 2862 	mov	a,#0x1f
      000C4A F0               [24] 2863 	movx	@dptr,a
      000C4B 90r00r8A         [24] 2864 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0001)
      000C4E F0               [24] 2865 	movx	@dptr,a
      000C4F 90r00r8B         [24] 2866 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0002)
      000C52 F0               [24] 2867 	movx	@dptr,a
      000C53 90r00r8C         [24] 2868 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0003)
      000C56 74 01            [12] 2869 	mov	a,#0x01
      000C58 F0               [24] 2870 	movx	@dptr,a
      000C59 90r00r8D         [24] 2871 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0004)
      000C5C 74 1B            [12] 2872 	mov	a,#0x1b
      000C5E F0               [24] 2873 	movx	@dptr,a
      000C5F 90r00r8E         [24] 2874 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0005)
      000C62 74 07            [12] 2875 	mov	a,#0x07
      000C64 F0               [24] 2876 	movx	@dptr,a
      000C65 90r00r8F         [24] 2877 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0006)
      000C68 74 1F            [12] 2878 	mov	a,#0x1f
      000C6A F0               [24] 2879 	movx	@dptr,a
      000C6B 90r00r90         [24] 2880 	mov	dptr,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 + 0x0007)
      000C6E F0               [24] 2881 	movx	@dptr,a
                                   2882 ;	lcd.c:665: }
      000C6F D2*07            [12] 2883 	setb	_handle_sadsmiley_custom_char_sloc0_1_0
      000C71 10 AF 02         [24] 2884 	jbc	ea,00106$
      000C74 C2*07            [12] 2885 	clr	_handle_sadsmiley_custom_char_sloc0_1_0
      000C76                       2886 00106$:
                                   2887 ;	lcd.c:659: create_custom_char(ccode4, row_vals4);
      000C76 90r00r45         [24] 2888 	mov	dptr,#_create_custom_char_PARM_2
      000C79 74r89            [12] 2889 	mov	a,#_handle_sadsmiley_custom_char_row_vals4_65540_199
      000C7B F0               [24] 2890 	movx	@dptr,a
      000C7C 74s00            [12] 2891 	mov	a,#(_handle_sadsmiley_custom_char_row_vals4_65540_199 >> 8)
      000C7E A3               [24] 2892 	inc	dptr
      000C7F F0               [24] 2893 	movx	@dptr,a
      000C80 E4               [12] 2894 	clr	a
      000C81 A3               [24] 2895 	inc	dptr
      000C82 F0               [24] 2896 	movx	@dptr,a
      000C83 75 82 34         [24] 2897 	mov	dpl,#0x34
      000C86 12r07rAF         [24] 2898 	lcall	_create_custom_char
                                   2899 ;	lcd.c:661: lcdgotoxy('2', '5');
      000C89 90r00r06         [24] 2900 	mov	dptr,#_lcdgotoxy_PARM_2
      000C8C 74 35            [12] 2901 	mov	a,#0x35
      000C8E F0               [24] 2902 	movx	@dptr,a
      000C8F 75 82 32         [24] 2903 	mov	dpl,#0x32
      000C92 12r00rFC         [24] 2904 	lcall	_lcdgotoxy
                                   2905 ;	lcd.c:662: lcdputch(ccode4 - '0');
      000C95 75 82 04         [24] 2906 	mov	dpl,#0x04
      000C98 12r01rB5         [24] 2907 	lcall	_lcdputch
                                   2908 ;	lcd.c:664: lcdgotoaddr(save_cursor_address);
      000C9B 90r00r00         [24] 2909 	mov	dptr,#_save_cursor_address
      000C9E E0               [24] 2910 	movx	a,@dptr
      000C9F F5 82            [12] 2911 	mov	dpl,a
      000CA1 12r00rDF         [24] 2912 	lcall	_lcdgotoaddr
      000CA4 A2*07            [12] 2913 	mov	c,_handle_sadsmiley_custom_char_sloc0_1_0
      000CA6 92 AF            [24] 2914 	mov	ea,c
                                   2915 ;	lcd.c:668: printf("\033[0m");
      000CA8 74r5E            [12] 2916 	mov	a,#___str_23
      000CAA C0 E0            [24] 2917 	push	acc
      000CAC 74s02            [12] 2918 	mov	a,#(___str_23 >> 8)
      000CAE C0 E0            [24] 2919 	push	acc
      000CB0 74 80            [12] 2920 	mov	a,#0x80
      000CB2 C0 E0            [24] 2921 	push	acc
      000CB4 12r00r00         [24] 2922 	lcall	_printf
      000CB7 15 81            [12] 2923 	dec	sp
      000CB9 15 81            [12] 2924 	dec	sp
      000CBB 15 81            [12] 2925 	dec	sp
                                   2926 ;	lcd.c:669: }
      000CBD 22               [24] 2927 	ret
                                   2928 ;------------------------------------------------------------
                                   2929 ;Allocation info for local variables in function 'print_author'
                                   2930 ;------------------------------------------------------------
                                   2931 ;str                       Allocated with name '_print_author_str_65537_203'
                                   2932 ;------------------------------------------------------------
                                   2933 ;	lcd.c:672: void print_author(void)
                                   2934 ;	-----------------------------------------
                                   2935 ;	 function print_author
                                   2936 ;	-----------------------------------------
      000CBE                       2937 _print_author:
                                   2938 ;	lcd.c:675: printf_tiny("\033[1;33m\n\rAuthor Info Printed !!\r\n");
      000CBE 74r7C            [12] 2939 	mov	a,#___str_33
      000CC0 C0 E0            [24] 2940 	push	acc
      000CC2 74s03            [12] 2941 	mov	a,#(___str_33 >> 8)
      000CC4 C0 E0            [24] 2942 	push	acc
      000CC6 12r00r00         [24] 2943 	lcall	_printf_tiny
      000CC9 15 81            [12] 2944 	dec	sp
      000CCB 15 81            [12] 2945 	dec	sp
                                   2946 ;	lcd.c:679: str = "Kiran Jojare    ESD Summer 2023 Lab 4           ";
                                   2947 ;	lcd.c:690: }
      000CCD D2*08            [12] 2948 	setb	_print_author_sloc0_1_0
      000CCF 10 AF 02         [24] 2949 	jbc	ea,00103$
      000CD2 C2*08            [12] 2950 	clr	_print_author_sloc0_1_0
      000CD4                       2951 00103$:
                                   2952 ;	lcd.c:685: lcdgotoaddr(0x00);
      000CD4 75 82 00         [24] 2953 	mov	dpl,#0x00
      000CD7 12r00rDF         [24] 2954 	lcall	_lcdgotoaddr
                                   2955 ;	lcd.c:686: lcdputstr(str);
      000CDA 90r03r9E         [24] 2956 	mov	dptr,#___str_34
      000CDD 75 F0 80         [24] 2957 	mov	b,#0x80
      000CE0 12r02r18         [24] 2958 	lcall	_lcdputstr
                                   2959 ;	lcd.c:689: lcdgotoaddr(0x00);
      000CE3 75 82 00         [24] 2960 	mov	dpl,#0x00
      000CE6 12r00rDF         [24] 2961 	lcall	_lcdgotoaddr
      000CE9 A2*08            [12] 2962 	mov	c,_print_author_sloc0_1_0
      000CEB 92 AF            [24] 2963 	mov	ea,c
                                   2964 ;	lcd.c:691: return;
                                   2965 ;	lcd.c:692: }
      000CED 22               [24] 2966 	ret
                                   2967 	.area CSEG    (CODE)
                                   2968 	.area CONST   (CODE)
                                   2969 	.area CONST   (CODE)
      000000                       2970 ___str_0:
      000000 20 20 20 20 20 20 20  2971 	.ascii "       "
      000007 00                    2972 	.db 0x00
                                   2973 	.area CSEG    (CODE)
                                   2974 	.area CONST   (CODE)
      000008                       2975 ___str_1:
      000008 1B                    2976 	.db 0x1b
      000009 5B 31 3B 33 33 6D     2977 	.ascii "[1;33m"
      00000F 0A                    2978 	.db 0x0a
      000010 0D                    2979 	.db 0x0d
      000011 4C 43 44 20 43 6C 65  2980 	.ascii "LCD Cleared!!"
             61 72 65 64 21 21
      00001E 0D                    2981 	.db 0x0d
      00001F 0A                    2982 	.db 0x0a
      000020 00                    2983 	.db 0x00
                                   2984 	.area CSEG    (CODE)
                                   2985 	.area CONST   (CODE)
      000021                       2986 ___str_2:
      000021 1B                    2987 	.db 0x1b
      000022 5B 31 3B 33 33 6D     2988 	.ascii "[1;33m"
      000028 0A                    2989 	.db 0x0a
      000029 0D                    2990 	.db 0x0d
      00002A 45 6E 74 65 72 20 43  2991 	.ascii "Enter Character to put on LCD !!"
             68 61 72 61 63 74 65
             72 20 74 6F 20 70 75
             74 20 6F 6E 20 4C 43
             44 20 21 21
      00004A 0D                    2992 	.db 0x0d
      00004B 0A                    2993 	.db 0x0a
      00004C 00                    2994 	.db 0x00
                                   2995 	.area CSEG    (CODE)
                                   2996 	.area CONST   (CODE)
      00004D                       2997 ___str_3:
      00004D 0A                    2998 	.db 0x0a
      00004E 0D                    2999 	.db 0x0d
      00004F 45 6E 74 65 72 65 64  3000 	.ascii "Entered Char = %c"
             20 43 68 61 72 20 3D
             20 25 63
      000060 0A                    3001 	.db 0x0a
      000061 0D                    3002 	.db 0x0d
      000062 00                    3003 	.db 0x00
                                   3004 	.area CSEG    (CODE)
                                   3005 	.area CONST   (CODE)
      000063                       3006 ___str_4:
      000063 0A                    3007 	.db 0x0a
      000064 0D                    3008 	.db 0x0d
      000065 00                    3009 	.db 0x00
                                   3010 	.area CSEG    (CODE)
                                   3011 	.area CONST   (CODE)
      000066                       3012 ___str_5:
      000066 1B                    3013 	.db 0x1b
      000067 5B 31 3B 33 33 6D     3014 	.ascii "[1;33m"
      00006D 0A                    3015 	.db 0x0a
      00006E 0D                    3016 	.db 0x0d
      00006F 45 6E 74 65 72 20 53  3017 	.ascii "Enter String to put on LCD !!"
             74 72 69 6E 67 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      00008C 0D                    3018 	.db 0x0d
      00008D 0A                    3019 	.db 0x0a
      00008E 00                    3020 	.db 0x00
                                   3021 	.area CSEG    (CODE)
                                   3022 	.area CONST   (CODE)
      00008F                       3023 ___str_6:
      00008F 45 6E 74 65 72 65 64  3024 	.ascii "Entered String = %s"
             20 53 74 72 69 6E 67
             20 3D 20 25 73
      0000A2 0A                    3025 	.db 0x0a
      0000A3 0D                    3026 	.db 0x0d
      0000A4 00                    3027 	.db 0x00
                                   3028 	.area CSEG    (CODE)
                                   3029 	.area CONST   (CODE)
      0000A5                       3030 ___str_7:
      0000A5 1B                    3031 	.db 0x1b
      0000A6 5B 31 3B 33 33 6D     3032 	.ascii "[1;33m"
      0000AC 0A                    3033 	.db 0x0a
      0000AD 0D                    3034 	.db 0x0d
      0000AE 45 6E 74 65 72 20 58  3035 	.ascii "Enter X-Co-ordinate to put on LCD !!"
             2D 43 6F 2D 6F 72 64
             69 6E 61 74 65 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      0000D2 0D                    3036 	.db 0x0d
      0000D3 0A                    3037 	.db 0x0a
      0000D4 00                    3038 	.db 0x00
                                   3039 	.area CSEG    (CODE)
                                   3040 	.area CONST   (CODE)
      0000D5                       3041 ___str_8:
      0000D5 58 2D 43 6F 72 64 69  3042 	.ascii "X-Cordinate = %c"
             6E 61 74 65 20 3D 20
             25 63
      0000E5 0A                    3043 	.db 0x0a
      0000E6 0D                    3044 	.db 0x0d
      0000E7 00                    3045 	.db 0x00
                                   3046 	.area CSEG    (CODE)
                                   3047 	.area CONST   (CODE)
      0000E8                       3048 ___str_9:
      0000E8 1B                    3049 	.db 0x1b
      0000E9 5B 31 3B 33 33 6D     3050 	.ascii "[1;33m"
      0000EF 0A                    3051 	.db 0x0a
      0000F0 0D                    3052 	.db 0x0d
      0000F1 45 6E 74 65 72 20 59  3053 	.ascii "Enter Y-Co-ordinate to put on LCD !!"
             2D 43 6F 2D 6F 72 64
             69 6E 61 74 65 20 74
             6F 20 70 75 74 20 6F
             6E 20 4C 43 44 20 21
             21
      000115 0D                    3054 	.db 0x0d
      000116 0A                    3055 	.db 0x0a
      000117 00                    3056 	.db 0x00
                                   3057 	.area CSEG    (CODE)
                                   3058 	.area CONST   (CODE)
      000118                       3059 ___str_10:
      000118 59 2D 43 6F 72 64 69  3060 	.ascii "Y-Cordinate = %c"
             6E 61 74 65 20 3D 20
             25 63
      000128 0A                    3061 	.db 0x0a
      000129 0D                    3062 	.db 0x0d
      00012A 00                    3063 	.db 0x00
                                   3064 	.area CSEG    (CODE)
                                   3065 	.area CONST   (CODE)
      00012B                       3066 ___str_11:
      00012B 1B                    3067 	.db 0x1b
      00012C 5B 31 3B 33 31 6D 49  3068 	.ascii "[1;31mInvalid coordinate!!"
             6E 76 61 6C 69 64 20
             63 6F 6F 72 64 69 6E
             61 74 65 21 21
      000146 0A                    3069 	.db 0x0a
      000147 0D                    3070 	.db 0x0d
      000148 00                    3071 	.db 0x00
                                   3072 	.area CSEG    (CODE)
                                   3073 	.area CONST   (CODE)
      000149                       3074 ___str_12:
      000149 1B                    3075 	.db 0x1b
      00014A 5B 31 3B 33 33 6D     3076 	.ascii "[1;33m"
      000150 0A                    3077 	.db 0x0a
      000151 0D                    3078 	.db 0x0d
      000152 43 75 72 73 6F 72 20  3079 	.ascii "Cursor Movement Completed!!"
             4D 6F 76 65 6D 65 6E
             74 20 43 6F 6D 70 6C
             65 74 65 64 21 21
      00016D 0D                    3080 	.db 0x0d
      00016E 0A                    3081 	.db 0x0a
      00016F 00                    3082 	.db 0x00
                                   3083 	.area CSEG    (CODE)
                                   3084 	.area CONST   (CODE)
      000170                       3085 ___str_13:
      000170 1B                    3086 	.db 0x1b
      000171 5B 31 3B 33 33 6D     3087 	.ascii "[1;33m"
      000177 0A                    3088 	.db 0x0a
      000178 0D                    3089 	.db 0x0d
      000179 45 6E 74 65 72 20 61  3090 	.ascii "Enter address to put onto the LCD !!"
             64 64 72 65 73 73 20
             74 6F 20 70 75 74 20
             6F 6E 74 6F 20 74 68
             65 20 4C 43 44 20 21
             21
      00019D 0D                    3091 	.db 0x0d
      00019E 0A                    3092 	.db 0x0a
      00019F 00                    3093 	.db 0x00
                                   3094 	.area CSEG    (CODE)
                                   3095 	.area CONST   (CODE)
      0001A0                       3096 ___str_14:
      0001A0 41 64 64 72 65 73 73  3097 	.ascii "Address Entered = %s"
             20 45 6E 74 65 72 65
             64 20 3D 20 25 73
      0001B4 0A                    3098 	.db 0x0a
      0001B5 0D                    3099 	.db 0x0d
      0001B6 00                    3100 	.db 0x00
                                   3101 	.area CSEG    (CODE)
                                   3102 	.area CONST   (CODE)
      0001B7                       3103 ___str_15:
      0001B7 1B                    3104 	.db 0x1b
      0001B8 5B 31 3B 33 33 6D     3105 	.ascii "[1;33m"
      0001BE 0A                    3106 	.db 0x0a
      0001BF 0D                    3107 	.db 0x0d
      0001C0 54 69 6D 65 20 50 61  3108 	.ascii "Time Paused !!"
             75 73 65 64 20 21 21
      0001CE 0D                    3109 	.db 0x0d
      0001CF 0A                    3110 	.db 0x0a
      0001D0 00                    3111 	.db 0x00
                                   3112 	.area CSEG    (CODE)
                                   3113 	.area CONST   (CODE)
      0001D1                       3114 ___str_16:
      0001D1 1B                    3115 	.db 0x1b
      0001D2 5B 31 3B 33 33 6D     3116 	.ascii "[1;33m"
      0001D8 0A                    3117 	.db 0x0a
      0001D9 0D                    3118 	.db 0x0d
      0001DA 54 69 6D 65 20 52 65  3119 	.ascii "Time Resumed !!"
             73 75 6D 65 64 20 21
             21
      0001E9 0D                    3120 	.db 0x0d
      0001EA 0A                    3121 	.db 0x0a
      0001EB 00                    3122 	.db 0x00
                                   3123 	.area CSEG    (CODE)
                                   3124 	.area CONST   (CODE)
      0001EC                       3125 ___str_17:
      0001EC 1B                    3126 	.db 0x1b
      0001ED 5B 31 3B 33 33 6D     3127 	.ascii "[1;33m"
      0001F3 0A                    3128 	.db 0x0a
      0001F4 0D                    3129 	.db 0x0d
      0001F5 54 69 6D 65 20 52 65  3130 	.ascii "Time Reset !!"
             73 65 74 20 21 21
      000202 0D                    3131 	.db 0x0d
      000203 0A                    3132 	.db 0x0a
      000204 00                    3133 	.db 0x00
                                   3134 	.area CSEG    (CODE)
                                   3135 	.area CONST   (CODE)
      000205                       3136 ___str_18:
      000205 1B                    3137 	.db 0x1b
      000206 5B 31 3B 33 34 6D     3138 	.ascii "[1;34m"
      00020C 00                    3139 	.db 0x00
                                   3140 	.area CSEG    (CODE)
                                   3141 	.area CONST   (CODE)
      00020D                       3142 ___str_19:
      00020D 0A                    3143 	.db 0x0a
      00020E 0D                    3144 	.db 0x0d
      00020F 50 72 69 6E 74 69 6E  3145 	.ascii "Printing Hexdump of DDRAM"
             67 20 48 65 78 64 75
             6D 70 20 6F 66 20 44
             44 52 41 4D
      000228 0A                    3146 	.db 0x0a
      000229 0D                    3147 	.db 0x0d
      00022A 00                    3148 	.db 0x00
                                   3149 	.area CSEG    (CODE)
                                   3150 	.area CONST   (CODE)
      00022B                       3151 ___str_20:
      00022B 0A                    3152 	.db 0x0a
      00022C 0D                    3153 	.db 0x0d
      00022D 30 78 25 30 32 78 3A  3154 	.ascii "0x%02x: "
             20
      000235 00                    3155 	.db 0x00
                                   3156 	.area CSEG    (CODE)
                                   3157 	.area CONST   (CODE)
      000236                       3158 ___str_21:
      000236 30 78 25 30 32 78 20  3159 	.ascii "0x%02x "
      00023D 00                    3160 	.db 0x00
                                   3161 	.area CSEG    (CODE)
                                   3162 	.area CONST   (CODE)
      00023E                       3163 ___str_22:
      00023E 0A                    3164 	.db 0x0a
      00023F 0D                    3165 	.db 0x0d
      000240 0A                    3166 	.db 0x0a
      000241 0D                    3167 	.db 0x0d
      000242 50 72 69 6E 74 69 6E  3168 	.ascii "Printing Hexdump of CGRAM"
             67 20 48 65 78 64 75
             6D 70 20 6F 66 20 43
             47 52 41 4D
      00025B 0A                    3169 	.db 0x0a
      00025C 0D                    3170 	.db 0x0d
      00025D 00                    3171 	.db 0x00
                                   3172 	.area CSEG    (CODE)
                                   3173 	.area CONST   (CODE)
      00025E                       3174 ___str_23:
      00025E 1B                    3175 	.db 0x1b
      00025F 5B 30 6D              3176 	.ascii "[0m"
      000262 00                    3177 	.db 0x00
                                   3178 	.area CSEG    (CODE)
                                   3179 	.area CONST   (CODE)
      000263                       3180 ___str_24:
      000263 0A                    3181 	.db 0x0a
      000264 0D                    3182 	.db 0x0d
      000265 45 6E 74 65 72 20 61  3183 	.ascii "Enter a hexadecimal value between (00 to 1F) or (40 to 58): "
             20 68 65 78 61 64 65
             63 69 6D 61 6C 20 76
             61 6C 75 65 20 62 65
             74 77 65 65 6E 20 28
             30 30 20 74 6F 20 31
             46 29 20 6F 72 20 28
             34 30 20 74 6F 20 35
             38 29 3A 20
      0002A1 00                    3184 	.db 0x00
                                   3185 	.area CSEG    (CODE)
                                   3186 	.area CONST   (CODE)
      0002A2                       3187 ___str_25:
      0002A2 0A                    3188 	.db 0x0a
      0002A3 0D                    3189 	.db 0x0d
      0002A4 49 6E 76 61 6C 69 64  3190 	.ascii "Invalid input. "
             20 69 6E 70 75 74 2E
             20
      0002B3 00                    3191 	.db 0x00
                                   3192 	.area CSEG    (CODE)
                                   3193 	.area CONST   (CODE)
      0002B4                       3194 ___str_26:
      0002B4 50 6C 65 61 73 65 20  3195 	.ascii "Please enter a valid input: "
             65 6E 74 65 72 20 61
             20 76 61 6C 69 64 20
             69 6E 70 75 74 3A 20
      0002D0 00                    3196 	.db 0x00
                                   3197 	.area CSEG    (CODE)
                                   3198 	.area CONST   (CODE)
      0002D1                       3199 ___str_27:
      0002D1 0A                    3200 	.db 0x0a
      0002D2 0D                    3201 	.db 0x0d
      0002D3 54 68 65 20 63 75 73  3202 	.ascii "The custom character with code 0x%x has been created."
             74 6F 6D 20 63 68 61
             72 61 63 74 65 72 20
             77 69 74 68 20 63 6F
             64 65 20 30 78 25 78
             20 68 61 73 20 62 65
             65 6E 20 63 72 65 61
             74 65 64 2E
      000308 00                    3203 	.db 0x00
                                   3204 	.area CSEG    (CODE)
                                   3205 	.area CONST   (CODE)
      000309                       3206 ___str_28:
      000309 0A                    3207 	.db 0x0a
      00030A 0D                    3208 	.db 0x0d
      00030B 4C 43 44 5F 70 74 72  3209 	.ascii "LCD_ptr = %x"
             20 3D 20 25 78
      000317 00                    3210 	.db 0x00
                                   3211 	.area CSEG    (CODE)
                                   3212 	.area CONST   (CODE)
      000318                       3213 ___str_29:
      000318 1B                    3214 	.db 0x1b
      000319 5B 30 3B 33 33 6D     3215 	.ascii "[0;33m"
      00031F 00                    3216 	.db 0x00
                                   3217 	.area CSEG    (CODE)
                                   3218 	.area CONST   (CODE)
      000320                       3219 ___str_30:
      000320 50 6C 65 61 73 65 20  3220 	.ascii "Please enter the code for the custom character: "
             65 6E 74 65 72 20 74
             68 65 20 63 6F 64 65
             20 66 6F 72 20 74 68
             65 20 63 75 73 74 6F
             6D 20 63 68 61 72 61
             63 74 65 72 3A 20
      000350 00                    3221 	.db 0x00
                                   3222 	.area CSEG    (CODE)
                                   3223 	.area CONST   (CODE)
      000351                       3224 ___str_31:
      000351 25 63                 3225 	.ascii "%c"
      000353 0A                    3226 	.db 0x0a
      000354 0D                    3227 	.db 0x0d
      000355 00                    3228 	.db 0x00
                                   3229 	.area CSEG    (CODE)
                                   3230 	.area CONST   (CODE)
      000356                       3231 ___str_32:
      000356 0A                    3232 	.db 0x0a
      000357 0D                    3233 	.db 0x0d
      000358 50 6C 65 61 73 65 20  3234 	.ascii "Please enter the value for row %d: "
             65 6E 74 65 72 20 74
             68 65 20 76 61 6C 75
             65 20 66 6F 72 20 72
             6F 77 20 25 64 3A 20
      00037B 00                    3235 	.db 0x00
                                   3236 	.area CSEG    (CODE)
                                   3237 	.area CONST   (CODE)
      00037C                       3238 ___str_33:
      00037C 1B                    3239 	.db 0x1b
      00037D 5B 31 3B 33 33 6D     3240 	.ascii "[1;33m"
      000383 0A                    3241 	.db 0x0a
      000384 0D                    3242 	.db 0x0d
      000385 41 75 74 68 6F 72 20  3243 	.ascii "Author Info Printed !!"
             49 6E 66 6F 20 50 72
             69 6E 74 65 64 20 21
             21
      00039B 0D                    3244 	.db 0x0d
      00039C 0A                    3245 	.db 0x0a
      00039D 00                    3246 	.db 0x00
                                   3247 	.area CSEG    (CODE)
                                   3248 	.area CONST   (CODE)
      00039E                       3249 ___str_34:
      00039E 4B 69 72 61 6E 20 4A  3250 	.ascii "Kiran Jojare    ESD Summer 2023 Lab 4           "
             6F 6A 61 72 65 20 20
             20 20 45 53 44 20 53
             75 6D 6D 65 72 20 32
             30 32 33 20 4C 61 62
             20 34 20 20 20 20 20
             20 20 20 20 20 20
      0003CE 00                    3251 	.db 0x00
                                   3252 	.area CSEG    (CODE)
                                   3253 	.area XINIT   (CODE)
      000000                       3254 __xinit__save_cursor_address:
      000000 00                    3255 	.db #0x00	; 0
                                   3256 	.area CABS    (ABS,CODE)
